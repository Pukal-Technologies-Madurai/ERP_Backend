{"version":3,"file":"static/js/1384.0c5e8448.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Reports/NakalReports/PdfPreviewModal.jsx","Pages/Reports/NakalReports/XlPreviewModal.jsx","Pages/Reports/NakalReports/nakalReports.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useRef } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions, IconButton } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { NumberFormat } from '../../../Components/functions';\r\n\r\nconst PdfPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const printRef = useRef(null);\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n\r\n    const items = brokerData?.Items || [];\r\n    let totalBrokerage = 0;\r\n    if (transactionType === 'salesNagal') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0)\r\n    } else {\r\n\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brokerage || 0), 0)\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) {\r\n                acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            }\r\n            return acc;\r\n        }, {});\r\n        if (!packQuantities) return null;\r\n        return Object.entries(packQuantities)\r\n            .sort(([sizeA], [sizeB]) => sizeA - sizeB)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`)\r\n            .join(' & ');\r\n    };\r\n    const packSizeSummary = getPackSizeSummary();\r\n\r\n    function formatSignedNumber(value) {\r\n        const n = Number(value) || 0;\r\n        return `${n >= 0 ? '+' : ''}${NumberFormat(n)}`;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Dialog open={open} onClose={onClose} fullWidth maxWidth='lg'>\r\n                <DialogTitle>\r\n                    {transactionType === 'salesNagal' ? 'Sales Nakal Report' : 'Delivery Nakal Report'} : {brokerData?.Broker_Name}\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        onClick={onClose}\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            right: 8,\r\n                            top: 8,\r\n                            color: (theme) => theme.palette.grey[500],\r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </IconButton>\r\n                </DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    {transactionType === 'salesNagal' ? (\r\n                        <>\r\n                            <div className=\"text-center mb-3\">\r\n                                <h4>Broker Report Page</h4>\r\n                                <p className=\"mb-0\">Date: {brokerData?.Items?.[0]?.Date}</p>\r\n                                <p className=\"mb-0\">Broker: {brokerData?.Broker_Name}</p>\r\n                                {packSizeSummary && (\r\n                                    <p className=\"mb-0\">Pack Sizes: {packSizeSummary}</p>\r\n                                )}\r\n                            </div>\r\n\r\n                            <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>PARTY NAME</th>\r\n                                        <th>ALIAS NAME</th>\r\n                                        <th className=\"text-end\">BILL RATE</th>\r\n                                        <th className=\"text-end\">BROKER EXP</th>\r\n                                        <th className=\"text-end\">QTY</th>\r\n                                        <th className=\"text-end\">KGS</th>\r\n                                        <th className=\"text-end\">AMOUNT</th>\r\n                                        <th className=\"text-end\">VILAIVAASI</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {items.map((item, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                            <td>{item.Short_Name}</td>\r\n                                            <td className=\"text-end\">{item.Item_Rate}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Brok_Amt || 0)}</td>\r\n                                            <td className=\"text-end\">{item.QTY}</td>\r\n                                            <td className=\"text-end\">{item.KGS}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Amount)}</td>\r\n                                            <td className=\"text-end\">{NumberFormat(item.Vilaivasi_Rate)}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan=\"4\" className=\"text-end fw-bold\">TOTAL</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_Qty || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{brokerData?.Total_KGS || 0}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.Total_Amount || 0)}</td>\r\n                                        <td className=\"text-end fw-bold\">{NumberFormat(brokerData?.VilaiVasi || 0)}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"text-end fw-bold\">{packSizeSummary}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <div className=\"row mt-3\">\r\n                                <div className=\"col-6 offset-6\">\r\n                                    <table className=\"table table-bordered\" style={{ fontSize: '12px' }}>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">COOLIE</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(totalCoolie)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">BROKERAGE</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(totalBrokerage)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">VILAIVAASI</td>\r\n                                                <td className=\"text-end fw-bold\">- {NumberFormat(vilaivasi)}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"fw-bold\">ROUNDOFF</td>\r\n                                                <td className=\"text-end fw-bold\">{formatSignedNumber(roundOff)}</td>\r\n                                            </tr>\r\n                                            <tr className=\"bg-light\">\r\n                                                <td className=\"fw-bold\">NET TOTAL</td>\r\n                                                <td className=\"text-end fw-bold\">{NumberFormat(netTotalRounded)}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div style={{ fontFamily: 'Arial' }}>\r\n                                <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n                                    <h3 style={{ marginBottom: '5px' }}>{brokerData?.Broker_Name}</h3>\r\n                                    <p style={{ margin: '5px 0' }}>\r\n                                        {brokerData?.Items?.length > 0 ? (\r\n                                            <>\r\n\r\n                                                {fromDate} {' TO '} {toDate}\r\n                                            </>\r\n                                        ) : 'No date range available'}\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>\r\n                                    <thead>\r\n                                        <tr style={{ borderBottom: '1px solid #000' }}>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '40%' }}>NAME</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '10%' }}>DATE</th>\r\n                                            <th style={{ textAlign: 'left', padding: '5px', width: '20%' }}>ALIAS NAME</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BAGS</th>\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>QTY</th>\r\n                                            {\r\n                                                transactionType === 'sales' ? <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>AMOUNT</th> : ''\r\n\r\n\r\n                                            }\r\n                                            {\r\n                                                transactionType === 'sales' ? <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>ITEM.RATE</th> : ''\r\n\r\n\r\n                                            }\r\n                                            <th style={{ textAlign: 'right', padding: '5px', width: '10%' }}>BROKERAGE EXP</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {items.map((item, index) => (\r\n                                            <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\r\n                                                <td style={{ padding: '5px' }}>{item.Retailer_Name || item.Ledger_Name}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Date?.split('T')[0] || ''}</td>\r\n                                                <td style={{ padding: '5px' }}>{item.Short_Name}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.QTY}</td>\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{item.KGS}</td>\r\n                                                {\r\n                                                    transactionType === 'sales' ? <td style={{ padding: '5px', textAlign: 'right' }}>{item.TotaL_Invoice_value}</td> : ''\r\n                                                }\r\n                                                {\r\n                                                    transactionType === 'sales' ? <td style={{ padding: '5px', textAlign: 'right' }}>{item.Item_Rate}</td> : ''\r\n                                                }\r\n                                                <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(item.Brokerage || 0)}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        <tr style={{ fontWeight: 'bold', borderTop: '2px solid #000' }}>\r\n                                            <td colSpan=\"3\" style={{ padding: '5px', textAlign: 'right' }}>TOTAL</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_Qty || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{brokerData?.Total_KGS || 0}</td>\r\n                                            <td style={{ padding: '5px', textAlign: 'right' }}>{NumberFormat(totalBrokerage)}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                    <div className=\"text-center mt-3 small\">\r\n                        <p>This is a computer generated report</p>\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={onClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default PdfPreviewModal;","import { useEffect } from 'react';\r\nimport ExcelJS from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst XlPreviewModal = ({ open, onClose, brokerData, transactionType, fromDate, toDate }) => {\r\n    const items = brokerData?.Items || [];\r\n\r\n    let totalBrokerage;\r\n    if (transactionType === 'salesNagal') {\r\n        totalBrokerage = items.reduce((sum, item) => sum + parseFloat(item.Brok_Amt || 0), 0);\r\n    }\r\n    else {\r\n        totalBrokerage = items.reduce((bro, item) => bro + parseInt(item.Brokerage || 0), 0);\r\n    }\r\n\r\n    const totalCoolie = items.reduce((sum, item) => sum + parseFloat(item.Coolie_Amt || 0), 0);\r\n    const totalAmount = parseFloat(brokerData?.Total_Amount || 0);\r\n    const vilaivasi = parseFloat(brokerData?.VilaiVasi || 0);\r\n    const netTotalRaw = totalAmount - totalBrokerage + totalCoolie - vilaivasi;\r\n    const netTotalRounded = Math.round(netTotalRaw);\r\n    const roundOff = netTotalRounded - netTotalRaw;\r\n\r\n    const formatSignedNumber = (num) => {\r\n        const n = Number(num) || 0;\r\n        return (n >= 0 ? \"+\" : \"\") + n.toLocaleString(\"en-IN\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    };\r\n\r\n    const getPackSizeSummary = () => {\r\n        const packQuantities = items.reduce((acc, item) => {\r\n            const packSize = Math.round(parseFloat(item.KGS) / parseFloat(item.QTY));\r\n            if (!isNaN(packSize)) acc[packSize] = (acc[packSize] || 0) + parseFloat(item.QTY);\r\n            return acc;\r\n        }, {});\r\n        return Object.entries(packQuantities)\r\n            .sort(([a], [b]) => a - b)\r\n            .map(([size, qty]) => `${size}kg - ${qty}`).join(' & ');\r\n    };\r\n\r\n    const handleExportExcel = async () => {\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Broker Report');\r\n\r\n        const thickBlackBorder = {\r\n            style: 'thick',\r\n            color: { argb: 'FF000000' }\r\n        };\r\n\r\n        const cellStyle = {\r\n            border: {\r\n                top: thickBlackBorder,\r\n                bottom: thickBlackBorder,\r\n                left: thickBlackBorder,\r\n                right: thickBlackBorder\r\n            }\r\n        };\r\n\r\n        const titleRow = worksheet.addRow([\r\n            `Broker Report: ${brokerData?.Broker_Name || ''} - Date: ${brokerData?.Items?.[0]?.Date}`\r\n        ]);\r\n        worksheet.mergeCells(`A${titleRow.number}:H${titleRow.number}`);\r\n        titleRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, size: 14 },\r\n                alignment: { horizontal: 'center' },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const headerRow = worksheet.addRow([\r\n            'PARTY NAME', 'ALIAS NAME', 'BILL RATE', 'BROKER EXP',\r\n            'QTY', 'KGS', 'AMOUNT', 'VILAIVAASI'\r\n        ]);\r\n\r\n        worksheet.columns = [\r\n            { width: 50 }, { width: 30 }, { width: 15 }, { width: 15 },\r\n            { width: 10 }, { width: 10 }, { width: 15 }, { width: 15 }\r\n        ];\r\n\r\n        headerRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 12 },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2F5496' } },\r\n                alignment: { horizontal: 'center', vertical: 'middle' }\r\n            };\r\n        });\r\n\r\n        items.forEach((item, index) => {\r\n            const row = worksheet.addRow([\r\n                item.Retailer_Name || item.Ledger_Name || '',\r\n                item.Short_Name || '',\r\n                item.Item_Rate || '',\r\n                item.Brok_Amt || '',\r\n                item.QTY || '',\r\n                item.KGS || '',\r\n                Number(item.Amount || 0),\r\n                Number(item.Vilaivasi_Rate || 0)\r\n            ]);\r\n\r\n            row.eachCell((cell) => {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { size: 11 },\r\n                    alignment: { vertical: 'middle' },\r\n                    fill: index % 2 === 1 ? { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF2F2F2' } } : undefined\r\n                };\r\n            });\r\n\r\n            row.getCell(7).numFmt = '#,##0.00';\r\n            row.getCell(8).numFmt = '#,##0.00';\r\n        });\r\n\r\n        const totalRow = worksheet.addRow([\r\n            '', '', '', 'TOTAL',\r\n            Number(brokerData?.Total_Qty || 0),\r\n            Number(brokerData?.Total_KGS || 0),\r\n            Number(brokerData?.Total_Amount || 0),\r\n            Number(brokerData?.VilaiVasi || 0)\r\n        ]);\r\n\r\n        totalRow.eachCell((cell, colNumber) => {\r\n            if (colNumber >= 4) {\r\n                cell.style = {\r\n                    ...cellStyle,\r\n                    font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                    fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF70AD47' } }\r\n                };\r\n                if (colNumber >= 5) {\r\n                    cell.numFmt = colNumber === 5 || colNumber === 6 ? '0.00' : '#,##0.00';\r\n                }\r\n            } else {\r\n                cell.style = cellStyle;\r\n            }\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const packSizesRow = worksheet.addRow([`Pack Sizes: ${getPackSizeSummary()}`]);\r\n        worksheet.mergeCells(`A${packSizesRow.number}:H${packSizesRow.number}`);\r\n        packSizesRow.eachCell((cell) => {\r\n            cell.style = {\r\n                ...cellStyle,\r\n                font: { italic: true },\r\n                alignment: { horizontal: 'left' }\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n\r\n        const summaryRows = [\r\n            { label: 'COOLIE', value: Number(totalCoolie) },\r\n            { label: 'BROKERAGE', value: Number(-totalBrokerage) },\r\n            { label: 'VILAIVAASI', value: Number(-vilaivasi) },\r\n            { label: 'ROUNDOFF', value: formatSignedNumber(roundOff) },\r\n            { label: 'NET TOTAL', value: Number(netTotalRounded) }\r\n        ];\r\n\r\n        summaryRows.forEach((rowData) => {\r\n            const row = worksheet.addRow(['', '', '', '', '', rowData.label, rowData.value, '']);\r\n            row.getCell(6).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FFFFFFFF' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } },\r\n                alignment: { horizontal: 'right' }\r\n            };\r\n            row.getCell(7).style = {\r\n                ...cellStyle,\r\n                font: { bold: true, color: { argb: 'FF000000' } },\r\n                fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC000' } },\r\n                alignment: { horizontal: 'right' },\r\n                numFmt: '#,##0.00'\r\n            };\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n        worksheet.addRow([]);\r\n\r\n        const buffer = await workbook.xlsx.writeBuffer();\r\n        saveAs(new Blob([buffer]), `Broker_Report_${brokerData?.Broker_Name || 'Export'}_${brokerData?.Items?.[0]?.Date}.xlsx`);\r\n    };\r\n\r\n\r\n    const handleExportPurchase = async () => {\r\n        try {\r\n            const workbook = new ExcelJS.Workbook();\r\n            const worksheet = workbook.addWorksheet('Brokerage Report');\r\n\r\n            workbook.created = new Date();\r\n            workbook.modified = new Date();\r\n\r\n            const titleRow = worksheet.addRow([brokerData?.Broker_Name || '']);\r\n            titleRow.font = { bold: true, size: 14 };\r\n            titleRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A1:F1');\r\n\r\n            const dateRangeRow = worksheet.addRow([\r\n                brokerData?.Items?.length > 0 ? `${fromDate} TO ${toDate}` : 'No date range available'\r\n            ]);\r\n            dateRangeRow.font = { bold: true };\r\n            dateRangeRow.alignment = { horizontal: 'center' };\r\n            worksheet.mergeCells('A2:F2');\r\n\r\n\r\n            worksheet.addRow([]);\r\n\r\n\r\n            const headers = [\r\n                { header: 'NAME', width: 50 },\r\n                { header: 'DATE', width: 10 },\r\n                { header: 'ALIAS NAME', width: 40 },\r\n                { header: 'BAGS', width: 10 },\r\n                { header: 'QTY', width: 10 },\r\n                ...(transactionType === 'sales'\r\n                    ? [{ header: 'Item_Rate', width: 10 }]\r\n                    : []),\r\n                { header: 'BROKERAGE EXP', width: 15 },\r\n            ];\r\n\r\n\r\n            const headerRow = worksheet.addRow(headers.map(h => h.header));\r\n            headerRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            headers.forEach((header, index) => {\r\n                worksheet.getColumn(index + 1).width = header.width;\r\n            });\r\n\r\n            items.forEach((item) => {\r\n                const row = worksheet.addRow([\r\n                    item.Retailer_Name || item.Ledger_Name,\r\n                    item.Date?.split('T')[0] || '',\r\n                    item.Short_Name,\r\n                    item.QTY,\r\n                    item.KGS,\r\n                    ...(transactionType === 'sales' ? [item.Item_Rate] : []),\r\n                    Number(item.Brokerage || 0)\r\n                ]);\r\n\r\n\r\n                row.eachCell((cell) => {\r\n                    cell.font = { bold: true };\r\n                    cell.border = {\r\n                        top: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                        right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                    };\r\n                });\r\n\r\n\r\n                row.getCell(4).alignment = { horizontal: 'right' };\r\n                row.getCell(5).alignment = { horizontal: 'right' };\r\n                row.getCell(6).alignment = { horizontal: 'right' };\r\n            });\r\n\r\n\r\n            const totalRow = worksheet.addRow([\r\n                '', '', 'TOTAL',\r\n                Number(brokerData?.Total_Qty) || 0,\r\n                Number(brokerData?.Total_KGS) || 0,\r\n                totalBrokerage\r\n            ]);\r\n\r\n\r\n            totalRow.eachCell((cell) => {\r\n                cell.font = { bold: true };\r\n                cell.border = {\r\n                    top: { style: 'medium', color: { argb: 'FF000000' } },\r\n                    left: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n                    right: { style: 'thin', color: { argb: 'FF000000' } }\r\n                };\r\n            });\r\n\r\n\r\n            totalRow.getCell(4).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(5).alignment = { horizontal: 'right' };\r\n            totalRow.getCell(6).alignment = { horizontal: 'right' };\r\n\r\n\r\n            const buffer = await workbook.xlsx.writeBuffer();\r\n            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = `${brokerData?.Broker_Name}_${fromDate}_to_${toDate}.xlsx`;\r\n            link.click();\r\n\r\n\r\n            setTimeout(() => {\r\n                URL.revokeObjectURL(url);\r\n            }, 100);\r\n\r\n        } catch (error) {\r\n            console.error('Error exporting to Excel:', error);\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            if (transactionType === 'salesNagal') {\r\n                handleExportExcel().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            } else if (transactionType === 'purchase') {\r\n                handleExportPurchase().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            }\r\n            else if (transactionType === 'sales') {\r\n                handleExportPurchase().then(() => {\r\n                    if (typeof onClose === 'function') onClose();\r\n                });\r\n            }\r\n        }\r\n    }, [open, transactionType]);\r\n\r\n    return null;\r\n};\r\nexport default XlPreviewModal;","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { toArray, Addition } from \"../../../Components/functions\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    IconButton,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    DialogContentText,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Box,\r\n    Grid,\r\n    TablePagination,\r\n    Tabs,\r\n    Tab,\r\n    Collapse,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAltOff,\r\n    FilterAlt,\r\n    Save,\r\n    KeyboardArrowDown,\r\n    KeyboardArrowUp,\r\n    Cancel,\r\n    Edit,\r\n} from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport PictureAsPdfIcon from \"@mui/icons-material/PictureAsPdf\";\r\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\r\nimport PdfPreviewModal from \"./PdfPreviewModal\";\r\nimport XlPreviewModal from \"./XlPreviewModal\";\r\nimport { Delete } from \"@mui/icons-material\";\r\n\r\nconst NakalReports = ({ loadingOn, loadingOff }) => {\r\n    const [transactionType, setTransactionType] = useState(\"salesNagal\");\r\n    const [dataEntryPagination, setDataEntryPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [listingPagination, setListingPagination] = useState({\r\n        page: 0,\r\n        rowsPerPage: 10,\r\n    });\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n    const [salesData, setSalesData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerVilaiVasi: \"\",\r\n    });\r\n    const [salesNewData, setSalesNewData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerVilaiVasi: \"\",\r\n    });\r\n    const [purchaseData, setPurchaseData] = useState({\r\n        deliveryReport: [],\r\n        brokerageValues: {},\r\n        filters: {\r\n            FromDate: new Date().toISOString().split(\"T\")[0],\r\n            ToDate: new Date().toISOString().split(\"T\")[0],\r\n            Broker: { value: \"\", label: \"ALL Brokers\" },\r\n            refresh: false,\r\n            filterDialog: false,\r\n        },\r\n        headerBrokerage: \"\",\r\n    });\r\n    const [filtersListing, setFiltersListing] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        Ledger: { value: \"\", label: \"All Ledger\" },\r\n        Item: { value: \"\", label: \"All Item\" },\r\n        VilaiVasiZero: { value: \"\", label: \"All\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n    const [dataset, setDataset] = useState([]);\r\n    const [dropdownOptionsListing, setDropdownOptionsListing] = useState({\r\n        ledgers: [],\r\n        items: [],\r\n    });\r\n    const [expandedBrokers, setExpandedBrokers] = useState({});\r\n    const [saving, setSaving] = useState(false);\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [pdfPreviewOpen, setPdfPreviewOpen] = useState(false);\r\n    const [xlPreviewOpen, setXlPreViewOpen] = useState(false);\r\n    const [pdfPreviewData, setPdfPreviewData] = useState(null);\r\n    const [xlPreviewData, setXlPreviewData] = useState(null);\r\n    const [editingItem, setEditingItem] = useState(null);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n    const [deleteItemDialogOpen, setDeleteItemDialogOpen] = useState(false);\r\n    const [itemToDelete, setItemToDelete] = useState(null);\r\n    const [brokerToDelete, setBrokerToDelete] = useState(null);\r\n    const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false);\r\n\r\n    const currentData =\r\n        transactionType === \"salesNagal\" ? salesData :\r\n            transactionType === \"sales\" ? salesNewData :\r\n                purchaseData;\r\n\r\n    const setCurrentData =\r\n        transactionType === \"salesNagal\" ? setSalesData :\r\n            transactionType === \"sales\" ? setSalesNewData :\r\n                setPurchaseData;\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n                const endpoint =\r\n                    transactionType === \"salesNagal\"\r\n                        ? \"brokerageNakalReport/sales\"\r\n                        : transactionType === \"sales\" ? \"brokerageNakalReport/salesEntry\" : \"brokerageNakalReport/purchase\";\r\n\r\n                const res = await fetchLink({\r\n                    address: `reports/${endpoint}?FromDate=${currentData.filters.FromDate}&ToDate=${currentData.filters.ToDate}&broker=${currentData.filters.Broker.value}`,\r\n                });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    const initialBrokerage = {};\r\n                    data.forEach((item) => {\r\n                        const key = `${item.Do_Id}-${item.Product_Id}`;\r\n                        initialBrokerage[key] = item.brokerage || \"\";\r\n                    });\r\n\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: data,\r\n                        brokerageValues: initialBrokerage,\r\n                    }));\r\n                } else {\r\n                    setCurrentData((prev) => ({\r\n                        ...prev,\r\n                        deliveryReport: [],\r\n                        brokerageValues: {},\r\n                    }));\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    deliveryReport: [],\r\n                    brokerageValues: {},\r\n                }));\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [transactionType, currentData.filters.refresh]);\r\n\r\n    const tableConfigs = {\r\n        salesNagal: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Do No\", key: \"Do_Inv_No\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Ledger_Name\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Qty\", key: \"displayQuantity\", align: \"right\" },\r\n                {\r\n                    label: \"Rate\",\r\n                    key: \"Rate\",\r\n                    align: \"right\",\r\n                    render: (row) => row.Rate || row.Item_Rate,\r\n                },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Amount\", align: \"right\" },\r\n                {\r\n                    label: \"Brok.Rate\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Brokerage}\r\n                            onChange={(e) => handleChange(idx, \"Brokerage\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Brokerage * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"Coolie.Rate\",\r\n                    key: \"Coolie\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={row.Coolie}\r\n                            onChange={(e) => handleChange(idx, \"Coolie\", e.target.value)}\r\n                            sx={{ width: \"80px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Coolie.Amt\",\r\n                    key: \"CoolieAmount\",\r\n                    align: \"right\",\r\n                    render: (row) => (row.Coolie * row.displayQuantity).toFixed(2),\r\n                },\r\n                {\r\n                    label: \"VilaiVasi\",\r\n                    key: \"VilaiVasi\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                { label: \"Narration\", key: \"Narration\", align: \"right\" },\r\n                {\r\n                    label: \"Vilai Amt\",\r\n                    key: \"VilaiAmt\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, vilaivasiValue, __, calcVilaiAmt) =>\r\n                        (+calcVilaiAmt(vilaivasiValue, row.Act_Qty)).toFixed(2),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Broker\", key: \"Broker_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_VilaiVasi\", key: \"VilaiVasi\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n        sales: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Do No\", key: \"Do_Inv_No\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Ledger_Name\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Qty\", key: \"displayQuantity\", align: \"right\" },\r\n                {\r\n                    label: \"Rate\",\r\n                    key: \"Rate\",\r\n                    align: \"right\",\r\n                    render: (row) => row.Rate || row.Item_Rate,\r\n                },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Amount\", align: \"right\" },\r\n\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (row, idx, handleChange, brokerageValue, handleBrokerageChange) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={brokerageValue}\r\n                            onChange={handleBrokerageChange(row.Do_Id, row.Product_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage Amt\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, brokerageValue) =>\r\n                        ((parseFloat(brokerageValue) || 0) * (parseFloat(row.Act_Qty) || 0) / 100).toFixed(2),\r\n                }\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Broker\", key: \"Broker_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ]\r\n        },\r\n        purchase: {\r\n            dataEntryColumns: [\r\n                {\r\n                    label: \"Date\",\r\n                    key: \"Date\",\r\n                    align: \"left\",\r\n                    render: (row) => row.Po_Entry_Date?.split(\"T\")[0] || \"N/A\",\r\n                },\r\n                { label: \"Invoice No\", key: \"Po_Inv_No\" },\r\n                { label: \"Retailer\", key: \"Retailer_Name\" },\r\n                { label: \"Broker\", key: \"CostCenterGet\", align: \"right\" },\r\n                { label: \"Product\", key: \"Product_Name\" },\r\n                { label: \"Act_Qty\", key: \"Act_Qty\", align: \"right\" },\r\n                { label: \"Pack\", key: \"Pack\", align: \"right\" },\r\n                {\r\n                    label: \"Qty\",\r\n                    key: \"displayQuantity\",\r\n                    align: \"right\",\r\n                    render: (row) => Number(row.displayQuantity).toFixed(2),\r\n                },\r\n                { label: \"Rate\", key: \"Item_Rate\", align: \"right\" },\r\n                { label: \"Amount\", key: \"Total_Invoice_value\", align: \"right\" },\r\n                {\r\n                    label: \"Brokerage\",\r\n                    key: \"Brokerage\",\r\n                    align: \"right\",\r\n                    render: (\r\n                        row,\r\n                        idx,\r\n                        handleChange,\r\n                        vilaivasiValue,\r\n                        handleVilaiChange\r\n                    ) => (\r\n                        <TextField\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            value={vilaivasiValue}\r\n                            onChange={handleVilaiChange(row.Do_Id, row.Product_Id, row.PIN_Id)}\r\n                            sx={{ width: \"120px\" }}\r\n                            inputProps={{ step: \"0.01\" }}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    label: \"Brokerage Amt\",\r\n                    key: \"BrokerageAmount\",\r\n                    align: \"right\",\r\n                    render: (row, idx, _, brokerageValue) =>\r\n                        ((parseFloat(brokerageValue) || 0) * (parseFloat(row.Act_Qty) || 0) / 100).toFixed(2),\r\n                },\r\n            ],\r\n            listingColumns: [\r\n                { label: \"Supplier\", key: \"Supplier_Name\" },\r\n                { label: \"Total KGS\", key: \"Total_KGS\", align: \"right\" },\r\n                { label: \"Total Bill Qty\", key: \"Total_Qty\", align: \"right\" },\r\n                { label: \"Total_Amount\", key: \"Total_Amount\", align: \"right\" },\r\n                { label: \"Total_Broker_Exp\", key: \"Broker_Exp\", align: \"right\" },\r\n                { label: \"Total_Bags\", key: \"Total_Bags\", align: \"right\" },\r\n            ],\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchDatasetAndDropdowns = async () => {\r\n            try {\r\n                loadingOn();\r\n\r\n                let baseUrl = \"\";\r\n                if (transactionType === \"salesNagal\") {\r\n                    baseUrl = `reports/brokerageNagal/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                } else if (transactionType === \"purchase\") {\r\n                    baseUrl = `reports/brokerageNagalDelivery/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                }\r\n                else if (transactionType === \"sales\") {\r\n                    baseUrl = `reports//brokerageNagalSales/list?FromDate=${filtersListing.FromDate}&ToDate=${filtersListing.ToDate}`;\r\n                }\r\n\r\n                if (filtersListing.Broker.value)\r\n                    baseUrl += `&broker=${filtersListing.Broker.value}`;\r\n                if (filtersListing.Ledger.value)\r\n                    baseUrl += `&ledger=${filtersListing.Ledger.value}`;\r\n                if (filtersListing.Item.value)\r\n                    baseUrl += `&item=${filtersListing.Item.value}`;\r\n                if (filtersListing.VilaiVasiZero.value)\r\n                    baseUrl += `&vilaivasiFilter=${filtersListing.VilaiVasiZero.value}`;\r\n\r\n                const res = await fetchLink({ address: baseUrl });\r\n\r\n                if (res.success) {\r\n                    const data = toArray(res.data);\r\n                    setDataset(data);\r\n\r\n                    const allItems = data.flatMap((item) => item.Items || []);\r\n\r\n                    const uniqueLedgers = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Ledger_Tally_Id,\r\n                                { value: item.Ledger_Tally_Id, label: item.Ledger_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    const uniqueItems = Array.from(\r\n                        new Map(\r\n                            allItems.map((item) => [\r\n                                item.Product_Id,\r\n                                { value: item.Product_Id, label: item.Product_Name },\r\n                            ])\r\n                        ).values()\r\n                    );\r\n\r\n                    setDropdownOptionsListing({\r\n                        ledgers: uniqueLedgers,\r\n                        items: uniqueItems,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchDatasetAndDropdowns();\r\n    }, [filtersListing.refresh, transactionType]);\r\n\r\n    const handleDelete = async () => {\r\n        try {\r\n            loadingOn();\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"DELETE\",\r\n                bodyData: {\r\n                    TransactionType: transactionType,\r\n                    Broker: brokerToDelete.Broker_Id || brokerToDelete.Supplier_Id,\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"Deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setDeleteDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleDeleteItem = async () => {\r\n        try {\r\n            loadingOn();\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"DELETE\",\r\n                bodyData: {\r\n                    Id: itemToDelete.Id,\r\n                    Do_Id: itemToDelete.Do_Id,\r\n                    Product_Id: itemToDelete.Product_Id,\r\n                    PIN_Id: itemToDelete.PIN_Id,\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate,\r\n                    TransactionType: transactionType\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"Item deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n\r\n            toast.error(\"Item delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setDeleteItemDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleBulkDelete = async () => {\r\n        try {\r\n            loadingOn();\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: 'DELETE',\r\n                bodyData: {\r\n                    FromDate: filtersListing.FromDate,\r\n                    ToDate: filtersListing.ToDate,\r\n                    Broker: filtersListing.Broker.value,\r\n                    Ledger: filtersListing.Ledger.value,\r\n                    Item: filtersListing.Item.value,\r\n                    TransactionType: transactionType\r\n                },\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message || \"All records deleted successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Bulk delete failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n            setBulkDeleteDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        const commonFields = {\r\n            ...item,\r\n            Created_By: storage?.UserId,\r\n            Updated_By: storage?.UserId\r\n        };\r\n\r\n        if (transactionType === \"salesNagal\") {\r\n            setEditingItem({\r\n                ...item,\r\n                Brok_Rate: item.Brok_Rate ?? item.Brokerage_Rate ?? item.Brokerage ?? \"\",\r\n                Brok_Amt: item.Brok_Amt ?? ((item.Brok_Rate ?? 0) * (item.QTY ?? 0)).toFixed(2),\r\n                Coolie_Rate: item.Coolie_Rate ?? item.Coolie ?? \"\",\r\n                Coolie_Amt: item.Coolie_Amt ?? ((item.Coolie_Rate ?? 0) * (item.QTY ?? 0)).toFixed(2),\r\n                Vilai_Vasi: item.Vilai_Vasi ?? \"\",\r\n                Vilaivasi_Rate: item.Vilaivasi_Rate ?? ((item.Vilai_Vasi ?? 0) * (item.Act_Qty ?? 0) / 100).toFixed(2),\r\n                Id: item.Id\r\n            });\r\n        } else if (transactionType === \"sales\" || transactionType === \"purchase\") {\r\n            setEditingItem(item);\r\n\r\n        }\r\n    };\r\n\r\n    const handleSaveEdit = async () => {\r\n        try {\r\n            loadingOn();\r\n            const payload = {\r\n                ...editingItem,\r\n                TransactionType: transactionType,\r\n                Updated_By: storage?.UserId\r\n            };\r\n            console.log(\"w\", editingItem)\r\n\r\n            if (transactionType === \"salesNagal\") {\r\n                payload.Brok_Amt = (parseFloat(editingItem.Brok_Rate) || 0) * (parseFloat(editingItem.QTY) || 0);\r\n                payload.Coolie_Amt = (parseFloat(editingItem.Coolie_Rate) || 0) * (parseFloat(editingItem.QTY) || 0);\r\n                payload.Vilai_Vasi = parseFloat(editingItem.Vilai_Vasi) || 0;\r\n                payload.Vilaivasi_Rate = ((parseFloat(editingItem.Vilai_Vasi) || 0) * (parseFloat(editingItem.QTY) || 0) / 100);\r\n\r\n            }\r\n            else if (transactionType === \"sales\" || transactionType === \"purchase\") {\r\n                payload.Brokerage_Amt = ((parseFloat(editingItem.Brokerage) || 0) * (parseFloat(editingItem.Act_Qty) || 0) / 100);\r\n                payload.Brokerage = ((parseFloat(editingItem?.Act_Qty) / 100) * editingItem.Brokerage_Amt)\r\n\r\n            }\r\n\r\n            const response = await fetchLink({\r\n                address: `reports/brokerageNagalPurchase/list`,\r\n                method: \"PUT\",\r\n                bodyData: payload,\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(\"Item updated successfully!\");\r\n                setFiltersListing(prev => ({ ...prev, refresh: !prev.refresh }));\r\n                setEditingItem(null);\r\n            } else {\r\n                toast.error(response.message || \"Update failed\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Update failed due to an error\");\r\n        } finally {\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => setActiveTab(newValue);\r\n    const handleDataEntryPageChange = (event, newPage) =>\r\n        setDataEntryPagination({ ...dataEntryPagination, page: newPage });\r\n    const handleDataEntryRowsPerPageChange = (event) =>\r\n        setDataEntryPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n    const handleListingPageChange = (event, newPage) =>\r\n        setListingPagination({ ...listingPagination, page: newPage });\r\n    const handleListingRowsPerPageChange = (event) =>\r\n        setListingPagination({\r\n            page: 0,\r\n            rowsPerPage: parseInt(event.target.value, 10),\r\n        });\r\n\r\n    const handleBrokerageChange = (doId, productId, pinId) => (e) => {\r\n        const value = e.target.value;\r\n        const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n            ? `${doId}-${productId}`\r\n            : `${pinId}-${productId}`;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            brokerageValues: { ...prev.brokerageValues, [key]: value },\r\n        }));\r\n    };\r\n\r\n    const handleExpandBroker = (brokerName) =>\r\n        setExpandedBrokers((prev) => ({\r\n            ...prev,\r\n            [brokerName]: !prev[brokerName],\r\n        }));\r\n\r\n    const closeDialogDataEntry = () =>\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            filters: { ...prev.filters, filterDialog: false },\r\n        }));\r\n\r\n    const closeDialogListing = () =>\r\n        setFiltersListing((prev) => ({ ...prev, filterDialog: false }));\r\n\r\n    const handleSave = async () => {\r\n        loadingOn();\r\n        try {\r\n            setSaving(true);\r\n\r\n            const recordsToSave = currentData.deliveryReport.map((item) => {\r\n                const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : `${item.PIN_Id}-${item.Product_Id}`;\r\n\r\n                const brokerageValue = currentData.brokerageValues[key] || item.Brokerage || 0;\r\n\r\n                if (transactionType === \"salesNagal\") {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: parseFloat(brokerageValue) || 0,\r\n                        Vilai_Vasi: parseFloat(brokerageValue) || 0,\r\n                        Vilaivasi_Rate: ((parseFloat(brokerageValue) || 0) / 100) * (parseFloat(item.Act_Qty) || 0),\r\n                        Brok_Rate: item?.Brokerage || 0,\r\n                        Brok_Amt: (item?.Brokerage || 0) * (item?.displayQuantity || 0),\r\n                        Coolie_Rate: item?.Coolie || 0,\r\n                        Coolie_Amt: (item?.Coolie || 0) * (item?.displayQuantity || 0),\r\n                        Amount: item?.Amount || 0,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                } else if (transactionType === \"sales\") {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: (parseFloat(brokerageValue) || 0) *\r\n                            (parseFloat(item.Act_Qty) || 0) / 100,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                } else {\r\n                    return {\r\n                        ...item,\r\n                        brokerage: (parseFloat(brokerageValue) || 0) *\r\n                            (parseFloat(item.Act_Qty) || 0) / 100,\r\n                        Created_By: storage?.UserId,\r\n                    };\r\n                }\r\n            });\r\n\r\n            let apiAddress;\r\n            if (transactionType === \"salesNagal\") {\r\n                apiAddress = \"reports/brokerageNagal/create\";\r\n            } else if (transactionType === \"sales\") {\r\n                apiAddress = \"reports/brokerageNagal/createSales\";\r\n            } else {\r\n                apiAddress = \"reports/brokerageNakal/deliveryCreate\";\r\n            }\r\n\r\n            const response = await fetchLink({\r\n                address: apiAddress,\r\n                method: \"POST\",\r\n                bodyData: recordsToSave,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            });\r\n\r\n            if (response.success) {\r\n                let successMessage;\r\n                if (transactionType === \"salesNagal\") {\r\n                    successMessage = \"Sales Nagal created successfully!\";\r\n                } else if (transactionType === \"sales\") {\r\n                    successMessage = \"Sales brokerage created successfully!\";\r\n                } else {\r\n                    successMessage = \"Purchase nakal created successfully!\";\r\n                }\r\n                toast.success(successMessage);\r\n                setCurrentData((prev) => ({\r\n                    ...prev,\r\n                    filters: { ...prev.filters, refresh: !prev.filters.refresh },\r\n                }));\r\n            } else {\r\n                toast.error(response.message || \"Save operation failed\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Save error:\", error);\r\n            toast.error(\"Save failed due to an error\");\r\n        } finally {\r\n            setSaving(false);\r\n            loadingOff();\r\n        }\r\n    };\r\n\r\n    const handleFieldChange = (idx, fieldName, value) => {\r\n        const updatedDeliveryReport = [...currentData.deliveryReport];\r\n        updatedDeliveryReport[idx][fieldName] = parseFloat(value) || 0;\r\n        setCurrentData((prev) => ({\r\n            ...prev,\r\n            deliveryReport: updatedDeliveryReport,\r\n        }));\r\n    };\r\n\r\n    const handleTransactionTypeChange = (type) => {\r\n        setTransactionType(type);\r\n        setDataEntryPagination({ page: 0, rowsPerPage: 10 });\r\n    };\r\n\r\n    const handleHeaderVilaiVasiChange = (e) => {\r\n        const value = e.target.value;\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : `${item.PIN_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = value;\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: value,\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    const handleClearAllVilaiVasi = () => {\r\n        setCurrentData((prev) => {\r\n            const updatedBrokerageValues = { ...prev.brokerageValues };\r\n            prev.deliveryReport.forEach((item) => {\r\n                const key = transactionType === \"salesNagal\"\r\n                    ? `${item.Do_Id}-${item.Product_Id}`\r\n                    : transactionType === \"sales\" ? `${item.Do_Id}-${item.Product_Id}` : `${item.PIN_Id}-${item.Product_Id}`;\r\n                updatedBrokerageValues[key] = \"\";\r\n            });\r\n            return {\r\n                ...prev,\r\n                headerVilaiVasi: \"\",\r\n                brokerageValues: updatedBrokerageValues,\r\n            };\r\n        });\r\n    };\r\n\r\n    const totalBagsDataEntry = useMemo(\r\n        () =>\r\n            currentData.deliveryReport.reduce(\r\n                (acc, item) => Addition(acc, item.displayQuantity || item.Qty || 0),\r\n                0\r\n            ),\r\n        [currentData.deliveryReport]\r\n    );\r\n\r\n    const totalBagsListing = useMemo(\r\n        () => dataset.reduce((acc, item) => Addition(acc, item.Total_Bags || 0), 0),\r\n        [dataset]\r\n    );\r\n\r\n    const calculateVilaivasiAmt = (vilaivasi, billQty) =>\r\n        ((parseFloat(vilaivasi) || 0) / 100) * (parseFloat(billQty) || 0);\r\n\r\n    const groupedByBroker = useMemo(() => {\r\n        if (!dataset || dataset.length === 0) return {};\r\n        return dataset.reduce((acc, item) => {\r\n            const broker = item.Broker_Name || item.Supplier_Name || \"Unknown\";\r\n            if (!acc[broker]) acc[broker] = [];\r\n            acc[broker].push(item);\r\n            return acc;\r\n        }, {});\r\n    }, [dataset]);\r\n\r\n    const brokerNames = useMemo(\r\n        () => Object.keys(groupedByBroker),\r\n        [groupedByBroker]\r\n    );\r\n\r\n    const isEditingRow = (editingItem, item) => {\r\n        if (!editingItem) return false;\r\n        return (\r\n            editingItem.Product_Id === item.Product_Id &&\r\n            editingItem.Do_Inv_No === item.Do_Inv_No &&\r\n            (editingItem.Ledger_Tally_Id\r\n                ? editingItem.Ledger_Tally_Id === item.Ledger_Tally_Id\r\n                : editingItem.Ledger_Name === item.Ledger_Name)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Brokerage Nagal Report\r\n                    </Typography>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                        <Box display=\"flex\" gap={1}>\r\n                            <Button\r\n                                variant={transactionType === \"salesNagal\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"salesNagal\")}\r\n                            >\r\n                                SalesNagal\r\n                            </Button>\r\n                            <Button\r\n                                variant={transactionType === \"purchase\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"purchase\")}\r\n                            >\r\n                                Purchase\r\n                            </Button>\r\n                            <Button\r\n                                variant={transactionType === \"sales\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => handleTransactionTypeChange(\"sales\")}\r\n                            >\r\n                                Sales\r\n                            </Button>\r\n                        </Box>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            startIcon={<FilterAlt />}\r\n                            onClick={() => {\r\n                                if (activeTab === 0) {\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, filterDialog: true },\r\n                                    }));\r\n                                } else {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        filterDialog: true,\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Filters\r\n                        </Button>\r\n                        <Typography component=\"span\" variant=\"body1\">\r\n                            Total Bags:{\" \"}\r\n                            <strong>\r\n                                {activeTab === 0 ? totalBagsDataEntry : totalBagsListing}\r\n                            </strong>\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 3 }}>\r\n                    <Tab label=\"Data Entry\" />\r\n                    <Tab label=\"Listing\" />\r\n                </Tabs>\r\n\r\n                {activeTab === 0 && (\r\n                    <>\r\n                        <Box\r\n                            mb={1}\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\",\r\n                                alignItems: \"center\",\r\n                                gap: 2,\r\n                            }}\r\n                        >\r\n                            <Typography sx={{ fontWeight: \"bold\" }}>\r\n                                {transactionType === \"salesNagal\"\r\n                                    ? \"VilaiVasi (All):\"\r\n                                    : \"Brokerage (All):\"}\r\n                            </Typography>\r\n                            <TextField\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                value={currentData.headerVilaiVasi}\r\n                                inputProps={{ step: \"1\" }}\r\n                                onChange={handleHeaderVilaiVasiChange}\r\n                                placeholder={`Set ${transactionType === \"salesNagal\" ? \"VilaiVasi\" : \"Brokerage\"\r\n                                    } for all`}\r\n                                sx={{\r\n                                    \"& .MuiInputBase-input\": {\r\n                                        height: 40,\r\n                                        boxSizing: \"border-box\",\r\n                                    },\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={handleClearAllVilaiVasi}\r\n                            >\r\n                                Clear All\r\n                            </Button>\r\n                        </Box>\r\n\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {currentData.deliveryReport.length > 0 ? (\r\n                                        currentData.deliveryReport\r\n                                            .slice(\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage,\r\n                                                dataEntryPagination.page *\r\n                                                dataEntryPagination.rowsPerPage +\r\n                                                dataEntryPagination.rowsPerPage\r\n                                            )\r\n                                            .map((row, idx) => {\r\n                                                const vilaivasiValue =\r\n                                                    currentData.brokerageValues[\r\n                                                    transactionType === \"salesNagal\"\r\n                                                        ? `${row.Do_Id}-${row.Product_Id}`\r\n                                                        :\r\n                                                        transactionType === \"sales\" ? `${row.Do_Id}-${row.Product_Id}` :\r\n                                                            `${row.PIN_Id}-${row.Product_Id}`\r\n                                                    ] || \"\";\r\n                                                return (\r\n                                                    <TableRow key={idx} hover>\r\n                                                        {tableConfigs[transactionType].dataEntryColumns.map(\r\n                                                            (column) => (\r\n                                                                <TableCell\r\n                                                                    key={column.key}\r\n                                                                    align={column.align || \"left\"}\r\n                                                                >\r\n                                                                    {column.render\r\n                                                                        ? column.render(\r\n                                                                            row,\r\n                                                                            idx,\r\n                                                                            handleFieldChange,\r\n                                                                            vilaivasiValue,\r\n                                                                            handleBrokerageChange,\r\n                                                                            calculateVilaivasiAmt\r\n                                                                        )\r\n                                                                        : row[column.key]}\r\n                                                                </TableCell>\r\n                                                            )\r\n                                                        )}\r\n                                                    </TableRow>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].dataEntryColumns.length\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={currentData.deliveryReport.length}\r\n                                rowsPerPage={dataEntryPagination.rowsPerPage}\r\n                                page={dataEntryPagination.page}\r\n                                onPageChange={handleDataEntryPageChange}\r\n                                onRowsPerPageChange={handleDataEntryRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n\r\n                        <Box sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<Save />}\r\n                                onClick={handleSave}\r\n                                disabled={saving}\r\n                                size=\"large\"\r\n                            >\r\n                                {saving\r\n                                    ? \"Saving...\"\r\n                                    : `Save ${transactionType === \"salesNagal\" ? transactionType === \"sales\" ? \"Sales\" : \"Purchase\" : \"Sales Nagal\"\r\n                                    } Brokerage`}\r\n                            </Button>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n\r\n                {activeTab === 1 && (\r\n                    <>\r\n                        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"error\"\r\n                                startIcon={<Delete />}\r\n                                onClick={() => setBulkDeleteDialogOpen(true)}\r\n                                disabled={dataset.length === 0}\r\n                            >\r\n                                Delete All\r\n                            </Button>\r\n                        </Box>\r\n                        <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow sx={{ backgroundColor: \"primary.main\" }}>\r\n                                        {tableConfigs[transactionType].listingColumns.map(\r\n                                            (column) => (\r\n                                                <TableCell\r\n                                                    key={column.key}\r\n                                                    sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                                    align={column.align || \"left\"}\r\n                                                >\r\n                                                    {column.label}\r\n                                                </TableCell>\r\n                                            )\r\n                                        )}\r\n                                        <TableCell\r\n                                            sx={{ color: \"white\", fontWeight: \"bold\" }}\r\n                                            align=\"right\"\r\n                                        >\r\n                                            Actions\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {brokerNames.length > 0 ? (\r\n                                        brokerNames\r\n                                            .slice(\r\n                                                listingPagination.page * listingPagination.rowsPerPage,\r\n                                                listingPagination.page * listingPagination.rowsPerPage +\r\n                                                listingPagination.rowsPerPage\r\n                                            )\r\n                                            .map((brokerName, idx) => {\r\n                                                const brokerData = groupedByBroker[brokerName][0];\r\n                                                return (\r\n                                                    <React.Fragment key={idx}>\r\n                                                        <TableRow hover>\r\n                                                            <TableCell>\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    onClick={() => handleExpandBroker(brokerName)}\r\n                                                                >\r\n                                                                    {expandedBrokers[brokerName] ? (\r\n                                                                        <KeyboardArrowUp />\r\n                                                                    ) : (\r\n                                                                        <KeyboardArrowDown />\r\n                                                                    )}\r\n                                                                </IconButton>\r\n                                                                {brokerName}\r\n                                                            </TableCell>\r\n                                                            {tableConfigs[transactionType].listingColumns\r\n                                                                .slice(1)\r\n                                                                .map((column) => (\r\n                                                                    <TableCell\r\n                                                                        key={column.key}\r\n                                                                        align={column.align || \"left\"}\r\n                                                                    >\r\n                                                                        {brokerData[column.key] || \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            <TableCell align=\"right\">\r\n                                                                <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                    <Tooltip title=\"Preview PDF\">\r\n                                                                        <IconButton\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={() => {\r\n                                                                                setPdfPreviewData(brokerData);\r\n                                                                                setPdfPreviewOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <PictureAsPdfIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n\r\n                                                                    <Tooltip title=\"Preview Excel\">\r\n                                                                        <IconButton\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={() => {\r\n                                                                                setXlPreviewData(brokerData);\r\n                                                                                setXlPreViewOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <FileDownloadIcon />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n\r\n                                                                    <Tooltip title=\"Delete\">\r\n                                                                        <IconButton\r\n                                                                            color=\"error\"\r\n                                                                            onClick={(e) => {\r\n                                                                                e.stopPropagation();\r\n                                                                                setBrokerToDelete(brokerData);\r\n                                                                                setDeleteDialogOpen(true);\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Delete />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n                                                                </Box>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                        <TableRow>\r\n                                                            <TableCell\r\n                                                                style={{ padding: 0 }}\r\n                                                                colSpan={\r\n                                                                    tableConfigs[transactionType].listingColumns\r\n                                                                        .length + 1\r\n                                                                }\r\n                                                            >\r\n                                                                <Collapse\r\n                                                                    in={expandedBrokers[brokerName]}\r\n                                                                    timeout=\"auto\"\r\n                                                                    unmountOnExit\r\n                                                                >\r\n                                                                    <Box margin={1}>\r\n                                                                        <Typography\r\n                                                                            variant=\"h6\"\r\n                                                                            gutterBottom\r\n                                                                            component=\"div\"\r\n                                                                        >\r\n                                                                            Details for {brokerName}\r\n                                                                        </Typography>\r\n                                                                        <Table size=\"small\">\r\n                                                                            <TableHead>\r\n                                                                                <TableRow>\r\n                                                                                    <TableCell>Date</TableCell>\r\n                                                                                    <TableCell>Do/Inv No</TableCell>\r\n                                                                                    <TableCell>\r\n                                                                                        {transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                                                                                            ? \"Retailer\"\r\n                                                                                            : \"Supplier\"}\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell>Product</TableCell>\r\n                                                                                    <TableCell>Short Name</TableCell>\r\n                                                                                    <TableCell align=\"right\">QTY</TableCell>\r\n                                                                                    <TableCell align=\"right\">KGS</TableCell>\r\n                                                                                    <TableCell align=\"right\">Amount</TableCell>\r\n                                                                                    <TableCell align=\"right\">Act Qty</TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        {transactionType === \"sales\" ? \"Item_Rate\" : \"\"}\r\n                                                                                    </TableCell>\r\n                                                                                    <TableCell align=\"right\">\r\n                                                                                        {transactionType === \"salesNagal\" ? \"Broker Amt\" : \"Brok.Amt\"}\r\n                                                                                    </TableCell>\r\n                                                                                    {transactionType === \"salesNagal\" && (\r\n                                                                                        <>\r\n                                                                                            <TableCell align=\"right\">Brok.Rate</TableCell>\r\n                                                                                            <TableCell align=\"right\">Coolie.Amt</TableCell>\r\n                                                                                            <TableCell align=\"right\">Coolie.Rate</TableCell>\r\n                                                                                            <TableCell align=\"right\">Vilai_Vasi</TableCell>\r\n                                                                                            <TableCell align=\"right\">Vilaiva.Rat</TableCell>\r\n                                                                                        </>\r\n                                                                                    )}\r\n\r\n                                                                                    {\r\n                                                                                        editingItem && (transactionType === \"sales\" || transactionType === \"purchase\") && (\r\n                                                                                            <TableCell align=\"right\">Brokerage</TableCell>\r\n                                                                                        )\r\n                                                                                    }\r\n\r\n                                                                                    <TableCell align=\"right\">Actions</TableCell>\r\n                                                                                </TableRow>\r\n                                                                            </TableHead>\r\n                                                                            <TableBody>\r\n                                                                                {groupedByBroker[brokerName].flatMap((broker) =>\r\n                                                                                    broker.Items?.map((item, itemIdx) => (\r\n                                                                                        <TableRow key={itemIdx}>\r\n                                                                                            {/* Common fields for all transaction types */}\r\n                                                                                            <TableCell>{item.Date}</TableCell>\r\n                                                                                            <TableCell>{item.Do_Inv_No || item.Po_Inv_No}</TableCell>\r\n                                                                                            <TableCell>{item.Retailer_Name || item.Supplier_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Product_Name}</TableCell>\r\n                                                                                            <TableCell>{item.Short_Name}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.QTY}</TableCell>\r\n                                                                                            <TableCell align=\"right\">{item.KGS}</TableCell>\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {transactionType === \"salesNagal\" || transactionType === \"sales\"\r\n                                                                                                    ? item.Amount\r\n                                                                                                    : item.Total_Invoice_value}\r\n                                                                                            </TableCell>\r\n\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {transactionType === \"salesNagal\"\r\n                                                                                                    ? item.QTY\r\n                                                                                                    : item.Act_Qty}\r\n                                                                                            </TableCell>\r\n\r\n                                                                                            <TableCell align=\"right\">\r\n                                                                                                {transactionType === \"sales\"\r\n                                                                                                    ? item.Item_Rate\r\n                                                                                                    : ''}\r\n                                                                                            </TableCell>\r\n\r\n                                                                                            {isEditingRow(editingItem, item) ? (\r\n                                                                                                <>\r\n                                                                                                    {transactionType === \"salesNagal\" ? (\r\n\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Brok_Rate || 0) * (editingItem.QTY || 0)).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brok_Rate || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const rate = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brok_Rate: rate,\r\n                                                                                                                            Brok_Amt: (rate * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"0.01\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Coolie_Rate || 0) * (editingItem.QTY || 0)).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Coolie_Rate || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const rate = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Coolie_Rate: rate,\r\n                                                                                                                            Coolie_Amt: (rate * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"0.01\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Vilai_Vasi || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const vv = parseFloat(e.target.value) || 0;\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Vilai_Vasi: vv,\r\n                                                                                                                            Vilaivasi_Rate: ((vv / 100) * (editingItem.QTY || 0)).toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{ step: \"1\", style: { textAlign: 'right' } }}\r\n                                                                                                                />\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {((editingItem.Vilai_Vasi || 0) * (editingItem.QTY || 0) / 100).toFixed(2)}\r\n                                                                                                            </TableCell>\r\n                                                                                                        </>\r\n                                                                                                    ) : transactionType === \"sales\" ? (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {editingItem.Brokerage_Amt && editingItem.Act_Qty\r\n                                                                                                                    ? (((editingItem.Brokerage_Amt) * editingItem.Act_Qty) / 100).toFixed(2)\r\n                                                                                                                    : '0.00'\r\n                                                                                                                }\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brokerage_Amt || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const amount = parseFloat(e.target.value) || 0;\r\n                                                                                                                        const rate = editingItem.Act_Qty\r\n                                                                                                                            ? (amount * 100) / editingItem.Act_Qty\r\n                                                                                                                            : 0;\r\n\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brokerage_Amt: amount,\r\n                                                                                                                            Brokerage: rate.toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{\r\n                                                                                                                        step: \"0.01\",\r\n                                                                                                                        style: { textAlign: 'right' }\r\n                                                                                                                    }}\r\n\r\n                                                                                                                />\r\n\r\n                                                                                                            </TableCell>\r\n\r\n\r\n                                                                                                        </>\r\n                                                                                                    ) : (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">\r\n                                                                                                                {editingItem.Brokerage_Amt && editingItem.Act_Qty\r\n                                                                                                                    ? (((editingItem.Brokerage_Amt) * editingItem.Act_Qty) / 100).toFixed(2)\r\n                                                                                                                    : '0.00'\r\n                                                                                                                }\r\n                                                                                                            </TableCell>\r\n\r\n                                                                                                            <TableCell align=\"right\" sx={{ minWidth: 120 }}>\r\n\r\n                                                                                                                <TextField\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    type=\"number\"\r\n                                                                                                                    value={editingItem.Brokerage_Amt || ''}\r\n                                                                                                                    onChange={(e) => {\r\n                                                                                                                        const amount = parseFloat(e.target.value) || 0;\r\n                                                                                                                        const rate = editingItem.Act_Qty\r\n                                                                                                                            ? (amount * 100) / editingItem.Act_Qty\r\n                                                                                                                            : 0;\r\n\r\n                                                                                                                        setEditingItem({\r\n                                                                                                                            ...editingItem,\r\n                                                                                                                            Brokerage_Amt: amount,\r\n                                                                                                                            Brokerage: rate.toFixed(2)\r\n                                                                                                                        });\r\n                                                                                                                    }}\r\n                                                                                                                    inputProps={{\r\n                                                                                                                        step: \"0.01\",\r\n                                                                                                                        style: { textAlign: 'right' }\r\n                                                                                                                    }}\r\n\r\n                                                                                                                />\r\n\r\n                                                                                                            </TableCell>\r\n\r\n\r\n                                                                                                        </>\r\n                                                                                                    )}\r\n\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                                                            <Tooltip title=\"Save changes\">\r\n                                                                                                                <IconButton color=\"primary\" size=\"small\" onClick={handleSaveEdit}>\r\n                                                                                                                    <Save fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                            <Tooltip title=\"Cancel editing\">\r\n                                                                                                                <IconButton color=\"secondary\" size=\"small\" onClick={() => setEditingItem(null)}>\r\n                                                                                                                    <Cancel fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                        </Box>\r\n                                                                                                    </TableCell>\r\n                                                                                                </>\r\n                                                                                            ) : (\r\n                                                                                                <>\r\n                                                                                                    {transactionType === \"salesNagal\" ? (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">{item.Brok_Amt || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Brok_Rate || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Coolie_Amt || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Coolie_Rate || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Vilai_Vasi || '0.00'}</TableCell>\r\n                                                                                                            <TableCell align=\"right\">{item.Vilaivasi_Rate || '0.00'}</TableCell>\r\n                                                                                                        </>\r\n                                                                                                    ) : (\r\n                                                                                                        <>\r\n                                                                                                            <TableCell align=\"right\">{item.Brokerage || '0.00'}</TableCell>\r\n                                                                                                            {/* <TableCell align=\"right\">\r\n                {((parseFloat(item.Act_Qty) / 100 ) / (parseFloat(item.Brokerage)) * 100 || 0).toFixed(2)}\r\n              </TableCell> */}\r\n\r\n                                                                                                        </>\r\n                                                                                                    )}\r\n                                                                                                    <TableCell align=\"right\">\r\n                                                                                                        <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\r\n                                                                                                            <Tooltip title=\"Delete this item\">\r\n                                                                                                                <IconButton\r\n                                                                                                                    color=\"error\"\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    onClick={(e) => {\r\n                                                                                                                        e.stopPropagation();\r\n                                                                                                                        setItemToDelete(item);\r\n                                                                                                                        setDeleteItemDialogOpen(true);\r\n                                                                                                                    }}\r\n                                                                                                                >\r\n                                                                                                                    <Delete fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                            <Tooltip title=\"Edit this item\">\r\n                                                                                                                <IconButton\r\n                                                                                                                    color=\"primary\"\r\n                                                                                                                    size=\"small\"\r\n                                                                                                                    onClick={() => handleEditItem(item)}\r\n                                                                                                                >\r\n                                                                                                                    <Edit fontSize=\"small\" />\r\n                                                                                                                </IconButton>\r\n                                                                                                            </Tooltip>\r\n                                                                                                        </Box>\r\n                                                                                                    </TableCell>\r\n                                                                                                </>\r\n                                                                                            )}\r\n                                                                                        </TableRow>\r\n                                                                                    ))\r\n                                                                                )}\r\n                                                                            </TableBody>\r\n                                                                        </Table>\r\n                                                                    </Box>\r\n                                                                </Collapse>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                                );\r\n                                            })\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell\r\n                                                colSpan={\r\n                                                    tableConfigs[transactionType].listingColumns.length + 1\r\n                                                }\r\n                                                align=\"center\"\r\n                                            >\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                                component=\"div\"\r\n                                count={brokerNames.length}\r\n                                rowsPerPage={listingPagination.rowsPerPage}\r\n                                page={listingPagination.page}\r\n                                onPageChange={handleListingPageChange}\r\n                                onRowsPerPageChange={handleListingRowsPerPageChange}\r\n                            />\r\n                        </TableContainer>\r\n                    </>\r\n                )}\r\n\r\n                <PdfPreviewModal\r\n                    open={pdfPreviewOpen}\r\n                    onClose={() => setPdfPreviewOpen(false)}\r\n                    brokerData={pdfPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n                <XlPreviewModal\r\n                    open={xlPreviewOpen}\r\n                    onClose={() => setXlPreViewOpen(false)}\r\n                    brokerData={xlPreviewData}\r\n                    transactionType={transactionType}\r\n                    fromDate={filtersListing.FromDate}\r\n                    toDate={filtersListing.ToDate}\r\n                />\r\n            </Paper>\r\n\r\n            {/* Filter dialogs and other components remain the same */}\r\n            <Dialog\r\n                open={currentData.filters.filterDialog && activeTab === 0}\r\n                onClose={closeDialogDataEntry}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">\r\n                            {transactionType === \"sales\" ? \"Sales\" : transactionType === \"salesNagal\" ? \"SalesNagal\" : \"Purchase\"} Data Entry\r\n                            Filters\r\n                        </Typography>\r\n                        <IconButton onClick={closeDialogDataEntry}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={currentData.filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, FromDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={currentData.filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, ToDate: e.target.value },\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={currentData.filters.Broker}\r\n                                onChange={(selected) =>\r\n                                    setCurrentData((prev) => ({\r\n                                        ...prev,\r\n                                        filters: { ...prev.filters, Broker: selected },\r\n                                    }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogDataEntry}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setCurrentData((prev) => ({\r\n                                ...prev,\r\n                                headerVilaiVasi: \"\",\r\n                                brokerageValues: {},\r\n                                filters: {\r\n                                    ...prev.filters,\r\n                                    refresh: !prev.filters.refresh,\r\n                                    filterDialog: false,\r\n                                },\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filtersListing.filterDialog && activeTab === 1}\r\n                onClose={closeDialogListing}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                    >\r\n                        <Typography variant=\"h6\">Listing Filters</Typography>\r\n                        <IconButton onClick={closeDialogListing}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"From Date\"\r\n                                value={filtersListing.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        FromDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"date\"\r\n                                label=\"To Date\"\r\n                                value={filtersListing.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        ToDate: e.target.value,\r\n                                    }))\r\n                                }\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={2}\r\n                            style={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    setFiltersListing((prev) => ({\r\n                                        ...prev,\r\n                                        refresh: !prev.refresh,\r\n                                    }));\r\n                                }}\r\n                                style={{ height: \"30px\", width: \"100%\" }}\r\n                            >\r\n                                Search\r\n                            </Button>\r\n                        </Grid>\r\n                        {\r\n                            transactionType === 'salesNagal' ? (\r\n                                <>\r\n                                    <Grid item xs={12}>\r\n                                        <Select\r\n                                            fullWidth\r\n                                            value={filtersListing.VilaiVasiZero}\r\n                                            onChange={(selected) =>\r\n                                                setFiltersListing((prev) => ({\r\n                                                    ...prev,\r\n                                                    VilaiVasiZero: selected,\r\n                                                }))\r\n                                            }\r\n                                            options={[\r\n                                                { value: \"\", label: \"All\" },\r\n                                                { value: \"zero\", label: \"VilaiVasi Zero\" },\r\n                                                { value: \"nonzero\", label: \"VilaiVasi Non-Zero\" },\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            menuPortalTarget={document.body}\r\n                                            placeholder=\"VilaiVasi Zero/Non-Zero\"\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n\r\n                                </>\r\n                            )}\r\n\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Brokers\"\r\n                                value={filtersListing.Broker}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Broker: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Brokers\" },\r\n                                    ...dropDown.broker,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Broker\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Ledger\"\r\n                                value={filtersListing.Ledger}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Ledger: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Ledger\" },\r\n                                    ...dropdownOptionsListing.ledgers,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Ledger\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"Item\"\r\n                                value={filtersListing.Item}\r\n                                onChange={(selected) =>\r\n                                    setFiltersListing((prev) => ({ ...prev, Item: selected }))\r\n                                }\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL Item\" },\r\n                                    ...dropdownOptionsListing.items,\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                menuPortalTarget={document.body}\r\n                                isSearchable\r\n                                placeholder=\"Select Item\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialogListing}>Cancel</Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setFiltersListing((prev) => ({\r\n                                ...prev,\r\n                                refresh: !prev.refresh,\r\n                                filterDialog: false,\r\n                            }));\r\n                        }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContent id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete {brokerToDelete?.Broker_Name || brokerToDelete?.Supplier_Name}'s records?\r\n                    </DialogContent>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleDelete} color=\"error\" autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={deleteItemDialogOpen}\r\n                onClose={() => setDeleteItemDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Item Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete this {itemToDelete?.Product_Name} item?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDeleteItemDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleDeleteItem} color=\"error\" autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={bulkDeleteDialogOpen}\r\n                onClose={() => setBulkDeleteDialogOpen(false)}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Confirm Bulk Deletion\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Are you sure you want to delete ALL filtered records? This action cannot be undone.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setBulkDeleteDialogOpen(false)}>Cancel</Button>\r\n                    <Button onClick={handleBulkDelete} color=\"error\" autoFocus>\r\n                        Delete All\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default NakalReports;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","_ref","_brokerData$Items","_brokerData$Items$","_brokerData$Items2","open","onClose","brokerData","transactionType","fromDate","toDate","printRef","useRef","handlePrint","useReactToPrint","content","current","items","Items","totalBrokerage","reduce","sum","item","parseFloat","Brok_Amt","Brokerage","totalCoolie","Coolie_Amt","totalAmount","Total_Amount","vilaivasi","VilaiVasi","netTotalRaw","netTotalRounded","Math","round","roundOff","packSizeSummary","getPackSizeSummary","packQuantities","acc","packSize","KGS","QTY","isNaN","Object","entries","sort","_ref2","_ref3","sizeA","sizeB","map","_ref4","size","qty","concat","join","_jsx","_Fragment","children","_jsxs","Dialog","fullWidth","maxWidth","DialogTitle","Broker_Name","IconButton","onClick","sx","position","right","top","theme","palette","grey","Close","DialogContent","ref","className","Date","index","Retailer_Name","Ledger_Name","Short_Name","Item_Rate","NumberFormat","Amount","Vilaivasi_Rate","colSpan","Total_Qty","Total_KGS","value","n","Number","formatSignedNumber","fontFamily","textAlign","marginBottom","margin","length","borderCollapse","_item$Date","split","TotaL_Invoice_value","borderTop","DialogActions","Button","startIcon","Download","bro","parseInt","num","toLocaleString","minimumFractionDigits","maximumFractionDigits","a","b","handleExportPurchase","async","_brokerData$Items3","workbook","ExcelJS","worksheet","addWorksheet","created","modified","titleRow","addRow","font","bold","alignment","horizontal","mergeCells","dateRangeRow","headers","header","h","eachCell","cell","border","argb","left","bottom","forEach","getColumn","row","getCell","totalRow","buffer","xlsx","writeBuffer","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","setTimeout","revokeObjectURL","error","console","useEffect","_brokerData$Items2$","thickBlackBorder","cellStyle","number","fill","pattern","fgColor","headerRow","columns","vertical","undefined","numFmt","colNumber","packSizesRow","italic","label","rowData","saveAs","handleExportExcel","then","loadingOn","loadingOff","setTransactionType","useState","dataEntryPagination","setDataEntryPagination","page","rowsPerPage","listingPagination","setListingPagination","activeTab","setActiveTab","dropDown","setDropDown","broker","salesData","setSalesData","deliveryReport","brokerageValues","filters","FromDate","toISOString","ToDate","Broker","refresh","filterDialog","headerVilaiVasi","salesNewData","setSalesNewData","purchaseData","setPurchaseData","headerBrokerage","filtersListing","setFiltersListing","Ledger","Item","VilaiVasiZero","dataset","setDataset","dropdownOptionsListing","setDropdownOptionsListing","ledgers","expandedBrokers","setExpandedBrokers","saving","setSaving","storage","JSON","parse","localStorage","getItem","pdfPreviewOpen","setPdfPreviewOpen","xlPreviewOpen","setXlPreViewOpen","pdfPreviewData","setPdfPreviewData","xlPreviewData","setXlPreviewData","editingItem","setEditingItem","deleteDialogOpen","setDeleteDialogOpen","deleteItemDialogOpen","setDeleteItemDialogOpen","itemToDelete","setItemToDelete","brokerToDelete","setBrokerToDelete","bulkDeleteDialogOpen","setBulkDeleteDialogOpen","currentData","setCurrentData","fetchLink","data","success","prev","toArray","catch","endpoint","res","initialBrokerage","key","Do_Id","Product_Id","brokerage","err","fetchData","tableConfigs","salesNagal","dataEntryColumns","render","_row$Date","Rate","idx","handleChange","TextField","onChange","e","target","inputProps","step","displayQuantity","toFixed","Coolie","vilaivasiValue","handleVilaiChange","_","__","calcVilaiAmt","Act_Qty","listingColumns","sales","_row$Date2","brokerageValue","handleBrokerageChange","purchase","_row$Po_Entry_Date","Po_Entry_Date","PIN_Id","baseUrl","allItems","flatMap","uniqueLedgers","Array","from","Map","Ledger_Tally_Id","values","uniqueItems","Product_Name","fetchDatasetAndDropdowns","handleSaveEdit","payload","TransactionType","Updated_By","UserId","log","Brok_Rate","Coolie_Rate","Vilai_Vasi","Brokerage_Amt","response","method","bodyData","toast","message","doId","productId","pinId","closeDialogDataEntry","closeDialogListing","handleFieldChange","fieldName","updatedDeliveryReport","handleTransactionTypeChange","totalBagsDataEntry","useMemo","Addition","Qty","totalBagsListing","Total_Bags","calculateVilaivasiAmt","billQty","groupedByBroker","Supplier_Name","push","brokerNames","keys","isEditingRow","Do_Inv_No","Box","Paper","p","mb","Grid","container","justifyContent","alignItems","Typography","component","display","gap","FilterAlt","Tabs","handleTabChange","event","newValue","Tab","updatedBrokerageValues","placeholder","height","boxSizing","handleClearAllVilaiVasi","TableContainer","Table","TableHead","TableRow","column","TableCell","TableBody","slice","hover","TablePagination","rowsPerPageOptions","count","onPageChange","handleDataEntryPageChange","newPage","onRowsPerPageChange","mt","Save","recordsToSave","Created_By","apiAddress","successMessage","disabled","Delete","brokerName","React","handleExpandBroker","KeyboardArrowUp","KeyboardArrowDown","Tooltip","title","PictureAsPdfIcon","FileDownloadIcon","stopPropagation","Collapse","in","timeout","unmountOnExit","gutterBottom","_broker$Items","itemIdx","Po_Inv_No","Total_Invoice_value","minWidth","rate","vv","amount","Cancel","_item$Brok_Rate","_item$Brok_Amt","_item$Brok_Rate2","_item$QTY","_item$Coolie_Rate","_item$Coolie_Amt","_item$Coolie_Rate2","_item$QTY2","_item$Vilai_Vasi","_item$Vilaivasi_Rate","_item$Vilai_Vasi2","_item$Act_Qty","Brokerage_Rate","Id","handleEditItem","Edit","handleListingPageChange","PdfPreviewModal","XlPreviewModal","FilterAltOff","spacing","xs","InputLabelProps","shrink","Select","selected","options","styles","menuPortalTarget","body","isSearchable","Broker_Id","Supplier_Id","autoFocus","DialogContentText"],"sourceRoot":""}