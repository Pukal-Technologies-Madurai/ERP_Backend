{"version":3,"file":"static/js/8059.ca09869d.chunk.js","mappings":"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","sources":["Pages/Tasks/todaytasks.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Tab, Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, CardHeader } from '@mui/material';\r\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\r\nimport { AccessAlarm, } from \"@mui/icons-material\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport listPlugin from '@fullcalendar/list';\r\nimport { Card, CardContent } from '@mui/material';\r\nimport { ISOString } from '../../Components/functions'\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\n\r\nconst statusColor = (id) => {\r\n    const numId = Number(id);\r\n    const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\r\n    return color[numId]\r\n}\r\n\r\nconst formatTime24 = (time24) => {\r\n    const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n    let hours12 = hours % 12;\r\n    hours12 = hours12 || 12;\r\n    const period = hours < 12 ? 'AM' : 'PM';\r\n    const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n    const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n    return time12;\r\n}\r\n\r\nconst formatTime = (milliseconds) => {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formatNumber = (number) => {\r\n        return number < 10 ? `0${number}` : number;\r\n    };\r\n\r\n    return `${formatNumber(hours)}:${formatNumber(minutes % 60)}:${formatNumber(seconds % 60)}`;\r\n};\r\n\r\nfunction timeToMilliseconds(timeString) {\r\n    const [hours, minutes] = timeString.split(':').map(Number);\r\n    const totalMinutes = (hours * 60) + minutes;\r\n    const milliseconds = totalMinutes * 60000;\r\n\r\n    return milliseconds;\r\n}\r\n\r\nfunction millisecondsToTime(milliseconds) {\r\n    const date = new Date(milliseconds);\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const formattedHours = hours < 10 ? '0' + hours : hours;\r\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n    return formattedHours + ':' + formattedMinutes;\r\n}\r\n\r\nfunction addTimes(time1, time2) {\r\n    const [hours1, minutes1] = time1.split(':').map(Number);\r\n    const [hours2, minutes2] = time2.split(':').map(Number);\r\n    let totalHours = hours1 + hours2;\r\n    let totalMinutes = minutes1 + minutes2;\r\n    if (totalMinutes >= 60) {\r\n        totalHours += Math.floor(totalMinutes / 60);\r\n        totalMinutes %= 60;\r\n    }\r\n    const formattedHours = totalHours < 10 ? '0' + totalHours : totalHours;\r\n    const formattedMinutes = totalMinutes < 10 ? '0' + totalMinutes : totalMinutes;\r\n    return formattedHours + ':' + formattedMinutes;\r\n}\r\n\r\n\r\nconst TodayTasks = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const initialWorkSaveValue = {\r\n        Work_Id: '',\r\n        Project_Id: '',\r\n        Sch_Id: '',\r\n        Task_Levl_Id: '',\r\n        Task_Id: '',\r\n        AN_No: '',\r\n        Emp_Id: parseData?.UserId,\r\n        Work_Done: '',\r\n        Start_Time: '',\r\n        End_Time: '',\r\n        Work_Status: 2,\r\n        Work_Dt: ISOString(),\r\n        Process_Id:'',\r\n        Det_string: []\r\n    }\r\n    const additionalTaskInitialValue = {\r\n        Work_Id: '',\r\n        Project_Id: 1,\r\n        Sch_Id: 1,\r\n        Task_Levl_Id: 1,\r\n        Task_Id: 1,\r\n        AN_No: 0,\r\n        Emp_Id: parseData?.UserId,\r\n        Work_Done: '',\r\n        Start_Time: '12:00',\r\n        End_Time: '14:00',\r\n        Work_Status: 3,\r\n        Work_Dt: ISOString(),\r\n        Process_Id: 0,\r\n        Det_string: []\r\n    }\r\n    const [myTasks, setMyTasks] = useState([]);\r\n    const [workedDetais, setWorkedDetais] = useState([]);\r\n    const [queryDate, setQueryDate] = useState({\r\n        myTaskDate: ISOString(),\r\n        executedTaskDate: ISOString()\r\n    });\r\n    const [reload, setReload] = useState(false);\r\n    const [tabValue, setTabValue] = useState('1');\r\n    const [dialog, setDialog] = useState(false);\r\n    const [workDialog, setWorkDialog] = useState(false);\r\n    const [nonTimerWorkDialog, setNonTimerWorkDialog] = useState(false);\r\n    const [additionalTaskDialog, setAdditionalTaskDialog] = useState(false);\r\n    const [selectedTask, setSelectedTask] = useState({});\r\n    const [runningTaskId, setRunningTaskId] = useState(0);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n\r\n    const [startTime, setStartTime] = useState(null);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [workInput, setWorkInput] = useState(initialWorkSaveValue);\r\n    const [additionalTaskInput, setAdditionalTaskInput] = useState(additionalTaskInitialValue)\r\n    const [nonTimerInput, setNonTimerInput] = useState({\r\n        ...initialWorkSaveValue,\r\n        Process_Id:0,\r\n        Start_Time: '10:00',\r\n        End_Time: '11:00',\r\n    })\r\n\r\n    const [processDetails, setProcessDetails] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${queryDate.myTaskDate}`\r\n        }).then(data => {\r\n            setMyTasks(data.success ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n    }, [reload, queryDate.myTaskDate, parseData?.UserId])\r\n\r\n\r\n    \r\n    useEffect(()=>{\r\n          fetchLink({\r\n            address:`taskManagement/processMaster/dropDown`\r\n          }).then(data=>{\r\n            setProcessDetails(data.success ? data.data :[])\r\n          }).catch(e => console.error(e))\r\n    },[reload])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${queryDate.executedTaskDate}&to=${queryDate.executedTaskDate}`\r\n        }).then(data => {\r\n            setWorkedDetais(data.success ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n    }, [reload, queryDate.executedTaskDate, parseData?.UserId])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask?Emp_Id=${parseData?.UserId}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const time = data.data[0].Time ? Number(data.data[0].Time) : null;\r\n                const taskId = data?.data[0]?.Task_Id ? Number(data?.data[0]?.Task_Id) : 0\r\n                setStartTime(time);\r\n                setRunningTaskId(taskId)\r\n            } else {\r\n                setStartTime(null)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [reload, parseData?.UserId])\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (startTime) {\r\n                const currentTime = new Date().getTime();\r\n                const elapsed = currentTime - parseInt(startTime);\r\n                setElapsedTime(elapsed);\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [startTime]);\r\n\r\n    useEffect(() => {\r\n        if (startTime && myTasks.length > 0) {\r\n            const setRunning = myTasks.find(task => Number(task.Task_Levl_Id) === Number(runningTaskId))\r\n            setSelectedTask(setRunning)\r\n        }\r\n    }, [startTime, myTasks, reload, runningTaskId])\r\n\r\n\r\n\r\n    const startTimer = () => {\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Emp_Id: parseData.UserId,\r\n                Time: new Date().getTime(),\r\n                Task_Id: selectedTask?.Task_Levl_Id,\r\n                ForcePost: 0\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message)\r\n                setReload(!reload)\r\n                setIsRunning(true);\r\n                setDialog(false)\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask`,\r\n            method: 'DELETE',\r\n            bodyData: {\r\n                Emp_Id: parseData.UserId,\r\n                Mode: 1\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message)\r\n                setStartTime(null);\r\n                setIsRunning(false);\r\n                setElapsedTime(0);\r\n                setSelectedTask({})\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    };\r\n\r\n    const progressFun = (end) => {\r\n        const currentTime = new Date().getTime();\r\n        const elapsed = currentTime - parseInt(startTime);\r\n        const totalDuration = end;\r\n\r\n        if (elapsed && totalDuration && elapsed < totalDuration) {\r\n            return (elapsed / totalDuration) * 100;\r\n        } else if (elapsed && totalDuration && elapsed >= totalDuration) {\r\n            return 100;\r\n        } else {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e, param) => {\r\n        const updatedValue = e.target.value;\r\n        setWorkInput((prevWorkInput) => {\r\n            const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n            if (indexValue !== -1) {\r\n                const updatedDetString = [...prevWorkInput.Det_string];\r\n                updatedDetString[indexValue] = {\r\n                    ...updatedDetString[indexValue],\r\n                    Current_Value: updatedValue,\r\n                    Param_Id: param.Param_Id,\r\n                    Default_Value: param.Default_Value,\r\n                    Task_Id: param?.Task_Id\r\n                };\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: updatedDetString\r\n                };\r\n            } else {\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: [\r\n                        ...prevWorkInput.Det_string,\r\n                        {\r\n                            Current_Value: updatedValue,\r\n                            Param_Id: param.Param_Id,\r\n                            Default_Value: param.Default_Value,\r\n                            Task_Id: selectedTask?.Task_Id\r\n                        }\r\n                    ]\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleNonTimerInputChange = (e, param) => {\r\n        const updatedValue = e.target.value;\r\n        setNonTimerInput((prevWorkInput) => {\r\n            const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n            if (indexValue !== -1) {\r\n                const updatedDetString = [...prevWorkInput.Det_string];\r\n                updatedDetString[indexValue] = {\r\n                    ...updatedDetString[indexValue],\r\n                    Current_Value: updatedValue,\r\n                    Param_Id: param?.Param_Id,\r\n                    Default_Value: param?.Default_Value,\r\n                    Task_Id: param?.Task_Id\r\n                };\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: updatedDetString\r\n                };\r\n            } else {\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: [\r\n                        ...prevWorkInput.Det_string,\r\n                        {\r\n                            Current_Value: updatedValue,\r\n                            Param_Id: param?.Param_Id,\r\n                            Default_Value: param?.Default_Value,\r\n                            Task_Id: param?.Task_Id\r\n                        }\r\n                    ]\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const renderEventContent = (eventInfo) => {\r\n        const obj = eventInfo.event.extendedProps.objectData;\r\n        const status = obj.Work_Status ? Number(obj.Work_Status) : 0;\r\n        const message = [\r\n            {\r\n                color: 'bg-warning',\r\n                message: 'New',\r\n                text: 'text-dark'\r\n            },\r\n            {\r\n                color: 'bg-warning',\r\n                message: 'New',\r\n                text: 'text-dark'\r\n            },\r\n            {\r\n                color: 'bg-primary',\r\n                message: 'on Progress',\r\n                text: 'text-white'\r\n            },\r\n            {\r\n                color: 'bg-success',\r\n                message: 'Completed',\r\n                text: 'text-white'\r\n            },\r\n        ]\r\n        return (\r\n            <div style={{ cursor: 'pointer' }}>\r\n                <p className=\"mb-0\">\r\n                    <span>{eventInfo.event.title} </span>\r\n                    <span>{formatTime24(obj?.Sch_Time) + ' - ' + formatTime24(obj?.EN_Time)} </span>\r\n                    <span className={`badge text-dark ${message[status].color} ${message[status].text} mx-1`}>\r\n                        {message[status].message}\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const openWorkDialog = (val) => {\r\n        setWorkInput(initialWorkSaveValue);\r\n        setWorkDialog(true)\r\n    }\r\n\r\n    function arrayToXml(array) {\r\n        let xml = '<DocumentElement>';\r\n        for (let obj of array) {\r\n            xml += '<Data>';\r\n            xml += `<Task_Id>${obj?.Task_Id ? String(obj?.Task_Id) : 0}</Task_Id>`;\r\n            xml += `<Param_Id>${obj?.Param_Id ? String(obj?.Param_Id) : 0}</Param_Id>`;\r\n            xml += `<Default_Value>${obj?.Default_Value ? String(obj?.Default_Value) : ''}</Default_Value>`;\r\n            xml += `<Current_Value>${obj?.Current_Value ? String(obj?.Current_Value) : ''}</Current_Value>`;\r\n            xml += '</Data>';\r\n        }\r\n        xml += '</DocumentElement>';\r\n        return xml;\r\n    }\r\n\r\n    const saveWork = () => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Mode: isEdit ? 2 : 1,\r\n                Work_Id: isEdit ? workInput?.Work_Id : 0,\r\n                Project_Id: selectedTask?.Project_Id,\r\n                Sch_Id: selectedTask?.Sch_Id,\r\n                Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n                Task_Id: selectedTask?.Task_Id,\r\n                AN_No: selectedTask?.AN_No,\r\n                Emp_Id: parseData?.UserId,\r\n                Work_Done: workInput?.Work_Done,\r\n                Process_Id: Number(workInput?.Process_Id) || 0,\r\n                Start_Time: isEdit ? workInput.Start_Time : millisecondsToTime(startTime),\r\n                End_Time: isEdit ? workInput.End_Time : addTimes(millisecondsToTime(startTime), formatTime(elapsedTime)),\r\n                Work_Status: workInput?.Work_Status,\r\n                Det_string: arrayToXml(workInput?.Det_string)\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSelectedTask({});\r\n                toast.success(data.message);\r\n                setWorkDialog(false); setIsEdit(false)\r\n                setReload(!reload); setElapsedTime(0); setIsRunning(false); setStartTime(null);\r\n            } else {\r\n                console.log(data.message)\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const saveNonTimerBasedTask = (e) => {\r\n        e.preventDefault();\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Mode: isEdit ? 2 : 1,\r\n                Work_Id: isEdit ? nonTimerInput?.Work_Id : 0,\r\n                Project_Id: selectedTask?.Project_Id,\r\n                Sch_Id: selectedTask?.Sch_Id,\r\n                Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n                Task_Id: selectedTask?.Task_Id,\r\n                AN_No: selectedTask?.AN_No,\r\n                Emp_Id: parseData?.UserId,\r\n                Process_Id: Number(nonTimerInput?.Process_Id) || 0,\r\n                Work_Dt: nonTimerInput?.Work_Dt,\r\n                Work_Done: nonTimerInput?.Work_Done,\r\n                Start_Time: nonTimerInput?.Start_Time,\r\n                End_Time: nonTimerInput?.End_Time,\r\n                Work_Status: nonTimerInput?.Work_Status,\r\n                Det_string: arrayToXml(nonTimerInput?.Det_string)\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSelectedTask({});\r\n                toast.success(data.message);\r\n                setNonTimerWorkDialog(false);\r\n                setReload(!reload); setIsEdit(false); setStartTime(null);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const openUnAssignedTaskDialog = () => {\r\n        setAdditionalTaskInput(additionalTaskInitialValue);\r\n        setAdditionalTaskDialog(true);\r\n    }\r\n\r\n    const saveUnAssignedTask = (e) => {\r\n        e.preventDefault();\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                ...additionalTaskInput,\r\n                Process_Id: Number(additionalTaskInput?.Process_Id)\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setAdditionalTaskDialog(false);\r\n                setReload(!reload); setIsEdit(false)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n\r\n            {startTime && (\r\n                <div className=\"cus-card rounded-2 shadow-none px-3 py-1 mb-3\">\r\n                    <h5 className=\"mb-0 pt-2\">Running Task</h5>\r\n\r\n                    <div className=\"cus-card bg-light p-3 shadow-none rounded-1\">\r\n\r\n                        <p className=\"mb-0 fa-16 fw-bold pb-1 border-bottom\">\r\n                            <span className=\"flex-grow-1\">{selectedTask?.Task_Name || ' No Active Task '}</span>\r\n                        </p>\r\n\r\n                        <div className=\"row mt-2 flex-row-reverse\">\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"p-2 pb-0\">\r\n                                    <p className=\"fa-20 d-flex mb-1\">\r\n                                        <span className=\"flex-grow-1\">Duration : </span>\r\n                                        <span className=\"text-primary\">{formatTime(elapsedTime)}</span>\r\n                                    </p>\r\n                                    <p className=\"mb-0 d-flex\">\r\n                                        <span className=\"flex-grow-1\">Progress : </span>\r\n                                        {progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)?.toFixed(2) + ' %'}\r\n                                    </p>\r\n                                    <span className=\"p-2 w-100\">\r\n                                        <div style={{ backgroundColor: '#ddd' }} className=\"rounded-4 overflow-hidden\">\r\n                                            <div\r\n                                                style={{\r\n                                                    width: `${progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)}%`,\r\n                                                    backgroundColor: '#007bff',\r\n                                                    height: '14px'\r\n                                                }} />\r\n                                        </div>\r\n                                        <p className=\"mb-0 d-flex justify-content-between fa-12\">\r\n                                            <span   >0%</span>\r\n                                            <span>100%</span>\r\n                                        </p>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6 d-flex\">\r\n                                <div className=\"p-2 flex-grow-1\">\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Scheduled Time</span>\r\n                                        <span>\r\n                                            {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n                                            &nbsp; - &nbsp;\r\n                                            {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Total Hour</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Sch_Period} Hrs\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Project</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Project_Name?.slice(0, 25)}\r\n                                            {selectedTask?.Project_Name?.length > 25 && '...'}\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Project Head</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Project_Head_Name}\r\n                                        </span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\" d-md-block vr\" style={{ display: 'none' }}></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"text-end mt-2 mb-1\">\r\n                        <Button onClick={stopTimer} color='error' variant='outlined' sx={{ marginRight: '10px' }}>cancel</Button>\r\n                        <Button onClick={openWorkDialog} color='success' variant='contained'>Save</Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <Card variant='elevation'>\r\n                <CardContent className=\"p-1\">\r\n                    <div className=\" d-lg-flex\">\r\n\r\n                        <div className=\"flex-grow-1 p-2\">\r\n                            <CardHeader title='Assigned Task' className=\"text-center text-decoration-underline\" />\r\n\r\n\r\n                            <FullCalendar\r\n                                plugins={[timeGridPlugin, listPlugin]}\r\n                                initialView=\"timeGridDay\"\r\n                                initialDate={new Date()}\r\n                                events={\r\n                                    myTasks.map(o => ({\r\n                                        title: o?.Task_Name,\r\n                                        start: queryDate.myTaskDate + 'T' + o?.Sch_Time,\r\n                                        end: queryDate.myTaskDate + 'T' + o?.EN_Time,\r\n                                        objectData: o\r\n                                    }))\r\n                                }\r\n                                headerToolbar={{\r\n                                    left: 'prev next',\r\n                                    center: 'title',\r\n                                    right: 'timeGridDay, listDay',\r\n                                }}\r\n                                slotDuration={'00:20:00'}\r\n                                slotMinTime={'08:00:00'}\r\n                                slotMaxTime={'22:00:00'}\r\n                                showNonCurrentDates={false}\r\n                                editable={false}\r\n                                selectable\r\n                                selectMirror\r\n                                eventClick={eve => {\r\n                                    if (!startTime && elapsedTime === 0) {\r\n                                        const selObj = eve.event.extendedProps?.objectData;\r\n                                        if (Number(selObj?.Work_Status) !== 3 && Number(selObj?.Timer_Based) === 1) {\r\n                                            setSelectedTask(selObj);\r\n                                            setDialog(true);\r\n                                            setWorkInput({\r\n                                                Work_Id: selObj?.Work_Id,\r\n                                                Project_Id: selObj?.Project_Id,\r\n                                                Sch_Id: selObj?.Sch_Id,\r\n                                                Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                Task_Id: selObj?.Task_Id,\r\n                                                AN_No: selObj?.AN_No,\r\n                                                Emp_Id: parseData?.UserId,\r\n                                                Work_Done: selObj?.Work_Done,\r\n                                                Start_Time: selObj?.Start_Time,\r\n                                                End_Time: selObj?.End_Time,\r\n                                                Work_Status: selObj?.Work_Status,\r\n                                                Work_Dt: ISOString(selObj?.Work_Dt),\r\n                                                Process_Id: Number(selObj?.Process_Id),\r\n                                                Det_string: selObj?.Param_Dts\r\n                                            })\r\n                                        } else if (Number(selObj?.Work_Status) !== 3) {\r\n                                            setSelectedTask(selObj);\r\n                                            setNonTimerWorkDialog(true);\r\n                                            setNonTimerInput({\r\n                                                Work_Id: selObj?.Work_Id ? selObj?.Work_Id : '',\r\n                                                Project_Id: selObj?.Project_Id ? selObj?.Project_Id : '',\r\n                                                Sch_Id: selObj?.Sch_Id ? selObj?.Sch_Id : '',\r\n                                                Task_Levl_Id: selObj?.Task_Levl_Id ? selObj?.Task_Levl_Id : '',\r\n                                                Task_Id: selObj?.Task_Id ? selObj?.Task_Id : '',\r\n                                                AN_No: selObj?.AN_No ? selObj?.AN_No : '',\r\n                                                Emp_Id: parseData?.UserId,\r\n                                                Work_Done: selObj?.Work_Done ? selObj?.Work_Done : '',\r\n                                                Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n                                            })\r\n                                        } else {\r\n                                            toast.warn('This task is already completed')\r\n                                        }\r\n                                    } else {\r\n                                        toast.warn('Complete running task')\r\n                                    }\r\n                                }}\r\n                                eventContent={renderEventContent}\r\n                                datesSet={obj => setQueryDate({ ...queryDate, myTaskDate: ISOString(obj.endStr) })}\r\n                                height={1200}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"flex-grow-1 p-2\">\r\n                            <CardHeader title='Executed' className=\"text-center text-decoration-underline\" />\r\n\r\n                            <FullCalendar\r\n                                plugins={[timeGridPlugin, listPlugin]}\r\n                                initialView=\"timeGridDay\"\r\n                                initialDate={queryDate.executedTaskDate}\r\n                                events={\r\n                                    workedDetais.map(o => ({\r\n                                        title: o?.Task_Name,\r\n                                        start: queryDate.executedTaskDate + 'T' + o?.Start_Time,\r\n                                        end: queryDate.executedTaskDate + 'T' + o?.End_Time,\r\n                                        objectData: o\r\n                                    }))\r\n                                }\r\n                                headerToolbar={{\r\n                                    left: 'prev next',\r\n                                    center: 'title',\r\n                                    right: 'timeGridDay, listWeek',\r\n                                }}\r\n                                slotDuration={'00:20:00'}\r\n                                slotMinTime={'08:00:00'}\r\n                                slotMaxTime={'22:00:00'}\r\n                                showNonCurrentDates={false}\r\n                                editable={false}\r\n                                selectable\r\n                                selectMirror\r\n                                datesSet={obj => setQueryDate({ ...queryDate, executedTaskDate: ISOString(obj.endStr) })}\r\n                                eventClick={eve => {\r\n                                    if (!startTime && elapsedTime === 0) {\r\n                                        const selObj = eve.event.extendedProps?.objectData;\r\n                                        if (ISOString(selObj?.Entry_Date) === ISOString()) {\r\n                                            setIsEdit(true)\r\n                                            if (Number(selObj?.Timer_Based) === 0) {\r\n                                                setSelectedTask(selObj);\r\n                                                setNonTimerWorkDialog(true)\r\n                                                setNonTimerInput({\r\n                                                    Work_Id: selObj?.Work_Id,\r\n                                                    Project_Id: selObj?.Project_Id,\r\n                                                    Sch_Id: selObj?.Sch_Id,\r\n                                                    Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                    Task_Id: selObj?.Task_Id,\r\n                                                    AN_No: selObj?.AN_No,\r\n                                                    Emp_Id: parseData?.UserId,\r\n                                                    Work_Done: selObj?.Work_Done,\r\n                                                    Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                    End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                    Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                    Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                    Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                    Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n                                                })\r\n                                            } else {\r\n                                                setSelectedTask(selObj);\r\n                                                setWorkDialog(true)\r\n                                                setWorkInput({\r\n                                                    Work_Id: selObj?.Work_Id,\r\n                                                    Project_Id: selObj?.Project_Id,\r\n                                                    Sch_Id: selObj?.Sch_Id,\r\n                                                    Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                    Task_Id: selObj?.Task_Id,\r\n                                                    AN_No: selObj?.AN_No,\r\n                                                    Emp_Id: parseData?.UserId,\r\n                                                    Work_Done: selObj?.Work_Done,\r\n                                                    Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                    End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                    Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                    Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                    Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                    Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : []\r\n                                                })\r\n                                            }\r\n                                        } else {\r\n                                            toast.warn('You can only modify today works')\r\n                                        }\r\n                                    } else {\r\n                                        toast.warn('Complete running task')\r\n                                    }\r\n                                }}\r\n                                height={1200}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"table-responsive mt-3\">\r\n\r\n                        <div className=\"d-flex justify-content-between border align-items-center p-2 rounded-3 mb-3\" onClick={openUnAssignedTaskDialog}>\r\n                            <span className=\"ps-2\">Work Done At: {new Date(queryDate?.executedTaskDate).toLocaleDateString('en-IN')}</span>\r\n                            <button className=\"btn btn-primary fa-14\"> Add Additional Work Details</button>\r\n                        </div>\r\n\r\n                        <table className=\"table mb-1\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"fa-13 border\">SNo</th>\r\n                                    <th className=\"fa-13 border\">Task</th>\r\n                                    <th className=\"fa-13 border\">Timer Based</th>\r\n                                    <th className=\"fa-13 border\">Start - End</th>\r\n                                    <th className=\"fa-13 border\">Total Minutes</th>\r\n                                    <th className=\"fa-13 border\">Status</th>\r\n                                    <th className=\"fa-13 border\">Discription</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {workedDetais.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className=\"fa-13 border\">{i + 1}</td>\r\n                                        <td className=\"fa-13 border\">{o?.Task_Name}</td>\r\n                                        <td className=\"fa-13 border text-center\">\r\n                                            <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\r\n                                                {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\r\n                                            </span>\r\n                                        </td>\r\n                                        <td className=\"fa-13 border text-center\">{o?.Start_Time} - {o?.End_Time}</td>\r\n                                        <td className=\"fa-13 border text-center\">{o?.Tot_Minutes}</td>\r\n                                        <td className=\"fa-13 border text-center\">\r\n                                            <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Status)}`}>\r\n                                                {o?.WorkStatus}\r\n                                            </span>\r\n                                        </td>\r\n                                        <td className=\"fa-13 border\">{o?.Work_Done}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <TabContext value={tabValue} >\r\n\r\n                        <Box sx={{ borderBottom: 1, borderColor: 'divider', display: 'none' }}>\r\n                            <TabList indicatorColor='secondary' textColor='secondary' onChange={(e, n) => setTabValue(n)} aria-label=\"\">\r\n                                <Tab sx={tabValue === '1' ? { backgroundColor: '#c6d7eb' } : {}} label={`TODAY TASKS (${myTasks.length})`} value='1' />\r\n                                <Tab sx={tabValue === '2' ? { backgroundColor: '#c6d7eb' } : {}} label={`EXECUTED (${workedDetais.length})`} value='2' />\r\n                            </TabList>\r\n                        </Box>\r\n\r\n                        <TabPanel value={'1'} sx={{ p: 0, pt: 2 }}>\r\n\r\n\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={'2'} sx={{ p: 0, pt: 2 }}>\r\n\r\n\r\n                        </TabPanel>\r\n\r\n                    </TabContext>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => { setDialog(false); setSelectedTask({}) }}>\r\n                <DialogTitle className=\"fa-18\">\r\n                    Start Task\r\n                    <span className=\"text-primary fw-bold\"> {selectedTask?.Task_Name}</span>\r\n                </DialogTitle>\r\n                <DialogContent sx={{ minWidth: '330px' }}>\r\n\r\n                    <div className=\" pb-3\">\r\n\r\n                        <p className=\"mb-0 text-center\">\r\n                            <AccessAlarm sx={{ fontSize: '50px' }} />\r\n                        </p>\r\n\r\n                        <p className=\"mb-0 text-center\">\r\n                            Allocated Time\r\n                        </p>\r\n\r\n                        <p className=\"my-2 text-center text-primary\">{selectedTask?.Sch_Period} Hrs</p>\r\n\r\n                    </div>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Schedule</span>\r\n                        <span>\r\n                            {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n                            &nbsp;-&nbsp;\r\n                            {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Project</span>\r\n                        <span>\r\n                            {selectedTask?.Project_Name?.slice(0, 25)}\r\n                            {selectedTask?.Project_Name?.length > 25 && '...'}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Project Head</span>\r\n                        <span>\r\n                            {selectedTask?.Project_Head_Name}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <div className=\" text-center\">\r\n                        <button\r\n                            onClick={!isRunning ? startTimer : stopTimer}\r\n                            className=\"clock-btn cus-shadow\" style={!isRunning ? { backgroundColor: '#b5e6dd' } : { backgroundColor: '#D8BFD8' }}>\r\n                            {!isRunning ? 'Start' : 'Stop'}\r\n                        </button>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { setDialog(false); setSelectedTask({}) }}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={workDialog}\r\n                onClose={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false); }}\r\n                fullWidth maxWidth='sm'>\r\n                <DialogTitle>Save Work</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveWork()\r\n                }}>\r\n                    <DialogContent>\r\n                      <label className=\"my-2\">Process</label>\r\n<select\r\n    className=\"cus-inpt\"\r\n    value={nonTimerInput.Process_Id}  // ✅ Corrected: nonTimerInput instead of workInput\r\n    onChange={e => setNonTimerInput({ ...nonTimerInput, Process_Id: e.target.value })}  // ✅ Corrected: setNonTimerInput instead of setWorkInput\r\n>\r\n    <option value=\"\">Select Process</option>\r\n    {processDetails.map(process => (\r\n        <option key={process.Id} value={process.Id}>\r\n            {process.Process_Name}\r\n        </option>\r\n    ))}\r\n</select>\r\n\r\n                        <label className=\"my-2\">Work Status</label>\r\n                        <select\r\n                            className=\"cus-inpt\"\r\n                            value={workInput.Work_Status} required\r\n                            onChange={e => setWorkInput({ ...workInput, Work_Status: e.target.value })}>\r\n                            <option value={2}>PENDING</option>\r\n                            <option value={3}>COMPLETED</option>\r\n                        </select>\r\n\r\n                        <label className=\"my-2\">Work Summary</label>\r\n                        <textarea\r\n                            rows=\"4\"\r\n                            className=\"cus-inpt\" required\r\n                            value={workInput.Work_Done}\r\n                            onChange={e => setWorkInput({ ...workInput, Work_Done: e.target.value })} />\r\n\r\n                        {selectedTask?.Param_Dts?.map((param, index) => (\r\n                            <div key={index}>\r\n                                <label className=\"mt-2 mb-1\">{param?.Paramet_Name}</label>\r\n                                <input\r\n                                    type={param?.Paramet_Data_Type || 'text'}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={(e) => handleInputChange(e, param)}\r\n                                    value={workInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n                                    placeholder={param?.Paramet_Data_Type}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            variant='outlined'\r\n                            type='button'\r\n                            onClick={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false) }}>\r\n                            close\r\n                        </Button>\r\n                        <Button\r\n                            color='success'\r\n                            type='submit'\r\n                            variant='contained'>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={nonTimerWorkDialog} maxWidth=\"sm\" fullWidth\r\n                onClose={() => { setNonTimerWorkDialog(false); setNonTimerInput(initialWorkSaveValue); setIsEdit(false) }} >\r\n                <DialogTitle>Save Task Progress</DialogTitle>\r\n                <form onSubmit={saveNonTimerBasedTask}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Completed Date\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Dt: e.target.value })}\r\n                                            value={ISOString(nonTimerInput?.Work_Dt)}\r\n                                            className=\"cus-inpt\" required />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, Start_Time: e.target.value })}\r\n                                            value={nonTimerInput?.Start_Time}\r\n                                            className=\"cus-inpt\" required />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            min={nonTimerInput?.Start_Time}\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, End_Time: e.target.value })}\r\n                                            value={nonTimerInput?.End_Time} required\r\n                                            className=\"cus-inpt\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Work Status\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <select\r\n                                            className=\"cus-inpt\"\r\n                                            value={nonTimerInput?.Work_Status}\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Status: e.target.value })}\r\n                                        >\r\n                                            <option value={2}>PENDING</option>\r\n                                            <option value={3}>COMPLETED</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Process\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <select\r\n                                            className=\"cus-inpt\"\r\n                                            value={nonTimerInput.Process_Id || ''}\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, Process_Id: e.target.value })}\r\n                                        >\r\n                                            <option value=\"\">Select Process</option>\r\n                                            {processDetails.map(process => (\r\n                                                <option key={process.Id} value={process.Id}>\r\n                                                    {process.Process_Name}\r\n                                                </option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14 pt-3\">\r\n                                        Work Summary\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <textarea\r\n                                            rows=\"4\"\r\n                                            className=\"cus-inpt\" required\r\n                                            value={nonTimerInput?.Work_Done}\r\n                                            onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Done: e.target.value })} />\r\n                                    </td>\r\n                                </tr>\r\n                                {selectedTask?.Param_Dts?.map((param, index) => (\r\n                                    <tr key={index}>\r\n                                        <td className=\"border-0 fa-14 pt-3\">{param?.Paramet_Name}</td>\r\n                                        <td className=\"border-0 fa-14\">\r\n                                            <input\r\n                                                type={param?.Paramet_Data_Type || 'text'}\r\n                                                className=\"cus-inpt\"\r\n                                                onChange={(e) => handleNonTimerInputChange(e, param)}\r\n                                                value={nonTimerInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n                                                placeholder={param?.Paramet_Data_Type}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            variant='outlined' color=\"error\" type='button'\r\n                            onClick={() => { setNonTimerWorkDialog(false); setNonTimerInput(initialWorkSaveValue); setIsEdit(false) }}>\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            variant='contained' color='success' type='submit'>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={additionalTaskDialog} maxWidth=\"sm\" fullWidth\r\n                onClose={() => setAdditionalTaskDialog(false)} >\r\n                <DialogTitle>Additional Tasks</DialogTitle>\r\n                <form onSubmit={saveUnAssignedTask}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Process\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <select\r\n                                            className=\"cus-inpt\"\r\n                                            value={additionalTaskInput.Process_Id || ''}\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Process_Id: e.target.value })}\r\n                                        >\r\n                                            <option value=\"\">Select Process</option>\r\n                                            {processDetails.map(process => (\r\n                                                <option key={process.Id} value={process.Id}>\r\n                                                    {process.Process_Name}\r\n                                                </option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Completed Date\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Dt: e.target.value })}\r\n                                            value={ISOString(additionalTaskInput?.Work_Dt)}\r\n                                            className=\"cus-inpt\" required />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Start_Time: e.target.value })}\r\n                                            value={additionalTaskInput?.Start_Time}\r\n                                            className=\"cus-inpt\" required />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            min={additionalTaskInput?.Start_Time}\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, End_Time: e.target.value })}\r\n                                            value={additionalTaskInput?.End_Time} required\r\n                                            className=\"cus-inpt\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                                        Work Status\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <select\r\n                                            className=\"cus-inpt\"\r\n                                            value={additionalTaskInput?.Work_Status}\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Status: e.target.value })}\r\n                                        >\r\n                                            <option value={2}>PENDING</option>\r\n                                            <option value={3}>COMPLETED</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-0 fa-14 pt-3\">\r\n                                        Work Summary\r\n                                    </td>\r\n                                    <td className=\"border-0 fa-14\">\r\n                                        <textarea\r\n                                            rows=\"4\"\r\n                                            className=\"cus-inpt\" required\r\n                                            value={additionalTaskInput?.Work_Done}\r\n                                            onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Done: e.target.value })} />\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            variant='outlined' color=\"error\" type='button'\r\n                            onClick={() => setAdditionalTaskDialog(false)}>\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            variant='contained' color='success' type='submit'>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodayTasks;"],"names":["statusColor","id","Number","formatTime24","time24","hours","minutes","split","map","hours12","period","formattedMinutes","concat","formatTime","milliseconds","seconds","Math","floor","formatNumber","number","timeToMilliseconds","timeString","millisecondsToTime","date","Date","getHours","getMinutes","addTimes","time1","time2","hours1","minutes1","hours2","minutes2","totalHours","totalMinutes","TodayTasks","_progressFun","_selectedTask$Project","_selectedTask$Project2","_selectedTask$Project3","_selectedTask$Project4","_selectedTask$Param_D","_selectedTask$Param_D2","localData","localStorage","getItem","parseData","JSON","parse","initialWorkSaveValue","Work_Id","Project_Id","Sch_Id","Task_Levl_Id","Task_Id","AN_No","Emp_Id","UserId","Work_Done","Start_Time","End_Time","Work_Status","Work_Dt","ISOString","Process_Id","Det_string","additionalTaskInitialValue","myTasks","setMyTasks","useState","workedDetais","setWorkedDetais","queryDate","setQueryDate","myTaskDate","executedTaskDate","reload","setReload","tabValue","setTabValue","dialog","setDialog","workDialog","setWorkDialog","nonTimerWorkDialog","setNonTimerWorkDialog","additionalTaskDialog","setAdditionalTaskDialog","selectedTask","setSelectedTask","runningTaskId","setRunningTaskId","isEdit","setIsEdit","startTime","setStartTime","elapsedTime","setElapsedTime","isRunning","setIsRunning","workInput","setWorkInput","additionalTaskInput","setAdditionalTaskInput","nonTimerInput","setNonTimerInput","_objectSpread","processDetails","setProcessDetails","useEffect","fetchLink","address","then","data","success","catch","e","console","error","_data$data$","_data$data$2","time","Time","taskId","interval","setInterval","elapsed","getTime","parseInt","clearInterval","length","setRunning","find","task","stopTimer","method","bodyData","Mode","toast","message","progressFun","end","arrayToXml","array","xml","obj","String","Param_Id","Default_Value","Current_Value","_jsxs","_Fragment","children","_jsx","ToastContainer","className","Task_Name","Sch_Period","toFixed","style","backgroundColor","width","height","Sch_Time","EN_Time","Project_Name","slice","Project_Head_Name","display","Button","onClick","color","variant","sx","marginRight","val","Card","CardContent","CardHeader","title","FullCalendar","plugins","timeGridPlugin","listPlugin","initialView","initialDate","events","o","start","objectData","headerToolbar","left","center","right","slotDuration","slotMinTime","slotMaxTime","showNonCurrentDates","editable","selectable","selectMirror","eventClick","eve","warn","_eve$event$extendedPr","selObj","event","extendedProps","Timer_Based","Param_Dts","eventContent","eventInfo","status","text","cursor","datesSet","endStr","_eve$event$extendedPr2","Entry_Date","openUnAssignedTaskDialog","toLocaleDateString","i","Tot_Minutes","WorkStatus","TabContext","value","Box","borderBottom","borderColor","TabList","indicatorColor","textColor","onChange","n","Tab","label","TabPanel","p","pt","Dialog","open","onClose","DialogTitle","DialogContent","minWidth","AccessAlarm","fontSize","startTimer","ForcePost","DialogActions","fullWidth","maxWidth","onSubmit","preventDefault","log","target","process","Id","Process_Name","required","rows","param","index","_workInput$Det_string","_workInput$Det_string2","Paramet_Name","type","Paramet_Data_Type","handleInputChange","updatedValue","prevWorkInput","_prevWorkInput$Det_st","indexValue","findIndex","item","updatedDetString","placeholder","verticalAlign","min","_nonTimerInput$Det_st","_nonTimerInput$Det_st2","handleNonTimerInputChange","_prevWorkInput$Det_st2"],"sourceRoot":""}