{"version":3,"file":"static/js/5348.be77d4de.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Components/tablecolumn.js","Pages/Reports/outstanding.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/FilterAltOff.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    ISOString,\r\n    isValidDate,\r\n    NumberFormat,\r\n    toArray,\r\n    Addition,\r\n} from \"../../Components/functions\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\nimport { FilterAlt, Search, FilterAltOff } from \"@mui/icons-material\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst defaultFilters = {\r\n    fromDate: ISOString(),\r\n    toDate: ISOString(),\r\n};\r\n\r\nconst defaultFilterDropDown = {\r\n    voucherType: [],\r\n    retailers: [],\r\n    collectionType: [],\r\n    paymentStatus: [],\r\n    collectedBy: [],\r\n};\r\n\r\nconst Outstanding = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const [allAccounts, setAllAccounts] = useState([]);\r\n    const [viewType, setViewType] = useState(\"debtors\");\r\n\r\n    const [accountOptions, setAccountOptions] = useState([]);\r\n    const [groupOptions, setGroupOptions] = useState([]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        fromDate: defaultFilters.fromDate,\r\n        toDate: defaultFilters.toDate,\r\n        fetchFrom: defaultFilters.fromDate,\r\n        fetchTo: defaultFilters.toDate,\r\n        Account_Id: \"\",\r\n        Group_Name: \"\",\r\n        filterDialog: false,\r\n        refresh: false,\r\n    });\r\n\r\n    const [drowDownValues, setDropDownValues] = useState(defaultFilterDropDown);\r\n\r\n    useEffect(() => {\r\n        fetchLink({ address: `receipt/filterValues` })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDownValues({\r\n                        voucherType: toArray(data?.others?.voucherType),\r\n                    });\r\n                }\r\n            })\r\n            .catch(console.error);\r\n\r\n        fetchAllAccounts();\r\n    }, [storage?.Company_id]);\r\n\r\n    const resetFilters = () => {\r\n        setFilters({\r\n            ...defaultFilters,\r\n            fetchFrom: defaultFilters.fromDate,\r\n            fetchTo: defaultFilters.toDate,\r\n            Account_Id: \"\",\r\n            Group_Name: \"\",\r\n            filterDialog: false,\r\n            refresh: false,\r\n        });\r\n\r\n        updateQueryString({\r\n            fromDate: defaultFilters.fromDate,\r\n            toDate: defaultFilters.toDate,\r\n            Account_Id: \"\",\r\n            Group_Name: \"\",\r\n        });\r\n\r\n        fetchAllAccounts();\r\n    };\r\n\r\n    const fetchAllAccounts = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `payment/getDebtorDetails?fromDate=${filters?.fromDate}&toDate=${filters?.toDate}`,\r\n            method: \"GET\",\r\n        })\r\n            .then((data) => {\r\n                if (data.success) setAllAccounts(data.data || []);\r\n            })\r\n            .finally(() => loadingOff && loadingOff())\r\n            .catch(console.error);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Array.isArray(allAccounts)) {\r\n            const accOpts = allAccounts.map((a) => ({\r\n                value: a.Acc_Id,\r\n                label: a.Account_name,\r\n            }));\r\n\r\n            const grpOpts = [\r\n                ...new Map(\r\n                    allAccounts.map((a) => [\r\n                        a.Group_Name,\r\n                        { value: a.Group_Name, label: a.Group_Name },\r\n                    ])\r\n                ).values(),\r\n            ];\r\n\r\n            setAccountOptions([{ value: \"\", label: \"ALL\" }, ...accOpts]);\r\n            setGroupOptions([{ value: \"\", label: \"ALL\" }, ...grpOpts]);\r\n        }\r\n    }, [allAccounts]);\r\n\r\n    const tableData = useMemo(() => {\r\n        if (!Array.isArray(allAccounts)) return [];\r\n\r\n        return allAccounts.filter((item) => {\r\n            const balance = parseFloat(item?.Bal_Amount || 0);\r\n\r\n            // Skip zero balances\r\n            if (balance === 0) return false;\r\n\r\n            // Filter by account type\r\n            if (viewType === \"debtors\" && item.Account_Types !== \"Debtor\") return false;\r\n            if (viewType === \"creditors\" && item.Account_Types !== \"Creditor\") return false;\r\n\r\n            if (filters.Account_Id && item.Acc_Id !== filters.Account_Id)\r\n                return false;\r\n            if (filters.Group_Name && item.Group_Name !== filters.Group_Name)\r\n                return false;\r\n\r\n            return true;\r\n        });\r\n    }, [allAccounts, viewType, filters.Account_Id, filters.Group_Name]);\r\n\r\n    const Total_Debit = useMemo(() => {\r\n        return tableData.reduce((acc, item) => Addition(acc, parseFloat(item?.Dr_Amount || 0)), 0);\r\n    }, [tableData]);\r\n\r\n    const Total_Credit = useMemo(() => {\r\n        return tableData.reduce((acc, item) => Addition(acc, parseFloat(item?.Cr_Amount || 0)), 0);\r\n    }, [tableData]);\r\n\r\n    const Total_Outstanding = useMemo(() => {\r\n        return Total_Debit - Total_Credit;\r\n    }, [Total_Debit, Total_Credit]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            fromDate:\r\n                query.get(\"fromDate\") && isValidDate(query.get(\"fromDate\"))\r\n                    ? query.get(\"fromDate\")\r\n                    : defaultFilters.fromDate,\r\n            toDate:\r\n                query.get(\"toDate\") && isValidDate(query.get(\"toDate\"))\r\n                    ? query.get(\"toDate\")\r\n                    : defaultFilters.toDate,\r\n        };\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            fetchFrom: queryFilters.fromDate,\r\n            fetchTo: queryFilters.toDate,\r\n        }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters((pre) => ({ ...pre, filterDialog: false }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={\r\n                    viewType === \"debtors\"\r\n                        ? \"Debtors Outstanding\"\r\n                        : \"Creditors Outstanding\"\r\n                }\r\n                ButtonArea={\r\n                    <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n                        <div style={{ display: \"flex\", alignItems: \"center\", gap: \"10px\" }}>\r\n                            <Button\r\n                                variant={viewType === \"debtors\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setViewType(\"debtors\")}\r\n                                size=\"small\"\r\n                            >\r\n                                Debtors\r\n                            </Button>\r\n                            <Button\r\n                                variant={viewType === \"creditors\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setViewType(\"creditors\")}\r\n                                size=\"small\"\r\n                            >\r\n                                Creditors\r\n                            </Button>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Tooltip title=\"Filters\">\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                                    >\r\n                                        <FilterAlt />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Reset Filters\">\r\n                                    <IconButton size=\"small\" onClick={resetFilters}>\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex flex-column align-items-end\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total {viewType === \"debtors\" ? \"Debtors\" : \"Creditors\"} Debit:</span>\r\n                                <strong>{NumberFormat(Total_Debit)}</strong>\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total {viewType === \"debtors\" ? \"Debtors\" : \"Creditors\"} Credit:</span>\r\n                                <strong>{NumberFormat(Total_Credit)}</strong>\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total Outstanding:</span>\r\n                                <strong className={Total_Outstanding >= 0 ? \"text-danger\" : \"text-success\"}>\r\n                                    {NumberFormat(Math.abs(Total_Outstanding))} {Total_Outstanding >= 0 ? \"DR\" : \"CR\"}\r\n                                </strong>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                EnableSerialNumber\r\n                ExcelPrintOption={true}\r\n                dataArray={tableData}\r\n                headerFontSizePx={14}\r\n                bodyFontSizePx={13}\r\n                columns={[\r\n                    createCol(\"Acc_Id\", \"string\", \"Account ID\"),\r\n                    createCol(\"Account_name\", \"string\", \"Account Name\"),\r\n                    createCol(\"Group_Name\", \"string\", \"Group\"),\r\n                    {\r\n                        ...createCol(\"Account_Types\", \"string\", \"Account Type\"),\r\n                        isVisible: 1\r\n                    },\r\n                    {\r\n                        ...createCol(\"OB_Amount\", \"number\", \"Opening Balance\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    {\r\n                        ...createCol(\"Dr_Amount\", \"number\", \"Debit Amount\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    {\r\n                        ...createCol(\"Cr_Amount\", \"number\", \"Credit Amount\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    createCol(\"CR_DR\", \"string\", \"Type\"),\r\n                    {\r\n                        Field_Name: \"Bal_Amount\",\r\n                        isVisible: 1,\r\n                        Fied_Data: \"number\",\r\n                        isCustomCell: true,\r\n                        Header: \"Balance Amount\",\r\n                        Cell: ({ row }) => (\r\n                            <span className={row?.CR_DR === \"DR\" ? \"text-danger\" : \"text-success\"}>\r\n                                {NumberFormat(Math.abs(row?.Bal_Amount || 0))} {row?.CR_DR}\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n            {/* Filter Dialog */}\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <table className=\"table table-borderless w-100\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\", width: \"150px\" }}>\r\n                                    From\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        value={filters.fromDate || \"\"}\r\n                                        onChange={(e) =>\r\n                                            setFilters({ ...filters, fromDate: e.target.value })\r\n                                        }\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                <td>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        value={filters.toDate || \"\"}\r\n                                        onChange={(e) =>\r\n                                            setFilters({ ...filters, toDate: e.target.value })\r\n                                        }\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>Account Name</td>\r\n                                <td>\r\n                                    <Select\r\n                                        styles={customSelectStyles}\r\n                                        value={\r\n                                            accountOptions.find(\r\n                                                (a) => a.value === filters.Account_Id\r\n                                            ) || { value: \"\", label: \"ALL\" }\r\n                                        }\r\n                                        options={accountOptions}\r\n                                        onChange={(selected) =>\r\n                                            setFilters({\r\n                                                ...filters,\r\n                                                Account_Id: selected?.value || \"\",\r\n                                            })\r\n                                        }\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>Group Name</td>\r\n                                <td>\r\n                                    <Select\r\n                                        styles={customSelectStyles}\r\n                                        value={\r\n                                            groupOptions.find(\r\n                                                (g) => g.value === filters.Group_Name\r\n                                            ) || { value: \"\", label: \"ALL\" }\r\n                                        }\r\n                                        options={groupOptions}\r\n                                        onChange={(selected) =>\r\n                                            setFilters({\r\n                                                ...filters,\r\n                                                Group_Name: selected?.value || \"\",\r\n                                            })\r\n                                        }\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                fromDate: filters?.fromDate,\r\n                                toDate: filters?.toDate,\r\n                                Account_Id: filters?.Account_Id,\r\n                                Group_Name: filters?.Group_Name,\r\n                            };\r\n\r\n                            setFilters((prev) => ({\r\n                                ...prev,\r\n                                fetchFrom: filters.fromDate,\r\n                                fetchTo: filters.toDate,\r\n                            }));\r\n\r\n                            updateQueryString(updatedFilters);\r\n                            fetchAllAccounts();\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Outstanding;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41z\"\n}), 'FilterAltOff');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","defaultFilters","fromDate","ISOString","toDate","defaultFilterDropDown","voucherType","retailers","collectionType","paymentStatus","collectedBy","loadingOn","loadingOff","navigate","useNavigate","location","useLocation","query","URLSearchParams","search","storage","JSON","parse","localStorage","getItem","allAccounts","setAllAccounts","viewType","setViewType","accountOptions","setAccountOptions","groupOptions","setGroupOptions","filters","setFilters","fetchFrom","fetchTo","Account_Id","Group_Name","filterDialog","refresh","drowDownValues","setDropDownValues","useEffect","fetchLink","then","_data$others","success","toArray","others","catch","fetchAllAccounts","Company_id","method","finally","isArray","accOpts","Acc_Id","label","Account_name","grpOpts","Map","values","tableData","useMemo","item","parseFloat","Bal_Amount","Account_Types","Total_Debit","reduce","acc","Addition","Dr_Amount","Total_Credit","Cr_Amount","Total_Outstanding","queryFilters","get","isValidDate","updateQueryString","newFilters","params","toString","closeDialog","display","alignItems","gap","Button","FilterAlt","resetFilters","FilterAltOff","Math","abs","format","Header","CR_DR","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","onChange","Select","styles","options","selected","g","DialogActions","updatedFilters","prev","startIcon","Search","createSvgIcon","d"],"sourceRoot":""}