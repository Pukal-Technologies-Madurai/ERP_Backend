{"version":3,"file":"static/js/1780.aaaabe97.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ClearAll.js","Pages/Payments/PaymentReport/itemExpences.jsx","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 13h14v-2H5zm-2 4h14v-2H3zM7 7v2h14V7z\"\n}), 'ClearAll');","import { useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, groupData, ISOString, isValidDate, Subraction, toArray } from \"../../../Components/functions\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { ClearAll, FilterAlt, Search } from \"@mui/icons-material\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst ItemPaymentExpences = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const stateDetails = location.state;\r\n    const query = useQuery();\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, Fromdate: queryFilters.Fromdate, Todate: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        const Fromdate = (stateDetails?.Fromdate && isValidDate(stateDetails?.Fromdate)) ? ISOString(stateDetails?.Fromdate) : null;\r\n        const Todate = (stateDetails?.Todate && isValidDate(stateDetails?.Todate)) ? ISOString(stateDetails?.Todate) : null;\r\n        if (Fromdate && Todate) {\r\n            updateQueryString({ Fromdate, Todate });\r\n            setFilters(pre => ({\r\n                ...pre,\r\n                Fromdate: ISOString(stateDetails.Fromdate),\r\n                Todate: stateDetails.Todate\r\n            }));\r\n        }\r\n    }, [stateDetails])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `payment/reports/itemExpences?Fromdate=${filters.Fromdate}&Todate=${filters.Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setReportData(data.data);\r\n            }\r\n        }).catch(e => console.log(e))\r\n    }, [filters.refresh])\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            filterDialog: false,\r\n        }));\r\n    }\r\n\r\n    const refreshData = () => {\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            refresh: !pre.refresh,\r\n        }));\r\n    }\r\n\r\n    const groupedReportData = useMemo(() => {\r\n        const Stock_Group = groupData(reportData, 'Stock_Group');\r\n\r\n        const aggregatedStockGroup = Stock_Group.sort(\r\n            (a, b) => String(a?.Stock_Group).localeCompare(String(b?.Stock_Group))\r\n        ).map(sg => ({\r\n            ...sg,\r\n            total_expense_value: toArray(sg?.groupedData).reduce((acc, item) => Addition(acc, item?.total_expense_value), 0),\r\n            payment_count: toArray(sg?.groupedData).reduce((acc, item) => Addition(acc, item?.payment_count), 0)\r\n        }));\r\n\r\n        console.log({ aggregatedStockGroup })\r\n\r\n        const Grade_Item_Group = aggregatedStockGroup.map(sg => ({\r\n            ...sg,\r\n            groupedData: groupData(sg.groupedData, 'Grade_Item_Group')\r\n        }));\r\n\r\n        console.log({ Grade_Item_Group });\r\n\r\n        const aggregatedGradeItemGroup = Grade_Item_Group.map(sg => ({\r\n            ...sg,\r\n            groupedData: toArray(sg.groupedData).sort(\r\n                (a, b) => String(a?.Grade_Item_Group).localeCompare(String(b?.Grade_Item_Group))\r\n            ).map(gig => ({\r\n                ...gig,\r\n                total_expense_value: toArray(gig?.groupedData).reduce((acc, item) => Addition(acc, item?.total_expense_value), 0),\r\n                payment_count: toArray(gig?.groupedData).reduce((acc, item) => Addition(acc, item?.payment_count), 0)\r\n            }))\r\n        }));\r\n\r\n        return aggregatedGradeItemGroup\r\n\r\n    }, [reportData]);\r\n\r\n    console.log(groupedReportData)\r\n\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Expences\"\r\n                headerFontSizePx={13}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedReportData}\r\n                EnableSerialNumber\r\n                disablePagination\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol('Stock_Group', 'string',),\r\n                    createCol('payment_count', 'number', 'payments'),\r\n                    createCol('total_expense_value', 'number', 'Total Enpence')\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={13}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Grade_Item_Group', 'string'),\r\n                            createCol('payment_count', 'number', 'payments'),\r\n                            createCol('total_expense_value', 'number', 'Total Enpence')\r\n                        ]}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (\r\n                            <FilterableTable\r\n                                headerFontSizePx={13}\r\n                                bodyFontSizePx={12}\r\n                                EnableSerialNumber\r\n                                dataArray={toArray(row?.groupedData)}\r\n                                columns={[\r\n                                    createCol('Product_Name', 'string', 'Item'),\r\n                                    createCol('payment_count', 'number', 'payments'),\r\n                                    createCol('total_expense_value', 'number', 'Total Enpence')\r\n                                ]}\r\n                                disablePagination\r\n                            />\r\n                        )}\r\n                        disablePagination\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                {/* from date */}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* to date */}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions className=\"d-flex align-items-center justify-content-between\">\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                            setFilters(pre => ({\r\n                                ...pre,\r\n                                ...defaultFilters\r\n                            }))\r\n                        }}\r\n                        startIcon={<ClearAll />}\r\n                    >clear</Button>\r\n                    <span>\r\n                        <Button onClick={closeDialog}>close</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                closeDialog();\r\n                                const updatedFilters = {\r\n                                    Fromdate: filters?.Fromdate,\r\n                                    Todate: filters?.Todate\r\n                                };\r\n                                updateQueryString(updatedFilters);\r\n                                refreshData();\r\n                            }}\r\n                            startIcon={<Search />}\r\n                            variant=\"contained\"\r\n                        >Search</Button>\r\n                    </span>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ItemPaymentExpences;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["createSvgIcon","_jsx","d","defaultFilters","Fromdate","ISOString","Todate","_ref","loadingOn","loadingOff","reportData","setReportData","useState","filters","setFilters","refresh","filterDialog","navigate","useNavigate","location","useLocation","stateDetails","state","query","URLSearchParams","search","useEffect","queryFilters","get","isValidDate","pre","_objectSpread","updateQueryString","fetchLink","address","concat","then","data","success","catch","e","console","log","newFilters","params","toString","replace","closeDialog","groupedReportData","useMemo","aggregatedStockGroup","groupData","sort","a","b","String","Stock_Group","localeCompare","map","sg","total_expense_value","toArray","groupedData","reduce","acc","item","Addition","payment_count","Grade_Item_Group","gig","_jsxs","_Fragment","children","FilterableTable","title","headerFontSizePx","bodyFontSizePx","dataArray","EnableSerialNumber","disablePagination","ButtonArea","IconButton","onClick","FilterAlt","columns","createCol","isExpendable","expandableComp","_ref2","row","_ref3","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","className","style","verticalAlign","type","value","onChange","target","DialogActions","Button","variant","startIcon","ClearAll","updatedFilters","Search","preprocessDataForExport","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","toLowerCase","key","Field_Name","field","arguments","length","undefined","align","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","event","currentTarget","size","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","tableMaxHeight","initialPageCount","CellSize","PDFPrintOption","ExcelPrintOption","maxHeightOption","MenuButtons","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","sx","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}