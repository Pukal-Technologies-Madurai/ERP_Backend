{"version":3,"file":"static/js/2003.dd3d7d02.chunk.js","mappings":"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","sources":["Components/tablecolumn.js","Pages/Tasks/todaytasks.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","// import React, { useEffect, useState } from \"react\";\r\n// import { Tab, Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, CardHeader } from '@mui/material';\r\n// import { TabPanel, TabList, TabContext } from '@mui/lab';\r\n// import { AccessAlarm, } from \"@mui/icons-material\";\r\n// import { toast, ToastContainer } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import FullCalendar from '@fullcalendar/react'\r\n// import timeGridPlugin from '@fullcalendar/timegrid'\r\n// import listPlugin from '@fullcalendar/list';\r\n// import { Card, CardContent } from '@mui/material';\r\n// import { ISOString } from '../../Components/functions'\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\n\r\n// const statusColor = (id) => {\r\n//     const numId = Number(id);\r\n//     const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\r\n//     return color[numId]\r\n// }\r\n\r\n// const formatTime24 = (time24) => {\r\n//     const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n//     let hours12 = hours % 12;\r\n//     hours12 = hours12 || 12;\r\n//     const period = hours < 12 ? 'AM' : 'PM';\r\n//     const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n//     const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n//     const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n//     return time12;\r\n// }\r\n\r\n// const formatTime = (milliseconds) => {\r\n//     const seconds = Math.floor(milliseconds / 1000);\r\n//     const minutes = Math.floor(seconds / 60);\r\n//     const hours = Math.floor(minutes / 60);\r\n\r\n//     const formatNumber = (number) => {\r\n//         return number < 10 ? `0${number}` : number;\r\n//     };\r\n\r\n//     return `${formatNumber(hours)}:${formatNumber(minutes % 60)}:${formatNumber(seconds % 60)}`;\r\n// };\r\n\r\n// function timeToMilliseconds(timeString) {\r\n//     const [hours, minutes] = timeString.split(':').map(Number);\r\n//     const totalMinutes = (hours * 60) + minutes;\r\n//     const milliseconds = totalMinutes * 60000;\r\n\r\n//     return milliseconds;\r\n// }\r\n\r\n// function millisecondsToTime(milliseconds) {\r\n//     const date = new Date(milliseconds);\r\n//     const hours = date.getHours();\r\n//     const minutes = date.getMinutes();\r\n//     const formattedHours = hours < 10 ? '0' + hours : hours;\r\n//     const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n//     return formattedHours + ':' + formattedMinutes;\r\n// }\r\n\r\n// function addTimes(time1, time2) {\r\n//     const [hours1, minutes1] = time1.split(':').map(Number);\r\n//     const [hours2, minutes2] = time2.split(':').map(Number);\r\n//     let totalHours = hours1 + hours2;\r\n//     let totalMinutes = minutes1 + minutes2;\r\n//     if (totalMinutes >= 60) {\r\n//         totalHours += Math.floor(totalMinutes / 60);\r\n//         totalMinutes %= 60;\r\n//     }\r\n//     const formattedHours = totalHours < 10 ? '0' + totalHours : totalHours;\r\n//     const formattedMinutes = totalMinutes < 10 ? '0' + totalMinutes : totalMinutes;\r\n//     return formattedHours + ':' + formattedMinutes;\r\n// }\r\n\r\n\r\n// function arrayToXml(array) {\r\n//     if (!array || !Array.isArray(array) || array.length === 0) {\r\n//         return null;\r\n//     }\r\n    \r\n//     try {\r\n//         let xml = '<DocumentElement>';\r\n//         for (let obj of array) {\r\n      \r\n//             if (obj && obj.Param_Id) {\r\n//                 xml += '<Data>';\r\n//                 xml += `<Task_Id>${obj?.Task_Id ? String(obj.Task_Id) : 0}</Task_Id>`;\r\n//                 xml += `<Param_Id>${String(obj.Param_Id)}</Param_Id>`;\r\n//                 xml += `<Default_Value>${obj?.Default_Value ? escapeXml(String(obj.Default_Value)) : ''}</Default_Value>`;\r\n//                 xml += `<Current_Value>${obj?.Current_Value ? escapeXml(String(obj.Current_Value)) : ''}</Current_Value>`;\r\n//                 xml += '</Data>';\r\n//             }\r\n//         }\r\n//         xml += '</DocumentElement>';\r\n        \r\n//         return xml === '<DocumentElement></DocumentElement>' ? null : xml;\r\n//     } catch (error) {\r\n//         console.error('Error generating XML:', error);\r\n//         return null;\r\n//     }\r\n// }\r\n\r\n\r\n// function escapeXml(unsafe) {\r\n//     if (!unsafe) return '';\r\n//     return unsafe.replace(/[<>&'\"]/g, function (c) {\r\n//         switch (c) {\r\n//             case '<': return '&lt;';\r\n//             case '>': return '&gt;';\r\n//             case '&': return '&amp;';\r\n//             case '\\'': return '&apos;';\r\n//             case '\"': return '&quot;';\r\n//             default: return c;\r\n//         }\r\n//     });\r\n// }\r\n\r\n// const TodayTasks = () => {\r\n//     const localData = localStorage.getItem(\"user\");\r\n//     const parseData = JSON.parse(localData);\r\n//     const initialWorkSaveValue = {\r\n//         Work_Id: '',\r\n//         Project_Id: '',\r\n//         Sch_Id: '',\r\n//         Task_Levl_Id: '',\r\n//         Task_Id: '',\r\n//         AN_No: '',\r\n//         Emp_Id: parseData?.UserId,\r\n//         Work_Done: '',\r\n//         Start_Time: '',\r\n//         End_Time: '',\r\n//         Work_Status: 2,\r\n//         Work_Dt: ISOString(),\r\n//         Process_Id: 0,\r\n//         Det_string: []\r\n//     }\r\n//     const additionalTaskInitialValue = {\r\n//         Work_Id: '',\r\n//         Project_Id: 1,\r\n//         Sch_Id: 1,\r\n//         Task_Levl_Id: 1,\r\n//         Task_Id: 1,\r\n//         AN_No: 0,\r\n//         Emp_Id: parseData?.UserId,\r\n//         Work_Done: '',\r\n//         Start_Time: '12:00',\r\n//         End_Time: '14:00',\r\n//         Work_Status: 3,\r\n//         Work_Dt: ISOString(),\r\n//         Process_Id: 0,\r\n//         Det_string: []\r\n//     }\r\n//     const [myTasks, setMyTasks] = useState([]);\r\n//     const [workedDetais, setWorkedDetais] = useState([]);\r\n//     const [queryDate, setQueryDate] = useState({\r\n//         myTaskDate: ISOString(),\r\n//         executedTaskDate: ISOString()\r\n//     });\r\n//     const [reload, setReload] = useState(false);\r\n//     const [tabValue, setTabValue] = useState('1');\r\n//     const [dialog, setDialog] = useState(false);\r\n//     const [workDialog, setWorkDialog] = useState(false);\r\n//     const [nonTimerWorkDialog, setNonTimerWorkDialog] = useState(false);\r\n//     const [additionalTaskDialog, setAdditionalTaskDialog] = useState(false);\r\n//     const [selectedTask, setSelectedTask] = useState({});\r\n//     const [runningTaskId, setRunningTaskId] = useState(0);\r\n//     const [isEdit, setIsEdit] = useState(false);\r\n\r\n//     const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n// const [employees, setEmployees] = useState([\r\n//     { id: 1, name: 'John Doe', department: 'Development' },\r\n//     { id: 2, name: 'Jane Smith', department: 'Design' },\r\n//     { id: 3, name: 'Mike Johnson', department: 'Testing' },\r\n//     { id: 4, name: 'Sarah Wilson', department: 'Development' },\r\n//     // Add more employees as needed\r\n// ]);\r\n//     const [startTime, setStartTime] = useState(null);\r\n//     const [elapsedTime, setElapsedTime] = useState(0);\r\n//     const [isRunning, setIsRunning] = useState(false);\r\n//     const [workInput, setWorkInput] = useState(initialWorkSaveValue);\r\n//     const [additionalTaskInput, setAdditionalTaskInput] = useState(additionalTaskInitialValue)\r\n//     const [nonTimerInput, setNonTimerInput] = useState({\r\n//         ...initialWorkSaveValue,\r\n//         Process_Id: 0,\r\n//         Start_Time: '10:00',\r\n//         End_Time: '11:00',\r\n//     })\r\n\r\n//     const [processDetails, setProcessDetails] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/tasks/myTasks?Emp_Id=${parseData?.UserId}&reqDate=${queryDate.myTaskDate}`\r\n//         }).then(data => {\r\n//             setMyTasks(data.success ? data.data : [])\r\n//         }).catch(e => console.error(e))\r\n//     }, [reload, queryDate.myTaskDate, parseData?.UserId])\r\n\r\n\r\n//     const handleEmployeeSelect = (employee) => {\r\n//     setSelectedEmployee(employee);\r\n    \r\n//     if (employee) {\r\n//         // Fetch tasks and data for the selected employee\r\n//         console.log('Loading data for employee:', employee.name);\r\n//         // Add your API calls here to load data for the selected employee\r\n//         // fetchEmployeeTasks(employee.id);\r\n//         // fetchEmployeeWorkDetails(employee.id);\r\n//     } else {\r\n//         // Reset to current user's data\r\n//         console.log('Loading my data');\r\n//         // fetchMyTasks();\r\n//         // fetchMyWorkDetails();\r\n//     }\r\n// }\r\n//     useEffect(()=>{\r\n//           fetchLink({\r\n//             address:`taskManagement/processMaster/dropDown`\r\n//           }).then(data=>{\r\n//             setProcessDetails(data.success ? data.data :[])\r\n//           }).catch(e => console.error(e))\r\n//     },[reload])\r\n\r\n//     useEffect(()=>{\r\n//         fetchLink({\r\n//             address:``\r\n//         })\r\n//     })\r\n\r\n \r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/task/work?Emp_Id=${parseData?.UserId}&from=${queryDate.executedTaskDate}&to=${queryDate.executedTaskDate}`\r\n//         }).then(data => {\r\n//             setWorkedDetais(data.success ? data.data : [])\r\n//         }).catch(e => console.error(e))\r\n//     }, [reload, queryDate.executedTaskDate, parseData?.UserId])\r\n\r\n//     useEffect(() => {\r\n\r\n//         fetchLink({\r\n//             address: `taskManagement/task/startTask?Emp_Id=${parseData?.UserId}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 const time = data.data[0].Time ? Number(data.data[0].Time) : null;\r\n//                 const taskId = data?.data[0]?.Task_Id ? Number(data?.data[0]?.Task_Id) : 0\r\n//                 setStartTime(time);\r\n//                 setRunningTaskId(taskId)\r\n//             } else {\r\n//                 setStartTime(null)\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n\r\n//     }, [reload, parseData?.UserId])\r\n\r\n//     useEffect(() => {\r\n//         const interval = setInterval(() => {\r\n//             if (startTime) {\r\n//                 const currentTime = new Date().getTime();\r\n//                 const elapsed = currentTime - parseInt(startTime);\r\n//                 setElapsedTime(elapsed);\r\n//             }\r\n//         }, 1000);\r\n\r\n//         return () => clearInterval(interval);\r\n//     }, [startTime]);\r\n\r\n//     useEffect(() => {\r\n//         if (startTime && myTasks.length > 0) {\r\n//             const setRunning = myTasks.find(task => Number(task.Task_Levl_Id) === Number(runningTaskId))\r\n//             setSelectedTask(setRunning)\r\n//         }\r\n//     }, [startTime, myTasks, reload, runningTaskId])\r\n\r\n\r\n\r\n//     const startTimer = () => {\r\n//         fetchLink({\r\n//             address: `taskManagement/task/startTask`,\r\n//             method: 'POST',\r\n//             bodyData: {\r\n//                 Emp_Id: parseData.UserId,\r\n//                 Time: new Date().getTime(),\r\n//                 Task_Id: selectedTask?.Task_Levl_Id,\r\n//                 ForcePost: 0\r\n//             }\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 toast.success(data.message)\r\n//                 setReload(!reload)\r\n//                 setIsRunning(true);\r\n//                 setDialog(false)\r\n//             } else {\r\n//                 toast.error(data.message);\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n//     };\r\n\r\n//     const stopTimer = () => {\r\n//         fetchLink({\r\n//             address: `taskManagement/task/startTask`,\r\n//             method: 'DELETE',\r\n//             bodyData: {\r\n//                 Emp_Id: parseData.UserId,\r\n//                 Mode: 1\r\n//             }\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 toast.success(data.message)\r\n//                 setStartTime(null);\r\n//                 setIsRunning(false);\r\n//                 setElapsedTime(0);\r\n//                 setSelectedTask({})\r\n//             } else {\r\n//                 toast.error(data.message);\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n//     };\r\n\r\n//     const progressFun = (end) => {\r\n//         const currentTime = new Date().getTime();\r\n//         const elapsed = currentTime - parseInt(startTime);\r\n//         const totalDuration = end;\r\n\r\n//         if (elapsed && totalDuration && elapsed < totalDuration) {\r\n//             return (elapsed / totalDuration) * 100;\r\n//         } else if (elapsed && totalDuration && elapsed >= totalDuration) {\r\n//             return 100;\r\n//         } else {\r\n//             return 0;\r\n//         }\r\n//     };\r\n\r\n//     const handleInputChange = (e, param) => {\r\n//         const updatedValue = e.target.value;\r\n//         setWorkInput((prevWorkInput) => {\r\n//             const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n//             if (indexValue !== -1) {\r\n//                 const updatedDetString = [...prevWorkInput.Det_string];\r\n//                 updatedDetString[indexValue] = {\r\n//                     ...updatedDetString[indexValue],\r\n//                     Current_Value: updatedValue,\r\n//                     Param_Id: param.Param_Id,\r\n//                     Default_Value: param.Default_Value,\r\n//                     Task_Id: param?.Task_Id\r\n//                 };\r\n//                 return {\r\n//                     ...prevWorkInput,\r\n//                     Det_string: updatedDetString\r\n//                 };\r\n//             } else {\r\n//                 return {\r\n//                     ...prevWorkInput,\r\n//                     Det_string: [\r\n//                         ...prevWorkInput.Det_string,\r\n//                         {\r\n//                             Current_Value: updatedValue,\r\n//                             Param_Id: param.Param_Id,\r\n//                             Default_Value: param.Default_Value,\r\n//                             Task_Id: selectedTask?.Task_Id\r\n//                         }\r\n//                     ]\r\n//                 };\r\n//             }\r\n//         });\r\n//     };\r\n\r\n//     const handleNonTimerInputChange = (e, param) => {\r\n//         const updatedValue = e.target.value;\r\n//         setNonTimerInput((prevWorkInput) => {\r\n//             const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n//             if (indexValue !== -1) {\r\n//                 const updatedDetString = [...prevWorkInput.Det_string];\r\n//                 updatedDetString[indexValue] = {\r\n//                     ...updatedDetString[indexValue],\r\n//                     Current_Value: updatedValue,\r\n//                     Param_Id: param?.Param_Id,\r\n//                     Default_Value: param?.Default_Value,\r\n//                     Task_Id: param?.Task_Id\r\n//                 };\r\n//                 return {\r\n//                     ...prevWorkInput,\r\n//                     Det_string: updatedDetString\r\n//                 };\r\n//             } else {\r\n//                 return {\r\n//                     ...prevWorkInput,\r\n//                     Det_string: [\r\n//                         ...prevWorkInput.Det_string,\r\n//                         {\r\n//                             Current_Value: updatedValue,\r\n//                             Param_Id: param?.Param_Id,\r\n//                             Default_Value: param?.Default_Value,\r\n//                             Task_Id: param?.Task_Id\r\n//                         }\r\n//                     ]\r\n//                 };\r\n//             }\r\n//         });\r\n//     };\r\n\r\n\r\n//     const renderEventContent = (eventInfo) => {\r\n//         const obj = eventInfo.event.extendedProps.objectData;\r\n//         const status = obj.Work_Status ? Number(obj.Work_Status) : 0;\r\n//         const message = [\r\n//             {\r\n//                 color: 'bg-warning',\r\n//                 message: 'New',\r\n//                 text: 'text-dark'\r\n//             },\r\n//             {\r\n//                 color: 'bg-warning',\r\n//                 message: 'New',\r\n//                 text: 'text-dark'\r\n//             },\r\n//             {\r\n//                 color: 'bg-primary',\r\n//                 message: 'on Progress',\r\n//                 text: 'text-white'\r\n//             },\r\n//             {\r\n//                 color: 'bg-success',\r\n//                 message: 'Completed',\r\n//                 text: 'text-white'\r\n//             },\r\n//         ]\r\n//         return (\r\n//             <div style={{ cursor: 'pointer' }}>\r\n//                 <p className=\"mb-0\">\r\n//                     <span>{eventInfo.event.title} </span>\r\n//                     <span>{formatTime24(obj?.Sch_Time) + ' - ' + formatTime24(obj?.EN_Time)} </span>\r\n//                     <span className={`badge text-dark ${message[status].color} ${message[status].text} mx-1`}>\r\n//                         {message[status].message}\r\n//                     </span>\r\n//                 </p>\r\n//             </div>\r\n//         );\r\n//     };\r\n\r\n//     const openWorkDialog = (val) => {\r\n//         setWorkInput(initialWorkSaveValue);\r\n//         setWorkDialog(true)\r\n//     }\r\n\r\n// const saveWork = () => {\r\n\r\n    \r\n  \r\n//     const detStringXml = workInput?.Det_string && workInput.Det_string.length > 0 \r\n//         ? arrayToXml(workInput.Det_string) \r\n//         : null;\r\n\r\n//     fetchLink({\r\n//         address: `taskManagement/task/work`,\r\n//         method: 'POST',\r\n//         bodyData: {\r\n//             Mode: isEdit ? 2 : 1,\r\n//             Work_Id: isEdit ? workInput?.Work_Id : 0,\r\n//             Project_Id: selectedTask?.Project_Id,\r\n//             Sch_Id: selectedTask?.Sch_Id,\r\n//             Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n//             Task_Id: selectedTask?.Task_Id,\r\n//             AN_No: selectedTask?.AN_No,\r\n//             Emp_Id: parseData?.UserId,\r\n//             Work_Done: workInput?.Work_Done,\r\n//             Process_Id: Number(workInput?.Process_Id) || 0,\r\n//             Start_Time: isEdit ? workInput.Start_Time : millisecondsToTime(startTime),\r\n//             End_Time: isEdit ? workInput.End_Time : addTimes(millisecondsToTime(startTime), formatTime(elapsedTime)),\r\n//             Work_Status: workInput?.Work_Status,\r\n//             Det_string: detStringXml \r\n//         }\r\n//     }).then(data => {\r\n//         if (data.success) {\r\n//             setSelectedTask({});\r\n//             toast.success(data.message);\r\n//             setWorkDialog(false); \r\n//             setIsEdit(false);\r\n//             setReload(!reload); \r\n//             setElapsedTime(0); \r\n//             setIsRunning(false); \r\n//             setStartTime(null);\r\n//         } else {\r\n//             console.log(data.message)\r\n//             toast.error(data.message)\r\n//         }\r\n//     }).catch(e => console.error(e))\r\n// }\r\n\r\n//  const saveNonTimerBasedTask = (e) => {\r\n//     e.preventDefault();\r\n    \r\n\r\n//     const detStringXml = nonTimerInput?.Det_string && nonTimerInput.Det_string.length > 0 \r\n//         ? arrayToXml(nonTimerInput.Det_string) \r\n//         : null;\r\n\r\n//     fetchLink({\r\n//         address: `taskManagement/task/work`,\r\n//         method: 'POST',\r\n//         bodyData: {\r\n//             Mode: isEdit ? 2 : 1,\r\n//             Work_Id: isEdit ? nonTimerInput?.Work_Id : 0,\r\n//             Project_Id: selectedTask?.Project_Id,\r\n//             Sch_Id: selectedTask?.Sch_Id,\r\n//             Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n//             Task_Id: selectedTask?.Task_Id,\r\n//             AN_No: selectedTask?.AN_No,\r\n//             Emp_Id: parseData?.UserId,\r\n//             Process_Id: Number(nonTimerInput?.Process_Id) || 0,\r\n//             Work_Dt: nonTimerInput?.Work_Dt,\r\n//             Work_Done: nonTimerInput?.Work_Done,\r\n//             Start_Time: nonTimerInput?.Start_Time,\r\n//             End_Time: nonTimerInput?.End_Time,\r\n//             Work_Status: nonTimerInput?.Work_Status,\r\n//             Det_string: detStringXml\r\n//         }\r\n//     }).then(data => {\r\n//         if (data.success) {\r\n//             setSelectedTask({});\r\n//             toast.success(data.message);\r\n//             setNonTimerWorkDialog(false);\r\n//             setReload(!reload); \r\n//             setIsEdit(false); \r\n//             setStartTime(null);\r\n//         } else {\r\n//             toast.error(data.message)\r\n//         }\r\n//     }).catch(e => console.error(e))\r\n// }\r\n\r\n\r\n//     const openUnAssignedTaskDialog = () => {\r\n//         setAdditionalTaskInput(additionalTaskInitialValue);\r\n//         setAdditionalTaskDialog(true);\r\n//     }\r\n\r\n//  const saveUnAssignedTask = (e) => {\r\n//     e.preventDefault();\r\n    \r\n\r\n//     const detStringXml = additionalTaskInput?.Det_string && additionalTaskInput.Det_string.length > 0 \r\n//         ? arrayToXml(additionalTaskInput.Det_string) \r\n//         : null;\r\n\r\n//     fetchLink({\r\n//         address: `taskManagement/task/work`,\r\n//         method: 'POST',\r\n//         bodyData: {\r\n//             ...additionalTaskInput,\r\n//             Mode: 1,\r\n//             Process_Id: Number(additionalTaskInput?.Process_Id),\r\n//             Det_string: detStringXml\r\n//         }\r\n//     }).then(data => {\r\n//         if (data.success) {\r\n//             toast.success(data.message);\r\n//             setAdditionalTaskDialog(false);\r\n//             setReload(!reload); \r\n//             setIsEdit(false)\r\n//         } else {\r\n//             toast.error(data.message)\r\n//         }\r\n//     }).catch(e => console.error(e))\r\n// }\r\n\r\n//     return (\r\n//         <>\r\n\r\n//             <ToastContainer />\r\n\r\n//             {startTime && (\r\n//                 <div className=\"cus-card rounded-2 shadow-none px-3 py-1 mb-3\">\r\n//                     <h5 className=\"mb-0 pt-2\">Running Task</h5>\r\n\r\n//                     <div className=\"cus-card bg-light p-3 shadow-none rounded-1\">\r\n\r\n//                         <p className=\"mb-0 fa-16 fw-bold pb-1 border-bottom\">\r\n//                             <span className=\"flex-grow-1\">{selectedTask?.Task_Name || ' No Active Task '}</span>\r\n//                         </p>\r\n\r\n//                         <div className=\"row mt-2 flex-row-reverse\">\r\n//                             <div className=\"col-md-6\">\r\n//                                 <div className=\"p-2 pb-0\">\r\n//                                     <p className=\"fa-20 d-flex mb-1\">\r\n//                                         <span className=\"flex-grow-1\">Duration : </span>\r\n//                                         <span className=\"text-primary\">{formatTime(elapsedTime)}</span>\r\n//                                     </p>\r\n//                                     <p className=\"mb-0 d-flex\">\r\n//                                         <span className=\"flex-grow-1\">Progress : </span>\r\n//                                         {progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)?.toFixed(2) + ' %'}\r\n//                                     </p>\r\n//                                     <span className=\"p-2 w-100\">\r\n//                                         <div style={{ backgroundColor: '#ddd' }} className=\"rounded-4 overflow-hidden\">\r\n//                                             <div\r\n//                                                 style={{\r\n//                                                     width: `${progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)}%`,\r\n//                                                     backgroundColor: '#007bff',\r\n//                                                     height: '14px'\r\n//                                                 }} />\r\n//                                         </div>\r\n//                                         <p className=\"mb-0 d-flex justify-content-between fa-12\">\r\n//                                             <span   >0%</span>\r\n//                                             <span>100%</span>\r\n//                                         </p>\r\n//                                     </span>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className=\"col-md-6 d-flex\">\r\n//                                 <div className=\"p-2 flex-grow-1\">\r\n//                                     <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n//                                         <span className=\" flex-grow-1\">Scheduled Time</span>\r\n//                                         <span>\r\n//                                             {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n//                                             &nbsp; - &nbsp;\r\n//                                             {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n//                                         </span>\r\n//                                     </p>\r\n//                                     <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n//                                         <span className=\" flex-grow-1\">Total Hour</span>\r\n//                                         <span className=\"text-primary\">\r\n//                                             {selectedTask?.Sch_Period} Hrs\r\n//                                         </span>\r\n//                                     </p>\r\n//                                     <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n//                                         <span className=\" flex-grow-1\">Project</span>\r\n//                                         <span className=\"text-primary\">\r\n//                                             {selectedTask?.Project_Name?.slice(0, 25)}\r\n//                                             {selectedTask?.Project_Name?.length > 25 && '...'}\r\n//                                         </span>\r\n//                                     </p>\r\n//                                     <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n//                                         <span className=\" flex-grow-1\">Project Head</span>\r\n//                                         <span className=\"text-primary\">\r\n//                                             {selectedTask?.Project_Head_Name}\r\n//                                         </span>\r\n//                                     </p>\r\n//                                 </div>\r\n//                                 <div className=\" d-md-block vr\" style={{ display: 'none' }}></div>\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                     </div>\r\n\r\n//                     <div className=\"text-end mt-2 mb-1\">\r\n//                         <Button onClick={stopTimer} color='error' variant='outlined' sx={{ marginRight: '10px' }}>cancel</Button>\r\n//                         <Button onClick={openWorkDialog} color='success' variant='contained'>Save</Button>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n// <Card variant='elevation'>\r\n\r\n\r\n//     <CardContent className=\"p-1\">\r\n//         {/* Header with Employee Dropdown for Admin */}\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-3 p-2 border rounded\">\r\n//             <div>\r\n             \r\n//             </div>\r\n            \r\n      \r\n//             {parseData?.UserTypeId == 0 && (\r\n//                 <div className=\"d-flex align-items-center\">\r\n//                     <span className=\"me-2 fw-bold\">Currently Viewing:</span>\r\n//                     <div className=\"dropdown\">\r\n//                         <button \r\n//                             className=\"btn btn-outline-primary dropdown-toggle\"\r\n//                             type=\"button\"\r\n//                             data-bs-toggle=\"dropdown\"\r\n//                             aria-expanded=\"false\"\r\n//                         >\r\n//                             {selectedEmployee ? selectedEmployee.name : parseData?.UserName || 'Select Employee'}\r\n//                         </button>\r\n//                         <ul className=\"dropdown-menu\">\r\n//                             <li>\r\n//                                 <button \r\n//                                     className=\"dropdown-item\"\r\n//                                     onClick={() => handleEmployeeSelect(null)}\r\n//                                 >\r\n//                                     <strong>My View ({parseData?.UserName})</strong>\r\n//                                 </button>\r\n//                             </li>\r\n//                             <li><hr className=\"dropdown-divider\" /></li>\r\n//                             {employees.map((emp, index) => (\r\n//                                 <li key={index}>\r\n//                                     <button \r\n//                                         className=\"dropdown-item\"\r\n//                                         onClick={() => handleEmployeeSelect(emp)}\r\n//                                     >\r\n//                                         {emp.name} - {emp.department}\r\n//                                     </button>\r\n//                                 </li>\r\n//                             ))}\r\n//                         </ul>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n\r\n//         <div className=\"d-lg-flex\">\r\n//             <div className=\"flex-grow-1 p-2\">\r\n//                 <CardHeader title='Assigned Task' className=\"text-center text-decoration-underline\" />\r\n\r\n//                 <FullCalendar\r\n//                     plugins={[timeGridPlugin, listPlugin]}\r\n//                     initialView=\"timeGridDay\"\r\n//                     initialDate={new Date()}\r\n//                     events={\r\n//                         myTasks.map(o => ({\r\n//                             title: o?.Task_Name,\r\n//                             start: queryDate.myTaskDate + 'T' + o?.Sch_Time,\r\n//                             end: queryDate.myTaskDate + 'T' + o?.EN_Time,\r\n//                             objectData: o\r\n//                         }))\r\n//                     }\r\n//                     headerToolbar={{\r\n//                         left: 'prev next',\r\n//                         center: 'title',\r\n//                         right: 'timeGridDay, listDay',\r\n//                     }}\r\n//                     slotDuration={'00:20:00'}\r\n//                     slotMinTime={'08:00:00'}\r\n//                     slotMaxTime={'22:00:00'}\r\n//                     showNonCurrentDates={false}\r\n//                     editable={false}\r\n//                     selectable\r\n//                     selectMirror\r\n//                     eventClick={eve => {\r\n//                         if (!startTime && elapsedTime === 0) {\r\n//                             const selObj = eve.event.extendedProps?.objectData;\r\n//                             if (Number(selObj?.Work_Status) !== 3 && Number(selObj?.Timer_Based) === 1) {\r\n//                                 setSelectedTask(selObj);\r\n//                                 setDialog(true);\r\n//                                 setWorkInput({\r\n//                                     Work_Id: selObj?.Work_Id,\r\n//                                     Project_Id: selObj?.Project_Id,\r\n//                                     Sch_Id: selObj?.Sch_Id,\r\n//                                     Task_Levl_Id: selObj?.Task_Levl_Id,\r\n//                                     Task_Id: selObj?.Task_Id,\r\n//                                     AN_No: selObj?.AN_No,\r\n//                                     Emp_Id: parseData?.UserId,\r\n//                                     Work_Done: selObj?.Work_Done,\r\n//                                     Start_Time: selObj?.Start_Time,\r\n//                                     End_Time: selObj?.End_Time,\r\n//                                     Work_Status: selObj?.Work_Status,\r\n//                                     Work_Dt: ISOString(selObj?.Work_Dt),\r\n//                                     Process_Id: Number(selObj?.Process_Id),\r\n//                                     Det_string: selObj?.Param_Dts\r\n//                                 })\r\n//                             } else if (Number(selObj?.Work_Status) !== 3) {\r\n//                                 setSelectedTask(selObj);\r\n//                                 setNonTimerWorkDialog(true);\r\n//                                 setNonTimerInput({\r\n//                                     Work_Id: selObj?.Work_Id ? selObj?.Work_Id : '',\r\n//                                     Project_Id: selObj?.Project_Id ? selObj?.Project_Id : '',\r\n//                                     Sch_Id: selObj?.Sch_Id ? selObj?.Sch_Id : '',\r\n//                                     Task_Levl_Id: selObj?.Task_Levl_Id ? selObj?.Task_Levl_Id : '',\r\n//                                     Task_Id: selObj?.Task_Id ? selObj?.Task_Id : '',\r\n//                                     AN_No: selObj?.AN_No ? selObj?.AN_No : '',\r\n//                                     Emp_Id: parseData?.UserId,\r\n//                                     Work_Done: selObj?.Work_Done ? selObj?.Work_Done : '',\r\n//                                     Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n//                                     End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n//                                     Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n//                                     Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n//                                     Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n//                                     Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n//                                 })\r\n//                             } else {\r\n//                                 toast.warn('This task is already completed')\r\n//                             }\r\n//                         } else {\r\n//                             toast.warn('Complete running task')\r\n//                         }\r\n//                     }}\r\n//                     eventContent={renderEventContent}\r\n//                     datesSet={obj => setQueryDate({ ...queryDate, myTaskDate: ISOString(obj.endStr) })}\r\n//                     height={1200}\r\n//                 />\r\n//             </div>\r\n\r\n//             <div className=\"flex-grow-1 p-2\">\r\n//                 <CardHeader title='Executed' className=\"text-center text-decoration-underline\" />\r\n\r\n//                 <FullCalendar\r\n//                     plugins={[timeGridPlugin, listPlugin]}\r\n//                     initialView=\"timeGridDay\"\r\n//                     initialDate={queryDate.executedTaskDate}\r\n//                     events={\r\n//                         workedDetais.map(o => ({\r\n//                             title: o?.Task_Name,\r\n//                             start: queryDate.executedTaskDate + 'T' + o?.Start_Time,\r\n//                             end: queryDate.executedTaskDate + 'T' + o?.End_Time,\r\n//                             objectData: o\r\n//                         }))\r\n//                     }\r\n//                     headerToolbar={{\r\n//                         left: 'prev next',\r\n//                         center: 'title',\r\n//                         right: 'timeGridDay, listWeek',\r\n//                     }}\r\n//                     slotDuration={'00:20:00'}\r\n//                     slotMinTime={'08:00:00'}\r\n//                     slotMaxTime={'22:00:00'}\r\n//                     showNonCurrentDates={false}\r\n//                     editable={false}\r\n//                     selectable\r\n//                     selectMirror\r\n//                     datesSet={obj => setQueryDate({ ...queryDate, executedTaskDate: ISOString(obj.endStr) })}\r\n//                     eventClick={eve => {\r\n//                         if (!startTime && elapsedTime === 0) {\r\n//                             const selObj = eve.event.extendedProps?.objectData;\r\n//                             if (ISOString(selObj?.Entry_Date) === ISOString()) {\r\n//                                 setIsEdit(true)\r\n//                                 if (Number(selObj?.Timer_Based) === 0) {\r\n//                                     setSelectedTask(selObj);\r\n//                                     setNonTimerWorkDialog(true)\r\n//                                     setNonTimerInput({\r\n//                                         Work_Id: selObj?.Work_Id,\r\n//                                         Project_Id: selObj?.Project_Id,\r\n//                                         Sch_Id: selObj?.Sch_Id,\r\n//                                         Task_Levl_Id: selObj?.Task_Levl_Id,\r\n//                                         Task_Id: selObj?.Task_Id,\r\n//                                         AN_No: selObj?.AN_No,\r\n//                                         Emp_Id: parseData?.UserId,\r\n//                                         Work_Done: selObj?.Work_Done,\r\n//                                         Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n//                                         End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n//                                         Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n//                                         Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n//                                         Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n//                                         Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n//                                     })\r\n//                                 } else {\r\n//                                     setSelectedTask(selObj);\r\n//                                     setWorkDialog(true)\r\n//                                     setWorkInput({\r\n//                                         Work_Id: selObj?.Work_Id,\r\n//                                         Project_Id: selObj?.Project_Id,\r\n//                                         Sch_Id: selObj?.Sch_Id,\r\n//                                         Task_Levl_Id: selObj?.Task_Levl_Id,\r\n//                                         Task_Id: selObj?.Task_Id,\r\n//                                         AN_No: selObj?.AN_No,\r\n//                                         Emp_Id: parseData?.UserId,\r\n//                                         Work_Done: selObj?.Work_Done,\r\n//                                         Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n//                                         End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n//                                         Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n//                                         Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n//                                         Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n//                                         Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : []\r\n//                                     })\r\n//                                 }\r\n//                             } else {\r\n//                                 toast.warn('You can only modify today works')\r\n//                             }\r\n//                         } else {\r\n//                             toast.warn('Complete running task')\r\n//                         }\r\n//                     }}\r\n//                     height={1200}\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n\r\n//         <div className=\"table-responsive mt-3\">\r\n//             <div className=\"d-flex justify-content-between border align-items-center p-2 rounded-3 mb-3\" onClick={openUnAssignedTaskDialog}>\r\n//                 <span className=\"ps-2\">Work Done At: {new Date(queryDate?.executedTaskDate).toLocaleDateString('en-IN')}</span>\r\n//                 <button className=\"btn btn-primary fa-14\"> Add Additional Work Details</button>\r\n//             </div>\r\n\r\n//             <table className=\"table mb-1\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th className=\"fa-13 border\">SNo</th>\r\n//                         <th className=\"fa-13 border\">Task</th>\r\n//                         <th className=\"fa-13 border\">Timer Based</th>\r\n//                         <th className=\"fa-13 border\">Start - End</th>\r\n//                         <th className=\"fa-13 border\">Total Minutes</th>\r\n//                         <th className=\"fa-13 border\">Status</th>\r\n//                         <th className=\"fa-13 border\">Discription</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {workedDetais.map((o, i) => (\r\n//                         <tr key={i}>\r\n//                             <td className=\"fa-13 border\">{i + 1}</td>\r\n//                             <td className=\"fa-13 border\">{o?.Task_Name}</td>\r\n//                             <td className=\"fa-13 border text-center\">\r\n//                                 <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\r\n//                                     {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\r\n//                                 </span>\r\n//                             </td>\r\n//                             <td className=\"fa-13 border text-center\">{o?.Start_Time} - {o?.End_Time}</td>\r\n//                             <td className=\"fa-13 border text-center\">{o?.Tot_Minutes}</td>\r\n//                             <td className=\"fa-13 border text-center\">\r\n//                                 <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Status)}`}>\r\n//                                     {o?.WorkStatus}\r\n//                                 </span>\r\n//                             </td>\r\n//                             <td className=\"fa-13 border\">{o?.Work_Done}</td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </table>\r\n//         </div>\r\n\r\n//         <TabContext value={tabValue}>\r\n//             <Box sx={{ borderBottom: 1, borderColor: 'divider', display: 'none' }}>\r\n//                 <TabList indicatorColor='secondary' textColor='secondary' onChange={(e, n) => setTabValue(n)} aria-label=\"\">\r\n//                     <Tab sx={tabValue === '1' ? { backgroundColor: '#c6d7eb' } : {}} label={`TODAY TASKS (${myTasks.length})`} value='1' />\r\n//                     <Tab sx={tabValue === '2' ? { backgroundColor: '#c6d7eb' } : {}} label={`EXECUTED (${workedDetais.length})`} value='2' />\r\n//                 </TabList>\r\n//             </Box>\r\n\r\n//             <TabPanel value={'1'} sx={{ p: 0, pt: 2 }}>\r\n//                 {/* Content for tab 1 */}\r\n//             </TabPanel>\r\n\r\n//             <TabPanel value={'2'} sx={{ p: 0, pt: 2 }}>\r\n//                 {/* Content for tab 2 */}\r\n//             </TabPanel>\r\n//         </TabContext>\r\n//     </CardContent>\r\n// </Card>\r\n\r\n//             <Dialog\r\n//                 open={dialog}\r\n//                 onClose={() => { setDialog(false); setSelectedTask({}) }}>\r\n//                 <DialogTitle className=\"fa-18\">\r\n//                     Start Task\r\n//                     <span className=\"text-primary fw-bold\"> {selectedTask?.Task_Name}</span>\r\n//                 </DialogTitle>\r\n//                 <DialogContent sx={{ minWidth: '330px' }}>\r\n\r\n//                     <div className=\" pb-3\">\r\n\r\n//                         <p className=\"mb-0 text-center\">\r\n//                             <AccessAlarm sx={{ fontSize: '50px' }} />\r\n//                         </p>\r\n\r\n//                         <p className=\"mb-0 text-center\">\r\n//                             Allocated Time\r\n//                         </p>\r\n\r\n//                         <p className=\"my-2 text-center text-primary\">{selectedTask?.Sch_Period} Hrs</p>\r\n\r\n//                     </div>\r\n\r\n//                     <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n//                         <span className=\" flex-grow-1\">Schedule</span>\r\n//                         <span>\r\n//                             {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n//                             &nbsp;-&nbsp;\r\n//                             {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n//                         </span>\r\n//                     </p>\r\n\r\n//                     <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n//                         <span className=\" flex-grow-1\">Project</span>\r\n//                         <span>\r\n//                             {selectedTask?.Project_Name?.slice(0, 25)}\r\n//                             {selectedTask?.Project_Name?.length > 25 && '...'}\r\n//                         </span>\r\n//                     </p>\r\n\r\n//                     <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n//                         <span className=\" flex-grow-1\">Project Head</span>\r\n//                         <span>\r\n//                             {selectedTask?.Project_Head_Name}\r\n//                         </span>\r\n//                     </p>\r\n\r\n//                     <div className=\" text-center\">\r\n//                         <button\r\n//                             onClick={!isRunning ? startTimer : stopTimer}\r\n//                             className=\"clock-btn cus-shadow\" style={!isRunning ? { backgroundColor: '#b5e6dd' } : { backgroundColor: '#D8BFD8' }}>\r\n//                             {!isRunning ? 'Start' : 'Stop'}\r\n//                         </button>\r\n//                     </div>\r\n\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={() => { setDialog(false); setSelectedTask({}) }}>close</Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n\r\n//             <Dialog\r\n//                 open={workDialog}\r\n//                 onClose={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false); }}\r\n//                 fullWidth maxWidth='sm'>\r\n//                 <DialogTitle>Save Work</DialogTitle>\r\n//                 <form onSubmit={e => {\r\n//                     e.preventDefault();\r\n//                     saveWork()\r\n//                 }}>\r\n//                     <DialogContent>\r\n//                         <label className=\"my-2\">Process</label>\r\n//                         <select\r\n//                             className=\"cus-inpt\"\r\n//                             value={workInput.Process_Id || ''}\r\n//                             onChange={e => setWorkInput({ ...workInput, Process_Id: e.target.value })}\r\n//                         >\r\n//                             <option value=\"\">Select Process</option>\r\n//                             {processDetails.map(process => (\r\n//                                 <option key={process.Id} value={process.Id}>\r\n//                                     {process.Process_Name}\r\n//                                 </option>\r\n//                             ))}\r\n//                         </select>\r\n\r\n//                         <label className=\"my-2\">Work Status</label>\r\n//                         <select\r\n//                             className=\"cus-inpt\"\r\n//                             value={workInput.Work_Status} required\r\n//                             onChange={e => setWorkInput({ ...workInput, Work_Status: e.target.value })}>\r\n//                             <option value={2}>PENDING</option>\r\n//                             <option value={3}>COMPLETED</option>\r\n//                         </select>\r\n\r\n//                         <label className=\"my-2\">Work Summary</label>\r\n//                         <textarea\r\n//                             rows=\"4\"\r\n//                             className=\"cus-inpt\" required\r\n//                             value={workInput.Work_Done}\r\n//                             onChange={e => setWorkInput({ ...workInput, Work_Done: e.target.value })} />\r\n\r\n//                         {selectedTask?.Param_Dts?.map((param, index) => (\r\n//                             <div key={index}>\r\n//                                 <label className=\"mt-2 mb-1\">{param?.Paramet_Name}</label>\r\n//                                 <input\r\n//                                     type={param?.Paramet_Data_Type || 'text'}\r\n//                                     className=\"cus-inpt\"\r\n//                                     onChange={(e) => handleInputChange(e, param)}\r\n//                                     value={workInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n//                                     placeholder={param?.Paramet_Data_Type}\r\n//                                 />\r\n//                             </div>\r\n//                         ))}\r\n//                     </DialogContent>\r\n//                     <DialogActions>\r\n//                         <Button\r\n//                             variant='outlined'\r\n//                             type='button'\r\n//                             onClick={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false) }}>\r\n//                             close\r\n//                         </Button>\r\n//                         <Button\r\n//                             color='success'\r\n//                             type='submit'\r\n//                             variant='contained'>\r\n//                             Save\r\n//                         </Button>\r\n//                     </DialogActions>\r\n//                 </form>\r\n//             </Dialog>\r\n\r\n//             <Dialog\r\n//                 open={nonTimerWorkDialog} maxWidth=\"sm\" fullWidth\r\n//                 onClose={() => { setNonTimerWorkDialog(false); setNonTimerInput(initialWorkSaveValue); setIsEdit(false) }} >\r\n//                 <DialogTitle>Save Task Progress</DialogTitle>\r\n//                 <form onSubmit={saveNonTimerBasedTask}>\r\n//                     <DialogContent className=\"table-responsive\">\r\n//                         <table className=\"table\">\r\n//                             <tbody>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Completed Date\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Dt: e.target.value })}\r\n//                                             value={ISOString(nonTimerInput?.Work_Dt)}\r\n//                                             className=\"cus-inpt\" required />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Start Time\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"time\"\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, Start_Time: e.target.value })}\r\n//                                             value={nonTimerInput?.Start_Time}\r\n//                                             className=\"cus-inpt\" required />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         End Time\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"time\"\r\n//                                             min={nonTimerInput?.Start_Time}\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, End_Time: e.target.value })}\r\n//                                             value={nonTimerInput?.End_Time} required\r\n//                                             className=\"cus-inpt\" />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Work Status\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <select\r\n//                                             className=\"cus-inpt\"\r\n//                                             value={nonTimerInput?.Work_Status}\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Status: e.target.value })}\r\n//                                         >\r\n//                                             <option value={2}>PENDING</option>\r\n//                                             <option value={3}>COMPLETED</option>\r\n//                                         </select>\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Process\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <select\r\n//                                             className=\"cus-inpt\"\r\n//                                             value={nonTimerInput.Process_Id || ''}\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, Process_Id: e.target.value })}\r\n//                                         >\r\n//                                             <option value=\"\">Select Process</option>\r\n//                                             {processDetails.map(process => (\r\n//                                                 <option key={process.Id} value={process.Id}>\r\n//                                                     {process.Process_Name}\r\n//                                                 </option>\r\n//                                             ))}\r\n//                                         </select>\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14 pt-3\">\r\n//                                         Work Summary\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <textarea\r\n//                                             rows=\"4\"\r\n//                                             className=\"cus-inpt\" required\r\n//                                             value={nonTimerInput?.Work_Done}\r\n//                                             onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Done: e.target.value })} />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 {selectedTask?.Param_Dts?.map((param, index) => (\r\n//                                     <tr key={index}>\r\n//                                         <td className=\"border-0 fa-14 pt-3\">{param?.Paramet_Name}</td>\r\n//                                         <td className=\"border-0 fa-14\">\r\n//                                             <input\r\n//                                                 type={param?.Paramet_Data_Type || 'text'}\r\n//                                                 className=\"cus-inpt\"\r\n//                                                 onChange={(e) => handleNonTimerInputChange(e, param)}\r\n//                                                 value={nonTimerInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n//                                                 placeholder={param?.Paramet_Data_Type}\r\n//                                             />\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 ))}\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </DialogContent>\r\n//                     <DialogActions>\r\n//                         <Button\r\n//                             variant='outlined' color=\"error\" type='button'\r\n//                             onClick={() => { setNonTimerWorkDialog(false); setNonTimerInput(initialWorkSaveValue); setIsEdit(false) }}>\r\n//                             cancel\r\n//                         </Button>\r\n//                         <Button\r\n//                             variant='contained' color='success' type='submit'>\r\n//                             Save\r\n//                         </Button>\r\n//                     </DialogActions>\r\n//                 </form>\r\n//             </Dialog>\r\n\r\n//             <Dialog\r\n//                 open={additionalTaskDialog} maxWidth=\"sm\" fullWidth\r\n//                 onClose={() => { setAdditionalTaskDialog(false); setIsEdit(false) }} >\r\n//                 <DialogTitle>Additional Tasks</DialogTitle>\r\n//                 <form onSubmit={saveUnAssignedTask}>\r\n//                     <DialogContent className=\"table-responsive\">\r\n//                         <table className=\"table\">\r\n//                             <tbody>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Process\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <select\r\n//                                             className=\"cus-inpt\"\r\n//                                             value={additionalTaskInput.Process_Id || ''}\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Process_Id: e.target.value })}\r\n//                                         >\r\n//                                             <option value=\"\">Select Process</option>\r\n//                                             {processDetails.map(process => (\r\n//                                                 <option key={process.Id} value={process.Id}>\r\n//                                                     {process.Process_Name}\r\n//                                                 </option>\r\n//                                             ))}\r\n//                                         </select>\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Completed Date\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"date\"\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Dt: e.target.value })}\r\n//                                             value={ISOString(additionalTaskInput?.Work_Dt)}\r\n//                                             className=\"cus-inpt\" required />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Start Time\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"time\"\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Start_Time: e.target.value })}\r\n//                                             value={additionalTaskInput?.Start_Time}\r\n//                                             className=\"cus-inpt\" required />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         End Time\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <input\r\n//                                             type=\"time\"\r\n//                                             min={additionalTaskInput?.Start_Time}\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, End_Time: e.target.value })}\r\n//                                             value={additionalTaskInput?.End_Time} required\r\n//                                             className=\"cus-inpt\" />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n//                                         Work Status\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <select\r\n//                                             className=\"cus-inpt\"\r\n//                                             value={additionalTaskInput?.Work_Status}\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Status: e.target.value })}\r\n//                                         >\r\n//                                             <option value={2}>PENDING</option>\r\n//                                             <option value={3}>COMPLETED</option>\r\n//                                         </select>\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-0 fa-14 pt-3\">\r\n//                                         Work Summary\r\n//                                     </td>\r\n//                                     <td className=\"border-0 fa-14\">\r\n//                                         <textarea\r\n//                                             rows=\"4\"\r\n//                                             className=\"cus-inpt\" required\r\n//                                             value={additionalTaskInput?.Work_Done}\r\n//                                             onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Done: e.target.value })} />\r\n//                                     </td>\r\n//                                 </tr>\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </DialogContent>\r\n//                     <DialogActions>\r\n//                         <Button\r\n//                             variant='outlined' color=\"error\" type='button'\r\n//                             onClick={() => { setAdditionalTaskDialog(false); setIsEdit(false) }}>\r\n//                             cancel\r\n//                         </Button>\r\n//                         <Button\r\n//                             variant='contained' color='success' type='submit'>\r\n//                             Save\r\n//                         </Button>\r\n//                     </DialogActions>\r\n//                 </form>\r\n//             </Dialog>\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default TodayTasks;\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Tab, Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, CardHeader } from '@mui/material';\r\nimport { TabPanel, TabList, TabContext } from '@mui/lab';\r\nimport { AccessAlarm, } from \"@mui/icons-material\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport listPlugin from '@fullcalendar/list';\r\nimport { Card, CardContent } from '@mui/material';\r\nimport { ISOString } from '../../Components/functions'\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport Select from 'react-select';\r\n\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\n\r\n\r\nconst statusColor = (id) => {\r\n    const numId = Number(id);\r\n    const color = ['bg-dark', 'bg-info', 'bg-warning', 'bg-success', 'bg-danger'];\r\n    return color[numId]\r\n}\r\n\r\nconst formatTime24 = (time24) => {\r\n    const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n    let hours12 = hours % 12;\r\n    hours12 = hours12 || 12;\r\n    const period = hours < 12 ? 'AM' : 'PM';\r\n    const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n    const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n    return time12;\r\n}\r\n\r\nconst formatTime = (milliseconds) => {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n\r\n    const formatNumber = (number) => {\r\n        return number < 10 ? `0${number}` : number;\r\n    };\r\n\r\n    return `${formatNumber(hours)}:${formatNumber(minutes % 60)}:${formatNumber(seconds % 60)}`;\r\n};\r\n\r\nfunction timeToMilliseconds(timeString) {\r\n    const [hours, minutes] = timeString.split(':').map(Number);\r\n    const totalMinutes = (hours * 60) + minutes;\r\n    const milliseconds = totalMinutes * 60000;\r\n\r\n    return milliseconds;\r\n}\r\n\r\nfunction millisecondsToTime(milliseconds) {\r\n    const date = new Date(milliseconds);\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    const formattedHours = hours < 10 ? '0' + hours : hours;\r\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n    return formattedHours + ':' + formattedMinutes;\r\n}\r\n\r\nfunction addTimes(time1, time2) {\r\n    const [hours1, minutes1] = time1.split(':').map(Number);\r\n    const [hours2, minutes2] = time2.split(':').map(Number);\r\n    let totalHours = hours1 + hours2;\r\n    let totalMinutes = minutes1 + minutes2;\r\n    if (totalMinutes >= 60) {\r\n        totalHours += Math.floor(totalMinutes / 60);\r\n        totalMinutes %= 60;\r\n    }\r\n    const formattedHours = totalHours < 10 ? '0' + totalHours : totalHours;\r\n    const formattedMinutes = totalMinutes < 10 ? '0' + totalMinutes : totalMinutes;\r\n    return formattedHours + ':' + formattedMinutes;\r\n}\r\n\r\n\r\nfunction arrayToXml(array) {\r\n    if (!array || !Array.isArray(array) || array.length === 0) {\r\n        return null;\r\n    }\r\n    \r\n    try {\r\n        let xml = '<DocumentElement>';\r\n        for (let obj of array) {\r\n      \r\n            if (obj && obj.Param_Id) {\r\n                xml += '<Data>';\r\n                xml += `<Task_Id>${obj?.Task_Id ? String(obj.Task_Id) : 0}</Task_Id>`;\r\n                xml += `<Param_Id>${String(obj.Param_Id)}</Param_Id>`;\r\n                xml += `<Default_Value>${obj?.Default_Value ? escapeXml(String(obj.Default_Value)) : ''}</Default_Value>`;\r\n                xml += `<Current_Value>${obj?.Current_Value ? escapeXml(String(obj.Current_Value)) : ''}</Current_Value>`;\r\n                xml += '</Data>';\r\n            }\r\n        }\r\n        xml += '</DocumentElement>';\r\n        \r\n        return xml === '<DocumentElement></DocumentElement>' ? null : xml;\r\n    } catch (error) {\r\n        console.error('Error generating XML:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nfunction escapeXml(unsafe) {\r\n    if (!unsafe) return '';\r\n    return unsafe.replace(/[<>&'\"]/g, function (c) {\r\n        switch (c) {\r\n            case '<': return '&lt;';\r\n            case '>': return '&gt;';\r\n            case '&': return '&amp;';\r\n            case '\\'': return '&apos;';\r\n            case '\"': return '&quot;';\r\n            default: return c;\r\n        }\r\n    });\r\n}\r\n\r\nconst TodayTasks = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const initialWorkSaveValue = {\r\n        Work_Id: '',\r\n        Project_Id: '',\r\n        Sch_Id: '',\r\n        Task_Levl_Id: '',\r\n        Task_Id: '',\r\n        AN_No: '',\r\n        Emp_Id: parseData?.UserId,\r\n        Work_Done: '',\r\n        Start_Time: '',\r\n        End_Time: '',\r\n        Work_Status: 2,\r\n        Work_Dt: ISOString(),\r\n        Process_Id: 0,\r\n        Det_string: []\r\n    }\r\n    const additionalTaskInitialValue = {\r\n        Work_Id: '',\r\n        Project_Id: 1,\r\n        Sch_Id: 1,\r\n        Task_Levl_Id: 1,\r\n        Task_Id: 1,\r\n        AN_No: 0,\r\n        Emp_Id: parseData?.UserId,\r\n        Work_Done: '',\r\n        Start_Time: '12:00',\r\n        End_Time: '14:00',\r\n        Work_Status: 3,\r\n        Work_Dt: ISOString(),\r\n        Process_Id: 0,\r\n        Det_string: [],\r\n        ProjectName:'',\r\n        TaskName:''\r\n    }\r\n    const [myTasks, setMyTasks] = useState([]);\r\n    const [workedDetais, setWorkedDetais] = useState([]);\r\n    const [queryDate, setQueryDate] = useState({\r\n        myTaskDate: ISOString(),\r\n        executedTaskDate: ISOString()\r\n    });\r\n    const [reload, setReload] = useState(false);\r\n    const [tabValue, setTabValue] = useState('1');\r\n    const [dialog, setDialog] = useState(false);\r\n    const [workDialog, setWorkDialog] = useState(false);\r\n    const [nonTimerWorkDialog, setNonTimerWorkDialog] = useState(false);\r\n    const [additionalTaskDialog, setAdditionalTaskDialog] = useState(false);\r\n    const [selectedTask, setSelectedTask] = useState({});\r\n    const [runningTaskId, setRunningTaskId] = useState(0);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n\r\n    const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n    const [employees, setEmployees] = useState([]);\r\n\r\n    const [startTime, setStartTime] = useState(null);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [workInput, setWorkInput] = useState(initialWorkSaveValue);\r\n    const [additionalTaskInput, setAdditionalTaskInput] = useState(additionalTaskInitialValue)\r\n    const [nonTimerInput, setNonTimerInput] = useState({\r\n        ...initialWorkSaveValue,\r\n        Process_Id: 0,\r\n        Start_Time: '10:00',\r\n        End_Time: '11:00',\r\n    })\r\n\r\n    const [processDetails, setProcessDetails] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (parseData?.UserTypeId == 0 || parseData?.UserTypeId ==1) {\r\n    \r\n            fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData?.Company_id}` \r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setEmployees(data.data || []);\r\n                }\r\n            }).catch(e => console.error('Error fetching employees:', e));\r\n        }\r\n    }, [parseData?.UserTypeId]);\r\n\r\n    useEffect(() => {\r\n        // const empId = selectedEmployee ? selectedEmployee.id : parseData?.UserId;\r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/tasks/myTasks?Emp_Id=${empId}&reqDate=${queryDate.myTaskDate}`\r\n        }).then(data => {\r\n            setMyTasks(data.success ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n    }, [reload, queryDate.myTaskDate, parseData?.UserId, selectedEmployee])\r\n\r\n    const handleEmployeeSelect = (employee) => {\r\n        setSelectedEmployee(employee);\r\n        \r\n        if (employee) {\r\n            console.log('Loading data for employee:', employee.name);\r\n          \r\n        } else {\r\n            console.log('Loading my data');\r\n         \r\n        }\r\n        setReload(!reload);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/processMaster/dropDown`\r\n        }).then(data => {\r\n            setProcessDetails(data.success ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n    }, [reload])\r\n\r\n    useEffect(() => {\r\n \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n      \r\n        fetchLink({\r\n            address: `taskManagement/task/workDetails?Emp_Id=${empId}&from=${queryDate.executedTaskDate}&to=${queryDate.executedTaskDate}`\r\n        }).then(data => {\r\n            setWorkedDetais(data.success ? data.data : [])\r\n        }).catch(e => console.error(e))\r\n    }, [reload, queryDate.executedTaskDate, parseData?.UserId, selectedEmployee])\r\n\r\n    useEffect(() => {\r\n  \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask?Emp_Id=${empId}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const time = data.data[0].Time ? Number(data.data[0].Time) : null;\r\n                const taskId = data?.data[0]?.Task_Id ? Number(data?.data[0]?.Task_Id) : 0\r\n                setStartTime(time);\r\n                setRunningTaskId(taskId)\r\n            } else {\r\n                setStartTime(null)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [reload, parseData?.UserId, selectedEmployee])\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (startTime) {\r\n                const currentTime = new Date().getTime();\r\n                const elapsed = currentTime - parseInt(startTime);\r\n                setElapsedTime(elapsed);\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [startTime]);\r\n\r\n    useEffect(() => {\r\n        if (startTime && myTasks.length > 0) {\r\n            const setRunning = myTasks.find(task => Number(task.Task_Levl_Id) === Number(runningTaskId))\r\n            setSelectedTask(setRunning)\r\n        }\r\n    }, [startTime, myTasks, reload, runningTaskId])\r\n\r\n    const startTimer = () => {\r\n     \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Emp_Id: empId,\r\n                Time: new Date().getTime(),\r\n                Task_Id: selectedTask?.Task_Levl_Id,\r\n                ForcePost: 0\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message)\r\n                setReload(!reload)\r\n                setIsRunning(true);\r\n                setDialog(false)\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    };\r\n\r\n    const stopTimer = () => {\r\n      \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/startTask`,\r\n            method: 'DELETE',\r\n            bodyData: {\r\n                Emp_Id: empId,\r\n                Mode: 1\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message)\r\n                setStartTime(null);\r\n                setIsRunning(false);\r\n                setElapsedTime(0);\r\n                setSelectedTask({})\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    };\r\n\r\n    const progressFun = (end) => {\r\n        const currentTime = new Date().getTime();\r\n        const elapsed = currentTime - parseInt(startTime);\r\n        const totalDuration = end;\r\n\r\n        if (elapsed && totalDuration && elapsed < totalDuration) {\r\n            return (elapsed / totalDuration) * 100;\r\n        } else if (elapsed && totalDuration && elapsed >= totalDuration) {\r\n            return 100;\r\n        } else {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e, param) => {\r\n        const updatedValue = e.target.value;\r\n        setWorkInput((prevWorkInput) => {\r\n            const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n            if (indexValue !== -1) {\r\n                const updatedDetString = [...prevWorkInput.Det_string];\r\n                updatedDetString[indexValue] = {\r\n                    ...updatedDetString[indexValue],\r\n                    Current_Value: updatedValue,\r\n                    Param_Id: param.Param_Id,\r\n                    Default_Value: param.Default_Value,\r\n                    Task_Id: param?.Task_Id\r\n                };\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: updatedDetString\r\n                };\r\n            } else {\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: [\r\n                        ...prevWorkInput.Det_string,\r\n                        {\r\n                            Current_Value: updatedValue,\r\n                            Param_Id: param.Param_Id,\r\n                            Default_Value: param.Default_Value,\r\n                            Task_Id: selectedTask?.Task_Id\r\n                        }\r\n                    ]\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleNonTimerInputChange = (e, param) => {\r\n        const updatedValue = e.target.value;\r\n        setNonTimerInput((prevWorkInput) => {\r\n            const indexValue = prevWorkInput?.Det_string?.findIndex(item => Number(item.Param_Id) === Number(param.Param_Id));\r\n\r\n            if (indexValue !== -1) {\r\n                const updatedDetString = [...prevWorkInput.Det_string];\r\n                updatedDetString[indexValue] = {\r\n                    ...updatedDetString[indexValue],\r\n                    Current_Value: updatedValue,\r\n                    Param_Id: param?.Param_Id,\r\n                    Default_Value: param?.Default_Value,\r\n                    Task_Id: param?.Task_Id\r\n                };\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: updatedDetString\r\n                };\r\n            } else {\r\n                return {\r\n                    ...prevWorkInput,\r\n                    Det_string: [\r\n                        ...prevWorkInput.Det_string,\r\n                        {\r\n                            Current_Value: updatedValue,\r\n                            Param_Id: param?.Param_Id,\r\n                            Default_Value: param?.Default_Value,\r\n                            Task_Id: param?.Task_Id\r\n                        }\r\n                    ]\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    const renderEventContent = (eventInfo) => {\r\n        const obj = eventInfo.event.extendedProps.objectData;\r\n        const status = obj.Work_Status ? Number(obj.Work_Status) : 0;\r\n        const message = [\r\n            {\r\n                color: 'bg-warning',\r\n                message: 'New',\r\n                text: 'text-dark'\r\n            },\r\n            {\r\n                color: 'bg-warning',\r\n                message: 'New',\r\n                text: 'text-dark'\r\n            },\r\n            {\r\n                color: 'bg-primary',\r\n                message: 'on Progress',\r\n                text: 'text-white'\r\n            },\r\n            {\r\n                color: 'bg-success',\r\n                message: 'Completed',\r\n                text: 'text-white'\r\n            },\r\n        ]\r\n        return (\r\n            <div style={{ cursor: 'pointer' }}>\r\n                <p className=\"mb-0\">\r\n                    <span>{eventInfo.event.title} </span>\r\n                    <span>{formatTime24(obj?.Sch_Time) + ' - ' + formatTime24(obj?.EN_Time)} </span>\r\n                    <span className={`badge text-dark ${message[status].color} ${message[status].text} mx-1`}>\r\n                        {message[status].message}\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const openWorkDialog = (val) => {\r\n        setWorkInput(initialWorkSaveValue);\r\n        setWorkDialog(true)\r\n    }\r\n\r\n    const saveWork = () => {\r\n\r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        const detStringXml = workInput?.Det_string && workInput.Det_string.length > 0 \r\n            ? arrayToXml(workInput.Det_string) \r\n            : null;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Mode: isEdit ? 2 : 1,\r\n                Work_Id: isEdit ? workInput?.Work_Id : 0,\r\n                Project_Id: selectedTask?.Project_Id,\r\n                Sch_Id: selectedTask?.Sch_Id,\r\n                Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n                Task_Id: selectedTask?.Task_Id,\r\n                AN_No: selectedTask?.AN_No,\r\n                Emp_Id: empId,\r\n                ProjectName:workInput?.ProjectName,\r\n                TaskName:workInput?.TaskName,\r\n                Work_Done: workInput?.Work_Done,\r\n                Process_Id: Number(workInput?.Process_Id) || 0,\r\n                Start_Time: isEdit ? workInput.Start_Time : millisecondsToTime(startTime),\r\n                End_Time: isEdit ? workInput.End_Time : addTimes(millisecondsToTime(startTime), formatTime(elapsedTime)),\r\n                Work_Status: workInput?.Work_Status,\r\n                Det_string: detStringXml \r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSelectedTask({});\r\n                toast.success(data.message);\r\n                setWorkDialog(false); \r\n                setIsEdit(false);\r\n                setReload(!reload); \r\n                setElapsedTime(0); \r\n                setIsRunning(false); \r\n                setStartTime(null);\r\n            } else {\r\n                console.log(data.message)\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const saveNonTimerBasedTask = (e) => {\r\n        e.preventDefault();\r\n \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        \r\n        const detStringXml = nonTimerInput?.Det_string && nonTimerInput.Det_string.length > 0 \r\n            ? arrayToXml(nonTimerInput.Det_string) \r\n            : null;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                Mode: isEdit ? 2 : 1,\r\n                Work_Id: isEdit ? nonTimerInput?.Work_Id : 0,\r\n                Project_Id: selectedTask?.Project_Id,\r\n                Sch_Id: selectedTask?.Sch_Id,\r\n                Task_Levl_Id: selectedTask?.Task_Levl_Id,\r\n                Task_Id: selectedTask?.Task_Id,\r\n                AN_No: selectedTask?.AN_No,\r\n                Emp_Id: empId,\r\n                Process_Id: Number(nonTimerInput?.Process_Id) || 0,\r\n                Work_Dt: nonTimerInput?.Work_Dt,\r\n                Work_Done: nonTimerInput?.Work_Done,\r\n                Start_Time: nonTimerInput?.Start_Time,\r\n                End_Time: nonTimerInput?.End_Time,\r\n                Work_Status: nonTimerInput?.Work_Status,\r\n                Det_string: detStringXml\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setSelectedTask({});\r\n                toast.success(data.message);\r\n                setNonTimerWorkDialog(false);\r\n                setReload(!reload); \r\n                setIsEdit(false); \r\n                setStartTime(null);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    const openUnAssignedTaskDialog = () => {\r\n        setAdditionalTaskInput(additionalTaskInitialValue);\r\n        setAdditionalTaskDialog(true);\r\n    }\r\n\r\n    const saveUnAssignedTask = (e) => {\r\n        e.preventDefault();\r\n    \r\n        const empId = selectedEmployee ? selectedEmployee.UserId : parseData?.UserId;\r\n\r\n        \r\n        const detStringXml = additionalTaskInput?.Det_string && additionalTaskInput.Det_string.length > 0 \r\n            ? arrayToXml(additionalTaskInput.Det_string) \r\n            : null;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/work`,\r\n            method: 'POST',\r\n            bodyData: {\r\n                ...additionalTaskInput,\r\n                Emp_Id: empId,\r\n                Mode: 1,\r\n                Process_Id: Number(additionalTaskInput?.Process_Id),\r\n                Det_string: detStringXml\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                setAdditionalTaskDialog(false);\r\n                setReload(!reload); \r\n                setIsEdit(false)\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n\r\n            {startTime && (\r\n                <div className=\"cus-card rounded-2 shadow-none px-3 py-1 mb-3\">\r\n                    <h5 className=\"mb-0 pt-2\">Running Task</h5>\r\n\r\n                    <div className=\"cus-card bg-light p-3 shadow-none rounded-1\">\r\n\r\n                        <p className=\"mb-0 fa-16 fw-bold pb-1 border-bottom\">\r\n                            <span className=\"flex-grow-1\">{selectedTask?.Task_Name || ' No Active Task '}</span>\r\n                        </p>\r\n\r\n                        <div className=\"row mt-2 flex-row-reverse\">\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"p-2 pb-0\">\r\n                                    <p className=\"fa-20 d-flex mb-1\">\r\n                                        <span className=\"flex-grow-1\">Duration : </span>\r\n                                        <span className=\"text-primary\">{formatTime(elapsedTime)}</span>\r\n                                    </p>\r\n                                    <p className=\"mb-0 d-flex\">\r\n                                        <span className=\"flex-grow-1\">Progress : </span>\r\n                                        {progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)?.toFixed(2) + ' %'}\r\n                                    </p>\r\n                                    <span className=\"p-2 w-100\">\r\n                                        <div style={{ backgroundColor: '#ddd' }} className=\"rounded-4 overflow-hidden\">\r\n                                            <div\r\n                                                style={{\r\n                                                    width: `${progressFun(selectedTask?.Sch_Period ? timeToMilliseconds(selectedTask?.Sch_Period) : 0)}%`,\r\n                                                    backgroundColor: '#007bff',\r\n                                                    height: '14px'\r\n                                                }} />\r\n                                        </div>\r\n                                        <p className=\"mb-0 d-flex justify-content-between fa-12\">\r\n                                            <span>0%</span>\r\n                                            <span>100%</span>\r\n                                        </p>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6 d-flex\">\r\n                                <div className=\"p-2 flex-grow-1\">\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Scheduled Time</span>\r\n                                        <span>\r\n                                            {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n                                            &nbsp; - &nbsp;\r\n                                            {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Total Hour</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Sch_Period} Hrs\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Project</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Project_Name?.slice(0, 25)}\r\n                                            {selectedTask?.Project_Name?.length > 25 && '...'}\r\n                                        </span>\r\n                                    </p>\r\n                                    <p className=\"fa-14 mt-1 mb-0 d-flex\">\r\n                                        <span className=\" flex-grow-1\">Project Head</span>\r\n                                        <span className=\"text-primary\">\r\n                                            {selectedTask?.Project_Head_Name}\r\n                                        </span>\r\n                                    </p>\r\n                                </div>\r\n                                <div className=\" d-md-block vr\" style={{ display: 'none' }}></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"text-end mt-2 mb-1\">\r\n                        <Button onClick={stopTimer} color='error' variant='outlined' sx={{ marginRight: '10px' }}>cancel</Button>\r\n                        <Button onClick={openWorkDialog} color='success' variant='contained'>Save</Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <Card variant='elevation'>\r\n                <CardContent className=\"p-1\">\r\n                \r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3 p-2 border rounded\">\r\n                        <div>\r\n                            <h5 className=\"mb-0\">Task Management Dashboard</h5>\r\n                            \r\n                        </div>\r\n                        \r\n            \r\n\r\n{(parseData?.UserTypeId == 0 || parseData?.UserTypeId==1) && (\r\n  <div className=\"d-flex align-items-center\">\r\n      <span className=\"me-2 fw-bold\">Currently Viewing:</span>\r\n  <Select\r\n    value={{\r\n      value: selectedEmployee?.UserId || null,\r\n      label: selectedEmployee?.Name || `My View (${parseData?.UserName})`\r\n    }}\r\n    onChange={(e) =>\r\n      handleEmployeeSelect(\r\n        e.value ? employees.find(emp => emp.UserId == e.value) : null\r\n      )\r\n    }\r\n    options={[\r\n      { value: null, label: `My View (${parseData?.UserName})` },\r\n      ...employees.map(emp => ({ value: emp.UserId, label: emp.Name }))\r\n    ]}\r\n    styles={customSelectStyles}\r\n    isSearchable={true}\r\n    placeholder=\"Select Employee\"\r\n     isClearable={false}  \r\n  />\r\n</div>\r\n\r\n)}\r\n\r\n                    </div>\r\n\r\n                    <div className=\"d-lg-flex\">\r\n                        <div className=\"flex-grow-1 p-2\">\r\n                            <CardHeader title='Assigned Task' className=\"text-center text-decoration-underline\" />\r\n\r\n                            <FullCalendar\r\n                                plugins={[timeGridPlugin, listPlugin]}\r\n                                initialView=\"timeGridDay\"\r\n                                initialDate={new Date()}\r\n                                events={\r\n                                    myTasks.map(o => ({\r\n                                        title: o?.Task_Name,\r\n                                        start: queryDate.myTaskDate + 'T' + o?.Sch_Time,\r\n                                        end: queryDate.myTaskDate + 'T' + o?.EN_Time,\r\n                                        objectData: o\r\n                                    }))\r\n                                }\r\n                                headerToolbar={{\r\n                                    left: 'prev next',\r\n                                    center: 'title',\r\n                                    right: 'timeGridDay, listDay',\r\n                                }}\r\n                                slotDuration={'00:20:00'}\r\n                                slotMinTime={'08:00:00'}\r\n                                slotMaxTime={'22:00:00'}\r\n                                showNonCurrentDates={false}\r\n                                editable={false}\r\n                                selectable\r\n                                selectMirror\r\n                                eventClick={eve => {\r\n                                    if (!startTime && elapsedTime === 0) {\r\n                                        const selObj = eve.event.extendedProps?.objectData;\r\n                                        if (Number(selObj?.Work_Status) !== 3 && Number(selObj?.Timer_Based) === 1) {\r\n                                            setSelectedTask(selObj);\r\n                                            setDialog(true);\r\n                                            setWorkInput({\r\n                                                Work_Id: selObj?.Work_Id,\r\n                                                Project_Id: selObj?.Project_Id,\r\n                                                Sch_Id: selObj?.Sch_Id,\r\n                                                Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                Task_Id: selObj?.Task_Id,\r\n                                                AN_No: selObj?.AN_No,\r\n                                                Emp_Id: parseData?.UserId,\r\n                                                Work_Done: selObj?.Work_Done,\r\n                                                Start_Time: selObj?.Start_Time,\r\n                                                End_Time: selObj?.End_Time,\r\n                                                Work_Status: selObj?.Work_Status,\r\n                                                Work_Dt: ISOString(selObj?.Work_Dt),\r\n                                                Process_Id: Number(selObj?.Process_Id),\r\n                                                Det_string: selObj?.Param_Dts\r\n                                            })\r\n                                        } else if (Number(selObj?.Work_Status) !== 3) {\r\n                                            setSelectedTask(selObj);\r\n                                            setNonTimerWorkDialog(true);\r\n                                            setNonTimerInput({\r\n                                                Work_Id: selObj?.Work_Id ? selObj?.Work_Id : '',\r\n                                                Project_Id: selObj?.Project_Id ? selObj?.Project_Id : '',\r\n                                                Sch_Id: selObj?.Sch_Id ? selObj?.Sch_Id : '',\r\n                                                Task_Levl_Id: selObj?.Task_Levl_Id ? selObj?.Task_Levl_Id : '',\r\n                                                Task_Id: selObj?.Task_Id ? selObj?.Task_Id : '',\r\n                                                AN_No: selObj?.AN_No ? selObj?.AN_No : '',\r\n                                                Emp_Id: parseData?.UserId,\r\n                                                Work_Done: selObj?.Work_Done ? selObj?.Work_Done : '',\r\n                                                Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n                                                Project:selObj?.Project ? selObj?.Project: '',\r\n                                                Task:selObj?.Task ? selObj?.Task : ''\r\n                                            })\r\n                                        } else {\r\n                                            toast.warn('This task is already completed')\r\n                                        }\r\n                                    } else {\r\n                                        toast.warn('Complete running task')\r\n                                    }\r\n                                }}\r\n                                eventContent={renderEventContent}\r\n                                datesSet={obj => setQueryDate({ ...queryDate, myTaskDate: ISOString(obj.endStr) })}\r\n                                height={1200}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"flex-grow-1 p-2\">\r\n                            <CardHeader title='Executed' className=\"text-center text-decoration-underline\" />\r\n\r\n                            <FullCalendar\r\n                                plugins={[timeGridPlugin, listPlugin]}\r\n                                initialView=\"timeGridDay\"\r\n                                initialDate={queryDate.executedTaskDate}\r\n                                events={\r\n                                    workedDetais.map(o => ({\r\n                                        title: o?.Task_Name,\r\n                                        start: queryDate.executedTaskDate + 'T' + o?.Start_Time,\r\n                                        end: queryDate.executedTaskDate + 'T' + o?.End_Time,\r\n                                        objectData: o\r\n                                    }))\r\n                                }\r\n                                headerToolbar={{\r\n                                    left: 'prev next',\r\n                                    center: 'title',\r\n                                    right: 'timeGridDay, listWeek',\r\n                                }}\r\n                                slotDuration={'00:20:00'}\r\n                                slotMinTime={'08:00:00'}\r\n                                slotMaxTime={'22:00:00'}\r\n                                showNonCurrentDates={false}\r\n                                editable={false}\r\n                                selectable\r\n                                selectMirror\r\n                                datesSet={obj => setQueryDate({ ...queryDate, executedTaskDate: ISOString(obj.endStr) })}\r\n                                eventClick={eve => {\r\n                                    if (!startTime && elapsedTime === 0) {\r\n                                        const selObj = eve.event.extendedProps?.objectData;\r\n                                        if (ISOString(selObj?.Entry_Date) === ISOString()) {\r\n                                            setIsEdit(true)\r\n                                            if (Number(selObj?.Timer_Based) === 0) {\r\n                                                setSelectedTask(selObj);\r\n                                                console.log(\"sleinc\",selObj)\r\n                                                setNonTimerWorkDialog(true)\r\n                                                setNonTimerInput({\r\n                                                    Work_Id: selObj?.Work_Id,\r\n                                                    Project_Id: selObj?.Project_Id,\r\n                                                    Sch_Id: selObj?.Sch_Id,\r\n                                                    Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                    Task_Id: selObj?.Task_Id,\r\n                                                    AN_No: selObj?.AN_No,\r\n                                                    Emp_Id: parseData?.UserId,\r\n                                                    Work_Done: selObj?.Work_Done,\r\n                                                    Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                    End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                    Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                    Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                    Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                    Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n                                                    ProjectName:selObj?.Additional_Project ? selObj?.Additional_Project : '',\r\n                                                    TaskName:selObj?.Additional_Task ? selObj?.Additional_Task : ''\r\n                                                })\r\n                                            } else {\r\n                                                setSelectedTask(selObj);\r\n                                                setWorkDialog(true)\r\n                                                setWorkInput({\r\n                                                    Work_Id: selObj?.Work_Id,\r\n                                                    Project_Id: selObj?.Project_Id,\r\n                                                    Sch_Id: selObj?.Sch_Id,\r\n                                                    Task_Levl_Id: selObj?.Task_Levl_Id,\r\n                                                    Task_Id: selObj?.Task_Id,\r\n                                                    AN_No: selObj?.AN_No,\r\n                                                    Emp_Id: parseData?.UserId,\r\n                                                    Work_Done: selObj?.Work_Done,\r\n                                                    Start_Time: selObj?.Start_Time ? selObj?.Start_Time : '10:00',\r\n                                                    End_Time: selObj?.End_Time ? selObj?.End_Time : '11:00',\r\n                                                    Work_Status: selObj?.Work_Status ? selObj?.Work_Status : 2,\r\n                                                    Work_Dt: selObj?.Work_Dt ? ISOString(selObj?.Work_Dt) : ISOString(),\r\n                                                    Process_Id: Number(selObj?.Process_Id) ? Number(selObj?.Process_Id) : '',\r\n                                                    Det_string: selObj?.Param_Dts ? selObj?.Param_Dts : [],\r\n                                                      ProjectName:selObj?.Additional_Project ? selObj?.Additional_Project : '',\r\n                                                    TaskName:selObj?.Additional_Task ? selObj?.Additional_Task : ''\r\n                                                })\r\n                                            }\r\n                                        } else {\r\n                                            toast.warn('You can only modify today works')\r\n                                        }\r\n                                    } else {\r\n                                        toast.warn('Complete running task')\r\n                                    }\r\n                                }}\r\n                                height={1200}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                <div className=\"table-responsive mt-3\">\r\n    <div className=\"d-flex justify-content-between border align-items-center p-2 rounded-3 mb-3\" onClick={openUnAssignedTaskDialog}>\r\n        <span className=\"ps-2\">Work Done At: {new Date(queryDate?.executedTaskDate).toLocaleDateString('en-IN')}</span>\r\n        <button className=\"btn btn-primary fa-14\"> Add Additional Work Details</button>\r\n    </div>\r\n\r\n    <table className=\"table mb-1\">\r\n        <thead>\r\n            <tr>\r\n                <th className=\"fa-13 border\">SNo</th>\r\n                <th className=\"fa-13 border\">Task</th>\r\n                <th className=\"fa-13 border\">Timer Based</th>\r\n                <th className=\"fa-13 border\">Start - End</th>\r\n                <th className=\"fa-13 border\">Total Minutes</th>\r\n                <th className=\"fa-13 border\">Status</th>\r\n                <th className=\"fa-13 border\">Discription</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {workedDetais\r\n                .filter((item, index, self) => \r\n                    // Remove duplicates based on unique combination\r\n                    index === self.findIndex(t => \r\n                        t.Task_Name === item.Task_Name && \r\n                        t.Start_Time === item.Start_Time && \r\n                        t.End_Time === item.End_Time\r\n                    )\r\n                )\r\n                .map((o, i) => (\r\n                    <tr key={`${o.Task_Id}_${o.Start_Time}_${o.End_Time}`}>\r\n                        <td className=\"fa-13 border\">{i + 1}</td>\r\n                        <td className=\"fa-13 border\">{o?.Task_Name}</td>\r\n                        <td className=\"fa-13 border text-center\">\r\n                            <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(Number(o?.Timer_Based) === 1 ? 3 : 1)}`}>\r\n                                {Number(o?.Timer_Based) === 1 ? 'Yes' : 'No'}\r\n                            </span>\r\n                        </td>\r\n                        <td className=\"fa-13 border text-center\">{o?.Start_Time} - {o?.End_Time}</td>\r\n                        <td className=\"fa-13 border text-center\">{o?.Tot_Minutes}</td>\r\n                        <td className=\"fa-13 border text-center\">\r\n                            <span className={`badge rounded-4 px-3 fw-bold text-white ${statusColor(o?.Work_Status)}`}>\r\n                                {o?.WorkStatus}\r\n                            </span>\r\n                        </td>\r\n                        <td className=\"fa-13 border\">{o?.Work_Done}</td>\r\n                    </tr>\r\n                ))}\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n                    <TabContext value={tabValue}>\r\n                        <Box sx={{ borderBottom: 1, borderColor: 'divider', display: 'none' }}>\r\n                            <TabList indicatorColor='secondary' textColor='secondary' onChange={(e, n) => setTabValue(n)} aria-label=\"\">\r\n                                <Tab sx={tabValue === '1' ? { backgroundColor: '#c6d7eb' } : {}} label={`TODAY TASKS (${myTasks.length})`} value='1' />\r\n                                <Tab sx={tabValue === '2' ? { backgroundColor: '#c6d7eb' } : {}} label={`EXECUTED (${workedDetais.length})`} value='2' />\r\n                            </TabList>\r\n                        </Box>\r\n\r\n                        <TabPanel value={'1'} sx={{ p: 0, pt: 2 }}>\r\n                       \r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={'2'} sx={{ p: 0, pt: 2 }}>\r\n                  \r\n                        </TabPanel>\r\n                    </TabContext>\r\n                </CardContent>\r\n            </Card>\r\n\r\n       \r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => { setDialog(false); setSelectedTask({}) }}>\r\n                <DialogTitle className=\"fa-18\">\r\n                    Start Task\r\n                    <span className=\"text-primary fw-bold\"> {selectedTask?.Task_Name}</span>\r\n                </DialogTitle>\r\n                <DialogContent sx={{ minWidth: '330px' }}>\r\n\r\n                    <div className=\" pb-3\">\r\n\r\n                        <p className=\"mb-0 text-center\">\r\n                            <AccessAlarm sx={{ fontSize: '50px' }} />\r\n                        </p>\r\n\r\n                        <p className=\"mb-0 text-center\">\r\n                            Allocated Time\r\n                        </p>\r\n\r\n                        <p className=\"my-2 text-center text-primary\">{selectedTask?.Sch_Period} Hrs</p>\r\n\r\n                    </div>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Schedule</span>\r\n                        <span>\r\n                            {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)}\r\n                            &nbsp;-&nbsp;\r\n                            {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Project</span>\r\n                        <span>\r\n                            {selectedTask?.Project_Name?.slice(0, 25)}\r\n                            {selectedTask?.Project_Name?.length > 25 && '...'}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <p className=\"fa-16  mt-1 mb-0 d-flex\">\r\n                        <span className=\" flex-grow-1\">Project Head</span>\r\n                        <span>\r\n                            {selectedTask?.Project_Head_Name}\r\n                        </span>\r\n                    </p>\r\n\r\n                    <div className=\" text-center\">\r\n                        <button\r\n                            onClick={!isRunning ? startTimer : stopTimer}\r\n                            className=\"clock-btn cus-shadow\" style={!isRunning ? { backgroundColor: '#b5e6dd' } : { backgroundColor: '#D8BFD8' }}>\r\n                            {!isRunning ? 'Start' : 'Stop'}\r\n                        </button>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { setDialog(false); setSelectedTask({}) }}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Other dialogs remain the same */}\r\n            <Dialog\r\n                open={workDialog}\r\n                onClose={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false); }}\r\n                fullWidth maxWidth='sm'>\r\n                <DialogTitle>Save Work</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveWork()\r\n                }}>\r\n                    <DialogContent>\r\n                        <label className=\"my-2\">Process</label>\r\n                        <select\r\n                            className=\"cus-inpt\"\r\n                            value={workInput.Process_Id || ''}\r\n                            onChange={e => setWorkInput({ ...workInput, Process_Id: e.target.value })}\r\n                        >\r\n                            <option value=\"\">Select Process</option>\r\n                            {processDetails.map(process => (\r\n                                <option key={process.Id} value={process.Id}>\r\n                                    {process.Process_Name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n\r\n                        <label className=\"my-2\">Work Status</label>\r\n                        <select\r\n                            className=\"cus-inpt\"\r\n                            value={workInput.Work_Status} required\r\n                            onChange={e => setWorkInput({ ...workInput, Work_Status: e.target.value })}>\r\n                            <option value={2}>PENDING</option>\r\n                            <option value={3}>COMPLETED</option>\r\n                        </select>\r\n\r\n                        <label className=\"my-2\">Work Summary</label>\r\n                        <textarea\r\n                            rows=\"4\"\r\n                            className=\"cus-inpt\" required\r\n                            value={workInput.Work_Done}\r\n                            onChange={e => setWorkInput({ ...workInput, Work_Done: e.target.value })} />\r\n\r\n                        {selectedTask?.Param_Dts?.map((param, index) => (\r\n                            <div key={index}>\r\n                                <label className=\"mt-2 mb-1\">{param?.Paramet_Name}</label>\r\n                                <input\r\n                                    type={param?.Paramet_Data_Type || 'text'}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={(e) => handleInputChange(e, param)}\r\n                                    value={workInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n                                    placeholder={param?.Paramet_Data_Type}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            variant='outlined'\r\n                            type='button'\r\n                            onClick={() => { setWorkDialog(false); setWorkInput(initialWorkSaveValue); setIsEdit(false) }}>\r\n                            close\r\n                        </Button>\r\n                        <Button\r\n                            color='success'\r\n                            type='submit'\r\n                            variant='contained'>\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            \r\n     <Dialog\r\n    open={nonTimerWorkDialog} \r\n    maxWidth=\"sm\" \r\n    fullWidth\r\n    onClose={() => { \r\n        setNonTimerWorkDialog(false); \r\n        setNonTimerInput(initialWorkSaveValue); \r\n        setIsEdit(false) \r\n    }} \r\n>\r\n    <DialogTitle>Save Task Progress</DialogTitle>\r\n\r\n    <form onSubmit={saveNonTimerBasedTask}>\r\n        <DialogContent className=\"table-responsive\">\r\n            <table className=\"table\">\r\n                <tbody>\r\n               <tr>\r\n    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle', width: '30%' }}>\r\n        Project Name\r\n    </td>\r\n    <td className=\"border-0 fa-14\" style={{ width: '70%' }}>\r\n        <div className=\"cus-inpt w-100\" style={{ \r\n            padding: '8px 12px', \r\n            border: '1px solid #ccc', \r\n            borderRadius: '4px', \r\n            backgroundColor: '#f5f5f5',\r\n            minHeight: '38px'\r\n        }}>\r\n            {selectedTask?.Project_Name || 'No project name'}\r\n        </div>\r\n    </td>\r\n</tr>\r\n\r\n{/* Task Name Field */}\r\n<tr>\r\n    <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n        Task Name\r\n    </td>\r\n    <td className=\"border-0 fa-14\">\r\n        <div className=\"cus-inpt w-100\" style={{ \r\n            padding: '8px 12px', \r\n            border: '1px solid #ccc', \r\n            borderRadius: '4px', \r\n            backgroundColor: '#f5f5f5',\r\n            minHeight: '38px'\r\n        }}>\r\n            {selectedTask?.Task_Name || 'No task name'}\r\n        </div>\r\n    </td>\r\n</tr>\r\n                    {/* Existing fields */}\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Completed Date\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"date\"\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Dt: e.target.value })}\r\n                                value={ISOString(nonTimerInput?.Work_Dt)}\r\n                                className=\"cus-inpt w-100\" \r\n                                required \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Start Time\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"time\"\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, Start_Time: e.target.value })}\r\n                                value={nonTimerInput?.Start_Time}\r\n                                className=\"cus-inpt w-100\" \r\n                                required \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            End Time\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"time\"\r\n                                min={nonTimerInput?.Start_Time}\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, End_Time: e.target.value })}\r\n                                value={nonTimerInput?.End_Time} \r\n                                required\r\n                                className=\"cus-inpt w-100\" \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Work Status\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <select\r\n                                className=\"cus-inpt w-100\"\r\n                                value={nonTimerInput?.Work_Status}\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Status: e.target.value })}\r\n                            >\r\n                                <option value={2}>PENDING</option>\r\n                                <option value={3}>COMPLETED</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Process\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <select\r\n                                className=\"cus-inpt w-100\"\r\n                                value={nonTimerInput.Process_Id || ''}\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, Process_Id: e.target.value })}\r\n                            >\r\n                                <option value=\"\">Select Process</option>\r\n                                {processDetails.map(process => (\r\n                                    <option key={process.Id} value={process.Id}>\r\n                                        {process.Process_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'top', paddingTop: '12px' }}>\r\n                            Work Summary\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <textarea\r\n                                rows=\"4\"\r\n                                className=\"cus-inpt w-100\" \r\n                                required\r\n                                value={nonTimerInput?.Work_Done}\r\n                                onChange={e => setNonTimerInput({ ...nonTimerInput, Work_Done: e.target.value })} \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    {selectedTask?.Param_Dts?.map((param, index) => (\r\n                        <tr key={index}>\r\n                            <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle', paddingTop: '12px' }}>\r\n                                {param?.Paramet_Name}\r\n                            </td>\r\n                            <td className=\"border-0 fa-14\">\r\n                                <input\r\n                                    type={param?.Paramet_Data_Type || 'text'}\r\n                                    className=\"cus-inpt w-100\"\r\n                                    onChange={(e) => handleNonTimerInputChange(e, param)}\r\n                                    value={nonTimerInput?.Det_string?.find(item => Number(item?.Param_Id) === Number(param?.Param_Id))?.Current_Value || ''}\r\n                                    placeholder={param?.Paramet_Data_Type}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button\r\n                variant='outlined' \r\n                color=\"error\" \r\n                type='button'\r\n                onClick={() => { \r\n                    setNonTimerWorkDialog(false); \r\n                    setNonTimerInput(initialWorkSaveValue); \r\n                    setIsEdit(false) \r\n                }}\r\n            >\r\n                Cancel\r\n            </Button>\r\n            <Button\r\n                variant='contained' \r\n                color='success' \r\n                type='submit'\r\n            >\r\n                Save\r\n            </Button>\r\n        </DialogActions>\r\n    </form>\r\n</Dialog>\r\n\r\n          <Dialog\r\n    open={additionalTaskDialog} maxWidth=\"sm\" fullWidth\r\n    onClose={() => { setAdditionalTaskDialog(false); setIsEdit(false) }} >\r\n    <DialogTitle>Additional Tasks</DialogTitle>\r\n    <form onSubmit={saveUnAssignedTask}>\r\n        <DialogContent className=\"table-responsive\">\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Project\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\" >\r\n                            <textarea\r\n                                className=\"cus-inpt\" \r\n                                required\r\n                                value={additionalTaskInput?.ProjectName}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, ProjectName: e.target.value })} \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Task\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <textarea\r\n                                className=\"cus-inpt\" \r\n                                required\r\n                                value={additionalTaskInput?.TaskName}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, TaskName: e.target.value })} \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Process\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <select\r\n                                className=\"cus-inpt w-100\"\r\n                                value={additionalTaskInput.Process_Id || ''}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Process_Id: e.target.value })}\r\n                            >\r\n                                <option value=\"\">Select Process</option>\r\n                                {processDetails.map(process => (\r\n                                    <option key={process.Id} value={process.Id}>\r\n                                        {process.Process_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Completed Date\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"date\"\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Dt: e.target.value })}\r\n                                value={ISOString(additionalTaskInput?.Work_Dt)}\r\n                                className=\"cus-inpt w-100\" \r\n                                required \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Start Time\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"time\"\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Start_Time: e.target.value })}\r\n                                value={additionalTaskInput?.Start_Time}\r\n                                className=\"cus-inpt w-100\" \r\n                                required \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            End Time\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <input\r\n                                type=\"time\"\r\n                                min={additionalTaskInput?.Start_Time}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, End_Time: e.target.value })}\r\n                                value={additionalTaskInput?.End_Time} \r\n                                required\r\n                                className=\"cus-inpt w-100\" \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'middle' }}>\r\n                            Work Status\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <select\r\n                                className=\"cus-inpt w-100\"\r\n                                value={additionalTaskInput?.Work_Status}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Status: e.target.value })}\r\n                            >\r\n                                <option value={2}>PENDING</option>\r\n                                <option value={3}>COMPLETED</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border-0 fa-14\" style={{ verticalAlign: 'top', paddingTop: '12px' }}>\r\n                            Work Summary\r\n                        </td>\r\n                        <td className=\"border-0 fa-14\">\r\n                            <textarea\r\n                                rows=\"4\"\r\n                                className=\"cus-inpt w-100\" \r\n                                required\r\n                                value={additionalTaskInput?.Work_Done}\r\n                                onChange={e => setAdditionalTaskInput({ ...additionalTaskInput, Work_Done: e.target.value })} \r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button\r\n                variant='outlined' color=\"error\" type='button'\r\n                onClick={() => { setAdditionalTaskDialog(false); setIsEdit(false) }}>\r\n                cancel\r\n            </Button>\r\n            <Button\r\n                variant='contained' color='success' type='submit'>\r\n                Save\r\n            </Button>\r\n        </DialogActions>\r\n    </form>\r\n</Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodayTasks;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","statusColor","Number","formatTime24","time24","hours","minutes","split","map","hours12","period","formattedMinutes","concat","formatTime","milliseconds","seconds","Math","floor","formatNumber","number","timeToMilliseconds","timeString","millisecondsToTime","date","Date","getHours","getMinutes","addTimes","time1","time2","hours1","minutes1","hours2","minutes2","totalHours","totalMinutes","arrayToXml","array","Array","isArray","length","xml","obj","Param_Id","Task_Id","String","Default_Value","escapeXml","Current_Value","error","console","unsafe","replace","c","TodayTasks","_progressFun","_selectedTask$Project","_selectedTask$Project2","_selectedTask$Project3","_selectedTask$Project4","_selectedTask$Param_D","_selectedTask$Param_D2","localData","localStorage","getItem","parseData","JSON","parse","initialWorkSaveValue","Work_Id","Project_Id","Sch_Id","Task_Levl_Id","AN_No","Emp_Id","UserId","Work_Done","Start_Time","End_Time","Work_Status","Work_Dt","ISOString","Process_Id","Det_string","additionalTaskInitialValue","ProjectName","TaskName","myTasks","setMyTasks","useState","workedDetais","setWorkedDetais","queryDate","setQueryDate","myTaskDate","executedTaskDate","reload","setReload","tabValue","setTabValue","dialog","setDialog","workDialog","setWorkDialog","nonTimerWorkDialog","setNonTimerWorkDialog","additionalTaskDialog","setAdditionalTaskDialog","selectedTask","setSelectedTask","runningTaskId","setRunningTaskId","isEdit","setIsEdit","selectedEmployee","setSelectedEmployee","employees","setEmployees","startTime","setStartTime","elapsedTime","setElapsedTime","isRunning","setIsRunning","workInput","setWorkInput","additionalTaskInput","setAdditionalTaskInput","nonTimerInput","setNonTimerInput","processDetails","setProcessDetails","useEffect","UserTypeId","fetchLink","Company_id","then","data","success","catch","e","empId","_data$data$","_data$data$2","time","Time","taskId","interval","setInterval","elapsed","getTime","parseInt","clearInterval","setRunning","find","task","stopTimer","method","bodyData","Mode","toast","message","progressFun","end","_jsxs","_Fragment","children","_jsx","ToastContainer","className","Task_Name","Sch_Period","toFixed","height","Sch_Time","EN_Time","Project_Name","slice","Project_Head_Name","display","Button","onClick","sx","marginRight","val","Card","CardContent","Select","value","label","Name","UserName","onChange","handleEmployeeSelect","employee","emp","log","options","styles","isSearchable","placeholder","isClearable","CardHeader","title","FullCalendar","plugins","timeGridPlugin","listPlugin","initialView","initialDate","events","o","start","objectData","headerToolbar","left","center","right","slotDuration","slotMinTime","slotMaxTime","showNonCurrentDates","editable","selectable","selectMirror","eventClick","eve","warn","_eve$event$extendedPr","selObj","event","extendedProps","Timer_Based","Param_Dts","Project","Task","eventContent","eventInfo","status","text","cursor","datesSet","endStr","_eve$event$extendedPr2","Entry_Date","Additional_Project","Additional_Task","openUnAssignedTaskDialog","toLocaleDateString","filter","item","index","self","findIndex","t","i","Tot_Minutes","WorkStatus","TabContext","Box","borderColor","TabList","indicatorColor","textColor","n","Tab","TabPanel","p","pt","Dialog","open","onClose","DialogTitle","DialogContent","minWidth","AccessAlarm","startTimer","ForcePost","DialogActions","fullWidth","maxWidth","onSubmit","preventDefault","saveWork","detStringXml","target","process","Id","Process_Name","required","param","_workInput$Det_string","_workInput$Det_string2","Paramet_Name","type","Paramet_Data_Type","handleInputChange","updatedValue","prevWorkInput","_prevWorkInput$Det_st","indexValue","updatedDetString","verticalAlign","border","borderRadius","minHeight","min","paddingTop","_nonTimerInput$Det_st","_nonTimerInput$Det_st2","handleNonTimerInputChange","_prevWorkInput$Det_st2"],"sourceRoot":""}