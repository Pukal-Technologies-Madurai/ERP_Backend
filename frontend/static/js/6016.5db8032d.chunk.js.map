{"version":3,"file":"static/js/6016.5db8032d.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js","Pages/employeeManagement/employeeManagement.jsx","Components/requiredStar.jsx","../node_modules/@mui/lab/TabList/TabList.js","../node_modules/@mui/lab/TabContext/TabContext.js","Pages/ProjectList/addEditProject.jsx","../node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js","../node_modules/@mui/material/styles/useThemeProps.js","../node_modules/@mui/icons-material/esm/People.js","../node_modules/@mui/icons-material/esm/Launch.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/lab/TabPanel/tabPanelClasses.js","../node_modules/@mui/lab/TabPanel/TabPanel.js","Pages/ProjectReports/listing.jsx","Pages/ProjectReports/reports.jsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\"\n}), 'KeyboardArrowLeft');","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n      children: childrenProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\n\n/**\n * @returns {unknown}\n */\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-T-${value}`;\n}","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n            \r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n    \r\n            if (isEdit && inputValue) {\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head: inputValue?.Project_Head_Id, \r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                    Project_Status: inputValue?.Project_Status || '', \r\n                    Project_Desc: inputValue?.Project_Desc || '-'\r\n                });\r\n            } else if (!isEdit) {\r\n           \r\n                setFormData({\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '', \r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n    \r\n    \r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"\n}), 'KeyboardArrowRight');","'use client';\n\nimport getThemeProps from './getThemeProps';\nimport useTheme from '../useTheme';\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  const mergedProps = getThemeProps({\n    theme,\n    name,\n    props\n  });\n  return mergedProps;\n}","import resolveProps from '@mui/utils/resolveProps';\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n  return resolveProps(theme.components[name].defaultProps, props);\n}","'use client';\n\nimport systemUseThemeProps from '@mui/system/useThemeProps';\nimport defaultTheme from './defaultTheme';\nimport THEME_ID from './identifier';\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5\"\n}), 'People');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'Launch');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getTabPanelUtilityClass(slot) {\n  return generateUtilityClass('MuiTabPanel', slot);\n}\nconst tabPanelClasses = generateUtilityClasses('MuiTabPanel', ['root']);\nexport default tabPanelClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\nconst TabPanelRoot = styled('div', {\n  name: 'MuiTabPanel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n  const {\n      children,\n      className,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props);\n  const classes = useUtilityClasses(ownerState);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    ownerState: ownerState\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Tab,\r\n  Chip,\r\n  Typography,\r\n  Box\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { ISOString } from \"../../Components/functions\";\r\n\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n\r\n  const [taskData, setTaskData] = useState([]);\r\n  const userData = JSON.parse(localStorage.getItem('user'));\r\n  const companyId = userData?.Company_id;\r\n\r\n\r\n  const [filters, setFilters] = useState({\r\n    startDate: ISOString() || new Date().toISOString().split('T')[0]\r\n  });\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [selectedTaskEmployees, setSelectedTaskEmployees] = useState([]);\r\n  const [selectedTaskName, setSelectedTaskName] = useState('');\r\n\r\n  const [selectedTab, setSelectedTab] = useState('1');\r\n  const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n  const [parsedTaskDetails, setParsedTaskDetails] = useState([]);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setSelectedTab(newValue);\r\n  };\r\n\r\n  const handleOpenDialog = (employees, taskName) => {\r\n    setSelectedTaskEmployees(employees);\r\n    setSelectedTaskName(taskName);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setSelectedTaskEmployees([]);\r\n    setSelectedTaskName('');\r\n  };\r\n\r\n  const Schtype = async () => {\r\n    fetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n      if (data.success) {\r\n        setScheduleTypes(data.data);\r\n      } else {\r\n        toast.error(data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (taskData.length > 0 && taskData[0].TaskDetails) {\r\n      try {\r\n        const taskDetails = JSON.parse(taskData[0].TaskDetails);\r\n        setParsedTaskDetails(taskDetails);\r\n      } catch (error) {\r\n        console.error(\"Error parsing TaskDetails:\", error);\r\n      }\r\n    }\r\n  }, [taskData]);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    Schtype();\r\n  }, [projectid]);\r\n\r\n  useEffect(() => {\r\n    const fetchTaskDetails = async () => {\r\n      if (!filters.startDate || filters.startDate === '') {\r\n        setFilters({ ...filters, startDate: new Date().toISOString().split('T')[0] });\r\n      }\r\n\r\n      try {\r\n        const response = await fetchLink({\r\n          address: `taskManagement/project/schedule/projectDetailsforReport?Project_Id=${projectid}&StartDate=${filters.startDate}`,\r\n        });\r\n\r\n        if (response.success) {\r\n          setTaskData(response.data);\r\n        } else {\r\n          toast.error('Failed to fetch task details');\r\n        }\r\n      } catch (error) {\r\n        toast.error('Error while fetching task details');\r\n        console.error('Error while fetching task details:', error);\r\n      }\r\n    };\r\n\r\n    if (projectid) {\r\n      fetchTaskDetails();\r\n    }\r\n  }, [filters.startDate, projectid]);\r\n\r\n  const setCloseTask = async () => {\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n  \r\n      <Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n        <DialogTitle>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{selectedProject?.Project_Name}</span>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}></div>\r\n          </div>\r\n        </DialogTitle>\r\n        <Box sx={{ width: '100%', typography: 'body1' }}>\r\n          {taskData.map((schedule, index) => {\r\n            const scheduleTypes = JSON.parse(schedule.SchTypes);\r\n\r\n            return (\r\n              <TabContext value={selectedTab} key={index}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                  <TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n                    {Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n                      scheduleTypes.map((sch, index) => (\r\n                        <Tab\r\n                          key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                          label={sch.SchType || 'No SchType'}\r\n                          value={(sch.SchTypeId || index).toString()}\r\n                          id={`tab-${sch.SchTypeId || index}`}\r\n                          aria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n                        />\r\n                      ))\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n                        No Details Available for {scheduleTypes}\r\n                      </Typography>\r\n                    )}\r\n\r\n                    <Tab label=\"Today\" value=\"today\" id=\"tab-today\" aria-controls=\"tabpanel-today\" />\r\n                  </TabList>\r\n                </Box>\r\n\r\n                {Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n                  <TabPanel\r\n                    key={`${sch.SchTypeId || 'index'}-${index}`}\r\n                    value={(sch.SchTypeId || index).toString()}\r\n                    id={`tabpanel-${sch.SchTypeId || index}`}\r\n                    aria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n                  >\r\n                    <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n                      {Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n                        sch.TaskCountsInSchType.map((count, index) => (\r\n                          <Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Box>\r\n                              Schedule Type: <strong>{sch.SchType}</strong>\r\n                            </Box>\r\n                            <Box textAlign=\"right\">\r\n                              Total Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n                            </Box>\r\n                          </Typography>\r\n                        ))\r\n                      ) : (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          No tasks counted for this schedule type.\r\n                        </Typography>\r\n                      )}\r\n                    </Box>\r\n\r\n                    {Array.isArray(sch.Tasks) && sch.Tasks.length > 0 ? (\r\n                      <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\r\n                        {sch.Tasks.map((taskItem) => (\r\n                          <div\r\n                            key={taskItem.Task_Id}\r\n                            style={{\r\n                              backgroundColor: '#f0f4ff',\r\n                              boxShadow: 'black',\r\n                              padding: '16px',\r\n                              borderRadius: '8px',\r\n                              display: 'flex',\r\n                              margin: '8px 0',\r\n                              width: '100%',\r\n                              justifyContent: 'space-between', // Add this to space out content\r\n                            }}\r\n                          >\r\n                            <Typography fontWeight=\"bold\" style={{ marginBottom: '8px' }}>\r\n                              {taskItem.Task_Name || 'DEFAULT TASK'}\r\n                            </Typography>\r\n\r\n                            {Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n                              <Button\r\n                                onClick={() => handleOpenDialog(taskItem.AssignedEmployees, taskItem.Task_Name)}\r\n                                sx={{ marginLeft: 'auto' }} // This moves the button to the right\r\n                              >\r\n                                <span style={{ textAlign: 'left' }}>View Employees</span>\r\n                              </Button>\r\n                            ) : (\r\n                              <span style={{ marginLeft: '60px', textAlign: 'left' }}>\r\n                                No employees assigned\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                      </Box>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        No tasks available for this task type.\r\n                      </Typography>\r\n                    )}\r\n\r\n                  </TabPanel>\r\n                ))}\r\n\r\n           \r\n                <TabPanel value=\"today\" id=\"tabpanel-today\" aria-labelledby=\"tab-today\">\r\n                  <Box sx={{ padding: 2 }}>\r\n                    {Array.isArray(parsedTaskDetails) && parsedTaskDetails.length > 0 ? (\r\n                      <div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                          <Typography variant=\"h6\" gutterBottom style={{ margin: 0 }}>\r\n                            Task Details for\r\n                          </Typography>\r\n\r\n                          {/* Date Picker */}\r\n                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                            <span style={{ verticalAlign: 'middle' }}>From:</span>\r\n                            <input\r\n                              type=\"date\"\r\n                              value={filters.startDate}\r\n                              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}\r\n                              className=\"cus-inpt\"\r\n                              style={{ padding: '5px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        No tasks available for today.\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n\r\n                  {Array.isArray(parsedTaskDetails) && parsedTaskDetails.length > 0 ? (\r\n                    parsedTaskDetails.map((taskDetail) => (\r\n                      <div\r\n                        key={taskDetail.Task_Id}\r\n                        style={{\r\n                          backgroundColor: '#fff',\r\n                          padding: '16px',\r\n                          borderRadius: '12px',\r\n                          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n                          marginBottom: '16px',\r\n                          display: 'flex',\r\n                          flexDirection: 'row',\r\n                          justifyContent: 'space-between',\r\n                          alignItems: 'center',\r\n                        }}\r\n                      >\r\n                        <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ color: '#2c3e50', marginRight: '16px' }}>\r\n                          {taskDetail.Task_Name || 'DEFAULT TASK'}\r\n                        </Typography>\r\n\r\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                          {Array.isArray(taskDetail.AssignedEmployees) && taskDetail.AssignedEmployees.length > 0 ? (\r\n                            <Button\r\n                              onClick={() => handleOpenDialog(taskDetail.AssignedEmployees, taskDetail.Task_Name)}\r\n                              sx={{ marginLeft: '8px' }}\r\n                            >\r\n                              View Employees\r\n                            </Button>\r\n                          ) : (\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ marginLeft: '8px' }}>\r\n                              No Employees Assigned\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: '16px' }}>\r\n                      No tasks available for today.\r\n                    </Typography>\r\n                  )}\r\n                </TabPanel>\r\n              </TabContext>\r\n            );\r\n          })}\r\n        </Box>\r\n\r\n        <DialogActions sx={{ marginTop: 'auto', position: 'sticky', bottom: 0 }}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Employee Details for {selectedTaskName}</DialogTitle>\r\n        <DialogContent>\r\n          {selectedTaskEmployees.length > 0 ? (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n              {selectedTaskEmployees.map((employee, index) => (\r\n                <Chip key={index} label={employee.Name} variant=\"outlined\" size=\"small\" sx={{ margin: '4px', color: 'green' }} />\r\n              ))}\r\n            </Box>\r\n          ) : (\r\n            <Typography variant=\"body1\">No employees assigned to this task.</Typography>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ListingTask;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"./listing\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => setReload(prev => !prev);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n     const columns = [\r\n         { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '250px' },\r\n         { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n         { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n         { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n         { name: 'Progress', selector: row => `${calcPercentage(row.TodayTaskcounts, row.CompletedTasks)}%`, sortable: true },\r\n         {\r\n             name: 'Task Details', cell: row => (\r\n                 <>\r\n                     <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                         <Launch />\r\n                     </IconButton>\r\n                     {row.CompletedTasks} / {row.TodayTaskcounts}\r\n                 </>\r\n             )\r\n         },\r\n       \r\n         { name: 'Task Count',  selector: row => row?.TodayTaskcounts, sortable: true, sortable: true },\r\n       \r\n         { name: 'Assigned', selector: row => row.TasksAssignedToEmployee },\r\n         {\r\n             name: 'Employees', cell: row => (\r\n                 <>\r\n                     {Number(contextObj?.Add_Rights) === 1 && (\r\n                         <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                             <People />\r\n                         </IconButton>\r\n                     )}\r\n                     {row.EmployeesInvolved}\r\n                 </>\r\n             )\r\n         }\r\n     ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 mb-3 \">\r\n                <span style={{ marginLeft: '10px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                      \r\n                    </div>\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n"],"names":["createSvgIcon","_jsx","d","_ref","open","onClose","projectId","onReload","initialValue","Name","Designation_Name","BranchName","employees","setEmployees","useState","loading","setLoading","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","localData","localStorage","getItem","parseData","JSON","parse","contextObj","useContext","MyContext","useEffect","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","async","data","fetchLink","address","concat","success","e","console","error","toast","Company_id","onClosed","_jsxs","_Fragment","children","Dialog","maxWidth","fullWidth","Box","display","justifyContent","alignItems","marginTop","marginInlineStart","DialogActions","Button","variant","color","onClick","handleAddEmployeeOpen","sx","mr","DialogContent","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Array","isArray","length","map","user","EmployeeId","UserId","colSpan","position","bottom","DialogTitle","Autocomplete","multiple","options","getOptionLabel","option","isOptionEqualToValue","value","onChange","event","uniqueValues","filter","val","index","self","findIndex","t","PopperComponent","props","Popper","_objectSpread","placement","onclose","renderInput","params","TextField","placeholder","handleAddEmployeeClose","Number","Add_Rights","method","bodyData","Project_Id","UserIds","emp","RequiredStar","style","fontWeight","fontSize","_excluded","React","ref","childrenProp","other","_objectWithoutPropertiesLoose","context","useTabContext","TypeError","child","getPanelId","id","getTabId","Tabs","_extends","Context","TabContext","idPrefix","setId","Math","round","random","useUniquePrefix","Provider","inputValue","isEdit","setReload","projectHead","setProjectHead","proStatus","setProStatus","formData","setFormData","Project_Name","Project_Desc","Project_Head","Est_Start_Dt","ISOString","Est_End_Dt","Project_Status","Entry_By","then","catch","Project_Head_Id","handleChange","target","name","validateFields","requiredFields","field","replace","inputFields","label","elem","type","required","obj","Status_Id","Status","className","onSubmit","preventDefault","prev","message","createFun","payload","idx","useThemeProps","defaultTheme","themeId","theme","useTheme","getThemeProps","components","defaultProps","resolveProps","systemUseThemeProps","THEME_ID","generateUtilityClasses","createTheme","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate","getTabPanelUtilityClass","slot","generateUtilityClass","TabPanelRoot","styled","overridesResolver","styles","padding","spacing","inProps","ownerState","classes","composeClasses","useUtilityClasses","tabId","clsx","hidden","role","dialogOpen","setDialogOpen","projectid","reload","selectedProject","taskData","setTaskData","userData","filters","setFilters","startDate","Date","toISOString","split","openDialog","setOpenDialog","selectedTaskEmployees","setSelectedTaskEmployees","selectedTaskName","setSelectedTaskName","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","parsedTaskDetails","setParsedTaskDetails","handleTabChange","newValue","handleOpenDialog","taskName","handleCloseDialog","TaskDetails","taskDetails","Schtype","response","fetchTaskDetails","PaperProps","height","width","typography","schedule","SchTypes","borderBottom","borderColor","TabList","sch","Tab","SchType","SchTypeId","toString","Typography","TabPanel","marginBottom","backgroundColor","borderRadius","TaskCountsInSchType","count","textAlign","TotalTasks","CompletedTasks","Tasks","flexDirection","taskItem","boxShadow","margin","Task_Name","AssignedEmployees","marginLeft","Task_Id","gutterBottom","gap","verticalAlign","border","taskDetail","marginRight","flexWrap","employee","Chip","size","ActiveProjects","projects","setProjects","projectAlldata","setProjectAlldata","setSelectedProject","setIsEdit","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","columns","selector","row","sortable","_projectAlldata$find","find","p","Project_Head_Name","_projectAlldata$find2","toLocaleDateString","task","TodayTaskcounts","completed","toFixed","calcPercentage","cell","IconButton","handleOpenListingTaskDialog","Launch","TasksAssignedToEmployee","handleOpenEmployeeDialog","People","EmployeesInvolved","filteredProjects","project","_projectAlldata$find3","_projectAlldata$find4","status","toLowerCase","includes","handleCloseDialogs","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","headCells","top","zIndex","cells","rows","overflowY","maxHeight","background","cursor","ListingTask","ProjectForm","projectData","EmployeeManagementDialog"],"sourceRoot":""}