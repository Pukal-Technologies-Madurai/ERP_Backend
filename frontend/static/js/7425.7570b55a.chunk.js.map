{"version":3,"file":"static/js/7425.7570b55a.chunk.js","mappings":"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","sources":["Pages/Masters/DistrictMaster.jsx","Components/filterableTable2.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContentText,\r\n    TextField,\r\n\r\n\r\n\r\n\r\n} from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit, Search } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst initialState = {\r\n    District_Id: 0,\r\n    District_Name: \"\",\r\n    State_Id: 0,\r\n    State_Name: \"\"\r\n};\r\n\r\nfunction DistrictMaster() {\r\n    const [reload, setReload] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [districtList, setDistrictList] = useState([]);\r\n    const [filteredAccountList, setFilteredAccountList] = useState([]);\r\n    const [dropDown, setDropDown] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchDistrict = async () => {\r\n            try {\r\n                const data = await fetchLink({ address: `masters/district` });\r\n                if (data.success) {\r\n\r\n                    setDistrictList(data.data);\r\n                    setFilteredAccountList(data.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load districts\");\r\n            }\r\n        };\r\n\r\n        const fetchDropDown = async () => {\r\n            try {\r\n                const datafetch = await fetchLink({ address: `masters/state/dropDown` });\r\n                if (datafetch.success) {\r\n                    setDropDown(datafetch.data);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n                toast.error(\"Failed to load State dropdown\");\r\n            }\r\n        };\r\n\r\n        fetchDistrict();\r\n        fetchDropDown();\r\n    }, [reload]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() === \"\") {\r\n            setFilteredAccountList(districtList);\r\n        } else {\r\n            const filtered = districtList.filter((account) => {\r\n                const searchLower = searchTerm.toLowerCase();\r\n                return (\r\n                    String(account.District_Id).toLowerCase().includes(searchLower) ||\r\n                    (account.District_Name && account.District_Name.toLowerCase().includes(searchLower)) ||\r\n                    (account.State_Name && account.State_Name.toLowerCase().includes(searchLower))\r\n                );\r\n            });\r\n            setFilteredAccountList(filtered);\r\n        }\r\n    }, [searchTerm, districtList]);\r\n    const handleDelete = async () => {\r\n        setIsSubmitting(true);\r\n        const deletedItemId = inputValue.District_Id;\r\n\r\n        try {\r\n            setDistrictList(prev => prev.filter(item => item.District_Id !== deletedItemId));\r\n            setFilteredAccountList(prev => prev.filter(item => item.District_Id !== deletedItemId));\r\n\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"DELETE\",\r\n                bodyData: { District_Id: deletedItemId },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District deleted successfully!\");\r\n            } else {\r\n                setReload(prev => !prev);\r\n                toast.error(data.message || \"Failed to delete district\");\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setReload(prev => !prev);\r\n            toast.error(\"Failed to delete district\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        const { District_Name, State_Id } = inputValue;\r\n        if (!District_Name || !State_Id) {\r\n            toast.error(\"Please fill all required fields.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"POST\",\r\n                bodyData: {\r\n                    ...inputValue\r\n                },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District Created successfully!\");\r\n                setIsCreateDialogOpen(false);\r\n                setInputValue(initialState);\r\n                setReload(prev => !prev);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to Create District\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const editRow = (row) => {\r\n        setInputValue({\r\n            District_Id: Number(row.District_Id),\r\n            District_Name: row.District_Name,\r\n            State_Id: Number(row.State_Id),\r\n            State_Name: row.State_Name || \"\"\r\n        });\r\n        setEditMode(true);\r\n    };\r\n    const handleEdit = async () => {\r\n        const { District_Id, District_Name, State_Id } = inputValue;\r\n\r\n        // Convert to proper types\r\n        const payload = {\r\n            District_Id: Number(District_Id),\r\n            District_Name: District_Name.trim(),\r\n            State_Id: Number(State_Id),\r\n            State_Name: inputValue.State_Name?.trim() || null\r\n        };\r\n\r\n        if (!payload.District_Id || !payload.District_Name || !payload.State_Id) {\r\n            toast.error(\"All required fields must be properly filled.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/district`,\r\n                method: \"PUT\",\r\n                bodyData: payload\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"District updated successfully!\");\r\n\r\n                setDistrictList(prev => prev.map(item =>\r\n                    item.District_Id === payload.District_Id ?\r\n                        { ...item, ...payload } :\r\n                        item\r\n                ));\r\n                setFilteredAccountList(prev => prev.map(item =>\r\n                    item.District_Id === payload.District_Id ?\r\n                        { ...item, ...payload } :\r\n                        item\r\n                ));\r\n                setEditMode(false);\r\n                setInputValue(initialState);\r\n            } else {\r\n                toast.error(data.message || \"Update failed\");\r\n                setReload(prev => !prev); // Refresh data if update failed\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Update error:\", e);\r\n            toast.error(`Failed to update district: ${e.message}`);\r\n            setReload(prev => !prev); // Refresh data on error\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n    const handleCloseCreateDialog = () => {\r\n        if (!isSubmitting) {\r\n            setIsCreateDialogOpen(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseEditDialog = () => {\r\n        if (!isSubmitting) {\r\n            setEditMode(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseDeleteDialog = () => {\r\n        if (!isSubmitting) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleStateChange = (e) => {\r\n        const selectedStateId = Number(e.target.value);\r\n        if (isNaN(selectedStateId)) {\r\n            toast.error(\"Invalid state selected\");\r\n            return;\r\n        }\r\n        const selectedState = dropDown.find(state => state.State_Id === selectedStateId);\r\n        setInputValue({\r\n            ...inputValue,\r\n            State_Id: selectedStateId,\r\n            State_Name: selectedState ? selectedState.State_Name : \"\"\r\n        });\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    DISTRICT MASTER\r\n                    <div className=\"d-flex align-items-center gap-3\">\r\n                        <div style={{ width: \"300px\" }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                placeholder=\"Search District...\"\r\n                                value={searchTerm}\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: <Search fontSize=\"small\" sx={{ mr: 1 }} />,\r\n                                    style: { height: \"40px\" },\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className=\"rounded-1 btn-primary\"\r\n                            onClick={() => {\r\n                                setIsCreateDialogOpen(true);\r\n                                setInputValue(initialState);\r\n                            }}\r\n                            sx={{\r\n                                textTransform: 'none',\r\n                                fontWeight: 500,\r\n                                px: 2,\r\n                                height: '40px'\r\n                            }}\r\n                        >\r\n                            Create District\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <FilterableTable\r\n                    dataArray={filteredAccountList}\r\n                    EnableSerialNumber={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n                        createCol(\"District_Name\", \"string\", \"District Name\"),\r\n                        createCol(\"State_Name\", \"string\", \"State\"),\r\n                        {\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <td style={{ minWidth: \"80px\" }}>\r\n                                    <IconButton onClick={() => editRow(row)} size=\"small\">\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            setOpen(true);\r\n                                            setInputValue({\r\n                                                District_Id: row.District_Id,\r\n                                                District_Name: row.District_Name\r\n                                            });\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                    >\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </td>\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Dialog open={isCreateDialogOpen} onClose={handleCloseCreateDialog}>\r\n                <DialogTitle>Create District</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"stateSelect\">State *</label>\r\n                            <select\r\n                                className=\"form-select form-select-sm\"\r\n                                id=\"editStateSelect\"\r\n                                value={inputValue.State_Id || \"\"}\r\n                                onChange={(e) => {\r\n                                    const selectedStateId = Number(e.target.value);\r\n                                    const selectedState = dropDown.find(state => state.State_Id === selectedStateId);\r\n                                    setInputValue({\r\n                                        ...inputValue,\r\n                                        State_Id: selectedStateId,\r\n                                        State_Name: selectedState ? selectedState.State_Name : \"\"\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <option value=\"\">Select State</option>\r\n                                {dropDown.map((state) => (\r\n                                    <option key={state.State_Id} value={state.State_Id}>\r\n                                        {state.State_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"districtName\" className=\"form-label\">District Name *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-mdf\"\r\n                                id=\"districtName\"\r\n                                value={inputValue.District_Name}\r\n                                onChange={(e) => setInputValue({ ...inputValue, District_Name: e.target.value })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        className=\"btn btn-secondary btn-sm\"\r\n                        onClick={handleCloseCreateDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-primary btn-sm\"\r\n                        onClick={handleCreate}\r\n                        disabled={isSubmitting || !inputValue.District_Name || !inputValue.State_Id}\r\n                    >\r\n                        {isSubmitting ? \"Creating...\" : \"Create\"}\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Edit Dialog */}\r\n            <Dialog open={editMode} onClose={handleCloseEditDialog}>\r\n                <DialogTitle>Edit District</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-3\">\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"editStateSelect\" className=\"form-label\">State *</label>\r\n                            <select\r\n                                className=\"form-select form-select-sm\"\r\n                                id=\"editStateSelect\"\r\n                                value={inputValue.State_Id || \"\"}\r\n                                onChange={handleStateChange}\r\n                            >\r\n                                <option value=\"\">Select State</option>\r\n                                {dropDown.map((state) => (\r\n                                    <option key={state.State_Id} value={state.State_Id}>\r\n                                        {state.State_Name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"editDistrictName\" className=\"form-label\">District Name *</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-sm\"\r\n                                id=\"editDistrictName\"\r\n                                value={inputValue.District_Name}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, District_Name: e.target.value })\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button\r\n                        className=\"btn btn-secondary btn-sm me-2\"\r\n                        onClick={handleCloseEditDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-primary btn-sm\"\r\n                        onClick={handleEdit}\r\n                        disabled={isSubmitting || !inputValue.District_Name || !inputValue.State_Id}\r\n                    >\r\n                        {isSubmitting ? (\r\n                            <>\r\n                                <span className=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                Updating...\r\n                            </>\r\n                        ) : (\r\n                            \"Update\"\r\n                        )}\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleCloseDeleteDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Confirmation\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <b>{`Do you want to delete the ${inputValue.District_Name}?`}</b>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={handleCloseDeleteDialog}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus sx={{ color: 'red' }}>\r\n                        {isSubmitting ? \"Deleting...\" : \"Delete\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DistrictMaster;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}"],"names":["initialState","District_Id","District_Name","State_Id","State_Name","reload","setReload","useState","open","setOpen","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editMode","setEditMode","districtList","setDistrictList","filteredAccountList","setFilteredAccountList","dropDown","setDropDown","searchTerm","setSearchTerm","isSubmitting","setIsSubmitting","useEffect","async","data","fetchLink","address","success","e","console","error","toast","fetchDistrict","datafetch","log","fetchDropDown","trim","filtered","filter","account","searchLower","toLowerCase","String","includes","handleCloseCreateDialog","handleCloseEditDialog","handleCloseDeleteDialog","_jsxs","_Fragment","children","className","_jsx","style","width","TextField","fullWidth","size","variant","placeholder","value","onChange","target","InputProps","startAdornment","Search","fontSize","sx","mr","height","Button","onClick","textTransform","fontWeight","px","FilterableTable","dataArray","EnableSerialNumber","maxHeightOption","columns","createCol","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","minWidth","IconButton","Number","editRow","Edit","color","Delete","Dialog","onClose","DialogTitle","DialogContent","htmlFor","id","selectedStateId","selectedState","find","state","_objectSpread","map","type","DialogActions","disabled","method","bodyData","prev","message","isNaN","_inputValue$State_Nam","payload","item","concat","role","DialogContentText","MuiButton","deletedItemId","autoFocus","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","replace","key","Field_Name","field","arguments","length","undefined","align","verticalAlign","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","title","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","_ref2","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","Fragment","TableRow","TableCell","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","verticalAlignClass","foundEntry","Object","entries","_ref4","colSpan","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","i","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}