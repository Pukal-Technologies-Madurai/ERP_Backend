{"version":3,"file":"static/js/4429.5900ad96.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Refresh.js","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/CalendarMonth.js","../node_modules/@mui/icons-material/esm/ArrowOutward.js","../node_modules/@mui/icons-material/esm/Group.js","Pages/CurrentProjects/projectsList.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4z\"\n}), 'Refresh');","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V10h14zM9 14H7v-2h2zm4 0h-2v-2h2zm4 0h-2v-2h2zm-8 4H7v-2h2zm4 0h-2v-2h2zm4 0h-2v-2h2z\"\n}), 'CalendarMonth');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 6v2h8.59L5 17.59 6.41 19 16 9.41V18h2V6z\"\n}), 'ArrowOutward');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5\"\n}), 'Group');","// import { useEffect, useState, useContext } from \"react\";\r\n// import '../common.css';\r\n// import { IconButton } from '@mui/material'\r\n// import { Launch } from '@mui/icons-material'\r\n// import { BarChart, Group, WorkHistory, CalendarMonth } from '@mui/icons-material';\r\n// import { CgUserList } from \"react-icons/cg\";\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\n\r\n\r\n// const ActiveProjects = () => {\r\n//     const localData = localStorage.getItem(\"user\");\r\n//     const parseData = JSON.parse(localData);\r\n//     const [projects, setProjects] = useState([]);\r\n//     const { contextObj } = useContext(MyContext);\r\n//     const nav = useNavigate();\r\n\r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/project/Abstract?Company_id=${parseData?.Company_id}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setProjects(data.data);\r\n//             }\r\n//         }).catch(e => console.error(e)) \r\n//     }, []);\r\n\r\n//     const calcPercentage = (task, completed) => {\r\n//         if (Number(task) === 0) {\r\n//             return 0;\r\n//         } else {\r\n//             return ((Number(completed) / Number(task)) * 100).toFixed(0);\r\n//         }\r\n//     }\r\n\r\n//     const CardDisplay = ({ icon, label, value, value2 }) => {\r\n//         return (\r\n//             <div className=\"col-xxl-3 col-lg-4 col-md-6 mb-3\">\r\n//                 <div className=\"p-3 rounded-3 mnh\">\r\n//                     <div className=\"d-flex\">\r\n//                         <span className='smallicon fa-17 me-2'>{icon}</span>\r\n//                         <span className={`text-uppercase fw-bold text-muted fa-16`}>\r\n//                             {label}\r\n//                         </span>\r\n//                     </div>\r\n//                     <p className={`text-end mb-0 fw-bold`} style={{ fontSize: '26px' }} >\r\n//                         {value}\r\n//                         <span className=\"fa-20\">{value2 && ' /' + value2}</span>\r\n//                     </p>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             {projects.map((o, i) => (\r\n//                 <div className=\"project-card p-0\"\r\n//                     key={i}\r\n//                     onClick={() => {\r\n//                         nav('projectDetails', {\r\n//                             state: {\r\n//                                 project: o,\r\n//                                 rights: {\r\n//                                     read: contextObj.Read_Rights,\r\n//                                     add: contextObj.Add_Rights,\r\n//                                     edit: contextObj.Edit_Rights,\r\n//                                     delete: contextObj.Delete_Rights\r\n//                                 }\r\n//                             }\r\n//                         })\r\n//                     }} >\r\n//                     <div className=\"fa-18 mb-3 text-dark text-uppercase fw-bold d-flex align-items-center px-3 py-2 border-bottom \">\r\n//                         <span className=\"flex-grow-1\">{o.Project_Name} </span>\r\n//                         <IconButton className=\"bg-light\" onClick={() => {\r\n//                             nav('projectschedule', {\r\n//                                 state: {\r\n//                                     project: o,\r\n//                                     rights: {\r\n//                                         read: contextObj.Read_Rights,\r\n//                                         add: contextObj.Add_Rights,\r\n//                                         edit: contextObj.Edit_Rights,\r\n//                                         delete: contextObj.Delete_Rights\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         }\r\n//                         }>\r\n//                             <Launch className=\"text-dark\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n\r\n//                     <div className=\"row px-3\">\r\n\r\n//                         <CardDisplay\r\n//                             icon={<BarChart className=\"fa-in\" />}\r\n//                             label={'progress'}\r\n//                             value={calcPercentage(o?.TasksScheduled, o?.CompletedTasks) + ' %'}\r\n//                         />\r\n\r\n//                         <CardDisplay\r\n//                             icon={<WorkHistory className=\"fa-in\" />}\r\n//                             label={'schedule / completed'}\r\n//                             value={o?.SchedulesCompletedCount}\r\n//                             value2={o?.SchedulesCount}\r\n//                         />\r\n\r\n//                         <CardDisplay\r\n//                             icon={<WorkHistory className=\"fa-in\" />}\r\n//                             label={'task / Completed'}\r\n//                             value={o?.CompletedTasks}\r\n//                             value2={o?.TasksScheduled}\r\n//                         />\r\n\r\n//                         <CardDisplay\r\n//                             icon={<CgUserList className=\"fa-in\" />}\r\n//                             label={'task process / assigned'}\r\n//                             value={o?.TasksProgressCount}\r\n//                             value2={o?.TasksAssignedToEmployee}\r\n//                         />\r\n\r\n//                         <CardDisplay\r\n//                             icon={<Group className=\"fa-in\" />}\r\n//                             label={'employee involved'}\r\n//                             value={o?.EmployeesInvolved}\r\n//                         />\r\n\r\n//                         <div className=\"col-xxl-3 col-lg-4 col-md-6 mb-3\">\r\n//                             <div className=\"p-3 rounded-3 mnh\" >\r\n//                                 <div className=\"d-flex\">\r\n//                                     <span className='smallicon fa-17 me-2'><CalendarMonth className=\"fa-in\" /></span>\r\n//                                     <span className='text-uppercase fw-bold fa-16 text-muted'>duration</span>\r\n//                                 </div>\r\n//                                 <p className=\"text-end fa-15 mb-0 fw-bold\">\r\n//                                     {o?.Est_Start_Dt && (\r\n//                                         new Date(o.Est_Start_Dt)\r\n//                                             .toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' })\r\n//                                     )}\r\n//                                     {\" - \"}\r\n//                                     {o?.Est_End_Dt && (\r\n//                                         new Date(o.Est_End_Dt)\r\n//                                             .toLocaleDateString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric' })\r\n//                                     )}\r\n//                                     {\" \"}\r\n//                                     {\"(\" + ((new Date(o.Est_End_Dt) - new Date(o.Est_Start_Dt)) / (1000 * 60 * 60 * 24) + 1) + \"DAYS)\"}\r\n//                                 </p>\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default ActiveProjects;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport '../common.css';\r\nimport { IconButton, Tooltip } from '@mui/material'\r\nimport { ArrowOutward as ArrowOutwardIcon, Refresh as RefreshIcon } from '@mui/icons-material'\r\nimport { BarChart, Group, CalendarMonth } from '@mui/icons-material';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst ActiveProjects = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectTasks, setProjectTasks] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const { contextObj } = useContext(MyContext);\r\n    const nav = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetchLink({\r\n            address: `taskManagement/project/Abstract?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProjects(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n        .finally(() => setIsLoading(false));\r\n    }, []);\r\n\r\n    const fetchProjectTasks = async (projectId) => {\r\n        // Return early if already fetched to avoid duplicate calls\r\n        if (projectTasks[projectId]) return;\r\n        \r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/task/project/${projectId}`\r\n            });\r\n            if (data.success) {\r\n                setProjectTasks(prev => ({\r\n                    ...prev,\r\n                    [projectId]: data.data\r\n                }));\r\n            }\r\n        } catch (e) {\r\n            console.error('Error fetching project tasks:', e);\r\n        }\r\n    }\r\n\r\n    const calcPercentage = (task, completed) => {\r\n        if (Number(task) === 0) {\r\n            return 0;\r\n        } else {\r\n            return ((Number(completed) / Number(task)) * 100).toFixed(0);\r\n        }\r\n    }\r\n\r\n    const getDurationDays = (startDate, endDate) => {\r\n        const start = new Date(startDate);\r\n        const end = new Date(endDate);\r\n        const timeDiff = end - start;\r\n        const dayDiff = timeDiff / (1000 * 60 * 60 * 24);\r\n        return Math.max(1, Math.ceil(dayDiff + 1)); // Ensure at least 1 day\r\n    }\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n        try {\r\n            return new Date(dateString).toLocaleDateString('en-IN', { \r\n                day: '2-digit', \r\n                month: '2-digit', \r\n                year: 'numeric' \r\n            });\r\n        } catch (error) {\r\n            return 'Invalid Date';\r\n        }\r\n    }\r\n\r\n    const getStatusBadge = (status) => {\r\n        switch (status?.toLowerCase()) {\r\n            case 'completed':\r\n                return 'bg-success';\r\n            case 'in progress':\r\n                return 'bg-warning';\r\n            case 'pending':\r\n                return 'bg-secondary';\r\n            case 'not started':\r\n                return 'bg-info';\r\n            default:\r\n                return 'bg-secondary';\r\n        }\r\n    }\r\n\r\n    const getPriorityBadge = (priority) => {\r\n        switch (priority?.toLowerCase()) {\r\n            case 'high':\r\n                return 'bg-danger';\r\n            case 'medium':\r\n                return 'bg-warning';\r\n            case 'low':\r\n                return 'bg-info';\r\n            default:\r\n                return 'bg-secondary';\r\n        }\r\n    }\r\n\r\n    const handleProjectClick = (project) => {\r\n        nav('projectDetails', {\r\n            state: {\r\n                project: project,\r\n                rights: {\r\n                    read: contextObj.Read_Rights,\r\n                    add: contextObj.Add_Rights,\r\n                    edit: contextObj.Edit_Rights,\r\n                    delete: contextObj.Delete_Rights\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleScheduleClick = (project, e) => {\r\n        e?.stopPropagation();\r\n        nav('projectschedule', {\r\n            state: {\r\n                project: project,\r\n                rights: {\r\n                    read: contextObj.Read_Rights,\r\n                    add: contextObj.Add_Rights,\r\n                    edit: contextObj.Edit_Rights,\r\n                    delete: contextObj.Delete_Rights\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleTaskClick = (task, e) => {\r\n        e?.stopPropagation();\r\n        // Navigate to task details or handle task click\r\n        console.log('Task clicked:', task);\r\n        // You can implement navigation to task details here\r\n        // nav('taskDetails', { state: { task } });\r\n    }\r\n\r\n    // Expandable Component for Project Details with Task List\r\n    const ProjectExpandableComponent = ({ row }) => {\r\n        const [isTasksLoading, setIsTasksLoading] = useState(false);\r\n        const hasPendingTasks = Number(row?.TasksScheduled) - Number(row?.CompletedTasks) > 0;\r\n        const tasks = projectTasks[row.Project_id] || [];\r\n        \r\n        // Fetch tasks when component mounts/expands\r\n        useEffect(() => {\r\n            const fetchTasks = async () => {\r\n                if (row.Project_id && !projectTasks[row.Project_id]) {\r\n                    setIsTasksLoading(true);\r\n                    await fetchProjectTasks(row.Project_id);\r\n                    setIsTasksLoading(false);\r\n                }\r\n            };\r\n\r\n            fetchTasks();\r\n        }, [row.Project_id]);\r\n\r\n        return (\r\n            <div className=\"p-3\">\r\n                {/* Project Summary Table */}\r\n                <div className=\"mb-4\">\r\n                    <h6 className=\"fw-bold mb-3\">Project Summary</h6>\r\n                    <table className=\"table table-bordered\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"p-2 bg-light fw-bold\" style={{width: '15%'}}>Project Code</td>\r\n                                <td className=\"p-2\" style={{width: '18%'}}>{row.Project_Code || 'N/A'}</td>\r\n                                <td className=\"p-2 bg-light fw-bold\" style={{width: '15%'}}>Start Date</td>\r\n                                <td className=\"p-2\" style={{width: '18%'}}>{formatDate(row?.Est_Start_Dt)}</td>\r\n                                <td className=\"p-2 bg-light fw-bold\" style={{width: '15%'}}>End Date</td>\r\n                                <td className=\"p-2\" style={{width: '19%'}}>{formatDate(row?.Est_End_Dt)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-2 bg-light fw-bold\">Duration</td>\r\n                                <td className=\"p-2\">\r\n                                    {getDurationDays(row?.Est_Start_Dt, row?.Est_End_Dt)} DAYS\r\n                                </td>\r\n                                <td className=\"p-2 bg-light fw-bold\">Total Tasks</td>\r\n                                <td className=\"p-2\">{row?.TasksScheduled || 0}</td>\r\n                                <td className=\"p-2 bg-light fw-bold\">Completed Tasks</td>\r\n                                <td className=\"p-2\">{row?.CompletedTasks || 0}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-2 bg-light fw-bold\">Project Status</td>\r\n                                <td className=\"p-2\" colSpan={5}>\r\n                                    <span className={`badge ${Number(row?.CompletedTasks) === Number(row?.TasksScheduled) ? \r\n                                        'bg-success' : 'bg-warning'}`}>\r\n                                        {Number(row?.CompletedTasks) === Number(row?.TasksScheduled) ? \r\n                                        'Completed' : 'In Progress'}\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Progress Details Table */}\r\n                <div className=\"mb-4\">\r\n                    <h6 className=\"fw-bold mb-3\">Progress Overview</h6>\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"bg-light\">\r\n                            <tr>\r\n                                <th className=\"p-2\">Metric</th>\r\n                                <th className=\"p-2\">Completed</th>\r\n                                <th className=\"p-2\">Total</th>\r\n                                <th className=\"p-2\">\r\n                                    Progress\r\n                                    {hasPendingTasks && (\r\n                                        <Tooltip title=\"View Schedule\">\r\n                                            <IconButton \r\n                                                size=\"small\" \r\n                                                onClick={(e) => handleScheduleClick(row, e)}\r\n                                            >\r\n                                                <ArrowOutwardIcon className=\"text-blue-600\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )}\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"p-2 fw-bold\">Tasks</td>\r\n                                <td className=\"p-2\">{row?.CompletedTasks || 0}</td>\r\n                                <td className=\"p-2\">{row?.TasksScheduled || 0}</td>\r\n                                <td className=\"p-2 fw-bold\">\r\n                                    <span className={Number(row?.CompletedTasks) === Number(row?.TasksScheduled) ? \r\n                                        \"text-green-600\" : \"text-orange-600\"}>\r\n                                        {calcPercentage(row?.TasksScheduled, row?.CompletedTasks)}%\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-2 fw-bold\">Schedules</td>\r\n                                <td className=\"p-2\">{row?.SchedulesCompletedCount || 0}</td>\r\n                                <td className=\"p-2\">{row?.SchedulesCount || 0}</td>\r\n                                <td className=\"p-2 fw-bold\">\r\n                                    <span className={Number(row?.SchedulesCompletedCount) === Number(row?.SchedulesCount) ? \r\n                                        \"text-green-600\" : \"text-orange-600\"}>\r\n                                        {calcPercentage(row?.SchedulesCount, row?.SchedulesCompletedCount)}%\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"p-2 fw-bold\">Task Progress</td>\r\n                                <td className=\"p-2\">{row?.TasksProgressCount || 0}</td>\r\n                                <td className=\"p-2\">{row?.TasksAssignedToEmployee || 0}</td>\r\n                                <td className=\"p-2 fw-bold\">\r\n                                    <span className={Number(row?.TasksProgressCount) === Number(row?.TasksAssignedToEmployee) ? \r\n                                        \"text-green-600\" : \"text-orange-600\"}>\r\n                                        {calcPercentage(row?.TasksAssignedToEmployee, row?.TasksProgressCount)}%\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                {/* Task Details List */}\r\n                <div className=\"mb-4\">\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <h6 className=\"fw-bold mb-0\">Task Details</h6>\r\n                        <div className=\"d-flex align-items-center\">\r\n                            {isTasksLoading && (\r\n                                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\">\r\n                                    <span className=\"visually-hidden\">Loading...</span>\r\n                                </div>\r\n                            )}\r\n                            <small className=\"text-muted\">\r\n                                {tasks.length} task(s) found\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {isTasksLoading ? (\r\n                        <div className=\"text-center py-4\">\r\n                            <div className=\"spinner-border text-primary\" role=\"status\">\r\n                                <span className=\"visually-hidden\">Loading tasks...</span>\r\n                            </div>\r\n                            <p className=\"mt-2 text-muted\">Loading tasks...</p>\r\n                        </div>\r\n                    ) : tasks.length > 0 ? (\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-bordered table-hover\">\r\n                                <thead className=\"bg-light\">\r\n                                    <tr>\r\n                                        <th className=\"p-2\">Task Name</th>\r\n                                        <th className=\"p-2\">Assigned To</th>\r\n                                        <th className=\"p-2\">Priority</th>\r\n                                        <th className=\"p-2\">Status</th>\r\n                                        <th className=\"p-2\">Start Date</th>\r\n                                        <th className=\"p-2\">End Date</th>\r\n                                        <th className=\"p-2\">Progress</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {tasks.map((task, index) => (\r\n                                        <tr \r\n                                            key={task.Task_id || index} \r\n                                            className=\"cursor-pointer\"\r\n                                            onClick={(e) => handleTaskClick(task, e)}\r\n                                        >\r\n                                            <td className=\"p-2 fw-bold\">\r\n                                                {task.Task_name || `Task ${index + 1}`}\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                {task.AssignedTo || task.Assigned_To || 'Unassigned'}\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                <span className={`badge ${getPriorityBadge(task.Priority)}`}>\r\n                                                    {task.Priority || 'Medium'}\r\n                                                </span>\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                <span className={`badge ${getStatusBadge(task.Status)}`}>\r\n                                                    {task.Status || 'Not Started'}\r\n                                                </span>\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                {formatDate(task.Start_date || task.Start_Date)}\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                {formatDate(task.End_date || task.End_Date)}\r\n                                            </td>\r\n                                            <td className=\"p-2\">\r\n                                                <div className=\"d-flex align-items-center\">\r\n                                                    <div className=\"progress flex-grow-1 me-2\" style={{height: '8px'}}>\r\n                                                        <div \r\n                                                            className={`progress-bar ${\r\n                                                                task.Status?.toLowerCase() === 'completed' ? 'bg-success' : \r\n                                                                task.Status?.toLowerCase() === 'in progress' ? 'bg-warning' : 'bg-info'\r\n                                                            }`}\r\n                                                            style={{width: `${task.Progress || 0}%`}}\r\n                                                        ></div>\r\n                                                    </div>\r\n                                                    <small className=\"fw-bold\">\r\n                                                        {task.Progress || 0}%\r\n                                                    </small>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"text-center py-4 border rounded\">\r\n                            <p className=\"text-muted mb-0\">No tasks found for this project</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <div className=\"mt-3 d-flex gap-2\">\r\n                    <button \r\n                        className=\"btn btn-sm btn-outline-primary\"\r\n                        onClick={() => handleProjectClick(row)}\r\n                    >\r\n                        View Project Details\r\n                    </button>\r\n                    <button \r\n                        className=\"btn btn-sm btn-outline-secondary\"\r\n                        onClick={(e) => handleScheduleClick(row, e)}\r\n                    >\r\n                        View Project Schedule\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <FilterableTable\r\n            title=\"Active Projects\"\r\n            dataArray={projects}\r\n            EnableSerialNumber\r\n            columns={[\r\n                {\r\n                    ColumnHeader: \"Project Name\",\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <span \r\n                            className=\"fw-bold text-uppercase cursor-pointer\"\r\n                            onClick={() => handleProjectClick(row)}\r\n                            style={{ cursor: 'pointer' }}\r\n                        >\r\n                            {row.Project_Name}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    ColumnHeader: \"Progress\",\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <BarChart className=\"text-muted me-2\" fontSize=\"small\" />\r\n                            <span>{calcPercentage(row?.TasksScheduled, row?.CompletedTasks)}%</span>\r\n                        </div>\r\n                    ),\r\n                },\r\n                {\r\n                    ColumnHeader: \"Employee Involved\",\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <Group className=\"text-muted me-2\" fontSize=\"small\" />\r\n                            <span>{row?.EmployeesInvolved || 0}</span>\r\n                        </div>\r\n                    ),\r\n                },\r\n                {\r\n                    ColumnHeader: \"Duration\",\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <CalendarMonth className=\"text-muted me-2\" fontSize=\"small\" />\r\n                            <div>\r\n                                <div>{formatDate(row?.Est_Start_Dt)} - {formatDate(row?.Est_End_Dt)}</div>\r\n                                <small className=\"text-muted\">\r\n                                    ({getDurationDays(row?.Est_Start_Dt, row?.Est_End_Dt)} DAYS)\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n                    ),\r\n                },\r\n            ]}\r\n            ButtonArea={\r\n                <>\r\n                    <Tooltip title=\"Refresh Projects\">\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => window.location.reload()}\r\n                        >\r\n                            <RefreshIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </>\r\n            }\r\n            tableMaxHeight={550}\r\n            isExpendable={true}\r\n            expandableComp={(props) => (\r\n                <ProjectExpandableComponent {...props} />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ActiveProjects;"],"names":["createSvgIcon","_jsx","d","preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","ActiveProjects","localData","localStorage","getItem","parseData","JSON","parse","projects","setProjects","projectTasks","setProjectTasks","isLoading","setIsLoading","contextObj","useContext","MyContext","nav","useNavigate","useEffect","fetchLink","address","Company_id","then","success","catch","finally","calcPercentage","task","completed","toFixed","getDurationDays","startDate","endDate","start","Date","dayDiff","Math","max","ceil","formatDate","dateString","toLocaleDateString","day","month","year","getStatusBadge","status","getPriorityBadge","priority","handleProjectClick","project","state","rights","read","Read_Rights","add","Add_Rights","edit","Edit_Rights","delete","Delete_Rights","handleScheduleClick","stopPropagation","ProjectExpandableComponent","isTasksLoading","setIsTasksLoading","hasPendingTasks","TasksScheduled","CompletedTasks","tasks","Project_id","async","projectId","prev","fetchProjectTasks","fetchTasks","style","width","Project_Code","Est_Start_Dt","Est_End_Dt","ArrowOutwardIcon","SchedulesCompletedCount","SchedulesCount","TasksProgressCount","TasksAssignedToEmployee","role","_task$Status","_task$Status2","handleTaskClick","Task_name","AssignedTo","Assigned_To","Priority","Status","Start_date","Start_Date","End_date","End_Date","height","Progress","Task_id","cursor","Project_Name","BarChart","Group","EmployeesInvolved","_ref5","CalendarMonth","window","location","reload","RefreshIcon","props"],"sourceRoot":""}