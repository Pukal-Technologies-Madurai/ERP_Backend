{"version":3,"file":"static/js/6430.1cb738d5.chunk.js","mappings":"yVAQA,MAkHA,EAlHuBA,IAA8E,IAA7E,WAAEC,EAAa,GAAE,cAAEC,EAAa,WAAEC,EAAa,GAAE,aAAEC,EAAe,IAAKJ,EAE3F,OACIK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,8DAA6DD,SAAA,EACxEE,EAAAA,EAAAA,KAAA,MAAID,UAAU,kBAAiBD,SAAC,oBAChCE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHC,QAAQ,WACRC,MAAM,UACNC,KAAK,SACLC,QAASA,IAAMZ,EAAca,GAAO,IAAIA,GAAGC,EAAAA,EAAAA,GAAA,GAAOC,EAAAA,MAA0BV,SAC/E,YAGLF,EAAAA,EAAAA,MAAA,SAAOG,UAAU,uBAAsBD,SAAA,EAEnCE,EAAAA,EAAAA,KAAA,SAAAF,UACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,QAAOD,SAAC,SACtBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,QAAOD,SAAC,gBACtBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,QAAOD,SAAC,cACtBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,QAAOD,SAAC,YAI9BE,EAAAA,EAAAA,KAAA,SAAAF,UACKW,EAAAA,EAAAA,IAAQjB,GAAYkB,IAAI,CAACC,EAAKC,KAC3BhB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,yBAAwBD,SAAEc,EAAQ,KAChDZ,EAAAA,EAAAA,KAAA,MAAID,UAAU,kBAAiBD,UAC3BE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAU,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKI,OACZC,MAAU,OAAHL,QAAG,IAAHA,OAAG,EAAHA,EAAKM,UAEhBC,SAAUC,GAAK1B,EAAc2B,GAClBA,EAAKV,IAAI,CAACW,EAAUC,KACvB,IAAIC,EAAAA,EAAAA,IAAcD,EAAKV,GAAQ,CAC3B,MAAMY,GAAQf,EAAAA,EAAAA,IAAQf,GAAY+B,KAAKC,IAAKH,EAAAA,EAAAA,IAAe,OAADG,QAAC,IAADA,OAAC,EAADA,EAAGC,eAAgBR,EAAEL,QAC/E,OAAAP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOc,GAAQ,IACXO,aACIC,EAAAA,EAAAA,IAAsB,OAARR,QAAQ,IAARA,OAAQ,EAARA,EAAUO,aAClBE,OAAe,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAUO,cACjBC,EAAAA,EAAAA,IAAcL,EAAMO,WAChBD,OAAON,EAAMO,WACb,EACdhB,OAAQe,OAAOX,EAAEL,OACjBG,SAAUE,EAAEH,OAEpB,CACA,OAAOK,KAGfW,QACI,KAAIvB,EAAAA,EAAAA,IAAQf,GAAYuC,OAAOC,IAC1B1C,EAAW2C,KAAKC,IACbb,EAAAA,EAAAA,IAAca,EAAGrB,OAAQmB,EAAIP,mBAEjCjB,IAAI0B,IAAE,CACNtB,MAAOsB,EAAGT,eACVX,MAAOoB,EAAGC,oBAGlBC,OAAQC,EAAAA,GACRC,cAAc,EACdC,YAAa,eACbC,aAAcC,EAAAA,QAGtB3C,EAAAA,EAAAA,KAAA,MAAID,UAAU,iBAAiB6C,MAAO,CAAEC,SAAU,QAASC,SAAU,SAAUhD,UAC3EF,EAAAA,EAAAA,MAAA,UACIkB,MAAU,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKiB,YACZV,SAAUC,GAAK1B,EAAe2B,GACnBA,EAAKV,IAAI,CAACW,EAAUC,KACnBC,EAAAA,EAAAA,IAAcD,EAAKV,IACnBL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOc,GAAQ,IACXO,YAAaT,EAAE4B,OAAOjC,QAGvBO,IAGftB,UAAU,wBAAuBD,SAAA,EAEjCE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAEhB,SAAC,YAChBW,EAAAA,EAAAA,IAAQd,GAAce,IAAI,CAAC0B,EAAIY,KAC5BhD,EAAAA,EAAAA,KAAA,UAAQc,MAAS,OAAFsB,QAAE,IAAFA,OAAE,EAAFA,EAAIa,iBAAiBnD,SAAc,OAAFsC,QAAE,IAAFA,OAAE,EAAFA,EAAIc,eAAVF,UAItDhD,EAAAA,EAAAA,KAAA,MAAID,UAAU,iBAAgBD,UAC1BE,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACP9C,QAASA,KACLZ,EAAc2B,GACHA,EAAKa,OAAO,CAACmB,EAAGC,IAAazC,IAAUyC,KAGtDC,KAAK,QAAOxD,UAEZE,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,CAACpD,MAAM,gBA1EjBS,a,kHC1BjC,MAgaA,EAhauBrB,IAehB,IAADiE,EAAAC,EAAA,IAfkB,SACpB3D,EAAQ,cACR4D,EAAgB,GAAE,iBAClBC,EAAgB,KAChBC,GAAO,EAAK,QACZC,EAAO,SACPC,EAAW,GAAE,OACbC,EAAS,GAAE,IACXC,EAAM,GAAE,QACRC,EAAU,GAAE,cACZC,EAAa,QACbC,EAAO,WACPC,EAAa,KAAI,aACjBC,EAAe,CAAC,EAAC,aACjBC,EAAe,IAClB/E,EAEG,MAAOgF,EAAgBC,IAAqBC,EAAAA,EAAAA,UAASJ,GAE/CK,GAAcnD,EAAAA,EAAAA,IAAc2C,EAAe,GAC3CS,GAAmBpD,EAAAA,EAAAA,IAAc2C,EAAe,IAEtDU,EAAAA,EAAAA,WAAU,MACFC,EAAAA,EAAAA,IAAcT,IAAeR,GAC7BY,EAAkBlE,GACdwE,OAAOC,YACHD,OAAOE,QAAQ1E,GAAKI,IAAIuE,IAAA,IAAEC,EAAKpE,GAAMmE,EAAA,MAAK,CAACC,EAAKd,EAAWc,GAAOd,EAAWc,GAAOpE,QAIjG,CAACsD,IAEJ,MAAMe,EAAsBC,IAAS,IAAAC,EAAA,OAAqE,QAArEA,EAAa,OAARvB,QAAQ,IAARA,OAAQ,EAARA,EAAUrC,KAAK6D,IAAO/D,EAAAA,EAAAA,IAAiB,OAAH+D,QAAG,IAAHA,OAAG,EAAHA,EAAKC,WAAYH,WAAW,IAAAC,EAAAA,EAAI,CAAC,GAEzGG,EAAcA,KAChBhB,EAAkBH,GAClBR,KAmDJ,OACIjE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACKA,GAEDF,EAAAA,EAAAA,MAAC6F,EAAAA,EAAM,CACH7B,KAAMA,EACNC,QAAS2B,EACT3C,SAAS,KAAK6C,WAAS,EAAA5F,SAAA,EAEvBE,EAAAA,EAAAA,KAAC2F,EAAAA,EAAW,CAAC5F,UAAU,gBAAeD,UAClCE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,4BAEVF,EAAAA,EAAAA,MAAA,QAAMgG,SAAUzE,IACZA,EAAE0E,iBACEtB,EAAeuB,SA5D/BnC,EAAiBrD,GAwCN,IAvCkBA,EAAI2B,OAAO8D,KAAYxE,EAAAA,EAAAA,IAAcwE,EAAQD,QAASvB,EAAeuB,UAEhEhB,OAAOC,YACjCD,OAAOE,QAAQX,GAAc3D,IAAIsF,IAAmB,IAAjBd,EAAKpE,GAAMkF,EAC1C,MAAMC,EAAgBd,EAAmBZ,EAAeuB,SAClDI,EAAgB/B,EAAU8B,EAAcE,OAASF,EAAcG,MAC/DC,EAAYH,EAAgB,GAE5B,SAAEI,EAAQ,UAAEC,EAAS,OAAEC,GAAWjC,EAElCkC,EAAU9B,EAAmB,UAAYD,EAAc,SAAW,MAClEgC,GAAcC,EAAAA,EAAAA,GAAoBJ,EAAWL,EAAeO,GAC5DG,GAAUD,EAAAA,EAAAA,GAAoBH,EAAQN,EAAeO,GAErDI,EAAW1C,EAA6B,EAAnByC,EAAQE,SAC7BC,EAAU5C,EAAUyC,EAAQI,SAAW,EACvCC,EAAY9C,EAAgC,EAAtByC,EAAQM,YAC9BC,EAAWhD,EAAUyC,EAAQQ,YAAc,EAEjD,OAAQlC,GACJ,IAAK,YAAa,MAAO,CAACA,EAAKe,EAAcoB,cAC7C,IAAK,eAAgB,MAAO,CAACnC,EAAKwB,EAAYY,aAC9C,IAAK,YAAa,MAAO,CAACpC,EAAKoB,GAC/B,IAAK,SAAU,MAAO,CAACpB,EAAKmB,EAAY,EAAI,GAC5C,IAAK,iBAAkB,MAAO,CAACnB,EAAK0B,EAAQU,aAC5C,IAAK,WAAY,MAAO,CAACpC,EAAKgB,GAC9B,IAAK,OACL,IAAK,OAAQ,MAAO,CAAChB,EAAY,OAAP2B,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WACL,IAAK,WAAY,MAAO,CAAC3B,EAAKP,EAAmB,EAAIsC,GACrD,IAAK,OAAQ,MAAO,CAAC/B,EAAY,OAAP6B,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WAAY,MAAO,CAAC7B,EAAKP,EAAmB,EAAIwC,GACrD,IAAK,YAAa,MAAO,CAACjC,EAAK0B,EAAQW,UAEvC,QAAS,MAAO,CAACrC,EAAKX,EAAeW,IAAQpE,SAQ7D0E,KAoBgBgC,EAAAA,GAAMC,KAAK,mBAEjB3H,SAAA,EACEE,EAAAA,EAAAA,KAAC0H,EAAAA,EAAa,CAAA5H,UACVF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,WAAUD,SAAA,EAGrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACtBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,WACPE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAOyD,EAAeoD,QAAS3G,MAAOuD,EAAeqD,OAC9D1G,SAAWC,GAAMqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEqH,QAASxG,EAAEL,MAAO8G,MAAOzG,EAAEH,SAChFgB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,MACvC9D,EAAOrD,IAAI4E,IAAG,CAAOxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAKsC,MAAO5G,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAKwC,eAE3DxF,OAAQC,EAAAA,GACRwF,iBAAkBC,SAASC,KAC3BzF,cAAc,EACdC,YAAa,eACbyF,cAAe,IACfxF,aAAcC,EAAAA,SAKtB/C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACtBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,WACPE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAOyD,EAAe4D,QAASnH,MAAOuD,EAAe6D,OAC9DlH,SAAWC,GACPqD,EAAmBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAG,IAAE6H,QAAShH,EAAEL,MAAOsH,MAAOjH,EAAEH,SAErEgB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,MACvC/D,EACE7B,OACIoG,IACG9D,EAAeoD,UACTpG,EAAAA,EAAAA,IAAc8G,EAAIT,MAAOrD,EAAeoD,UAGrDW,OAAO,CAACC,EAAKF,KAELE,EAAIpG,KAAMqG,GAAQA,EAAI1H,QAAUuH,EAAII,gBAErCF,EAAIG,KAAK,CACL5H,MAAOuH,EAAII,cACXzH,MAAOqH,EAAIM,YAGZJ,GACR,KAEXjG,OAAQC,EAAAA,GACRwF,iBAAkBC,SAASC,KAC3BzF,cAAc,EACdC,YAAa,eACbyF,cAAe,IACfxF,aAAcC,EAAAA,SAKtB/C,EAAAA,EAAAA,MAAA,OAAKG,UACD+E,OAAO8D,OAAOrE,EAAgB,aAAe,eAAiB,aACjEzE,SAAA,EACGF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,cAAUE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,QAC9B7I,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAOyD,EAAeuB,QACtB9E,MAC8C,QADzCwC,EACD2B,EAAmBZ,EAAeuB,gBAAQ,IAAAtC,OAAA,EAA1CA,EAA4C6D,cAGpDQ,YAAYhG,EAAAA,EAAAA,IAAc0C,EAAeuE,QACzCf,iBAAkBC,SAASC,KAC3B/G,SAAUC,IACN,MAAM4H,EAAc5D,EAAmBhE,EAAEL,OACzC0D,EAAkBlE,IAAG,IAAA0I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAG,IAEN8H,MAA4B,QAAvBY,EAAED,EAAYJ,iBAAS,IAAAK,EAAAA,EAAI1I,EAAI8H,MACpCD,QAAkC,QAA3Bc,EAAEF,EAAYN,qBAAa,IAAAQ,EAAAA,EAAI3I,EAAI6H,QAC1CP,MAA6B,QAAxBsB,EAAEH,EAAYjB,kBAAU,IAAAoB,EAAAA,EAAI5I,EAAIsH,MACrCD,QAA0B,QAAnBwB,EAAEJ,EAAYnB,aAAK,IAAAuB,EAAAA,EAAI7I,EAAIqH,QAElC7B,QAAS3E,EAAEL,MACXyF,UAAgC,QAAvB6C,EAAEL,EAAYxC,iBAAS,IAAA6C,EAAAA,EAAI,EACpC9C,SAAU,EACVE,OAAQ,EACR+C,QAA2B,QAApBF,EAAEN,EAAYS,cAAM,IAAAH,EAAAA,EAAI/I,EAAIiJ,QACnCE,UAA4B,QAAnBH,EAAEP,EAAYW,aAAK,IAAAJ,EAAAA,EAAIhJ,EAAImJ,UACpCE,SAAqB,OAAXZ,QAAW,IAAXA,OAAW,EAAXA,EAAaY,cAG/B3H,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,MACvC,IACI/D,EACE7B,OAAOoG,IAAO9D,EAAeoD,UAAUpG,EAAAA,EAAAA,IAAc8G,EAAIT,MAAOrD,EAAeoD,UAC/E1F,OAAOoG,IAAO9D,EAAe4D,UAAU5G,EAAAA,EAAAA,IAAc8G,EAAII,cAAelE,EAAe4D,WAC9FzH,IAAI4E,IAAG,CACLxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAKC,WACZvE,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAK+B,aACZQ,YAIO,IAHHnE,EAAckG,UAAUtI,IAAOC,EAAAA,EAAAA,IACxB,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKwE,QAAY,OAAHR,QAAG,IAAHA,OAAG,EAAHA,EAAKC,iBAKnCjD,OAAQC,EAAAA,GACRC,cAAc,EACdqH,UAAQ,EACRpH,YAAa,iBACbyF,cAAe,IACfxF,aAAcC,EAAAA,QAKrBmC,OAAO8D,OAAOrE,EAAgB,eAC3B3E,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,YACPE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAqB,OAAdyD,QAAc,IAAdA,OAAc,EAAdA,EAAgBuF,UACvB9I,OAA+E,QAAxEyC,EAAAQ,EAAQxC,KAAKsI,IAAKxI,EAAAA,EAAAA,IAAcwI,EAAEC,UAAyB,OAAdzF,QAAc,IAAdA,OAAc,EAAdA,EAAgBuF,mBAAW,IAAArG,OAAA,EAAxEA,EAA0EwG,cAAe,IAEpG/I,SAAWC,GAAMqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwJ,UAAW3I,EAAEL,SAClEkB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,OACvCpH,EAAAA,EAAAA,IAAQwD,GAASvD,IAAI4E,IAAG,CACvBxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAK0E,UACZhJ,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAK2E,gBAGpB3H,OAAQC,EAAAA,GACRsF,aAAahG,EAAAA,EAAAA,IAA4B,OAAd0C,QAAc,IAAdA,OAAc,EAAdA,EAAgBuB,SAC3CiC,iBAAkBC,SAASC,KAC3BzF,cAAc,EACdC,YAAa,gBACbC,aAAcC,EAAAA,SAO1B/C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,aAASE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,QAC7B7I,EAAAA,EAAAA,KAAA,SACI6J,UAAQ,EACR/I,MAAOyD,EAAe+B,SAAW/B,EAAe+B,SAAW,GAC3D4D,QAASC,EAAAA,GACTC,WAAWvI,EAAAA,EAAAA,IAAc0C,EAAeuB,SACxC5E,SAAUC,IACFoD,EAAegC,UACf/B,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAG,IACNkG,QAAQ6D,EAAAA,EAAAA,IAAe9F,EAAegC,UAAWpF,EAAE4B,OAAOjC,OAC1DwF,SAAUnF,EAAE4B,OAAOjC,SAEhByD,EAAeiC,OACtBhC,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAG,IACNiG,WAAW+D,EAAAA,EAAAA,IAAShK,EAAIkG,OAAQrF,EAAE4B,OAAOjC,OACzCwF,SAAUnF,EAAE4B,OAAOjC,SAGvB0D,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAG,IACNgG,SAAUnF,EAAE4B,OAAOjC,UAI/Bf,UAAU,WACVwK,IAAK,OAIZzF,OAAO8D,OAAOrE,EAAgB,aAC3B3E,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,sBACPE,EAAAA,EAAAA,KAAA,SACIc,MAAOyD,EAAeiG,QAAUjG,EAAeiG,QAAU,GACzDN,QAASC,EAAAA,GACTC,WAAWvI,EAAAA,EAAAA,IAAc0C,EAAeuB,SACxC5E,SAAUC,GAAKqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BD,GAAG,IACNkK,QAASrJ,EAAE4B,OAAOjC,SAEtB+I,UAAQ,EACR9J,UAAU,iBAMtBH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,WACPE,EAAAA,EAAAA,KAAA,SACIc,MAAOyD,EAAegC,UAAYhC,EAAegC,UAAY,GAC7D2D,QAASC,EAAAA,GACTC,WAAWvI,EAAAA,EAAAA,IAAc0C,EAAeuB,SACxC5E,SAAUC,GAAKqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BD,GAAG,IACNiG,UAAWpF,EAAE4B,OAAOjC,MACpB0F,OAAQlG,EAAIgG,UAAW+D,EAAAA,EAAAA,IAAelJ,EAAE4B,OAAOjC,MAAOR,EAAIgG,UAAYhG,EAAIkG,UAE9EqD,UAAQ,EACR9J,UAAU,iBAKlBH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,SACPF,EAAAA,EAAAA,MAAA,UACIkB,MACIgE,OAAO8D,OAAOrE,EAAgB,OAASA,EAAekG,IAClD3F,OAAO8D,OAAOrE,EAAgB,WAAaA,EAAegF,QAAU,GAE5ErI,SAAUC,IACN,MAAMuJ,EAAgBvJ,EAAE4B,OAAO2H,cACzB1J,EAAQG,EAAE4B,OAAOf,QAAQ0I,GAAeC,KACxC7J,EAAQK,EAAE4B,OAAOjC,MACvB0D,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAG,IACNmK,IAAK3J,EACLyI,QAASzI,EACT4I,MAAO1I,EACPyI,UAAWzI,MAGnBjB,UAAU,WACVqK,WAAWvI,EAAAA,EAAAA,IAAc0C,EAAeuB,SAAShG,SAAA,EAEjDE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAGsJ,UAAQ,EAAAtK,SAAC,WACzBkE,EAAItD,IAAI,CAACkK,EAAGC,KACT7K,EAAAA,EAAAA,KAAA,UAAQc,MAAO8J,EAAErB,QAAQzJ,SAAW8K,EAAElB,OAAPmB,WAM3CjL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,YACPE,EAAAA,EAAAA,KAAA,SACI6J,UAAQ,EACR/I,MAAOyD,EAAeiC,OAASjC,EAAeiC,OAAS,GACvD0D,QAASC,EAAAA,GACTC,WAAWvI,EAAAA,EAAAA,IAAc0C,EAAeuB,SACxC5E,SAAUC,GAAKqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BD,GAAG,IACNkG,OAAQrF,EAAE4B,OAAOjC,MACjByF,UAAWjG,EAAIgG,UAAWgE,EAAAA,EAAAA,IAASnJ,EAAE4B,OAAOjC,MAAOR,EAAIgG,UAAYhG,EAAIiG,aAE3ExG,UAAU,WACVwK,IAAK,QAKb3K,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,WACPE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,OAAqB,OAAdyD,QAAc,IAAdA,OAAc,EAAdA,EAAgBuG,aAAc,GACrC9J,OAAqB,OAAduD,QAAc,IAAdA,OAAc,EAAdA,EAAgBuG,aAAc,IAEzC5J,SAAUC,GAAKqD,EAAkBlE,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwK,WAAY3J,EAAEL,SACjEkB,QACIsC,EAAarC,OACT8I,IACIxJ,EAAAA,EAAAA,IAAcwJ,EAAIC,QAAuB,OAAdzG,QAAc,IAAdA,OAAc,EAAdA,EAAgBuB,WACxCvE,EAAAA,EAAAA,IAAiB,OAAHwJ,QAAG,IAAHA,OAAG,EAAHA,EAAKE,UAAyB,OAAd1G,QAAc,IAAdA,OAAc,EAAdA,EAAgBuF,aAC9CoB,EAAAA,EAAAA,IAASH,EAAII,mBAAoBD,EAAAA,EAAAA,IAAuB,OAAd3G,QAAc,IAAdA,OAAc,EAAdA,EAAgB+B,WAEnE5F,IACEqK,IAAG,CAAOjK,MAAOiK,EAAIK,MAAOpK,MAAO+J,EAAIK,SAG/C9I,OAAQC,EAAAA,GACRC,cAAc,EACdC,YAAa,eACbsF,iBAAkBC,SAASC,KAC3BJ,aACKhG,EAAAA,EAAAA,IAA4B,OAAd0C,QAAc,IAAdA,OAAc,EAAdA,EAAgBuB,YAC3BjE,EAAAA,EAAAA,IAA4B,OAAd0C,QAAc,IAAdA,OAAc,EAAdA,EAAgBuF,aAC/BvI,EAAAA,EAAAA,IAA4B,OAAdgD,QAAc,IAAdA,OAAc,EAAdA,EAAgB+B,SAAU,cAQ/D1G,EAAAA,EAAAA,MAACyL,EAAAA,EAAa,CAACtL,UAAU,oDAAmDD,SAAA,EACxEE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACI,QAASA,IAAMmE,EAAkBH,GAAejE,KAAK,SAASkL,WAAWtL,EAAAA,EAAAA,KAACuL,EAAAA,EAAQ,IAAIzL,SAAC,WAC/FF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACG,KAAK,SAASC,QAASmF,EAAY1F,SAAC,YAC5CE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACG,KAAK,SAASF,QAAQ,WAAUJ,SAAC,wBCvY/D0L,GAAUC,EAAAA,EAAAA,MAAiBC,KAkgBjC,EA9f2BnM,IAAgC,IAA/B,UAAEoM,EAAS,WAAEC,GAAYrM,EACjD,MAAMsM,GAAWC,EAAAA,EAAAA,MAEX1H,GADW2H,EAAAA,EAAAA,MACWC,OACrBC,EAAUC,IAAezH,EAAAA,EAAAA,UAAS,CACrCX,SAAU,GACVqI,OAAQ,GACRC,UAAW,GACXC,YAAa,GACbrI,IAAK,GACLxC,MAAO,GACP8K,UAAW,GACXC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,cAAe,GACfC,oBAAqB,GACrBrI,aAAc,MAGXsI,EAAQC,IAAapI,EAAAA,EAAAA,UAAS,CACjCqI,kBAAkB,EAClBC,qBAAqB,KAGlBC,EAAaC,IAAkBxI,EAAAA,EAAAA,UAASyI,EAAAA,KACxCC,EAAiBC,IAAqB3I,EAAAA,EAAAA,UAAS,KAC/C4I,EAAiBC,IAAsB7I,EAAAA,EAAAA,UAAS,KAChD8I,EAAY9N,IAAiBgF,EAAAA,EAAAA,UAAS,KAEtC+I,EAAuBC,IAA4BhJ,EAAAA,EAAAA,UAAS,MAE7DC,GAAcnD,EAAAA,EAAAA,IAAcyL,EAAY9I,cAAe,GACvDS,GAAmBpD,EAAAA,EAAAA,IAAcyL,EAAY9I,cAAe,GAC5DC,GAAU5C,EAAAA,EAAAA,IAAcyL,EAAY7I,QAAS,GAC7CsC,EAAU9B,EAAmB,UAAYD,EAAc,SAAW,MAElEgJ,EADc,EACgBP,EAAgBQ,QAEpD/I,EAAAA,EAAAA,WAAU,KAEYgJ,WACd,IACQjC,GAAWA,IAEf,MACIkC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,SACMC,QAAQC,IAAI,EAClBC,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,6BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,sBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yCAADC,OAAkD,OAAPrD,QAAO,IAAPA,OAAO,EAAPA,EAASsD,eACvEH,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,0BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,iBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,0BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,mCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,oCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,kCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,6CACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yCAGlBG,GAAclB,EAAemB,QAAUnB,EAAeoB,KAAO,IAAIC,KACnE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGG,YAAYC,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGE,aAE/CE,GAAgB1B,EAAiBkB,QAAUlB,EAAiBmB,KAAO,IAAIC,KACzE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG9H,cAAckI,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAG/H,eAEjDoI,GAAiB1B,EAAiBiB,QAAUjB,EAAiBkB,KAAO,IAAIC,KAC1E,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGO,eAAeH,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGM,gBAElDrD,GAAe2B,EAAoBgB,QAAUhB,EAAoBiB,KAAO,IAAIC,KAC9E,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGQ,cAAcJ,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGO,eAEjDC,GAAW3B,EAAYe,QAAUf,EAAYgB,KAAO,IAAIC,KAC1D,CAACC,EAAGC,IAAMC,OAAOF,EAAEzF,OAAO6F,cAAcH,EAAE1F,QAExCmG,GAAa3B,EAAcc,QAAUd,EAAce,KAAO,IAAIC,KAChE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG9M,kBAAkBkN,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAG/M,mBAErDyN,GAAqB3B,EAAca,QAAUb,EAAcc,KAAO,IAAIC,KACxE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGjM,eAAeqM,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGlM,gBAElD6M,GAAmB3B,EAAwBY,QAAUZ,EAAwBa,KAAO,IAAIC,KAC1F,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGlF,aAAasF,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGnF,cAEhD+F,GAAkB3B,EAAgBW,SAAUvO,EAAAA,EAAAA,IAAQ4N,EAAgBY,MAAQ,IAAIC,KAClF,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGc,cAAcV,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGa,eAEjDC,GAAkB5B,EAAgBU,QAAUV,EAAgBW,KAAO,IAAIC,KACzE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGgB,iBAAiBZ,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGe,kBAEpDxD,GAAuB4B,EAA4BS,QAAUT,EAA4BU,KAAO,IAAIC,KACtG,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGiB,wBAAwBb,cAAe,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGgB,yBAGjElE,EAAa5L,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTD,GAAG,IACNwD,SAAU0L,EACVrD,OAAQ4C,EACR3C,UAAWqD,EACXpD,YAAaA,EACbrI,IAAK4L,EACLpO,MAAOqO,EACPvD,UAAWwD,EACXtD,OAAQuD,EACRxD,OAAO8D,EAAAA,EAAAA,IAAcb,EAAc,QAAS,CAAC,eAC7C/C,QAASuD,EAAe/N,OACpBqO,KAAQC,EAAAA,EAAAA,IAAcD,EAAIE,KAAM,YAClC9P,IAAI4P,IAAG,CAAOG,GAAIH,EAAII,OAAQC,aAAcL,EAAIL,gBAClDvD,cAAewD,EACfvD,oBAAqBA,EACrBrI,cAAc7D,EAAAA,EAAAA,IAAQ+N,EAAqBS,QAEnD,CAAE,MAAO9N,GACLyP,QAAQC,MAAM,uBAAwB1P,EAC1C,CAAC,QACOyK,GAAYA,GACpB,GAGJkF,IAED,CAAQ,OAAPtF,QAAO,IAAPA,OAAO,EAAPA,EAASsD,cASblK,EAAAA,EAAAA,WAAU,KACNwI,EAAkB9M,GACA,IAAIA,GAELI,IAAIqQ,GACNjM,OAAOC,YACVD,OAAOE,QAAQ+L,GAAMrQ,IAAIuE,IAAmB,IAAjBC,EAAKpE,GAAMmE,EAClC,MAAMgB,EAxJH,eAAA+K,EAAA,IAAW5L,EAAS6L,UAAAtD,OAAA,EAAAsD,UAAA,QAAAC,EAAA,OAA8D,QAA9DF,GAAhBC,UAAAtD,OAAA,QAAAuD,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAsBxP,KAAK6D,IAAO/D,EAAAA,EAAAA,IAAc+D,EAAIC,WAAYH,WAAW,IAAA4L,EAAAA,EAAI,CAAC,CAAE,CAwJtE7L,CAAmB8G,EAASnI,SAAc,OAAJiN,QAAI,IAAJA,OAAI,EAAJA,EAAMjL,SAC5DI,EAAgB/B,EAAU8B,EAAcE,OAASF,EAAcG,MAC/DC,EAAYH,EAAgB,GAE5B,SAAEI,EAAQ,UAAEC,EAAS,OAAEC,GAAWuK,EAElCrK,GAAcC,EAAAA,EAAAA,GAAoBJ,EAAWL,EAAeO,GAC5DG,GAAUD,EAAAA,EAAAA,GAAoBH,EAAQN,EAAeO,GAErDI,EAAW1C,EAA6B,EAAnByC,EAAQE,SAC7BC,EAAU5C,EAAUyC,EAAQI,SAAW,EACvCC,EAAY9C,EAAgC,EAAtByC,EAAQM,YAC9BC,EAAWhD,EAAUyC,EAAQQ,YAAc,EAEjD,OAAQlC,GACJ,IAAK,eAAgB,MAAO,CAACA,EAAKwB,EAAYY,aAC9C,IAAK,YAAa,MAAO,CAACpC,EAAKoB,GAC/B,IAAK,SAAU,MAAO,CAACpB,EAAKmB,EAAY,EAAI,GAC5C,IAAK,iBAAkB,MAAO,CAACnB,EAAK0B,EAAQU,aAC5C,IAAK,WAAY,MAAO,CAACpC,EAAKgB,GAC9B,IAAK,OACL,IAAK,OAAQ,MAAO,CAAChB,EAAY,OAAP2B,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WACL,IAAK,WAAY,MAAO,CAAC3B,EAAKP,EAAmB,EAAIsC,GACrD,IAAK,OAAQ,MAAO,CAAC/B,EAAY,OAAP6B,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WAAY,MAAO,CAAC7B,EAAKP,EAAmB,EAAIwC,GACrD,IAAK,YAAa,MAAO,CAACjC,EAAK0B,EAAQW,UAEvC,QAAS,MAAO,CAACrC,EAAK6L,EAAK7L,IAAQpE,UAMxD,CACCmL,EAASnI,SACTK,EACAsC,KAGJ7B,EAAAA,EAAAA,WAAU,KACN0I,EAAmBhN,GACD,IAAIA,GAELI,IAAIqQ,IACb,MACII,EAAOhN,GAAU+G,EAAAA,EAAAA,IAAa,OAAJ6F,QAAI,IAAJA,OAAI,EAAJA,EAAMI,MAAQ,EACxCC,EAAQjN,EAAiC,GAAvB+G,EAAAA,EAAAA,IAAa,OAAJ6F,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MACjCC,EAAQlN,EAAiC,GAAvB+G,EAAAA,EAAAA,IAAa,OAAJ6F,QAAI,IAAJA,OAAI,EAAJA,EAAMM,MACjCC,GAAgBpG,EAAAA,EAAAA,IAAa,OAAJ6F,QAAI,IAAJA,OAAI,EAAJA,EAAMO,eAC/BC,EAAgBpN,EAAUgN,GAAOK,EAAAA,EAAAA,IAASJ,EAAMC,GAE9CI,GAAY9K,EAAAA,EAAAA,GAAoB2K,EAAeC,EAAe9K,GAEpE,OAAAlG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOwQ,GAAI,IACPK,OAAMC,OAAMF,OACZG,gBACArK,SAAUmK,EAAO,EAAIK,EAAUvK,YAAc,EAC7CwK,SAAUL,EAAO,EAAII,EAAUE,YAAc,EAC7CxK,SAAUgK,EAAO,EAAIM,EAAUrK,YAAc,QAI1D,CACC6E,EAASQ,QACTtI,EACAsC,KAGJ7B,EAAAA,EAAAA,WAAU,KACN,IACIC,EAAAA,EAAAA,IAAcT,IACdwN,MAAMC,QAAkB,OAAVzN,QAAU,IAAVA,OAAU,EAAVA,EAAY0N,eAC5B,CACE,MAAM,cAAEA,EAAa,cAAEC,EAAa,aAAEC,GAAiB5N,EACvD6I,EACInI,OAAOC,YACHD,OAAOE,QAAQkI,EAAAA,IAAyBxM,IAAIsF,IAAmB,IAADiM,EAAA,IAAhB/M,EAAKpE,GAAMkF,EACrD,MAAY,YAARd,EAA0B,CAACA,EAAKd,EAAWc,IAAOgN,EAAAA,EAAAA,IAAU9N,EAAWc,IAAQpE,GAC5E,CAACoE,EAAoB,QAAjB+M,EAAE7N,EAAWc,UAAI,IAAA+M,EAAAA,EAAInR,OAI5CsM,EACI0E,EAAcpR,IAAIqQ,GAAQjM,OAAOC,YAC7BD,OAAOE,QAAQmN,EAAAA,IAAyBzR,IAAI0R,IAAmB,IAADC,EAAA,IAAhBnN,EAAKpE,GAAMsR,EACrD,MAAO,CAAClN,EAAc,QAAXmN,EAAEtB,EAAK7L,UAAI,IAAAmN,EAAAA,EAAIvR,QAItCwM,GACI7M,EAAAA,EAAAA,IAAQsR,GAAerR,IAAIqQ,GAAQjM,OAAOC,YACtCD,OAAOE,QAAQsN,EAAAA,IAA0B5R,IAAI6R,IAAmB,IAADC,EAAA,IAAhBtN,EAAKpE,GAAMyR,EACtD,MAAO,CAACrN,EAAc,QAAXsN,EAAEzB,EAAK7L,UAAI,IAAAsN,EAAAA,EAAI1R,QAItCrB,GACIgB,EAAAA,EAAAA,IAAQuR,GAActR,IAAIqQ,GAAQjM,OAAOC,YACrCD,OAAOE,QAAQxE,EAAAA,IAAuBE,IAAI+R,IAAmB,IAADC,EAAA,IAAhBxN,EAAKpE,GAAM2R,EACnD,MAAO,CAACvN,EAAc,QAAXwN,EAAE3B,EAAK7L,UAAI,IAAAwN,EAAAA,EAAI5R,OAI1C,GACD,CAACsD,IAEJ,MAAMuO,EAAmBA,KACjBhH,GAAWA,KAEfgD,EAAAA,EAAAA,GAAU,CACNC,QAAQ,qBACRgE,QAAQ/Q,EAAAA,EAAAA,IAAyB,OAAXmL,QAAW,IAAXA,OAAW,EAAXA,EAAa6F,OAAS,MAAQ,OACpDC,UAAQvS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDyM,GAAW,IACd+F,cAAe5F,EACf6E,aAAczE,EACdwE,cAAe1E,MAEpB2F,KAAK/D,IACAA,EAAKD,SAtIb/B,EAAeC,EAAAA,IACfE,EAAkB,IAClBE,EAAmB,IACnB7N,EAAc,IAqIN+H,EAAAA,GAAMwH,QAAQC,EAAKgE,SACnBpH,EAAS,uBAETrE,EAAAA,GAAMC,KAAKwH,EAAKgE,WAErBC,MAAM/R,GAAKyP,QAAQC,MAAM1P,IAAIgS,QAAQ,KAChCvH,GAAYA,OAIxB,OACIhM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEIE,EAAAA,EAAAA,KAACoT,EAAc,CACX1P,cAAeyJ,EACfxJ,iBAAkByJ,EAClBxJ,KAAMgJ,EAAOE,iBACbjJ,QAASA,KACLgJ,EAAUvM,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwM,kBAAkB,KAC9CW,EAAyB,OAE7B3J,SAAUmI,EAASnI,SACnBC,OAAQkI,EAASM,MACjBvI,IAAKiI,EAASjI,IACdC,QAASgI,EAASO,OAClBtI,cAAe8I,EAAY9I,cAC3BC,QAASA,EACTC,WAAYoJ,EACZnJ,cAAY9D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO4R,EAAAA,IAAuB,IAAErJ,OAAQkE,EAAYqG,QAChE/O,aAAc2H,EAAS3H,gBAG3B1E,EAAAA,EAAAA,MAAC0T,EAAAA,EAAI,CAAAxT,SAAA,EACDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,8DAA6DD,SAAA,EACxEE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,4BAA2BD,SAAC,mBAC5CF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACG,KAAK,SAASC,QAASA,KACvBkT,OAAOC,QAAQ7F,OAAS,EACxB9B,GAAU,GAEVA,EAAS,uBAEf/L,SAAC,YACHE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACI,QAASA,IAAMsS,IAAoBzS,QAAQ,YAAWJ,SAAC,kBAGvEF,EAAAA,EAAAA,MAAC6T,EAAAA,EAAW,CAAA3T,SAAA,EACRF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,UAASD,SAAA,EAEpBE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kCAAiCD,UAC5CE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAa6C,MAAO,CAAE8Q,UAAW,OAAQC,OAAQ,QAAS7T,UACrEE,EAAAA,EAAAA,KAAC4T,EAAc,CACXpU,WAAY+N,EACZ9N,cAAeA,EACfC,WAAYuM,EAASzK,MACrB7B,aAAcsM,EAASK,iBAMnCtM,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wCAAuCD,UAClDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mBAAmB6C,MAAO,CAAE8Q,UAAW,OAAQC,OAAQ,QAAS7T,UAC3EE,EAAAA,EAAAA,KAAC6T,EAAAA,EAA6B,CAC1B7G,YAAaA,EACbC,eAAgBA,EAChBb,UAAWH,EAASG,UACpB0H,SAAU7H,EAASE,OACnBE,YAAaJ,EAASI,YACtBM,oBAAqBV,EAASU,oBAC9BoH,iBAAkBA,KACd3G,EAAkB,IAClBE,EAAmB,eAQvCtN,EAAAA,EAAAA,KAACgU,EAAAA,GAAe,CACZC,MAAM,QACNC,iBAAkB,GAClBC,eAAgB,GAChBC,oBAAkB,EAClBC,mBAAiB,EACjBC,YACI1U,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHI,QAASA,KACLoN,EAAyB,MACzBZ,EAAUvM,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwM,kBAAkB,MAElDyH,GAAI,CAAEC,GAAI,GACVtU,QAAQ,WACRE,KAAK,SACLkL,WAAWtL,EAAAA,EAAAA,KAACyU,EAAAA,EAAG,IACfrK,WACKvI,EAAAA,EAAAA,IAAcmL,EAAY0H,cACvBvH,EAAgBQ,OAAS,IACtB9L,EAAAA,EAAAA,IAAcmL,EAAYqG,OACpCvT,SACJ,iBAGDE,EAAAA,EAAAA,KAAC2U,EAAAA,EAAyB,CACtBhJ,UAAWA,EACXC,WAAYA,EACZhI,KAAMgJ,EAAOG,oBACblJ,QAASA,IAAMgJ,EAAUvM,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEyM,qBAAqB,KAChE6H,SAAqB,OAAX5H,QAAW,IAAXA,OAAW,EAAXA,EAAa0H,YACvBG,cAAe1H,EACf2H,iBAAkB1H,EAClBG,WAAYA,EACZ9N,cAAeA,EACfqE,SAAUmI,EAASnI,SACnBI,cAAe8I,EAAY9I,cAC3BC,QAASA,EACT6I,YAAaA,EACbC,eAAgBA,EAChBhJ,QAASgI,EAASO,OAClBE,cAAeT,EAASS,cAAc5M,UAEtCE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHI,QAASA,IAAMwM,EAAUvM,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEyM,qBAAqB,KAChE3C,WACKvI,EAAAA,EAAAA,IAAcmL,EAAY0H,cAEvBvH,EAAgBQ,OAAS,KACrB9L,EAAAA,EAAAA,IAAcmL,EAAYqG,OAGtCkB,GAAI,CAAEC,GAAI,GACVpU,KAAK,SACLF,QAAQ,WACRoL,WAAWtL,EAAAA,EAAAA,KAAC+U,EAAAA,EAAW,IAAIjV,SAC9B,2BAIbkV,UAAW,IACJ7H,KACAyE,MAAMqD,KAAK,CACVtH,OAAQD,EAAgB,EAAIA,EAAgB,IAC7ChN,IAAIwU,GAAK/C,EAAAA,KAEhBgD,QAAS,EACLC,EAAAA,EAAAA,IAAU,YAAa,WACvBA,EAAAA,EAAAA,IAAU,aAAc,WACxBA,EAAAA,EAAAA,IAAU,WAAY,WACtBA,EAAAA,EAAAA,IAAU,UAAW,WACrBA,EAAAA,EAAAA,IAAU,YAAa,UACvB,CACIC,UAAW,EACXC,aAAc,MACdC,cAAc,EACdC,KAAMC,IAAc,IAAb,IAAE9U,GAAK8U,EACV,MAAM,KAAErE,EAAO,EAAC,KAAEC,EAAO,EAAC,KAAEF,EAAO,EAAC,SAAElK,EAAW,EAAC,SAAEyK,EAAW,EAAC,SAAEvK,EAAW,GAAMxG,EAC7E4Q,EAAgBpN,EAAUgN,GAAOK,EAAAA,EAAAA,IAASJ,EAAMC,GAChDI,EAAYtN,EAAUgD,GAAWqK,EAAAA,EAAAA,IAASvK,EAAUyK,GAE1D,OAAQ7P,EAAAA,EAAAA,IAAiB,OAAHlB,QAAG,IAAHA,OAAG,EAAHA,EAAKmF,SAAa,GAAA+I,OAAM4C,EAAS,QAAA5C,OAAO0C,EAAa,OAArC,KAG9C,CACI8D,UAAW,EACXC,aAAc,SACdC,cAAc,EACdC,KAAME,IAAA,IAAAC,EAAAC,EAAA,IAAC,IAAEjV,GAAK+U,EAAA,OAEA,QAFAC,EAEb,QAFaC,EAAK3J,EAASO,OAAO/K,KAC/B+K,IAAUjL,EAAAA,EAAAA,IAAciL,EAAOxC,UAAc,OAAHrJ,QAAG,IAAHA,OAAG,EAAHA,EAAKmJ,mBAClD,IAAA8L,OAAA,EAFkBA,EAEhB3L,mBAAW,IAAA0L,EAAAA,EAAI,MAEtBP,EAAAA,EAAAA,IAAU,SAAU,UACpB,CACIG,cAAc,EACdC,KAAMK,IAAc,IAAb,IAAElV,GAAKkV,EACV,OACIjW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACP9C,QAASA,KACLoN,EAAyB9M,GACzBkM,EAAUvM,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwM,kBAAkB,MAElDxJ,KAAK,QACLlD,KAAK,SACLgK,WAAWvI,EAAAA,EAAAA,IAAiB,OAAHlB,QAAG,IAAHA,OAAG,EAAHA,EAAKmF,SAAShG,UAEvCE,EAAAA,EAAAA,KAAC8V,EAAAA,EAAI,OAET9V,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CACPG,KAAK,QACLlD,KAAK,SACLC,QAASA,IAAM+M,EACX9M,GAAOA,EAAI2B,OAAOqD,KAAQ/D,EAAAA,EAAAA,IAAc+D,EAAIQ,QAASnF,EAAImF,WAE7D3F,MAAM,QACNiK,WAAWvI,EAAAA,EAAAA,IAAiB,OAAHlB,QAAG,IAAHA,OAAG,EAAHA,EAAKmF,SAAShG,UAEvCE,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,UAKvB+R,aAAc,SACdD,UAAW,OAKvBrV,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAC+V,EAAAA,EAAsB,CACnB1I,gBAAiBA,EACjBC,mBAAoBA,EACpB0I,cAAe/J,EAASQ,QACxBtI,QAASA,EACTsC,QAASA,KAGbzG,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAACiW,EAAAA,EAAsB,CACnB9I,gBAAiBA,EACjBE,gBAAiBA,EACjB1I,iBAAkBA,EAClBD,YAAaA,EACbP,QAASA,EACTL,SAAUmI,EAASnI,SACnBkJ,YAAaA,EACbC,eAAgBA,a,8FChhBxC,MAAM9H,EAAqB,eAAA6L,EAAA,IAAW5L,EAAS6L,UAAAtD,OAAA,EAAAsD,UAAA,QAAAC,EAAA,OAA8D,QAA9DF,GAAhBC,UAAAtD,OAAA,QAAAuD,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAsBxP,KAAK6D,IAAO/D,EAAAA,EAAAA,IAAc+D,EAAIC,WAAYH,WAAW,IAAA4L,EAAAA,EAAI,CAAC,CAAE,EA2JpH,EAzJ+BzR,IASxB,IATyB,gBAC5B4N,EAAkB,GAAE,gBACpBE,EAAkB,GAAE,iBACpB1I,EAAgB,YAChBD,EAAW,QACXP,EAAO,SACPL,EAAW,GAAE,YACbkJ,EAAc,CAAC,EAAC,eAChBC,GACH1N,EAEG,MAAM2W,GAAmBC,EAAAA,EAAAA,SAAQ,KACtB1V,EAAAA,EAAAA,IAAQ4M,GAAiB/E,OAAO,CAACC,EAAK+H,KAAQkB,EAAAA,EAAAA,IAASjJ,EAAQ,OAAH+H,QAAG,IAAHA,OAAG,EAAHA,EAAKgB,eAAgB,GACzF,CAACjE,IAEE+I,GAAsBD,EAAAA,EAAAA,SAAQ,KAChC,MAAME,EAAWlJ,EAAgB7E,OAAO,CAACC,EAAKwI,KAC1C,MAAMvK,GAAS8P,EAAAA,EAAAA,IAAgB,OAAJvF,QAAI,IAAJA,OAAI,EAAJA,EAAMvK,QAEjC,GAAI7B,EAAkB,OAAO6M,EAAAA,EAAAA,IAASjJ,EAAK/B,GAE3C,MAAM+P,EAAUpR,EAAmBrB,EAAUiN,EAAKjL,SAC5CI,EAAgB/B,EAAUoS,EAAQpQ,OAASoQ,EAAQnQ,MAEzD,OAAI1B,GACO8M,EAAAA,EAAAA,IAASjJ,GAAK5B,EAAAA,EAAAA,GAAoBH,EAAQN,EAAe,UAAUqB,WAEnEiK,EAAAA,EAAAA,IAASjJ,GAAK5B,EAAAA,EAAAA,GAAoBH,EAAQN,EAAe,OAAOqB,WAE5E,GAEH,OAAOiK,EAAAA,EAAAA,IAAS6E,EAAUH,IAC3B,CAAC/I,EAAiBxI,EAAkBb,EAAUK,EAASO,EAAawR,IAEjEM,GAAaL,EAAAA,EAAAA,SAAQ,KACvB,IAAKhJ,GAA8C,IAA3BA,EAAgBQ,OAAc,MAAO,CAAC,EAE9D,IAAI8I,EAAe,EACfC,EAAW,EAEfvJ,EAAgBwJ,QAAQ5F,IACpB,MAAMvK,GAAS8P,EAAAA,EAAAA,KAAgB,OAAJvF,QAAI,IAAJA,OAAI,EAAJA,EAAMvK,SAAU,GAE3C,GAAI7B,EAEA,YADA8R,GAAejF,EAAAA,EAAAA,IAASiF,EAAcjQ,IAI1C,MAAM+P,EAAUpR,EAAmBrB,EAAUiN,EAAKjL,SAC5CI,GAAgB3E,EAAAA,EAAAA,IAAc4C,EAAS,GAAKoS,EAAQpQ,OAASoQ,EAAQnQ,MAErEwQ,GAAUjQ,EAAAA,EAAAA,GAAoBH,EAAQN,EAAexB,EAAc,SAAW,OAEpF+R,GAAejF,EAAAA,EAAAA,IAASiF,EAAcI,WAAWD,EAAQE,cACzDJ,GAAWlF,EAAAA,EAAAA,IAASkF,EAAUG,WAAWD,EAAQG,eAGrD,MAAMC,GAAexF,EAAAA,EAAAA,IAASiF,EAAcC,GACtCO,GAAoBzF,EAAAA,EAAAA,IAASwF,EAAcd,GAC3CgB,EAAeC,KAAKC,MAAMH,GAC1BI,GAAWf,EAAAA,EAAAA,IAAYY,EAAeD,GAEtCK,GAAO/V,EAAAA,EAAAA,IAAc4C,EAAS,GAAK,GAAImS,EAAAA,EAAAA,IAAYI,EAAW,GAC9Da,GAAOhW,EAAAA,EAAAA,IAAc4C,EAAS,GAAK,GAAImS,EAAAA,EAAAA,IAAYI,EAAW,GAC9Dc,GAAOjW,EAAAA,EAAAA,IAAc4C,EAAS,IAAKmS,EAAAA,EAAAA,IAAYI,GAAY,EAEjE,MAAO,CACHD,cAAcH,EAAAA,EAAAA,IAAYG,GAC1BC,UAAUJ,EAAAA,EAAAA,IAAYI,GACtBY,OACAC,OACAC,OACAH,WACAI,aAAcP,IAGnB,CAAC/J,EAAiBrJ,EAAUK,EAASQ,EAAkBD,EAAawR,IASvE,OANAC,EAAAA,EAAAA,SAAQ,UACwBjF,IAAxBsF,EAAWa,UAA0Bb,EAAWa,WAAarK,EAAY0K,WACzEzK,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEoX,UAAWlB,EAAWa,aAE5D,CAACb,EAAWa,YAGXrX,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,UACIE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,UACpBF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAIG,UAAU,aAAa4X,QAASxT,EAAU,EAAI,EAAErE,SAAA,CAAC,oBAChC8X,EAAAA,EAAAA,IAAcC,SAASzB,QAE5CpW,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,0BAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SACrB0W,EAAWC,kBAGlBtS,GAgBEvE,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,UAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SACrB0W,EAAWgB,WAlBpB5X,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,UAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SACrB0W,EAAWc,WAGpB1X,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,UAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SACrB0W,EAAWe,cAY5B3X,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,oBAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,UACrBwW,EAAAA,EAAAA,IAAYJ,SAGrBtW,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,eAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,UACtBE,EAAAA,EAAAA,KAAA,SACIc,MAAOkM,EAAY0K,WAAalB,EAAWa,UAAY,EACvDtX,UAAU,4BACVmK,QAAS4N,EAAAA,GACT5W,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC1BD,GAAG,IACNoX,UAAWb,WAAW1V,EAAE4B,OAAOjC,QAAU,aAKzDlB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,SAAC,WAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYD,UACrBiY,EAAAA,EAAAA,IAAaZ,KAAKC,MAAMhB,gB,sLC5IrD,MAqKA,EArK+B7W,IAMxB,IANyB,gBAC5B8N,EAAkB,GAAE,mBACpBC,EAAkB,cAClB0I,EAAgB,GAAE,QAClB7R,EAAO,QACPsC,GACHlH,EA0EG,OACIS,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,MAAC0T,EAAAA,EAAI,CAAAxT,SAAA,EACDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wEAAuED,SAAA,EAClFE,EAAAA,EAAAA,KAAA,MAAID,UAAU,MAAKD,SAAC,cACpBE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAAQ,WAAWE,KAAK,SAASC,QAbvC2X,KACd1K,EAAmBlM,GAAQ,IAAIA,GAAIb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO+R,EAAAA,IAAwB,IAAE2F,IAAK7W,EAAKuM,YAYN7N,SAAC,YAEjEE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mBAAkBD,UAC7BF,EAAAA,EAAAA,MAAA,SAAOG,UAAU,2BAA0BD,SAAA,EACvCE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,cAAaD,UAC1BE,EAAAA,EAAAA,KAAA,MAAAF,SACK,CACG,OAAQ,UACR,gBAAiB,UAAUY,IACvB,CAACkK,EAAGC,KAAM7K,EAAAA,EAAAA,KAAA,MAAID,UAAU,iBAAgBD,SAAU8K,GAAJC,SAI9DjL,EAAAA,EAAAA,MAAA,SAAOgD,MAAO,CAAEsV,SAAU,QAASpY,SAAA,CAC9BuN,EAAgB3M,IAAI,CAACC,EAAKC,KAAW,IAADuX,EAEjC,MAAMC,GAEL,QAF0BD,EAAAnC,EAAcvU,KACrC6O,IAAO/O,EAAAA,EAAAA,IAAc+O,EAAIG,GAAO,OAAH9P,QAAG,IAAHA,OAAG,EAAHA,EAAK0X,oBACrC,IAAAF,OAAA,EAF0BA,EAExBxH,eAAgB,GAEnB,OACI/Q,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAAF,SAAKc,EAAQ,KACbZ,EAAAA,EAAAA,KAAA,MAAID,UAAU,WAAW6C,MAAO,CAAEE,SAAU,SAAUhD,UAClDE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAU,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAK0X,WACZrX,MAAOoX,GAEXlX,SAAUC,GAxD3BmX,EAAC1X,EAAO2X,KAC/B,MAAMC,EAAWxC,EAAcvU,KAAK6O,IAAO/O,EAAAA,EAAAA,IAAc+O,EAAIG,GAAI8H,EAAezX,SAAW,CAAC,EAC5FwM,EAAmBlM,GACfA,EAAKV,IAAI,CAACqQ,EAAMlG,IACRA,IAAMjK,EAAcmQ,GACxBxQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOwQ,GAAI,IACPsH,WAAYG,EAAS/H,GACrBa,cAAe,OAgD4BgH,CAAmB1X,EAAOO,GACzCa,QAASgU,EAEJ/T,OAAOqO,MAEA/O,EAAAA,EAAAA,IAAc+O,EAAIG,GAAO,OAAH9P,QAAG,IAAHA,OAAG,EAAHA,EAAK0X,cAGvBhL,EAAgBlL,KACpB,CAACsW,EAAKC,IAAQA,IAAQ9X,IAASW,EAAAA,EAAAA,IAAckX,EAAIJ,WAAY/H,EAAIG,MAGxE/P,IAAI4P,IAAG,CAAOxP,MAAOwP,EAAIG,GAAIzP,MAAOsP,EAAIK,gBAE7CrO,OAAQC,EAAAA,GACRwF,iBAAkBC,SAASC,KAC3BzF,cAAc,EACdC,YAAY,iBACZC,aAAcC,EAAAA,QAGtB3C,EAAAA,EAAAA,KAAA,MAAID,UAAU,WAAUD,UACpBE,EAAAA,EAAAA,KAAA,SACIkK,QAAS4N,EAAAA,GACT/X,UAAU,wBACVe,MAAOH,EAAI2Q,eAAiB,GAC5BlH,WAAWvI,EAAAA,EAAAA,IAAclB,EAAI0X,YAC7BnX,SAAUC,IArI5BwX,EAAC/X,EAAOgY,EAAO9X,KAErCwM,EAAmBlM,GACfA,EAAKV,IAAI,CAACqQ,EAAMlG,KACZ,GAAIA,IAAMjK,EAAO,OAAOmQ,EAExB,MAAM8H,GAAOtY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQwQ,GAAI,IAAE,CAAC6H,GAAQ9X,IAEpC,GAAc,kBAAV8X,EAA2B,CAC3B,MACIxH,EAAOL,EAAKK,MAAOlG,EAAAA,EAAAA,IAAS6F,EAAKK,MAAQ,EACzCC,EAAON,EAAKM,MAAOnG,EAAAA,EAAAA,IAAS6F,EAAKM,MAAQ,EACzCF,EAAOJ,EAAKI,MAAOjG,EAAAA,EAAAA,IAAS6F,EAAKI,MAAQ,EACzC2H,GAAS5N,EAAAA,EAAAA,IAASpK,GAClByQ,EAAgBpN,EAAUgN,GAAOK,EAAAA,EAAAA,IAASJ,EAAMC,GAE9CI,GAAY9K,EAAAA,EAAAA,GAAoBmS,EAAQvH,EAAe9K,GAE7DoS,EAAQ5R,SAAYmK,EAAO,IAAMjN,EAC3BsN,EAAUvK,YACV,EACN2R,EAAQnH,SAAYL,EAAO,IAAMlN,EAC3BsN,EAAUE,YACV,EACNkH,EAAQ1R,SAAYgK,EAAO,GAAKhN,EAC1BsN,EAAUrK,YACV,CACV,CAEA,GAAc,SAAVwR,EAAkB,CAClB,MACIzH,EAAOhN,GAAU+G,EAAAA,EAAAA,IAASpK,GAAS,EACnCsQ,EAAQjN,EAAyC,GAA/BmG,EAAAA,EAAAA,KAASY,EAAAA,EAAAA,IAASpK,GAAQ,GAC5CuQ,EAAQlN,EAAyC,GAA/BmG,EAAAA,EAAAA,KAASY,EAAAA,EAAAA,IAASpK,GAAQ,GAE1CgY,GAAS5N,EAAAA,EAAAA,IAAS6F,EAAKO,eAAgBC,EAAgBpN,EAAUgN,GAAOK,EAAAA,EAAAA,IAASJ,EAAMC,GACvFI,GAAY9K,EAAAA,EAAAA,GAAoBmS,EAAQvH,EAAe9K,GAE7DoS,EAAQzH,KAAOA,EACfyH,EAAQxH,KAAOA,EACfwH,EAAQ5R,SAAWmK,EAAO,EAAIK,EAAUvK,YAAc,EACtD2R,EAAQnH,SAAWL,EAAO,EAAII,EAAUE,YAAc,EACtDkH,EAAQ1R,SAAWgK,EAAO,EAAIM,EAAUrK,YAAc,CAC1D,CAEA,OAAOyR,MAyF6BF,CAAkB/X,EAAO,gBAAiBO,EAAE4B,OAAOjC,aAI/Dd,EAAAA,EAAAA,KAAA,MAAID,UAAU,yBAAwBD,UAClCE,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CAAC9C,QAASA,IAvE3CO,KACd0M,EAAmBlM,GAAQA,EAAKa,OAAO,CAACmB,EAAGyH,IAAMA,IAAMjK,KAsEQmY,CAAUnY,GAAQ0C,KAAK,QAAOxD,UACrDE,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,CAACpD,MAAM,QAAQ+X,SAAS,gBA1ClCtX,KAgDW,IAA3ByM,EAAgBM,SACb3N,EAAAA,EAAAA,KAAA,MAAAF,UAAIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,cAAciZ,QAAS,EAAElZ,SAAC,2B,oHC/J5E,MAyLA,EAzLsCP,IAQ/B,IAAD0Z,EAAA,IARiC,YACnCjM,EAAc,CAAC,EAAC,eAChBC,EAAc,UACdb,EAAY,GAAE,YACdC,EAAc,GAAE,SAChByH,EAAW,GAAE,iBACbC,EAAgB,oBAChBpH,EAAsB,IACzBpN,EAEG,MACM2Z,EAAa,eAEnB,OACItZ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAGhBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,gBACzBE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAkB,OAAXkM,QAAW,IAAXA,OAAW,EAAXA,EAAa0H,YACpB1T,MAAkB,OAAXgM,QAAW,IAAXA,OAAW,EAAXA,EAAa0C,eAExBxO,SAAUC,IACN8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAG,IACNoU,YAAavT,EAAEL,MACf4O,cAAevO,EAAEH,UAKzBgB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,OACvCpH,EAAAA,EAAAA,IAAQ2L,GAAW1L,IAAI4E,IAAG,CACzBxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAKoP,YACZ1T,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAKoK,kBAGpBpN,OAAQC,EAAAA,GACRC,cAAc,EACdC,YAAa,gBACbyF,cAAe,IACfxF,aAAcC,EAAAA,SAKtB/C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EACzBE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,kBACzBE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CACHA,MAAOkM,EAAY2C,aACnB3O,MAAgG,QAA3FiY,GAAExY,EAAAA,EAAAA,IAAQ4L,GAAa5K,KAAK0X,IAAK5X,EAAAA,EAAAA,IAAc4X,EAAEC,eAAgBpM,EAAY2C,sBAAc,IAAAsJ,OAAA,EAAzFA,EAA2FtJ,cAEtGzO,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEqP,aAAcxO,EAAEL,SAChEkB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,OACvCpH,EAAAA,EAAAA,IAAQ4L,GAAapK,OACpBC,GAAqB,WAAX,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKsO,OACd9P,IAAI4E,IAAG,CACLxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAK8T,eACZpY,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAKqK,iBAGpBrN,OAAQC,EAAAA,GACRC,cAAc,EACdqH,UAAU,EACVpH,YAAa,sBACbyF,cAAe,IACfxF,aAAcC,EAAAA,SAKtB/C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,MAAA,SAAOG,UAAU,QAAOD,SAAA,CAAC,eAAWE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,QACjD7I,EAAAA,EAAAA,KAAA,SACIc,OAAkB,OAAXkM,QAAW,IAAXA,OAAW,EAAXA,EAAaqM,UAAW,GAC/BjZ,KAAK,OACLyJ,UAAQ,EACR9J,UAAWmZ,EACXhY,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE+Y,QAASlY,EAAE4B,OAAOjC,eAK1ElB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,MAAA,SAAOG,UAAU,QAAOD,SAAA,CAAC,WAAOE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,QAC7CjJ,EAAAA,EAAAA,MAAA,UACIG,UAAWmZ,EACXpY,MAAkB,OAAXkM,QAAW,IAAXA,OAAW,EAAXA,EAAasM,UACpBzP,UAAQ,EACR3I,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEgZ,UAAWnY,EAAE4B,OAAOjC,SAAUhB,SAAA,EAE9EE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAEhB,SAAC,WAChBgU,EAASpT,IAAI,CAACkK,EAAGC,KACd7K,EAAAA,EAAAA,KAAA,UAAQc,MAAQ,OAAD8J,QAAC,IAADA,OAAC,EAADA,EAAG2O,SAASzZ,SAAW,OAAD8K,QAAC,IAADA,OAAC,EAADA,EAAG0E,YAAPzE,WAM7CjL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,MAAA,SAAOG,UAAU,QAAOD,SAAA,CAAC,aAASE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAY,QAC/CjJ,EAAAA,EAAAA,MAAA,UACIG,UAAWmZ,EACXhY,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE4D,cAAepC,OAAOX,EAAE4B,OAAOjC,UAC/EA,MAAOkM,EAAY9I,cACnB2F,UAAQ,EAAA/J,SAAA,EAERE,EAAAA,EAAAA,KAAA,UAAQc,MAAO,EAAEhB,SAAC,mBAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAO,EAAEhB,SAAC,mBAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAO,EAAEhB,SAAC,uBAK1BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,cACzBF,EAAAA,EAAAA,MAAA,UACIG,UAAWmZ,EACXhY,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE6D,QAASrC,OAAOX,EAAE4B,OAAOjC,UACzEA,MAAOkM,EAAY7I,QAAQrE,SAAA,EAE3BE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,SAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,gBAK1BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,4BACzBE,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAOkM,EAAYoD,uBAAwBpP,MAAOgM,EAAYoD,wBACvElP,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE8P,uBAAwBjP,EAAEL,SAC1EkB,QAAS,CACL,CAAElB,MAAO,GAAIE,MAAO,SAAU6G,YAAY,MACvC8E,EAAoBjM,IAAI4E,IAAG,CAC1BxE,MAAU,OAAHwE,QAAG,IAAHA,OAAG,EAAHA,EAAK8K,uBACZpP,MAAU,OAAHsE,QAAG,IAAHA,OAAG,EAAHA,EAAK8K,2BAGpB9N,OAAQC,EAAAA,GACRwF,iBAAkBC,SAASC,KAC3B4B,UAAU,EACVrH,cAAc,EACdC,YAAa,SACbyF,cAAe,IACfxF,aAAcC,EAAAA,SAKtB/C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,YACzBF,EAAAA,EAAAA,MAAA,UACIkB,MAAkB,OAAXkM,QAAW,IAAXA,OAAW,EAAXA,EAAawM,cACpBzZ,UAAWmZ,EACXhY,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEkZ,cAAerY,EAAE4B,OAAOjC,SAAUhB,SAAA,EAElFE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,GAAGsJ,UAAQ,EAAAtK,SAAC,YAC1BE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,SAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,aAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,eAClBE,EAAAA,EAAAA,KAAA,UAAQc,MAAM,IAAGhB,SAAC,uBAM9BE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,QAAOD,SAAC,eACzBE,EAAAA,EAAAA,KAAA,YACID,UAAU,iBACV0Z,KAAM,EACN3Y,MAAOkM,EAAY0M,UACnBxY,SAAUC,GAAK8L,EAAe3M,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEoZ,UAAWvY,EAAE4B,OAAOjC,c,6DCpLpF,SAAe6Y,EAAAA,EAAAA,GAAc,EAAc3Z,EAAAA,EAAAA,KAAK,OAAQ,CACtDkV,EAAG,oKACF,MAAmBlV,EAAAA,EAAAA,KAAK,OAAQ,CACjCkV,EAAG,mDACF,MAAO,c","sources":["Pages/Sales/SalesInvoice/manageInvolvedStaff.jsx","Pages/Sales/SalesInvoice/addProducts.jsx","Pages/Sales/SalesInvoice/salesInvoiceCreation.jsx","Pages/Sales/SalesInvoice/taxDetails.jsx","Pages/Sales/SalesInvoice/manageExpences.jsx","Pages/Sales/SalesInvoice/manageGeneralInfo.jsx","../node_modules/@mui/icons-material/esm/ReceiptLong.js"],"sourcesContent":["import { Button, IconButton } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { salesInvoiceStaffInfo } from \"./variable\";\r\nimport { checkIsNumber, isEqualNumber, reactSelectFilterLogic, toArray } from \"../../../Components/functions\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\n\r\nconst InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [], }) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => setStaffArray(pre => [...pre, { ...salesInvoiceStaffInfo }])}\r\n                >Add</Button>\r\n            </div>\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"fa-13\">Sno</th>\r\n                        <th className=\"fa-13\">Staff Name</th>\r\n                        <th className=\"fa-13\">Category</th>\r\n                        <th className=\"fa-13\">#</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {toArray(StaffArray).map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                            <td className='fa-13 w-100 p-0'>\r\n                                <Select\r\n                                    value={{\r\n                                        value: row?.Emp_Id,\r\n                                        label: row?.Emp_Name,\r\n                                    }}\r\n                                    onChange={e => setStaffArray(prev => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                const staff = toArray(costCenter).find(c => isEqualNumber(c?.Cost_Center_Id, e.value))\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id:\r\n                                                        checkIsNumber(staffRow?.Emp_Type_Id)\r\n                                                            ? Number(staffRow?.Emp_Type_Id)\r\n                                                            : checkIsNumber(staff.User_Type)\r\n                                                                ? Number(staff.User_Type)\r\n                                                                : 0,\r\n                                                    Emp_Id: Number(e.value),\r\n                                                    Emp_Name: e.label\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    options={\r\n                                        [...toArray(costCenter).filter(fil => (\r\n                                            !StaffArray.some(st => (\r\n                                                isEqualNumber(st.Emp_Id, fil.Cost_Center_Id)\r\n                                            ))\r\n                                        ))].map(st => ({\r\n                                            value: st.Cost_Center_Id,\r\n                                            label: st.Cost_Center_Name\r\n                                        }))\r\n                                    }\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Staff\"}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                <select\r\n                                    value={row?.Emp_Type_Id}\r\n                                    onChange={e => setStaffArray((prev) => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id: e.target.value\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    className=\"cus-inpt p-2 border-0\"\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {toArray(costCategory).map((st, sti) =>\r\n                                        <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                    )}\r\n                                </select>\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0'>\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setStaffArray(prev => {\r\n                                            return prev.filter((_, filIndex) => index !== filIndex);\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                >\r\n                                    <Delete color='error' />\r\n                                </IconButton>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvolvedStaffs;","import { useEffect, useState } from \"react\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { checkIsNumber, Division, isEqualNumber, isValidObject, Multiplication, onlynum, reactSelectFilterLogic, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { ClearAll } from \"@mui/icons-material\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddProductForm = ({\r\n    children,\r\n    orderProducts = [],\r\n    setOrderProducts,\r\n    open = false,\r\n    onClose,\r\n    products = [],\r\n    brands = [],\r\n    uom = [],\r\n    godowns = [],\r\n    GST_Inclusive,\r\n    IS_IGST,\r\n    editValues = null,\r\n    initialValue = {},\r\n    batchDetails = []\r\n}) => {\r\n\r\n    const [productDetails, setProductDetails] = useState(initialValue);\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(editValues) && open) {\r\n            setProductDetails(pre => (\r\n                Object.fromEntries(\r\n                    Object.entries(pre).map(([key, value]) => [key, editValues[key] ? editValues[key] : value])\r\n                )\r\n            ))\r\n        }\r\n    }, [editValues])\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const closeDialog = () => {\r\n        setProductDetails(initialValue);\r\n        onClose();\r\n    }\r\n\r\n    const handleProductInputChange = () => {\r\n\r\n        setOrderProducts(pre => {\r\n            const existingProducts = pre.filter(ordered => !isEqualNumber(ordered.Item_Id, productDetails.Item_Id));\r\n\r\n            const currentProductDetails = Object.fromEntries(\r\n                Object.entries(initialValue).map(([key, value]) => {\r\n                    const productMaster = findProductDetails(productDetails.Item_Id);\r\n                    const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                    const isTaxable = gstPercentage > 0;\r\n\r\n                    const { Bill_Qty, Item_Rate, Amount } = productDetails;\r\n\r\n                    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                    const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                    const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                    const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                    const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                    const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                    const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                    switch (key) {\r\n                        case 'Item_Name': return [key, productMaster.Product_Name]\r\n                        case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                        case 'Total_Qty': return [key, Bill_Qty]\r\n                        case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                        case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                        case 'Tax_Rate': return [key, gstPercentage]\r\n                        case 'Cgst':\r\n                        case 'Sgst': return [key, cgstPer ?? 0]\r\n                        case 'Cgst_Amo':\r\n                        case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                        case 'Igst': return [key, igstPer ?? 0]\r\n                        case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                        case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                        default: return [key, productDetails[key] || value]\r\n                    }\r\n                })\r\n            );\r\n\r\n            return [...existingProducts, currentProductDetails];\r\n        });\r\n\r\n        closeDialog();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle className=\"border-bottom\">\r\n                    <span>Add Products Details</span>\r\n                </DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    if (productDetails.Item_Id) {\r\n                        handleProductInputChange();\r\n                    } else {\r\n                        toast.warn('Select Product');\r\n                    }\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row pb-5\">\r\n\r\n                            {/* brand */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Brand</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.BrandID, label: productDetails.Brand }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, BrandID: e.value, Brand: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...brands.map(obj => ({ value: obj?.Brand, label: obj?.Brand_Name }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Brand\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* group */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) =>\r\n                                        setProductDetails((pre) => ({ ...pre, GroupID: e.value, Group: e.label }))\r\n                                    }\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...products\r\n                                            .filter(\r\n                                                (pro) =>\r\n                                                    productDetails.BrandID\r\n                                                        ? isEqualNumber(pro.Brand, productDetails.BrandID)\r\n                                                        : true\r\n                                            )\r\n                                            .reduce((acc, pro) => {\r\n                                                if (\r\n                                                    !acc.some((grp) => grp.value === pro.Product_Group)\r\n                                                ) {\r\n                                                    acc.push({\r\n                                                        value: pro.Product_Group,\r\n                                                        label: pro.Pro_Group,\r\n                                                    });\r\n                                                }\r\n                                                return acc;\r\n                                            }, []),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* item name */}\r\n                            <div className={\r\n                                Object.hasOwn(productDetails, 'GoDown_Id') ? 'col-md-8 p-2' : \"col-12 p-2\"\r\n                            }>\r\n                                <label>Item Name <RequiredStar /></label>\r\n                                <Select\r\n                                    value={{\r\n                                        value: productDetails.Item_Id,\r\n                                        label: (\r\n                                            findProductDetails(productDetails.Item_Id)?.Product_Name\r\n                                        )\r\n                                    }}\r\n                                    isDisabled={checkIsNumber(productDetails.Pre_Id)}\r\n                                    menuPortalTarget={document.body}\r\n                                    onChange={e => {\r\n                                        const productInfo = findProductDetails(e.value);\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n\r\n                                            Group: productInfo.Pro_Group ?? pre.Group,\r\n                                            GroupID: productInfo.Product_Group ?? pre.GroupID,\r\n                                            Brand: productInfo.Brand_Name ?? pre.Brand,\r\n                                            BrandID: productInfo.Brand ?? pre.BrandID,\r\n\r\n                                            Item_Id: e.value,\r\n                                            Item_Rate: productInfo.Item_Rate ?? 0,\r\n                                            Bill_Qty: 0,\r\n                                            Amount: 0,\r\n                                            Unit_Id: productInfo.UOM_Id ?? pre.Unit_Id,\r\n                                            Unit_Name: productInfo.Units ?? pre.Unit_Name,\r\n                                            HSN_Code: productInfo?.HSN_Code\r\n                                        }));\r\n                                    }}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...[\r\n                                            ...products\r\n                                                .filter(pro => productDetails.BrandID ? isEqualNumber(pro.Brand, productDetails.BrandID) : true)\r\n                                                .filter(pro => productDetails.GroupID ? isEqualNumber(pro.Product_Group, productDetails.GroupID) : true)\r\n                                        ].map(obj => ({\r\n                                            value: obj?.Product_Id,\r\n                                            label: obj?.Product_Name,\r\n                                            isDisabled: (\r\n                                                orderProducts.findIndex(ind => isEqualNumber(\r\n                                                    ind?.Item_Id, obj?.Product_Id\r\n                                                ))\r\n                                            ) === -1 ? false : true\r\n                                        }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    required\r\n                                    placeholder={\"Select Product\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* godown  */}\r\n                            {Object.hasOwn(productDetails, 'GoDown_Id') && (\r\n                                <div className=\"col-md-4 p-2\">\r\n                                    <label>Godown</label>\r\n                                    <Select\r\n                                        value={{\r\n                                            value: productDetails?.GoDown_Id,\r\n                                            label: godowns.find(g => isEqualNumber(g.Godown_Id, productDetails?.GoDown_Id))?.Godown_Name || ''\r\n                                        }}\r\n                                        onChange={(e) => setProductDetails(pre => ({ ...pre, GoDown_Id: e.value }))}\r\n                                        options={[\r\n                                            { value: '', label: 'select', isDisabled: true },\r\n                                            ...toArray(godowns).map(obj => ({\r\n                                                value: obj?.Godown_Id,\r\n                                                label: obj?.Godown_Name\r\n                                            }))\r\n                                        ]}\r\n                                        styles={customSelectStyles}\r\n                                        isDisabled={!checkIsNumber(productDetails?.Item_Id)}\r\n                                        menuPortalTarget={document.body}\r\n                                        isSearchable={true}\r\n                                        placeholder={\"Select Godown\"}\r\n                                        filterOption={reactSelectFilterLogic}\r\n                                    // maxMenuHeight={200}  \r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* quantity */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Quantity <RequiredStar /></label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Bill_Qty ? productDetails.Bill_Qty : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => {\r\n                                        if (productDetails.Item_Rate) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Amount: Multiplication(productDetails.Item_Rate, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else if (productDetails.Amount) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Item_Rate: Division(pre.Amount, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Bill_Qty: e.target.value,\r\n                                            }));\r\n                                        }\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n                            {Object.hasOwn(productDetails, 'Act_Qty') && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Actual Quantity </label>\r\n                                    <input\r\n                                        value={productDetails.Act_Qty ? productDetails.Act_Qty : ''}\r\n                                        onInput={onlynum}\r\n                                        disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                        onChange={e => setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            Act_Qty: e.target.value,\r\n                                        }))}\r\n                                        required\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Rate */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Rate </label>\r\n                                <input\r\n                                    value={productDetails.Item_Rate ? productDetails.Item_Rate : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Item_Rate: e.target.value,\r\n                                        Amount: pre.Bill_Qty ? Multiplication(e.target.value, pre.Bill_Qty) : pre.Amount\r\n                                    }))}\r\n                                    required\r\n                                    className=\"cus-inpt\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* UOM */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>UOM</label>\r\n                                <select\r\n                                    value={\r\n                                        Object.hasOwn(productDetails, 'UOM') ? productDetails.UOM :\r\n                                            Object.hasOwn(productDetails, 'Unit_Id') ? productDetails.Unit_Id : ''\r\n                                    }\r\n                                    onChange={e => {\r\n                                        const selectedIndex = e.target.selectedIndex;\r\n                                        const label = e.target.options[selectedIndex].text;\r\n                                        const value = e.target.value;\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            UOM: value,\r\n                                            Unit_Id: value,\r\n                                            Units: label,\r\n                                            Unit_Name: label,\r\n                                        }));\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                >\r\n                                    <option value=\"\" disabled>select</option>\r\n                                    {uom.map((o, i) => (\r\n                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            {/* Amount */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Amount</label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Amount ? productDetails.Amount : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Amount: e.target.value,\r\n                                        Item_Rate: pre.Bill_Qty ? Division(e.target.value, pre.Bill_Qty) : pre.Item_Rate\r\n                                    }))}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* Batch */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Batch</label>\r\n                                <Select\r\n                                    value={{\r\n                                        value: productDetails?.Batch_Name || '',\r\n                                        label: productDetails?.Batch_Name || ''\r\n                                    }}\r\n                                    onChange={e => setProductDetails(pre => ({ ...pre, Batch_Name: e.value }))}\r\n                                    options={\r\n                                        batchDetails.filter(\r\n                                            bat => (\r\n                                                isEqualNumber(bat.item_id, productDetails?.Item_Id)\r\n                                                && isEqualNumber(bat?.godown_id, productDetails?.GoDown_Id)\r\n                                                && toNumber(bat.pendingQuantity) >= toNumber(productDetails?.Bill_Qty)\r\n                                            )\r\n                                        ).map(\r\n                                            bat => ({ value: bat.batch, label: bat.batch })\r\n                                        )\r\n                                    }\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Batch\"}\r\n                                    menuPortalTarget={document.body}\r\n                                    isDisabled={\r\n                                        !checkIsNumber(productDetails?.Item_Id) \r\n                                        || !checkIsNumber(productDetails?.GoDown_Id) \r\n                                        || isEqualNumber(productDetails?.Bill_Qty, 0)\r\n                                    }\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions className=\"d-flex justify-content-between align-items-center\">\r\n                        <Button onClick={() => setProductDetails(initialValue)} type='button' startIcon={<ClearAll />}>Clear</Button>\r\n                        <span>\r\n                            <Button type=\"button\" onClick={closeDialog}>cancel</Button>\r\n                            <Button type='submit' variant=\"outlined\">Add</Button>\r\n                        </span>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddProductForm;","import { useState, useEffect } from \"react\";\r\nimport { Button, IconButton, CardContent, Card } from \"@mui/material\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isValidObject, ISOString, getUniqueData,\r\n    Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber,\r\n    toArray,\r\n    stringCompare\r\n} from \"../../../Components/functions\";\r\nimport { Add, Delete, Edit, ReceiptLong } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { salesInvoiceGeneralInfo, salesInvoiceDetailsInfo, salesInvoiceExpencesInfo, salesInvoiceStaffInfo } from './variable';\r\nimport InvolvedStaffs from \"./manageInvolvedStaff\";\r\nimport ManageSalesInvoiceGeneralInfo from \"./manageGeneralInfo\";\r\nimport SalesInvoiceTaxDetails from \"./taxDetails\";\r\nimport AddProductsInSalesInvoice from \"./importFromSaleOrder\";\r\nimport ExpencesOfSalesInvoice from \"./manageExpences\";\r\nimport AddProductForm from \"./addProducts\";\r\n\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst CreateSalesInvoice = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const editValues = location.state;\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        brand: [],\r\n        godown: [],\r\n        expence: [],\r\n        stockInGodown: [],\r\n        stockItemLedgerName: [],\r\n        batchDetails: []\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        addProductDialog: false,\r\n        importFromSaleOrder: false,\r\n    })\r\n\r\n    const [invoiceInfo, setInvoiceInfo] = useState(salesInvoiceGeneralInfo)\r\n    const [invoiceProducts, setInvoiceProduct] = useState([]);\r\n    const [invoiceExpences, setInvoiceExpences] = useState([]);\r\n    const [staffArray, setStaffArray] = useState([]);\r\n\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n    const isInclusive = isEqualNumber(invoiceInfo.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceInfo.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceInfo.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n    const minimumRows = 3;\r\n    const dummyRowCount = minimumRows - invoiceProducts.length\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                if (loadingOn) loadingOn();\r\n\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    godownLocationsResponse,\r\n                    expenceResponse,\r\n                    godownWiseStock,\r\n                    stockItemLedgerNameResponse,\r\n                    batchDetailsResponse\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n                    fetchLink({ address: `masters/defaultAccountMaster` }),\r\n                    fetchLink({ address: `sales/stockInGodown` }),\r\n                    fetchLink({ address: `purchase/stockItemLedgerName?type=SALES` }),\r\n                    fetchLink({ address: `inventory/batchMaster/stockBalance` })\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n                );\r\n                const expencesMaster = (expenceResponse.success ? toArray(expenceResponse.data) : []).sort(\r\n                    (a, b) => String(a?.Account_Name).localeCompare(b?.Account_Name)\r\n                );\r\n                const stockInGodowns = (godownWiseStock.success ? godownWiseStock.data : []).sort(\r\n                    (a, b) => String(a?.stock_item_name).localeCompare(b?.stock_item_name)\r\n                );\r\n                const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n                    (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    godown: godownLocations,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n                    expence: expencesMaster.filter(\r\n                        exp => !stringCompare(exp.Type, 'DEFAULT')\r\n                    ).map(exp => ({ Id: exp.Acc_Id, Expence_Name: exp.Account_Name })),\r\n                    stockInGodown: stockInGodowns,\r\n                    stockItemLedgerName: stockItemLedgerName,\r\n                    batchDetails: toArray(batchDetailsResponse.data)\r\n                }));\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            } finally {\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const clearValues = () => {\r\n        setInvoiceInfo(salesInvoiceGeneralInfo);\r\n        setInvoiceProduct([]);\r\n        setInvoiceExpences([]);\r\n        setStaffArray([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInvoiceProduct(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(item).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setInvoiceExpences(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                const\r\n                    Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n                    Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n                    Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n                    Expence_Value = toNumber(item?.Expence_Value),\r\n                    taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n\r\n                return {\r\n                    ...item,\r\n                    Cgst, Sgst, Igst,\r\n                    Expence_Value,\r\n                    Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n                    Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n                    Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n                }\r\n            })\r\n        })\r\n    }, [\r\n        baseData.expence,\r\n        IS_IGST,\r\n        taxType,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(editValues) &&\r\n            Array.isArray(editValues?.Products_List)\r\n        ) {\r\n            const { Products_List, Expence_Array, Staffs_Array } = editValues;\r\n            setInvoiceInfo(\r\n                Object.fromEntries(\r\n                    Object.entries(salesInvoiceGeneralInfo).map(([key, value]) => {\r\n                        if (key === 'Do_Date') return [key, editValues[key] ? ISOString(editValues[key]) : value]\r\n                        return [key, editValues[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setInvoiceProduct(\r\n                Products_List.map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceDetailsInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setInvoiceExpences(\r\n                toArray(Expence_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceExpencesInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setStaffArray(\r\n                toArray(Staffs_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceStaffInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [editValues])\r\n\r\n    const saveSalesInvoice = () => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `sales/salesInvoice`,\r\n            method: checkIsNumber(invoiceInfo?.Do_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                ...invoiceInfo,\r\n                Product_Array: invoiceProducts,\r\n                Staffs_Array: staffArray,\r\n                Expence_Array: invoiceExpences\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                clearValues();\r\n                toast.success(data.message);\r\n                navigate('/erp/sales/invoice')\r\n            } else {\r\n                toast.warn(data.message)\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <AddProductForm\r\n                orderProducts={invoiceProducts}\r\n                setOrderProducts={setInvoiceProduct}\r\n                open={dialog.addProductDialog}\r\n                onClose={() => {\r\n                    setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                godowns={baseData.godown}\r\n                GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={{ ...salesInvoiceDetailsInfo, Pre_Id: invoiceInfo.So_No }}\r\n                batchDetails={baseData.batchDetails}\r\n            />\r\n\r\n            <Card>\r\n                <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n                    <span className=\"flex-grow-1 fa-16 fw-bold\">Sales Invoice</span>\r\n                    <span>\r\n                        <Button type='button' onClick={() => {\r\n                            if (window.history.length > 1) {\r\n                                navigate(-1);\r\n                            } else {\r\n                                navigate('/erp/sales/invoice');\r\n                            }\r\n                        }}>Cancel</Button>\r\n                        <Button onClick={() => saveSalesInvoice()} variant=\"contained\">submit</Button>\r\n                    </span>\r\n                </div>\r\n                <CardContent>\r\n                    <div className=\"row p-0\">\r\n                        {/* staff info */}\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <InvolvedStaffs\r\n                                    StaffArray={staffArray}\r\n                                    setStaffArray={setStaffArray}\r\n                                    costCenter={baseData.staff}\r\n                                    costCategory={baseData.staffType}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* general info */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <ManageSalesInvoiceGeneralInfo\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    retailers={baseData.retailers}\r\n                                    branches={baseData.branch}\r\n                                    voucherType={baseData.voucherType}\r\n                                    stockItemLedgerName={baseData.stockItemLedgerName}\r\n                                    onChangeRetailer={() => {\r\n                                        setInvoiceProduct([]);\r\n                                        setInvoiceExpences([]);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* product details */}\r\n                    <FilterableTable\r\n                        title=\"Items\"\r\n                        headerFontSizePx={13}\r\n                        bodyFontSizePx={13}\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setSelectedProductToEdit(null);\r\n                                        setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                    }}\r\n                                    sx={{ ml: 1 }}\r\n                                    variant='outlined'\r\n                                    type=\"button\"\r\n                                    startIcon={<Add />}\r\n                                    disabled={\r\n                                        !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                        || (invoiceProducts.length > 0\r\n                                            && checkIsNumber(invoiceInfo.So_No))\r\n                                    }\r\n                                >Add Product</Button>\r\n\r\n\r\n                                <AddProductsInSalesInvoice\r\n                                    loadingOn={loadingOn}\r\n                                    loadingOff={loadingOff}\r\n                                    open={dialog.importFromSaleOrder}\r\n                                    onClose={() => setDialog(pre => ({ ...pre, importFromSaleOrder: false }))}\r\n                                    retailer={invoiceInfo?.Retailer_Id}\r\n                                    selectedItems={invoiceProducts}\r\n                                    setSelectedItems={setInvoiceProduct}\r\n                                    staffArray={staffArray}\r\n                                    setStaffArray={setStaffArray}\r\n                                    products={baseData.products}\r\n                                    GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                                    IS_IGST={IS_IGST}\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    godowns={baseData.godown}\r\n                                    stockInGodown={baseData.stockInGodown}\r\n                                >\r\n                                    <Button\r\n                                        onClick={() => setDialog(pre => ({ ...pre, importFromSaleOrder: true }))}\r\n                                        disabled={\r\n                                            !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                            || (\r\n                                                invoiceProducts.length > 0\r\n                                                && !checkIsNumber(invoiceInfo.So_No)\r\n                                            )\r\n                                        }\r\n                                        sx={{ ml: 1 }}\r\n                                        type=\"button\"\r\n                                        variant='outlined'\r\n                                        startIcon={<ReceiptLong />}\r\n                                    >Choose Sale Order</Button>\r\n                                </AddProductsInSalesInvoice>\r\n                            </>\r\n                        }\r\n                        dataArray={[\r\n                            ...invoiceProducts,\r\n                            ...Array.from({\r\n                                length: dummyRowCount > 0 ? dummyRowCount : 0\r\n                            }).map(d => salesInvoiceDetailsInfo)\r\n                        ]}\r\n                        columns={[\r\n                            createCol('Item_Name', 'string'),\r\n                            createCol('Batch_Name', 'string'),\r\n                            createCol('Bill_Qty', 'number'),\r\n                            createCol('Act_Qty', 'number'),\r\n                            createCol('Item_Rate', 'number'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Tax',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const { Cgst = 0, Sgst = 0, Igst = 0, Cgst_Amo = 0, Sgst_Amo = 0, Igst_Amo = 0 } = row;\r\n                                    const taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                                    const taxAmount = IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo);\r\n\r\n                                    return !checkIsNumber(row?.Item_Id) ? '' : `${taxAmount} - (${taxPercentage} %)`\r\n                                }\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Godown',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => baseData.godown.find(\r\n                                    godown => isEqualNumber(godown.Godown_Id, row?.GoDown_Id)\r\n                                )?.Godown_Name ?? ''\r\n                            },\r\n                            createCol('Amount', 'number'),\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    setSelectedProductToEdit(row);\r\n                                                    setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                                }}\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                onClick={() => setInvoiceProduct(\r\n                                                    pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id))\r\n                                                )}\r\n                                                color='error'\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Delete />\r\n                                            </IconButton>\r\n                                        </>\r\n                                    )\r\n                                },\r\n                                ColumnHeader: 'Action',\r\n                                isVisible: 1,\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <ExpencesOfSalesInvoice\r\n                        invoiceExpences={invoiceExpences}\r\n                        setInvoiceExpences={setInvoiceExpences}\r\n                        expenceMaster={baseData.expence}\r\n                        IS_IGST={IS_IGST}\r\n                        taxType={taxType}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <SalesInvoiceTaxDetails\r\n                        invoiceProducts={invoiceProducts}\r\n                        invoiceExpences={invoiceExpences}\r\n                        isNotTaxableBill={isNotTaxableBill}\r\n                        isInclusive={isInclusive}\r\n                        IS_IGST={IS_IGST}\r\n                        products={baseData.products}\r\n                        invoiceInfo={invoiceInfo}\r\n                        setInvoiceInfo={setInvoiceInfo}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateSalesInvoice;","import { useMemo } from \"react\";\r\nimport { Addition, isEqualNumber, NumberFormat, numberToWords, onlynumAndNegative, RoundNumber, toArray } from \"../../../Components/functions\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SalesInvoiceTaxDetails = ({\r\n    invoiceProducts = [],\r\n    invoiceExpences = [],\r\n    isNotTaxableBill,\r\n    isInclusive,\r\n    IS_IGST,\r\n    products = [],\r\n    invoiceInfo = {},\r\n    setInvoiceInfo\r\n}) => {\r\n\r\n    const invExpencesTotal = useMemo(() => {\r\n        return toArray(invoiceExpences).reduce((acc, exp) => Addition(acc, exp?.Expence_Value), 0)\r\n    }, [invoiceExpences]);\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const invValue = invoiceProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0);\r\n\r\n        return Addition(invValue, invExpencesTotal);\r\n    }, [invoiceProducts, isNotTaxableBill, products, IS_IGST, isInclusive, invExpencesTotal])\r\n\r\n    const taxSplitUp = useMemo(() => {\r\n        if (!invoiceProducts || invoiceProducts.length === 0) return {};\r\n\r\n        let totalTaxable = 0;\r\n        let totalTax = 0;\r\n\r\n        invoiceProducts.forEach(item => {\r\n            const Amount = RoundNumber(item?.Amount || 0);\r\n\r\n            if (isNotTaxableBill) {\r\n                totalTaxable = Addition(totalTaxable, Amount);\r\n                return;\r\n            }\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n\r\n            totalTaxable = Addition(totalTaxable, parseFloat(taxInfo.without_tax));\r\n            totalTax = Addition(totalTax, parseFloat(taxInfo.tax_amount));\r\n        });\r\n\r\n        const totalWithTax = Addition(totalTaxable, totalTax);\r\n        const totalWithExpenses = Addition(totalWithTax, invExpencesTotal);\r\n        const roundedTotal = Math.round(totalWithExpenses);\r\n        const roundOff = RoundNumber(roundedTotal - totalWithExpenses);\r\n\r\n        const cgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const sgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const igst = isEqualNumber(IS_IGST, 1) ? RoundNumber(totalTax) : 0;\r\n\r\n        return {\r\n            totalTaxable: RoundNumber(totalTaxable),\r\n            totalTax: RoundNumber(totalTax),\r\n            cgst,\r\n            sgst,\r\n            igst,\r\n            roundOff,\r\n            invoiceTotal: roundedTotal\r\n        };\r\n\r\n    }, [invoiceProducts, products, IS_IGST, isNotTaxableBill, isInclusive, invExpencesTotal]);\r\n\r\n    // Update invoiceInfo when roundOff changes\r\n    useMemo(() => {\r\n        if (taxSplitUp.roundOff !== undefined && taxSplitUp.roundOff !== invoiceInfo.Round_off) {\r\n            setInvoiceInfo(pre => ({ ...pre, Round_off: taxSplitUp.roundOff }));\r\n        }\r\n    }, [taxSplitUp.roundOff]);\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2\" rowSpan={IS_IGST ? 5 : 6}>\r\n                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                        </td>\r\n                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                        <td className=\"border p-2\">\r\n                            {taxSplitUp.totalTaxable}\r\n                        </td>\r\n                    </tr>\r\n                    {!IS_IGST ? (\r\n                        <>\r\n                            <tr>\r\n                                <td className=\"border p-2\">CGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.cgst}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border p-2\">SGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.sgst}\r\n                                </td>\r\n                            </tr>\r\n                        </>\r\n                    ) : (\r\n                        <tr>\r\n                            <td className=\"border p-2\">IGST</td>\r\n                            <td className=\"border p-2\">\r\n                                {taxSplitUp.igst}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total Expences</td>\r\n                        <td className=\"border p-2\">\r\n                            {RoundNumber(invExpencesTotal)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Round Off</td>\r\n                        <td className=\"border p-0\">\r\n                            <input\r\n                                value={invoiceInfo.Round_off || taxSplitUp.roundOff || 0}\r\n                                className=\"cus-inpt p-2 m-0 border-0\"\r\n                                onInput={onlynumAndNegative}\r\n                                onChange={e => setInvoiceInfo(pre => ({ \r\n                                    ...pre, \r\n                                    Round_off: parseFloat(e.target.value) || 0 \r\n                                }))}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total</td>\r\n                        <td className=\"border p-2\">\r\n                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesInvoiceTaxDetails;","import { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { Addition, checkIsNumber, Division, isEqualNumber, NumberFormat, onlynum, onlynumAndNegative, reactSelectFilterLogic, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { salesInvoiceExpencesInfo } from \"./variable\";\r\nimport { useState } from \"react\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst ExpencesOfSalesInvoice = ({\r\n    invoiceExpences = [],\r\n    setInvoiceExpences,\r\n    expenceMaster = [],\r\n    IS_IGST,\r\n    taxType,\r\n}) => {\r\n\r\n    const handleInputChange = (index, field, value) => {\r\n\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n\r\n                const updated = { ...item, [field]: value };\r\n\r\n                if (field === 'Expence_Value') {\r\n                    const\r\n                        Cgst = item.Cgst ? toNumber(item.Cgst) : 0,\r\n                        Sgst = item.Sgst ? toNumber(item.Sgst) : 0,\r\n                        Igst = item.Igst ? toNumber(item.Igst) : 0,\r\n                        expVal = toNumber(value),\r\n                        taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst_Amo = (Cgst > 0 && !IS_IGST)\r\n                        ? taxAmount.cgst_amount\r\n                        : 0;\r\n                    updated.Sgst_Amo = (Sgst > 0 && !IS_IGST)\r\n                        ? taxAmount.sgst_amount\r\n                        : 0;\r\n                    updated.Igst_Amo = (Igst > 0 && IS_IGST)\r\n                        ? taxAmount.igst_amount\r\n                        : 0;\r\n                }\r\n\r\n                if (field === 'Igst') {\r\n                    const\r\n                        Igst = IS_IGST ? toNumber(value) : 0,\r\n                        Cgst = !IS_IGST ? Division(toNumber(value), 2) : 0,\r\n                        Sgst = !IS_IGST ? Division(toNumber(value), 2) : 0;\r\n\r\n                    const expVal = toNumber(item.Expence_Value), taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst = Cgst;\r\n                    updated.Sgst = Sgst;\r\n                    updated.Cgst_Amo = Cgst > 0 ? taxAmount.cgst_amount : 0;\r\n                    updated.Sgst_Amo = Sgst > 0 ? taxAmount.sgst_amount : 0;\r\n                    updated.Igst_Amo = Igst > 0 ? taxAmount.igst_amount : 0;\r\n                }\r\n\r\n                return updated;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSelectChange = (index, selectedOption) => {\r\n        const selected = expenceMaster.find(exp => isEqualNumber(exp.Id, selectedOption.value)) || {};\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n                return {\r\n                    ...item,\r\n                    Expense_Id: selected.Id,\r\n                    Expence_Value: 0\r\n                };\r\n            })\r\n        );\r\n    };\r\n\r\n    const addNewRow = () => {\r\n        setInvoiceExpences(prev => [...prev, { ...salesInvoiceExpencesInfo, Sno: prev.length }]);\r\n    };\r\n\r\n    const removeRow = index => {\r\n        setInvoiceExpences(prev => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card >\r\n                <div className=\"d-flex align-items-center justify-content-between flex-wrap px-3 py-2\">\r\n                    <h5 className=\"m-0\">Expenses</h5>\r\n                    <Button variant=\"outlined\" type=\"button\" onClick={addNewRow}>Add</Button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered m-0\">\r\n                        <thead className=\"table-light\">\r\n                            <tr>\r\n                                {[\r\n                                    'S.No', 'Expense',\r\n                                    'Expense Value', 'Action'].map(\r\n                                        (o, i) => <th className=\"fa-13 bg-light\" key={i}>{o}</th>\r\n                                    )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{ fontSize: '13px' }}>\r\n                            {invoiceExpences.map((row, index) => {\r\n                                // Get the current expense name for display\r\n                                const currentExpenseName = expenceMaster.find(\r\n                                    exp => isEqualNumber(exp.Id, row?.Expense_Id)\r\n                                )?.Expence_Name || '';\r\n\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className=\"p-0 vctr\" style={{ minWidth: '180px' }}>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: row?.Expense_Id,\r\n                                                    label: currentExpenseName,\r\n                                                }}\r\n                                                onChange={e => handleSelectChange(index, e)}\r\n                                                options={expenceMaster\r\n                                                    // Fix the filtering logic\r\n                                                    .filter(exp => {\r\n                                                        // Always include the currently selected expense\r\n                                                        if (isEqualNumber(exp.Id, row?.Expense_Id)) return true;\r\n\r\n                                                        // Exclude expenses that are already selected in other rows\r\n                                                        return !invoiceExpences.some(\r\n                                                            (inv, idx) => idx !== index && isEqualNumber(inv.Expense_Id, exp.Id)\r\n                                                        );\r\n                                                    })\r\n                                                    .map(exp => ({ value: exp.Id, label: exp.Expence_Name }))\r\n                                                }\r\n                                                styles={customSelectStyles}\r\n                                                menuPortalTarget={document.body}\r\n                                                isSearchable={true}\r\n                                                placeholder=\"Select Expense\"\r\n                                                filterOption={reactSelectFilterLogic}\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr\">\r\n                                            <input\r\n                                                onInput={onlynumAndNegative}\r\n                                                className=\"cus-inpt p-2 border-0\"\r\n                                                value={row.Expence_Value || ''}\r\n                                                disabled={!checkIsNumber(row.Expense_Id)}\r\n                                                onChange={e => {\r\n                                                    handleInputChange(index, 'Expence_Value', e.target.value)\r\n                                                }}\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr  text-center \">\r\n                                            <IconButton onClick={() => removeRow(index)} size=\"small\">\r\n                                                <Delete color=\"error\" fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                            {invoiceExpences.length === 0 && (\r\n                                <tr><td className=\"text-center\" colSpan={6}>No rows</td></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpencesOfSalesInvoice;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\"\r\nimport { checkIsNumber, isEqualNumber, reactSelectFilterLogic, toArray } from \"../../../Components/functions\";\r\nimport RequiredStar from '../../../Components/requiredStar';\r\n\r\nconst ManageSalesInvoiceGeneralInfo = ({\r\n    invoiceInfo = {},\r\n    setInvoiceInfo,\r\n    retailers = [],\r\n    voucherType = [],\r\n    branches = [],\r\n    onChangeRetailer,\r\n    stockItemLedgerName = []\r\n}) => {\r\n\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n\r\n                {/* customer name */}\r\n                <div className=\"col-sm-8 p-2\">\r\n                    <label className='fa-13'>Party Name</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo?.Retailer_Id,\r\n                            label: invoiceInfo?.Retailer_Name\r\n                        }}\r\n                        onChange={e => {\r\n                            setInvoiceInfo(pre => ({\r\n                                ...pre,\r\n                                Retailer_Id: e.value,\r\n                                Retailer_Name: e.label\r\n                            }));\r\n\r\n                            // if (onChangeRetailer) onChangeRetailer();\r\n                        }}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(retailers).map(obj => ({\r\n                                value: obj?.Retailer_Id,\r\n                                label: obj?.Retailer_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select Vendor\"}\r\n                        maxMenuHeight={300}\r\n                        filterOption={reactSelectFilterLogic}\r\n                    />\r\n                </div>\r\n\r\n                {/* voucher type */}\r\n                <div className=\"col-sm-4 p-2\">\r\n                    <label className='fa-13'>Voucher Type</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo.Voucher_Type,\r\n                            label: toArray(voucherType).find(v => isEqualNumber(v.Vocher_Type_Id, invoiceInfo.Voucher_Type))?.Voucher_Type\r\n                        }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Voucher_Type: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(voucherType).filter(\r\n                                fil => fil?.Type === 'SALES'\r\n                            ).map(obj => ({\r\n                                value: obj?.Vocher_Type_Id,\r\n                                label: obj?.Voucher_Type\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        required={true}\r\n                        placeholder={\"Select Voucher Type\"}\r\n                        maxMenuHeight={300}\r\n                        filterOption={reactSelectFilterLogic}\r\n                    />\r\n                </div>\r\n\r\n                {/* Date */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Entry Date <RequiredStar /></label>\r\n                    <input\r\n                        value={invoiceInfo?.Do_Date || \"\"}\r\n                        type=\"date\"\r\n                        required\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Do_Date: e.target.value }))}\r\n                    />\r\n                </div>\r\n\r\n                {/* branch */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Branch <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        value={invoiceInfo?.Branch_Id}\r\n                        required\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                    >\r\n                        <option value=\"\">select</option>\r\n                        {branches.map((o, i) => (\r\n                            <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* GST TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>GST Type <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                        value={invoiceInfo.GST_Inclusive}\r\n                        required\r\n                    >\r\n                        <option value={1}>Inclusive Tax</option>\r\n                        <option value={0}>Exclusive Tax</option>\r\n                        <option value={2}>Not Taxable</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* TAX TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Tax Type</label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                        value={invoiceInfo.IS_IGST}\r\n                    >\r\n                        <option value='0'>GST</option>\r\n                        <option value='1'>IGST</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* stock item ledger name */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Stock Item Ledger Name</label>\r\n                    <Select\r\n                        value={{ value: invoiceInfo.Stock_Item_Ledger_Name, label: invoiceInfo.Stock_Item_Ledger_Name }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Stock_Item_Ledger_Name: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...stockItemLedgerName.map(obj => ({\r\n                                value: obj?.Stock_Item_Ledger_Name,\r\n                                label: obj?.Stock_Item_Ledger_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        menuPortalTarget={document.body}\r\n                        required={true}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select\"}\r\n                        maxMenuHeight={300}\r\n                        filterOption={reactSelectFilterLogic}\r\n                    />\r\n                </div>\r\n\r\n                {/* STATUS */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Status</label>\r\n                    <select\r\n                        value={invoiceInfo?.Cancel_status}\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Cancel_status: e.target.value }))}\r\n                    >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        <option value=\"1\">New</option>\r\n                        <option value=\"2\">Progess</option>\r\n                        <option value=\"3\">Completed</option>\r\n                        <option value=\"0\">Canceled</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <label className='fa-13'>Narration</label>\r\n            <textarea\r\n                className=\"cus-inpt fa-14\"\r\n                rows={2}\r\n                value={invoiceInfo.Narration}\r\n                onChange={e => setInvoiceInfo(pre => ({ ...pre, Narration: e.target.value }))}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageSalesInvoiceGeneralInfo;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.5 3.5 18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2v14H3v3c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V2zM19 19c0 .55-.45 1-1 1s-1-.45-1-1v-3H8V5h11z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 7h6v2H9zm7 0h2v2h-2zm-7 3h6v2H9zm7 0h2v2h-2z\"\n}, \"1\")], 'ReceiptLong');"],"names":["_ref","StaffArray","setStaffArray","costCenter","costCategory","_jsxs","_Fragment","children","className","_jsx","Button","variant","color","type","onClick","pre","_objectSpread","salesInvoiceStaffInfo","toArray","map","row","index","Select","value","Emp_Id","label","Emp_Name","onChange","e","prev","staffRow","ind","isEqualNumber","staff","find","c","Cost_Center_Id","Emp_Type_Id","checkIsNumber","Number","User_Type","options","filter","fil","some","st","Cost_Center_Name","styles","customSelectStyles","isSearchable","placeholder","filterOption","reactSelectFilterLogic","style","maxWidth","minWidth","target","sti","Cost_Category_Id","Cost_Category","IconButton","_","filIndex","size","Delete","_findProductDetails","_godowns$find","orderProducts","setOrderProducts","open","onClose","products","brands","uom","godowns","GST_Inclusive","IS_IGST","editValues","initialValue","batchDetails","productDetails","setProductDetails","useState","isInclusive","isNotTaxableBill","useEffect","isValidObject","Object","fromEntries","entries","_ref2","key","findProductDetails","productid","_products$find","obj","Product_Id","closeDialog","Dialog","fullWidth","DialogTitle","onSubmit","preventDefault","Item_Id","ordered","_ref3","productMaster","gstPercentage","Igst_P","Gst_P","isTaxable","Bill_Qty","Item_Rate","Amount","taxType","itemRateGst","calculateGSTDetails","gstInfo","cgstPer","cgst_per","igstPer","igst_per","Cgst_Amo","cgst_amount","Igst_Amo","igst_amount","Product_Name","base_amount","with_tax","toast","warn","DialogContent","BrandID","Brand","isDisabled","Brand_Name","menuPortalTarget","document","body","maxMenuHeight","GroupID","Group","pro","reduce","acc","grp","Product_Group","push","Pro_Group","hasOwn","RequiredStar","Pre_Id","productInfo","_productInfo$Pro_Grou","_productInfo$Product_","_productInfo$Brand_Na","_productInfo$Brand","_productInfo$Item_Rat","_productInfo$UOM_Id","_productInfo$Units","Unit_Id","UOM_Id","Unit_Name","Units","HSN_Code","findIndex","required","GoDown_Id","g","Godown_Id","Godown_Name","onInput","onlynum","disabled","Multiplication","Division","min","Act_Qty","UOM","selectedIndex","text","o","i","Batch_Name","bat","item_id","godown_id","toNumber","pendingQuantity","batch","DialogActions","startIcon","ClearAll","storage","getSessionUser","user","loadingOn","loadingOff","navigate","useNavigate","useLocation","state","baseData","setBaseData","branch","retailers","voucherType","staffType","brand","godown","expence","stockInGodown","stockItemLedgerName","dialog","setDialog","addProductDialog","importFromSaleOrder","invoiceInfo","setInvoiceInfo","salesInvoiceGeneralInfo","invoiceProducts","setInvoiceProduct","invoiceExpences","setInvoiceExpences","staffArray","selectedProductToEdit","setSelectedProductToEdit","dummyRowCount","length","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","godownLocationsResponse","expenceResponse","godownWiseStock","stockItemLedgerNameResponse","batchDetailsResponse","Promise","all","fetchLink","address","concat","Company_id","branchData","success","data","sort","a","b","String","BranchName","localeCompare","productsData","retailersData","Retailer_Name","Voucher_Type","uomData","staffData","staffCategoryData","godownLocations","expencesMaster","Account_Name","stockInGodowns","stock_item_name","Stock_Item_Ledger_Name","getUniqueData","exp","stringCompare","Type","Id","Acc_Id","Expence_Name","console","error","fetchData","item","_arr$find","arguments","undefined","Igst","Cgst","Sgst","Expence_Value","taxPercentage","Addition","taxAmount","Sgst_Amo","sgst_amount","Array","isArray","Products_List","Expence_Array","Staffs_Array","_editValues$key","ISOString","salesInvoiceDetailsInfo","_ref4","_item$key","salesInvoiceExpencesInfo","_ref5","_item$key2","_ref6","_item$key3","saveSalesInvoice","method","Do_Id","bodyData","Product_Array","then","message","catch","finally","AddProductForm","So_No","Card","window","history","CardContent","minHeight","height","InvolvedStaffs","ManageSalesInvoiceGeneralInfo","branches","onChangeRetailer","FilterableTable","title","headerFontSizePx","bodyFontSizePx","EnableSerialNumber","disablePagination","ButtonArea","sx","ml","Add","Retailer_Id","AddProductsInSalesInvoice","retailer","selectedItems","setSelectedItems","ReceiptLong","dataArray","from","d","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref7","_ref8","_baseData$godown$find","_baseData$godown$find2","_ref9","Edit","ExpencesOfSalesInvoice","expenceMaster","SalesInvoiceTaxDetails","invExpencesTotal","useMemo","Total_Invoice_value","invValue","RoundNumber","product","taxSplitUp","totalTaxable","totalTax","forEach","taxInfo","parseFloat","without_tax","tax_amount","totalWithTax","totalWithExpenses","roundedTotal","Math","round","roundOff","cgst","sgst","igst","invoiceTotal","Round_off","rowSpan","numberToWords","parseInt","onlynumAndNegative","NumberFormat","addNewRow","Sno","fontSize","_expenceMaster$find","currentExpenseName","Expense_Id","handleSelectChange","selectedOption","selected","inv","idx","handleInputChange","field","updated","expVal","removeRow","colSpan","_toArray$find","inputStyle","v","Vocher_Type_Id","Do_Date","Branch_Id","BranchId","Cancel_status","rows","Narration","createSvgIcon"],"sourceRoot":""}