{"version":3,"file":"static/js/576.f56b60a9.chunk.js","mappings":"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","sources":["../node_modules/@mui/lab/TabList/TabList.js","../node_modules/@mui/lab/TabContext/TabContext.js","Components/filterableTable2.jsx","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js","Pages/Reports/CRM/itemWise.jsx","Pages/Reports/CRM/liveStock.jsx","Pages/Reports/CRM/ledgerWise.jsx","Pages/Reports/CRM/salesPersonWise.jsx","Pages/Reports/CRM/lolBased.jsx","Pages/Reports/CRM/losBased.jsx","Pages/Reports/CRM/customerClosingStockReport.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","Components/tablecolumn.js","../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js","../node_modules/@mui/material/styles/useThemeProps.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/lab/TabPanel/tabPanelClasses.js","../node_modules/@mui/lab/TabPanel/TabPanel.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n      children: childrenProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const children = React.Children.map(childrenProp, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.node\n} : void 0;\nexport default TabList;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @type {React.Context<{ idPrefix: string; value: string } | null>}\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Context = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  Context.displayName = 'TabContext';\n}\nfunction useUniquePrefix() {\n  const [id, setId] = React.useState(null);\n  React.useEffect(() => {\n    setId(`mui-p-${Math.round(Math.random() * 1e5)}`);\n  }, []);\n  return id;\n}\nexport default function TabContext(props) {\n  const {\n    children,\n    value\n  } = props;\n  const idPrefix = useUniquePrefix();\n  const context = React.useMemo(() => {\n    return {\n      idPrefix,\n      value\n    };\n  }, [idPrefix, value]);\n  return /*#__PURE__*/_jsx(Context.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? TabContext.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * The value of the currently selected `Tab`.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : void 0;\n\n/**\n * @returns {unknown}\n */\nexport function useTabContext() {\n  return React.useContext(Context);\n}\nexport function getPanelId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-P-${value}`;\n}\nexport function getTabId(context, value) {\n  const {\n    idPrefix\n  } = context;\n  if (idPrefix === null) {\n    return null;\n  }\n  return `${context.idPrefix}-T-${value}`;\n}","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","'use client';\n\nimport getThemeProps from './getThemeProps';\nimport useTheme from '../useTheme';\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  const mergedProps = getThemeProps({\n    theme,\n    name,\n    props\n  });\n  return mergedProps;\n}","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, ISOString, LocalDate, Multiplication, NumberFormat, reactSelectFilterLogic, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockItemBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        searchItem: { value: '', label: 'Select Item' }\r\n    })\r\n    const [baseData, setBaseData] = useState({\r\n        itemDropDown: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/soldItems`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            setBaseData(pre => ({\r\n                ...pre,\r\n                itemDropDown: data.data\r\n            }))\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(filters.searchItem.value)) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/itemSearch?Item_Id=${filters.searchItem.value}&Fromdate=${Fromdate}&Todate=${Todate}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReportData(data.data)\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters.searchItem.value, Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.stockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Item Wise ${sumValue ? '( Total: ' + NumberFormat(sumValue) + ' )' : ''}`}\r\n            EnableSerialNumber\r\n            dataArray={reportData}\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.searchItem}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, searchItem: e }))}\r\n                            options={[\r\n                                { value: '', label: 'select', isDisabled: true },\r\n                                ...baseData.itemDropDown.map(item => ({\r\n                                    value: item.Item_Id,\r\n                                    label: item.Item_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Product\"}\r\n                            filterOption={reactSelectFilterLogic}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? LocalDate(row?.Do_Date) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Date',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? LocalDate(row?.closingDate) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Entry Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.Do_Date ? getDaysBetween(row?.Do_Date, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Update Days',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.closingDate ? getDaysBetween(row?.closingDate, ISOString()) : ''}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Quantity',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockQuantityOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Rate',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockRateOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    ColumnHeader: 'Value',\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            {row?.stockValueOfItem}\r\n                        </>\r\n                    )\r\n                },\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockItemBasedReport","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, isEqualNumber, NumberFormat, reactSelectFilterLogic, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\n\r\nconst ClosingStockRetailerBasedReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' }\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Live Stock: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            dataArray={\r\n                checkIsNumber(filters.retailer.value)\r\n                    ? reportData.filter(\r\n                        row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n                    )\r\n                    : reportData\r\n            }\r\n            ButtonArea={\r\n                <>\r\n                    <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                            filterOption={reactSelectFilterLogic}\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ClosingStockRetailerBasedReport","import { NumberFormat, Addition, reactSelectFilterLogic } from '../../../Components/functions';\r\nimport FilterableTable, { createCol } from '../../../Components/filterableTable2';\r\nimport { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toArray } from '../../../Components/functions';\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\n\r\nconst LedgerBasedClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [productClosingStock, setProductClosingStock] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        customer: { value: '', label: 'Select Retailer' },\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/retailers/whoHasClosingStock`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setRetailers(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (filters?.customer.value) {\r\n            fetchLink({\r\n                address: `reports/customerClosingStock/retailerBased/detailedInfo?Retailer_Id=${filters?.customer.value}&Fromdate=${Fromdate}&Todate=${Todate}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setProductClosingStock(toArray(data?.data));\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [filters?.customer.value, Fromdate, Todate]);\r\n\r\n    const productBasedColumn = [\r\n        createCol('Product_Name', 'string'),\r\n        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('stockQuantityOfItem', 'number', ' Quantity'),\r\n        createCol('stockRateOfItem', 'number', 'Rate'),\r\n        createCol('stockValueOfItem', 'number', 'Stock-Value'),\r\n    ];\r\n\r\n    const productGroupedColumn = [\r\n        createCol('Brand_Name', 'string', 'Brand'),\r\n        createCol('entryDate', 'string', 'Entry Date'),\r\n        createCol('updateDate', 'string', 'Update Date'),\r\n        createCol('entryDays', 'number', 'Entry Days'),\r\n        createCol('updateDays', 'number', 'Update Days'),\r\n        createCol('totalQty', 'number', ' Quantity'),\r\n        createCol('totalValue', 'number', 'Stock-Value'),\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                title={\" Stock value: ₹\" + NumberFormat(\r\n                    productClosingStock.reduce(\r\n                        (sum, product) => Addition(sum, product.stockValueOfItem),\r\n                        0\r\n                    )\r\n                )}\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <div style={{ minWidth: '360px', marginRight: '10px' }}>\r\n                            <Select\r\n                                value={filters.customer}\r\n                                onChange={(e) => {\r\n                                    setFilters({ ...filters, customer: e });\r\n                                }}\r\n                                options={[\r\n                                    // { value: '', label: 'All Retailer' },\r\n                                    ...retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                ]}\r\n                                menuPortalTarget={document.body}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Retailer Name\"}\r\n                                filterOption={reactSelectFilterLogic}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n                dataArray={productClosingStock}\r\n                columns={productBasedColumn}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LedgerBasedClosingStock;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, toArray } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\n\r\n\r\nconst SalesPersonWiseGroupedLedgerClosingStock = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/salesPersonGrouped?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate])\r\n\r\n    const groupedSalesPersonData = useMemo(() => {\r\n        const data = checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n\r\n        const groupSalesPersonWise = groupData(data, 'salesPerson');\r\n\r\n        return groupSalesPersonWise.map(salesPerson => {\r\n\r\n            const groupedData = toArray(salesPerson?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...salesPerson,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        })\r\n    }, [filters.retailer.value, reportData]);\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <FilterableTable\r\n            title={`Sales Person Based Total: ${NumberFormat(sumValue)}`}\r\n            EnableSerialNumber\r\n            headerFontSizePx={12}\r\n            bodyFontSizePx={12}\r\n            dataArray={groupedSalesPersonData}\r\n            ButtonArea={\r\n                <>\r\n                    {/* <div style={{ minWidth: '360px' }}>\r\n                        <Select\r\n                            value={filters.retailer}\r\n                            menuPortalTarget={document.body}\r\n                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                            options={[\r\n                                { value: '', label: 'ALL' },\r\n                                ...reportData.sort(\r\n                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                ).map(item => ({\r\n                                    value: item.Retailer_Id,\r\n                                    label: item.Retailer_Name\r\n                                }))\r\n                            ]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            required\r\n                            placeholder={\"Select Retailer\"}\r\n                        />\r\n                    </div> */}\r\n                    {/* <div className=\"d-flex align-items-center\">\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Fromdate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\">{' to '}</span>\r\n                        <input\r\n                            type=\"date\"\r\n                            value={filters.Todate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            className=\"cus-inpt p-2\"\r\n                        />\r\n                        <span className=\"mx-1\"></span>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\r\n                        ><Search /></IconButton>\r\n                    </div> */}\r\n                        {/* <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span> */}\r\n                </>\r\n            }\r\n            columns={[\r\n                createCol('salesPerson', 'string', 'Sales/Delivery Person'),\r\n                createCol('entries', 'number', 'Party   '),\r\n                createCol('entryDate', 'date', 'Entry Date'),\r\n                createCol('updateDate', 'date', 'Update Date'),\r\n                createCol('entryDays', 'number', 'Entry Days'),\r\n                createCol('updateDays', 'number', 'Update Days'),\r\n                createCol('liveStockValue', 'number', 'Stock Value'),\r\n            ]}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (\r\n                <FilterableTable\r\n                    headerFontSizePx={12}\r\n                    bodyFontSizePx={12}\r\n                    dataArray={row.groupedData}\r\n                    EnableSerialNumber\r\n                    columns={[\r\n                        createCol('Retailer_Name', 'string', 'Customer'),\r\n                        createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                        createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                        createCol('entryDays', 'number', 'Entry Days'),\r\n                        createCol('updateDays', 'number', 'Update Days'),\r\n                        createCol('liveStockValue', 'number', 'Stock Value'),\r\n                    ]}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SalesPersonWiseGroupedLedgerClosingStock","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, reactSelectFilterLogic, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst RetailerClosingWithLOL = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Sales Person', column: \"salesPerson\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Delivery Person', column: \"deliveryPerson\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Ledger Name', column: \"Ledger_Name\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Ledger Alias', column: \"Ledger_Alias\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Party with Brokers', column: \"Actual_Party_Name_with_Brokers\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'Party Name', column: \"Party_Name\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Party Location', column: \"Party_Location\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Party Nature', column: \"Party_Nature\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'Party Group', column: \"Party_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'Ref Brokers', column: \"Ref_Brokers\", isVisible: false, OrderBy: 10 },\r\n        { displayName: 'Ref Owners', column: \"Ref_Owners\", isVisible: false, OrderBy: 11 },\r\n        { displayName: 'Party District', column: \"Party_District\", isVisible: false, OrderBy: 12 },\r\n        { displayName: 'Party Mailing Name', column: \"Party_Mailing_Name\", isVisible: false, OrderBy: 13 }\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        retailer: { value: '', label: 'Search Retailer' },\r\n        reload: false,\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/retailerBased/withLOL?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.retailer.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Retailer_Id, filters.retailer.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.retailer.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.liveStockValue), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.liveStockValue), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOL Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Party   '),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Retailer_Name', 'string', 'Customer'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('liveStockValue', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Retailer Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.retailer}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, retailer: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Retailer_Name).localeCompare(String(b?.Retailer_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Retailer_Id,\r\n                                                    label: item.Retailer_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Retailer\"}\r\n                                            filterOption={reactSelectFilterLogic}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RetailerClosingWithLOL;","import { useEffect, useMemo, useState } from \"react\"\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Addition, checkIsNumber, getDaysBetween, groupData, isEqualNumber, ISOString, isValidDate, NumberFormat, reactSelectFilterLogic, stringCompare, toArray, toNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch } from \"@mui/material\";\r\nimport { FilterAlt } from \"@mui/icons-material\";\r\n\r\n\r\nconst LosBasedClosingReport = ({ loadingOn, loadingOff, Fromdate, Todate }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n\r\n    const [groupingColumns, setGroupingColumns] = useState([\r\n        { displayName: 'Brand', column: \"Brand_Name\", isVisible: false, OrderBy: 1 },\r\n        { displayName: 'Stock Item', column: \"Stock_Item\", isVisible: false, OrderBy: 2 },\r\n        { displayName: 'Group ST', column: \"Group_ST\", isVisible: false, OrderBy: 3 },\r\n        { displayName: 'Bag', column: \"Bag\", isVisible: false, OrderBy: 4 },\r\n        { displayName: 'Stock Group', column: \"Stock_Group\", isVisible: false, OrderBy: 5 },\r\n        { displayName: 'S Sub Group 1', column: \"S_Sub_Group_1\", isVisible: false, OrderBy: 6 },\r\n        { displayName: 'Grade Item Group', column: \"Grade_Item_Group\", isVisible: false, OrderBy: 7 },\r\n        { displayName: 'Item Name Modified', column: \"Item_Name_Modified\", isVisible: false, OrderBy: 8 },\r\n        { displayName: 'POS Group', column: \"POS_Group\", isVisible: false, OrderBy: 9 },\r\n        { displayName: 'POS Item Name', column: \"POS_Item_Name\", isVisible: false, OrderBy: 10 },\r\n    ]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        product: { value: '', label: 'Search Item' },\r\n        groupColumn: groupingColumns[0].column,\r\n        settingsDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/customerClosingStock/withLOS?Fromdate=${Fromdate}&Todate=${Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const dataValue = toArray(data.data);\r\n                setReportData(dataValue)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [Fromdate, Todate]);\r\n\r\n    const data = useMemo(() => {\r\n        return checkIsNumber(filters.product.value)\r\n            ? reportData.filter(\r\n                row => isEqualNumber(row.Product_Id, filters.product.value)\r\n            ) : reportData;\r\n    }, [reportData, filters.product.value])\r\n\r\n    const groupedArray = useMemo(() => {\r\n\r\n        const groupSalesPersonWise = groupData(data, filters.groupColumn);\r\n\r\n        return groupSalesPersonWise.map(lolData => {\r\n\r\n            const groupedData = toArray(lolData?.groupedData);\r\n\r\n            const deliveryDates = groupedData\r\n                .map(party => party?.Latest_Delivery_Date ? ISOString(party?.Latest_Delivery_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n            const closingDates = groupedData\r\n                .map(party => party?.Latest_Closing_Date ? ISOString(party?.Latest_Closing_Date) : '')\r\n                .filter(d => isValidDate(d));\r\n\r\n            const entryDate = deliveryDates.length\r\n                ? new Date(Math.max(...deliveryDates.map(d => new Date(d))))\r\n                : '';\r\n            const updateDate = closingDates.length\r\n                ? new Date(Math.max(...closingDates.map(d => new Date(d))))\r\n                : '';\r\n\r\n            return {\r\n                ...lolData,\r\n                entryDate: entryDate ? ISOString(entryDate) : '',\r\n                updateDate: updateDate ? ISOString(updateDate) : '',\r\n                entryDays: entryDate ? getDaysBetween(entryDate, ISOString()) : '',\r\n                updateDays: updateDate ? getDaysBetween(updateDate, ISOString()) : '',\r\n                liveStockValue: groupedData.reduce((acc, item) => Addition(acc, item.StockValueOfItem), 0),\r\n                StockQuantityOfItem: groupedData.reduce((acc, item) => Addition(acc, item.StockQuantityOfItem), 0),\r\n                entries: groupedData.length\r\n            }\r\n        }).sort((a, b) => String(a[filters.groupColumn]).localeCompare(b[filters.groupColumn]))\r\n    }, [data, filters.groupColumn]);\r\n\r\n    const closeDialog = () => setFilters(pre => ({ ...pre, settingsDialog: false }));\r\n\r\n    const sumValue = useMemo(() => {\r\n        return reportData.reduce(\r\n            (acc, item) => Addition(acc, item?.StockValueOfItem), 0\r\n        )\r\n    }, [reportData])\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={`LOS Based `}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                dataArray={groupedArray}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setFilters(pre => ({ ...pre, settingsDialog: true }))}\r\n                        ><FilterAlt /></IconButton>\r\n                        <span>Total: <span className=\"text-primary\">{NumberFormat(sumValue)}</span></span>\r\n                    </>\r\n                }\r\n                columns={[\r\n                    createCol(filters.groupColumn, 'string', 'Group'),\r\n                    createCol('entries', 'number', 'Items'),\r\n                    createCol('entryDate', 'date', 'Entry Date'),\r\n                    createCol('updateDate', 'date', 'Update Date'),\r\n                    createCol('entryDays', 'number', 'Entry Days'),\r\n                    createCol('updateDays', 'number', 'Update Days'),\r\n                    createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                    createCol('liveStockValue', 'number', 'Stock Value'),\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={row.groupedData}\r\n                        EnableSerialNumber\r\n                        columns={[\r\n                            createCol('Product_Name', 'string', 'Product'),\r\n                            createCol('deliveryDisplayDate', 'string', 'Entry Date'),\r\n                            createCol('closingDisplayDate', 'string', 'Update Date'),\r\n                            createCol('entryDays', 'number', 'Entry Days'),\r\n                            createCol('updateDays', 'number', 'Update Days'),\r\n                            createCol('StockQuantityOfItem', 'number', 'Quantity'),\r\n                            createCol('StockValueOfItem', 'number', 'Stock Value'),\r\n                            ...groupingColumns.filter(\r\n                                col => col.isVisible\r\n                            ).sort(\r\n                                (a, b) => toNumber(a.OrderBy) - toNumber(b.OrderBy)\r\n                            ).map(\r\n                                col => createCol(col.column, 'string', col.displayName)\r\n                            )\r\n                        ]}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.settingsDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Product Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.product}\r\n                                            menuPortalTarget={document.body}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, product: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...reportData.sort(\r\n                                                    (a, b) => String(a?.Product_Name).localeCompare(String(b?.Product_Name))\r\n                                                ).map(item => ({\r\n                                                    value: item.Product_Id,\r\n                                                    label: item.Product_Name\r\n                                                }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            required\r\n                                            placeholder={\"Select Product\"}\r\n                                            filterOption={reactSelectFilterLogic}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Group By</td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2 w-auto me-2\"\r\n                                            value={filters.groupColumn}\r\n                                            onChange={e => setFilters(pre => ({ ...pre, groupColumn: e.target.value }))}\r\n                                        >\r\n                                            {groupingColumns.map((col, colKey) => (\r\n                                                <option value={col.column} key={colKey}>{col.displayName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"row p-2\">\r\n                        {groupingColumns.filter(\r\n                            col => !stringCompare(col.column, filters.groupColumn)\r\n                        ).map((col, colInd) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={colInd}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${colInd % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(col.isVisible)}\r\n                                            onChange={e =>\r\n                                                setGroupingColumns(prevColumns =>\r\n                                                    prevColumns.map(preCol =>\r\n                                                        stringCompare(preCol.column, col?.column)\r\n                                                            ? { ...preCol, isVisible: e.target.checked }\r\n                                                            : preCol\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{col?.displayName}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(col.OrderBy) ? col.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setGroupingColumns(prevColumns =>\r\n                                                prevColumns.map(preCol =>\r\n                                                    stringCompare(preCol.column, col.column)\r\n                                                        ? { ...preCol, OrderBy: e.target.value }\r\n                                                        : preCol\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LosBasedClosingReport;","import TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport { Box, IconButton, Tab } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport ClosingStockItemBasedReport from './itemWise';\r\nimport ClosingStockRetailerBasedReport from './liveStock';\r\n// import RetailerClosingStock from '../../UserModule/retailer/closingStockRetailerBasedReport';\r\nimport LedgerBasedClosingStock from './ledgerWise';\r\nimport SalesPersonWiseGroupedLedgerClosingStock from './salesPersonWise';\r\nimport RetailerClosingWithLOL from './lolBased';\r\nimport LosBasedClosingReport from './losBased';\r\nimport { getPreviousDate, ISOString } from '../../../Components/functions';\r\nimport { Search } from '@mui/icons-material';\r\n\r\nconst CustomerClosingStockReport = ({ loadingOn, loadingOff }) => {\r\n    const [tabValue, setTabValue] = useState(1);\r\n    const [dateFilter, setDateFilter] = useState({\r\n        Fromdate: getPreviousDate(30),\r\n        Todate: ISOString(),\r\n        FilterFromDate: getPreviousDate(30),\r\n        FilterTodate: ISOString(),\r\n    })\r\n\r\n    const tabData = [\r\n        {\r\n            name: 'Item Wise',\r\n            component: (\r\n                <ClosingStockItemBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Ledger Wise',\r\n            component: (\r\n                <LedgerBasedClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOL Based',\r\n            component: (\r\n                <RetailerClosingWithLOL\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'LOS Based',\r\n            component: (\r\n                <LosBasedClosingReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Live Stock',\r\n            component: (\r\n                <ClosingStockRetailerBasedReport\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n        {\r\n            name: 'Sales Person Based',\r\n            component: (\r\n                <SalesPersonWiseGroupedLedgerClosingStock\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    Fromdate={dateFilter.Fromdate}\r\n                    Todate={dateFilter.Todate}\r\n                />\r\n            )\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-3\">\r\n                <label htmlFor=\"from\" className='me-1 fw-bold '>Fromdate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='from'\r\n                    className='cus-inpt p-2 w-auto me-2'\r\n                    value={dateFilter.FilterFromDate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterFromDate: e.target.value }))}\r\n                />\r\n                <label htmlFor=\"to\" className='me-1 fw-bold '>Todate: </label>\r\n                <input\r\n                    type=\"date\"\r\n                    id='to'\r\n                    className='cus-inpt p-2 w-auto'\r\n                    value={dateFilter.FilterTodate}\r\n                    onChange={e => setDateFilter(pre => ({ ...pre, FilterTodate: e.target.value }))}\r\n                />\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => setDateFilter(pre => ({\r\n                        ...pre,\r\n                        Fromdate: pre.FilterFromDate ? pre.FilterFromDate : pre.Fromdate,\r\n                        Todate: pre.FilterTodate ? pre.FilterTodate : pre.Todate\r\n                    }))}\r\n                ><Search /></IconButton>\r\n            </div>\r\n\r\n            <TabContext value={tabValue}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        indicatorColor='transparant'\r\n                        onChange={(e, n) => setTabValue(n)}\r\n                        variant='scrollable'\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {tabData.map(\r\n                            (tab, tabInd) => (\r\n                                <Tab\r\n                                    key={tabInd}\r\n                                    sx={tabValue === (tabInd + 1) ? { backgroundColor: '#c6d7eb' } : {}}\r\n                                    label={tab.name}\r\n                                    value={tabInd + 1}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </TabList>\r\n                </Box>\r\n\r\n                {tabData.map((tab, tabInd) => (\r\n                    <TabPanel value={tabInd + 1} sx={{ p: 0, pt: 2 }} key={tabInd}>\r\n                        {tab.component}\r\n                    </TabPanel>\r\n                ))}\r\n\r\n            </TabContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerClosingStockReport;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import resolveProps from '@mui/utils/resolveProps';\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n  return resolveProps(theme.components[name].defaultProps, props);\n}","'use client';\n\nimport systemUseThemeProps from '@mui/system/useThemeProps';\nimport defaultTheme from './defaultTheme';\nimport THEME_ID from './identifier';\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getTabPanelUtilityClass(slot) {\n  return generateUtilityClass('MuiTabPanel', slot);\n}\nconst tabPanelClasses = generateUtilityClasses('MuiTabPanel', ['root']);\nexport default tabPanelClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\nconst TabPanelRoot = styled('div', {\n  name: 'MuiTabPanel',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n  const {\n      children,\n      className,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props);\n  const classes = useUtilityClasses(ownerState);\n  const context = useTabContext();\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    ownerState: ownerState\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;"],"names":["_excluded","React","props","ref","children","childrenProp","other","_objectWithoutPropertiesLoose","context","useTabContext","TypeError","map","child","getPanelId","value","id","getTabId","_jsx","Tabs","_extends","Context","TabContext","idPrefix","setId","concat","Math","round","random","useUniquePrefix","Provider","preprocessDataForExport","data","columns","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","useThemeProps","defaultTheme","themeId","theme","useTheme","getThemeProps","loadingOn","loadingOff","Fromdate","Todate","reportData","setReportData","filters","setFilters","searchItem","label","baseData","setBaseData","itemDropDown","useEffect","fetchLink","address","then","catch","checkIsNumber","success","sumValue","useMemo","reduce","acc","item","Addition","stockValueOfItem","style","minWidth","Select","menuPortalTarget","document","onChange","options","isDisabled","Item_Id","Item_Name","styles","customSelectStyles","isSearchable","required","placeholder","filterOption","reactSelectFilterLogic","Do_Date","closingDate","getDaysBetween","ISOString","_ref5","_ref6","stockQuantityOfItem","_ref7","stockRateOfItem","_ref8","retailer","dataValue","toArray","liveStockValue","Retailer_Id","Retailer_Name","localeCompare","retailers","setRetailers","productClosingStock","setProductClosingStock","customer","productBasedColumn","sum","product","marginRight","obj","reload","groupedSalesPersonData","groupData","salesPerson","groupedData","deliveryDates","party","Latest_Delivery_Date","d","isValidDate","closingDates","Latest_Closing_Date","entryDate","Date","max","updateDate","entryDays","updateDays","groupingColumns","setGroupingColumns","displayName","OrderBy","groupColumn","settingsDialog","groupedArray","lolData","closeDialog","FilterAlt","col","toNumber","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","colKey","stringCompare","colInd","Switch","checked","prevColumns","preCol","width","DialogActions","Button","Product_Id","StockValueOfItem","StockQuantityOfItem","Product_Name","tabValue","setTabValue","dateFilter","setDateFilter","getPreviousDate","FilterFromDate","FilterTodate","tabData","ClosingStockItemBasedReport","LedgerBasedClosingStock","RetailerClosingWithLOL","LosBasedClosingReport","ClosingStockRetailerBasedReport","SalesPersonWiseGroupedLedgerClosingStock","htmlFor","Search","Box","borderBottom","borderColor","TabList","indicatorColor","n","variant","scrollButtons","tab","tabInd","Tab","TabPanel","p","pt","createSvgIcon","customTableStyles","table","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","textTransform","option","isSelected","isFocused","MainMenu","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","params","components","resolveProps","systemUseThemeProps","THEME_ID","generateUtilityClasses","createTheme","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate","getTabPanelUtilityClass","slot","generateUtilityClass","TabPanelRoot","styled","overridesResolver","spacing","inProps","ownerState","classes","composeClasses","useUtilityClasses","tabId","clsx","hidden","role"],"sourceRoot":""}