{"version":3,"file":"static/js/8765.17f06565.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/ShoppingCartCheckout.js","Pages/DataEntry/purchaseOrderDataArray.js","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/Edit.js","Pages/DataEntry/purchaseOrderPreviewTemplate.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2m10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2m-8.9-5h7.45c.75 0 1.41-.41 1.75-1.03L21 4.96 19.25 4l-3.7 7H8.53L4.27 2H1v2h2l3.6 7.59-1.35 2.44C4.52 15.37 5.48 17 7 17h12v-2H7zM12 2l4 4-4 4-1.41-1.41L12.17 7H8V5h4.17l-1.59-1.59z\"\n}), 'ShoppingCartCheckout');","import { Addition, isEqualNumber, isGraterNumber, ISOString, LocalDate, Multiplication, Subraction, Division, checkIsNumber, NumberFormat, filterableText, toNumber } from \"../../Components/functions\";\r\nimport { IconButton, Tooltip } from '@mui/material';\r\nimport { Delete, Edit, ShoppingCartCheckout, Visibility } from '@mui/icons-material';\r\n\r\nconst isArr = (arr) => Array.isArray(arr)\r\n\r\nexport const purchaseOrderDataSet = ({ data = [], status = 'ITEMS' }) => {\r\n\r\n    switch (status) {\r\n        case 'ITEMS':\r\n        case 'PO-Vendor-Wise':\r\n        case 'PO-Item-Wise':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item.ItemDetails.map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            StaffDetails: isArr(item.StaffDetails) ? item.StaffDetails : [],\r\n                            TranspoterDetails: isArr(item.TranspoterDetails) ? item.TranspoterDetails : [],\r\n                            DeliveryDetails: isArr(item.DeliveryDetails) ? item.DeliveryDetails : [],\r\n                            ConvertedAsInvoices: isArr(item.ConvertedAsInvoices) ? item.ConvertedAsInvoices : [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                            isConvertableArrivalExist: toNumber(item?.isConvertableArrivalExist),\r\n                            IsConvertedAsInvoice: toNumber(item?.IsConvertedAsInvoice)\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ITEMS PENDING':\r\n        case 'PO-Pending-Only':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item?.ItemDetails?.filter(fil => {\r\n                        const itemsInDelivery = item?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, fil?.ItemId));\r\n                        const WeightTotal = itemsInDelivery.reduce((sum, delivery) => Addition(sum, delivery?.Weight), 0);\r\n                        return (\r\n                            Number(WeightTotal) < Number(fil?.Weight)\r\n                            && filterableText(item.OrderStatus) !== filterableText('Canceled')\r\n                        );\r\n                    }).map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            StaffDetails: isArr(item.StaffDetails) ? item.StaffDetails : [],\r\n                            TranspoterDetails: isArr(item.TranspoterDetails) ? item.TranspoterDetails : [],\r\n                            DeliveryDetails: isArr(item.DeliveryDetails) ? item.DeliveryDetails : [],\r\n                            ConvertedAsInvoices: isArr(item.ConvertedAsInvoices) ? item.ConvertedAsInvoices : [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                            isConvertableArrivalExist: toNumber(item?.isConvertableArrivalExist),\r\n                            IsConvertedAsInvoice: toNumber(item?.IsConvertedAsInvoice)\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ITEMS ARRIVED':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.ItemDetails)) return acc;\r\n\r\n                    const itemDetails = item?.ItemDetails?.filter(fil => {\r\n                        const itemsInDelivery = item?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, fil?.ItemId));\r\n                        const WeightTotal = itemsInDelivery.reduce((sum, delivery) => Addition(sum, delivery?.Weight), 0);\r\n                        return Number(WeightTotal) >= Number(fil?.Weight);\r\n                    }).map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: item?.ItemDetails,\r\n                            OrderStatus: item?.OrderStatus,\r\n                            StaffDetails: isArr(item.StaffDetails) ? item.StaffDetails : [],\r\n                            TranspoterDetails: isArr(item.TranspoterDetails) ? item.TranspoterDetails : [],\r\n                            DeliveryDetails: isArr(item.DeliveryDetails) ? item.DeliveryDetails : [],\r\n                            ConvertedAsInvoices: isArr(item.ConvertedAsInvoices) ? item.ConvertedAsInvoices : [],\r\n                            LoadingDate: item.LoadingDate,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                            isConvertableArrivalExist: toNumber(item?.isConvertableArrivalExist),\r\n                            IsConvertedAsInvoice: toNumber(item?.IsConvertedAsInvoice)\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(itemDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'AR-Item-Based':\r\n        case 'AR-Vendor-Wise':\r\n            return (\r\n                data?.reduce((acc, item) => {\r\n                    if (!Array.isArray(item?.DeliveryDetails)) return acc;\r\n\r\n                    const DeliveryDetails = item.DeliveryDetails.map(o => ({\r\n                        ...o,\r\n                        OrderDetails: {\r\n                            Id: item?.Id,\r\n                            Sno: item?.Sno,\r\n                            PoYear: item?.PoYear,\r\n                            PO_ID: item?.PO_ID,\r\n                            BranchId: item?.BranchId,\r\n                            BrokerId: item.BrokerId ?? '',\r\n                            BrokerName: item.BrokerName,\r\n                            CreatedBy: item.CreatedBy,\r\n                            CreatedAt: item.CreatedAt,\r\n                            ItemDetails: isArr(item.ItemDetails) ? item.ItemDetails : [],\r\n                            StaffDetails: isArr(item.StaffDetails) ? item.StaffDetails : [],\r\n                            TranspoterDetails: isArr(item.TranspoterDetails) ? item.TranspoterDetails : [],\r\n                            DeliveryDetails: isArr(item.DeliveryDetails) ? item.DeliveryDetails : [],\r\n                            ConvertedAsInvoices: isArr(item.ConvertedAsInvoices) ? item.ConvertedAsInvoices : [],\r\n                            OrderStatus: item?.OrderStatus,\r\n                            LoadingDate: item.LoadingDate,\r\n                            OwnerId: item.OwnerId ?? '',\r\n                            OwnerName: item.OwnerName,\r\n                            PartyAddress: item.PartyAddress,\r\n                            PartyId: item.PartyId ?? '',\r\n                            PartyName: item.PartyName,\r\n                            PaymentCondition: item.PaymentCondition,\r\n                            Remarks: item.Remarks,\r\n                            TradeConfirmDate: item.TradeConfirmDate,\r\n                            Ledger_Name: item.Ledger_Name,\r\n                            Party_District: item.Party_District,\r\n                            isConvertableArrivalExist: toNumber(item?.isConvertableArrivalExist),\r\n                            IsConvertedAsInvoice: toNumber(item?.IsConvertedAsInvoice)\r\n                        }\r\n                    }));\r\n\r\n                    return acc.concat(DeliveryDetails);\r\n                }, [])\r\n            )\r\n\r\n        case 'ORDERS':\r\n            return data\r\n        case 'ORDERS PENDING':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (!Array.isArray(item?.DeliveryDetails) || isGraterNumber(item?.DeliveryDetails?.length, 0)) return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'ORDERS ARRIVED':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (!Array.isArray(item?.DeliveryDetails) || isEqualNumber(item?.DeliveryDetails?.length, 0)) return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'COMPLETED ORDERS':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (item?.OrderStatus !== 'Completed') return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        case 'IN-COMPLETED ORDERS':\r\n            return data.reduce((acc, item) => {\r\n\r\n                if (item?.OrderStatus === 'Completed') return acc;\r\n\r\n                return acc.concat(item);\r\n\r\n            }, [])\r\n        default:\r\n            return []\r\n    }\r\n}\r\n\r\nconst statusColor = {\r\n    NewOrder: ' bg-info fw-bold fa-11 px-2 py-1 rounded-3 ',\r\n    OnProcess: ' bg-warning fw-bold fa-11 px-2 py-1 rounded-3 ',\r\n    Completed: ' bg-success text-light fa-11 px-2 py-1 rounded-3 ',\r\n    Canceled: ' bg-danger text-light fw-bold fa-11 px-2 py-1 rounded-3 '\r\n}\r\n\r\nconst chooseColor = (orderStatus) => {\r\n    // const DeliveryDetails = Number(orderStatus) > 0 ? 'Arrived' : 'Pending';\r\n    switch (orderStatus) {\r\n        case 'New Order': return statusColor.NewOrder;\r\n        case 'On Process': return statusColor.OnProcess;\r\n        case 'Completed': return statusColor.Completed;\r\n        case 'Canceled': return statusColor.Canceled;\r\n        default: return ''\r\n    }\r\n}\r\n\r\nconst createCol = (field, type, ColumnHeader) => {\r\n    return {\r\n        isVisible: 1,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\n// const findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\n// const getActQty = (item, products) => {\r\n//     console.log(item)\r\n//     const productDetails = findProductDetails(products, item?.ItemId);\r\n//     const pack = parseFloat(productDetails?.PackGet ?? 0);\r\n//     const Quantity = Division(item.Weight, pack);\r\n//     console.log({pack, Quantity})\r\n//     return Quantity;\r\n// }\r\n\r\nexport const displayColumns = ({ \r\n    OrderStatus = 'ITEMS', \r\n    dialogs, \r\n    setOrderPreview, \r\n    navigation, \r\n    products,\r\n    EditRights,\r\n    DeleteRights,\r\n    AddRights,\r\n}) => {\r\n\r\n    // Order Based Cells\r\n    const OrderId = createCol('OrderId', 'string', 'Order Id'),\r\n        // OwnerName = createCol('OwnerName', 'string', 'Owner Name'),\r\n        OwnerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Owners',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return row?.StaffDetails?.filter(staff => staff.Cost_Category === 'Owners').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        },\r\n        BrokerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Brokers',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                return row?.StaffDetails?.filter(staff => staff.Cost_Category === 'Broker').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        },\r\n        PartyName = createCol('PartyName', 'string', 'Party'),\r\n        PaymentCondition = createCol('PaymentCondition', 'string', 'Payment Condition'),\r\n        Remarks = createCol('Remarks', 'string'),\r\n        TradeConfirmDate = createCol('TradeConfirmDate', 'date', 'Trade Confirm Date'),\r\n        LoadingDate = createCol('LoadingDate', 'date', 'Loading Date'),\r\n        Condition = createCol('QualityCondition', 'string', 'Condition'),\r\n        OrderPartyName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Party',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.PartyName\r\n        }, OrderActions = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Action',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row;\r\n                const {\r\n                    ItemDetails = [],\r\n                    DeliveryDetails = [],\r\n                    StaffDetails = [],\r\n                    TranspoterDetails = [],\r\n                    ConvertedAsInvoices = []\r\n                } = OrderDetails;\r\n\r\n                const isConvertableArrivalExist = isEqualNumber(row?.isConvertableArrivalExist, 1);\r\n                const IsConvertedAsInvoice = isEqualNumber(row?.IsConvertedAsInvoice, 1);\r\n\r\n                return (\r\n                    <>\r\n                        <Tooltip title='Preview Order'>\r\n                            <span>\r\n                                <IconButton\r\n                                    size='small'\r\n                                    color='primary'\r\n                                    onClick={() => setOrderPreview(pre => ({\r\n                                        ...pre,\r\n                                        OrderDetails: OrderDetails,\r\n                                        OrderItemsArray: ItemDetails,\r\n                                        DeliveryArray: DeliveryDetails,\r\n                                        TranspoterArray: TranspoterDetails,\r\n                                        StaffArray: StaffDetails,\r\n                                        // ConvertedAsInvoices: ConvertedAsInvoices,\r\n                                        display: true,\r\n                                    }))}\r\n                                ><Visibility className=\"fa-16\" /></IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n\r\n                        {(\r\n                            navigation\r\n                            && isConvertableArrivalExist\r\n                            && OrderDetails?.OrderStatus === 'Completed'\r\n                            && AddRights\r\n                        ) && (\r\n                                <Tooltip title='Convert to invoice'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            navigation({\r\n                                                page: '/erp/purchase/invoice/create',\r\n                                                stateToTransfer: {\r\n                                                    invoiceInfo: {\r\n                                                        Branch_Id: OrderDetails?.BranchId,\r\n                                                        Po_Inv_Date: ISOString(),\r\n                                                        Po_Entry_Date: OrderDetails?.LoadingDate ? ISOString(OrderDetails?.LoadingDate) : ISOString(),\r\n                                                        Retailer_Id: OrderDetails?.PartyId,\r\n                                                        Retailer_Name: OrderDetails?.PartyName\r\n                                                    },\r\n                                                    orderInfo: DeliveryDetails.filter(\r\n                                                        fil => toNumber(fil.pendingInvoiceWeight) > 0\r\n                                                    ).map(item => ({\r\n                                                        POI_St_Id: '',\r\n                                                        DeliveryId: item?.Trip_Item_SNo,\r\n                                                        OrderId: item?.OrderId,\r\n                                                        Location_Id: item?.LocationId,\r\n                                                        Item_Id: item?.ItemId,\r\n                                                        Item_Name: item?.ItemName || 'not found',\r\n                                                        Bill_Qty: item?.pendingInvoiceWeight,\r\n                                                        Act_Qty: item?.Weight,\r\n                                                        Bill_Alt_Qty: item?.Quantity,\r\n                                                        Item_Rate: item?.BilledRate,\r\n                                                        Amount: Multiplication(item?.BilledRate, item?.Weight),\r\n                                                        Free_Qty: 0,\r\n                                                        Batch_No: item?.BatchLocation,\r\n                                                    })),\r\n                                                    staffInfo: StaffDetails.map(staff => ({\r\n                                                        Involved_Emp_Id: Number(staff.EmployeeId),\r\n                                                        Involved_Emp_Name: staff.Emp_Name,\r\n                                                        Cost_Center_Type_Id: Number(staff.CostType),\r\n                                                    }))\r\n                                                }\r\n                                            })\r\n                                        }}\r\n                                    ><ShoppingCartCheckout /></IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n\r\n                        {(navigation && !IsConvertedAsInvoice && EditRights) && (\r\n                            <Tooltip title='Edit'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => {\r\n                                            navigation({\r\n                                                page: 'create',\r\n                                                stateToTransfer: {\r\n                                                    OrderDetails: OrderDetails,\r\n                                                    OrderItemsArray: ItemDetails,\r\n                                                    DeliveryArray: DeliveryDetails,\r\n                                                    TranspoterArray: TranspoterDetails,\r\n                                                    StaffArray: StaffDetails,\r\n                                                    editPage: 'PurchaseOderWithDelivery'\r\n                                                }\r\n                                            })\r\n                                        }}\r\n                                    ><Edit className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip >\r\n                        )}\r\n\r\n                        {isConvertableArrivalExist && (\r\n                            <Tooltip title='Delete Order'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => dialogs(pre => ({ ...pre, deleteOrderDialog: true, deleteOrderId: row?.Id }))}\r\n                                        color='error'\r\n                                    ><Delete className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip>\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        }, GeneralStatus = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Status',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderStatus = row?.OrderStatus;\r\n                return (\r\n                    <span className={chooseColor(OrderStatus)}>\r\n                        {String(OrderStatus).replace(' ', '')}\r\n                    </span>\r\n                )\r\n            }\r\n        }, OrderPO_ID = createCol('PO_ID', 'string', 'Order ID')\r\n\r\n    // Item Based Cells\r\n    const\r\n        ItemPO_ID = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Order ID',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.PO_ID ?? ''\r\n        },\r\n        ItemName = createCol('ItemName', 'string', 'Item'),\r\n        Rate = createCol('Rate', 'number'),\r\n        WeightWithUOM = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Weight',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => checkIsNumber(row?.Weight) ? NumberFormat(row?.Weight) : 0\r\n            // + ' ' + row?.Units\r\n        }, ItemArrivedQuantity = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Arrived Quantity',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const itemsInDelivery = row?.OrderDetails?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, row?.ItemId));\r\n                const WeightTotal = itemsInDelivery.reduce((acc, item) => Addition(acc, item?.Weight), 0);\r\n                return WeightTotal\r\n            }\r\n        }, PendingItemQuantity = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Pending-Quantity',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const itemsInDelivery = row?.OrderDetails?.DeliveryDetails?.filter(del => isEqualNumber(del.ItemId, row?.ItemId));\r\n                const WeightTotal = itemsInDelivery.reduce((acc, item) => Addition(acc, item?.Weight), 0);\r\n                return Subraction(row?.Weight, WeightTotal);\r\n            }\r\n        }, ItemTradeConfirmDate = {\r\n            isVisible: 1,\r\n            isCustomCell: true,\r\n            ColumnHeader: 'Date',\r\n            Cell: ({ row }) => LocalDate(row?.OrderDetails?.TradeConfirmDate)\r\n        }, ItemOrderStatus = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Status',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderStatus = row?.OrderDetails?.OrderStatus;\r\n                return (\r\n                    <span className={chooseColor(OrderStatus)}>\r\n                        {String(OrderStatus).replace(' ', '')}\r\n                    </span>\r\n                )\r\n            }\r\n        }, ItemOwnerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Owners',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { StaffDetails } = OrderDetails;\r\n                return StaffDetails?.filter(staff => staff.Cost_Category === 'Owners').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        }, ItemBrokerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Brokers',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { StaffDetails } = OrderDetails;\r\n                return StaffDetails?.filter(staff => staff.Cost_Category === 'Broker').map(staff => (\r\n                    staff.Emp_Name\r\n                )).join(', ')\r\n            }\r\n        }, ItemActions = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Action',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n\r\n                const OrderDetails = row?.OrderDetails;\r\n                const { ItemDetails, DeliveryDetails, TranspoterDetails, StaffDetails } = OrderDetails;\r\n                // const isConvertableArrivalExist = isEqualNumber(row?.isConvertableArrivalExist, 1);\r\n                const IsConvertedAsInvoice = isEqualNumber(row?.IsConvertedAsInvoice, 1);\r\n\r\n\r\n                return (\r\n                    <>\r\n                        <Tooltip title='Preview Order'>\r\n                            <span>\r\n                                <IconButton\r\n                                    size='small'\r\n                                    color='primary'\r\n                                    onClick={() => setOrderPreview(pre => ({\r\n                                        ...pre,\r\n                                        OrderDetails,\r\n                                        OrderItemsArray: ItemDetails,\r\n                                        DeliveryArray: DeliveryDetails,\r\n                                        TranspoterArray: TranspoterDetails,\r\n                                        StaffArray: StaffDetails,\r\n                                        display: true,\r\n                                    }))}\r\n                                ><Visibility className=\"fa-16\" /></IconButton>\r\n                            </span>\r\n                        </Tooltip>\r\n\r\n                        {(navigation && !IsConvertedAsInvoice && EditRights) && (\r\n                            <Tooltip title='Edit'>\r\n                                <span>\r\n                                    <IconButton\r\n                                        size='small'\r\n                                        onClick={() => navigation({\r\n                                            page: 'create',\r\n                                            stateToTransfer: {\r\n                                                OrderDetails,\r\n                                                OrderItemsArray: ItemDetails,\r\n                                                DeliveryArray: DeliveryDetails,\r\n                                                TranspoterArray: TranspoterDetails,\r\n                                                StaffArray: StaffDetails,\r\n                                                editPage: 'PurchaseOderWithDelivery'\r\n                                            }\r\n                                        })}\r\n                                    ><Edit className=\"fa-16\" /></IconButton>\r\n                                </span>\r\n                            </Tooltip >\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        };\r\n\r\n    // Delivery Based Columns \r\n    const ArrivedDate = {\r\n        isVisible: 1,\r\n        isCustomCell: true,\r\n        ColumnHeader: 'Arrived Date',\r\n        Cell: ({ row }) => row?.ArrivalDate ? LocalDate(row?.ArrivalDate) : ''\r\n    }, ArrivedLocation = createCol('Location', 'string'),\r\n        ArrivalRate = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Rate',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => {\r\n                const OrderedItems = Array.isArray(row?.OrderDetails?.ItemDetails) ? row?.OrderDetails?.ItemDetails : [];\r\n                const OrderedRate = OrderedItems.find(o => isEqualNumber(o?.ItemId, row?.ItemId))?.Rate ?? 0\r\n                const BilledRate = Number(row?.BilledRate);\r\n                return `${BilledRate} (${isGraterNumber(BilledRate, OrderedRate) ? ('+' + (BilledRate - OrderedRate)) : ('-' + (OrderedRate - BilledRate))})`\r\n            }\r\n        }\r\n\r\n\r\n    // Tally Column\r\n    const OrderLOLLedgerName = createCol('Ledger_Name', 'string', 'LOL Ledger Name'),\r\n        OrderLOLPartyDistrict = createCol('Party_District', 'string', 'LOL Party District'),\r\n        ItemLOLLedgerName = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'LOL Ledger Name',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.Ledger_Name\r\n        }, ItemLOLPartyDistrict = {\r\n            isVisible: 1,\r\n            ColumnHeader: 'LOL Party District',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => row?.OrderDetails?.Party_District\r\n        }, StockItem = createCol('Stock_Item', 'string', 'Stock Item'),\r\n        StockGroup = createCol('Stock_Group', 'string', 'Stock Group');\r\n\r\n\r\n    switch (OrderStatus) {\r\n        case 'ITEMS':\r\n        case 'ITEMS PENDING':\r\n        case 'ITEMS ARRIVED':\r\n            return [\r\n                ItemPO_ID, OrderPartyName, ItemTradeConfirmDate, ItemName, WeightWithUOM,\r\n                ItemArrivedQuantity, PendingItemQuantity, Rate, ItemOwnerName, ItemBrokerName, ItemActions\r\n            ];\r\n        case 'ORDERS':\r\n        case 'COMPLETED ORDERS':\r\n        case 'IN-COMPLETED ORDERS':\r\n            return [\r\n                OrderPO_ID, TradeConfirmDate, PartyName, BrokerName, OwnerName, Remarks, GeneralStatus, OrderActions,\r\n            ]\r\n        case 'ORDERS PENDING':\r\n        case 'ORDERS ARRIVED':\r\n            return [\r\n                OrderPO_ID, TradeConfirmDate, PartyName, BrokerName, OwnerName, Remarks, OrderActions,\r\n            ]\r\n\r\n        case 'PO-Vendor-Wise':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, ItemLOLLedgerName, ItemLOLPartyDistrict, StockGroup, WeightWithUOM, Rate, PendingItemQuantity, ItemActions\r\n            ]\r\n        case 'PO-Item-Wise':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, StockGroup, StockItem, WeightWithUOM, Rate, PendingItemQuantity, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'PO-Pending-Only':\r\n            return [\r\n                ItemPO_ID, ItemTradeConfirmDate, StockGroup, StockItem, WeightWithUOM, Rate, PendingItemQuantity, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'AR-Item-Based':\r\n            return [\r\n                ItemPO_ID, ArrivedDate, ArrivedLocation, StockGroup, StockItem, WeightWithUOM, ArrivalRate, ItemLOLLedgerName, ItemLOLPartyDistrict, ItemActions\r\n            ]\r\n        case 'AR-Vendor-Wise':\r\n            return [\r\n                ItemPO_ID, ArrivedDate, ArrivedLocation, ItemLOLLedgerName, ItemLOLPartyDistrict, StockGroup, ArrivalRate, WeightWithUOM, PendingItemQuantity, ItemActions\r\n            ]\r\n        default:\r\n            return [];\r\n    }\r\n}","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { LocalDate } from '../../Components/functions';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { Download } from '@mui/icons-material';\r\n\r\nconst PurchaseOrderPreviewTemplate = ({\r\n    OrderDetails = {},\r\n    OrderItemsArray = [],\r\n    DeliveryArray = [],\r\n    TranspoterArray = [],\r\n    display = false,\r\n    onCloseDialog\r\n}) => {\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const printRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setDialog(display ? true : false);\r\n    }, [display])\r\n\r\n    const closeDialog = () => {\r\n        if (onCloseDialog) onCloseDialog();\r\n        setDialog(false);\r\n    }\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog} maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                    <span>Order Preview</span>\r\n                    <span>\r\n                        <Button\r\n                            startIcon={<Download />}\r\n                            variant='outlined'\r\n                            onClick={handlePrint}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    <div className=\"table-responsive\">\r\n\r\n                        <table className=\"table m-0\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-bottom-0'} >\r\n                                        ORDER DETAILS\r\n                                    </td>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light '} >\r\n                                        PARTY DETAILS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' p-0 border-0'}>\r\n                                        <table className=\"table m-0 \">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Loading Date</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.LoadingDate ? LocalDate(OrderDetails?.LoadingDate) : ''}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Trade Confirm Date</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.TradeConfirmDate ? LocalDate(OrderDetails?.TradeConfirmDate) : ''}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Owner Name</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.OwnerName}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>Broker Name</td>\r\n                                                    <td className={tdStyle}>\r\n                                                        {OrderDetails?.BrokerName}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </td>\r\n                                    <td className={tdStyle + ' p-0 border-0 '}>\r\n\r\n                                        <table className=\"table m-0 p-0\">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Party Name: <br /> &emsp; {OrderDetails?.PartyName ?? '-'}</h6>\r\n                                                    </td>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Party Address: <br /> &emsp; {OrderDetails?.PartyAddress ?? '-'}</h6>\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Payment Condition: <br /> &emsp; {OrderDetails?.PaymentCondition ?? '-'}</h6>\r\n                                                    </td>\r\n                                                    <td className={tdStyle}>\r\n                                                        <h6 className='m-0'>Remarks: <br /> &emsp; {OrderDetails?.Remarks ?? '-'}</h6>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n\r\n                                        {/* <div className=\"d-flex flex-wrap bg-white\">\r\n                                            <span className='flex-grow-1 p-2'>\r\n                                                <h6>Party Name: {OrderDetails?.PartyName}</h6>\r\n                                                <h6>Party Address: {OrderDetails?.PartyAddress}</h6>\r\n                                            </span>\r\n\r\n                                            <span className='p-2'>\r\n                                                <h6>Payment Condition: {OrderDetails?.PaymentCondition}</h6>\r\n                                                <h6>Remarks: {OrderDetails?.Remarks}</h6>\r\n                                            </span>\r\n                                        </div> */}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={7}>\r\n                                        ORDER ITEMS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'}>Item Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Tonnage</th>\r\n                                    <th className={tdStyle + ' text-center'}>\r\n                                        Rate <br />\r\n                                        Deliver/Spot\r\n                                    </th>\r\n                                    <th className={tdStyle + ' text-center'}>Discount</th>\r\n                                    <th className={tdStyle + ' text-center'}>Quality Condition</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {OrderItemsArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.ItemName}</td>\r\n                                        <td className={tdStyle}>{o?.Weight + ' ' + o?.Units}</td>\r\n                                        <td className={tdStyle}>{o?.Rate}</td>\r\n                                        <td className={tdStyle}>{o?.Discount}</td>\r\n                                        <td className={tdStyle}>{o?.QualityCondition}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={11}>DELIVERY DETAILS</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'}>Location</th>\r\n                                    <th className={tdStyle + ' text-center'}>Arrival Date</th>\r\n                                    <th className={tdStyle + ' text-center'}>Item Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Concern</th>\r\n\r\n                                    <th className={tdStyle + ' text-center'}>Bill No</th>\r\n                                    <th className={tdStyle + ' text-center'}>Bill Date</th>\r\n                                    <th className={tdStyle + ' text-center'}>Quantity</th>\r\n                                    <th className={tdStyle + ' text-center'}>Billed Rate</th>\r\n                                    <th className={tdStyle + ' text-center'}>Tonnage / KGs</th>\r\n                                    <th className={tdStyle + ' text-center'}>Batch / Location</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {DeliveryArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.Location}</td>\r\n                                        <td className={tdStyle}>{o?.ArrivalDate ? LocalDate(o?.ArrivalDate) : ''}</td>\r\n                                        <td className={tdStyle}>{o?.ItemName}</td>\r\n                                        <td className={tdStyle}>{o?.Concern}</td>\r\n\r\n                                        <td className={tdStyle}>{o?.BillNo}</td>\r\n                                        <td className={tdStyle}>{o?.BillDate ? LocalDate(o?.BillDate) : ''}</td>\r\n                                        <td className={tdStyle}>{o?.Quantity}</td>\r\n                                        <td className={tdStyle}>{o?.BilledRate ?? 0}</td>\r\n                                        <td className={tdStyle}>{o?.Weight + ' ' + o?.Units}</td>\r\n                                        <td className={tdStyle}>{o?.BatchLocation}</td>\r\n\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                        <table className=\"table m-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td className={tdStyle + ' text-primary fw-bold bg-light border-top-0'} colSpan={9}>\r\n                                        OTHER DETAILS\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'} rowSpan={2}>SNo</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={2}>Loading Wt</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={2}>Unloading Wt</th>\r\n                                    <th className={tdStyle + ' text-center'}>Weight</th>\r\n                                    <th className={tdStyle + ' text-center'} colSpan={3}>Transport Details</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th className={tdStyle + ' text-center'}>Load</th>\r\n                                    <th className={tdStyle + ' text-center'}>Empty</th>\r\n                                    <th className={tdStyle + ' text-center'}>Load</th>\r\n                                    <th className={tdStyle + ' text-center'}>Empty</th>\r\n                                    <th className={tdStyle + ' text-center'}>EX / SH</th>\r\n                                    <th className={tdStyle + ' text-center'}>Name</th>\r\n                                    <th className={tdStyle + ' text-center'}>Vehicle No</th>\r\n                                    <th className={tdStyle + ' text-center'}>Phone Number</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {TranspoterArray.map((o, i) => (\r\n                                    <tr key={i}>\r\n                                        <td className={tdStyle}>{i + 1}</td>\r\n                                        <td className={tdStyle}>{o?.Loading_Load}</td>\r\n                                        <td className={tdStyle}>{o?.Loading_Empty}</td>\r\n                                        <td className={tdStyle}>{o?.Unloading_Load}</td>\r\n                                        <td className={tdStyle}>{o?.Unloading_Empty}</td>\r\n                                        <td className={tdStyle}>{o?.EX_SH}</td>\r\n                                        <td className={tdStyle}>{o?.DriverName}</td>\r\n                                        <td className={tdStyle}>{o?.VehicleNo}</td>\r\n                                        <td className={tdStyle}>{o?.PhoneNumber}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PurchaseOrderPreviewTemplate;"],"names":["createSvgIcon","_jsx","d","isArr","arr","Array","isArray","purchaseOrderDataSet","_ref","data","status","reduce","acc","item","ItemDetails","itemDetails","map","o","_item$BrokerId","_item$OwnerId","_item$PartyId","_objectSpread","OrderDetails","Id","Sno","PoYear","PO_ID","BranchId","BrokerId","BrokerName","CreatedBy","CreatedAt","OrderStatus","StaffDetails","TranspoterDetails","DeliveryDetails","ConvertedAsInvoices","LoadingDate","OwnerId","OwnerName","PartyAddress","PartyId","PartyName","PaymentCondition","Remarks","TradeConfirmDate","Ledger_Name","Party_District","isConvertableArrivalExist","toNumber","IsConvertedAsInvoice","concat","_item$ItemDetails","filter","fil","_item$DeliveryDetails","WeightTotal","del","isEqualNumber","ItemId","sum","delivery","Addition","Weight","Number","filterableText","_item$BrokerId2","_item$OwnerId2","_item$PartyId2","_item$ItemDetails2","_item$DeliveryDetails2","_item$BrokerId3","_item$OwnerId3","_item$PartyId3","_item$BrokerId4","_item$OwnerId4","_item$PartyId4","_item$DeliveryDetails3","isGraterNumber","length","_item$DeliveryDetails4","statusColor","chooseColor","orderStatus","createCol","field","type","ColumnHeader","isVisible","Field_Name","Fied_Data","displayColumns","_ref2","dialogs","setOrderPreview","navigation","products","EditRights","DeleteRights","AddRights","isCustomCell","Cell","_ref3","_row$StaffDetails","row","staff","Cost_Category","Emp_Name","join","_ref4","_row$StaffDetails2","OrderPartyName","_ref5","_row$OrderDetails","OrderActions","_ref6","_jsxs","_Fragment","children","Tooltip","title","IconButton","size","color","onClick","pre","OrderItemsArray","DeliveryArray","TranspoterArray","StaffArray","display","Visibility","className","page","stateToTransfer","invoiceInfo","Branch_Id","Po_Inv_Date","ISOString","Po_Entry_Date","Retailer_Id","Retailer_Name","orderInfo","pendingInvoiceWeight","POI_St_Id","DeliveryId","Trip_Item_SNo","OrderId","Location_Id","LocationId","Item_Id","Item_Name","ItemName","Bill_Qty","Act_Qty","Bill_Alt_Qty","Quantity","Item_Rate","BilledRate","Amount","Multiplication","Free_Qty","Batch_No","BatchLocation","staffInfo","Involved_Emp_Id","EmployeeId","Involved_Emp_Name","Cost_Center_Type_Id","CostType","ShoppingCartCheckout","editPage","Edit","deleteOrderDialog","deleteOrderId","Delete","GeneralStatus","_ref7","String","replace","OrderPO_ID","ItemPO_ID","_ref8","_row$OrderDetails$PO_","_row$OrderDetails2","Rate","WeightWithUOM","_ref9","checkIsNumber","NumberFormat","ItemArrivedQuantity","_ref10","_row$OrderDetails3","_row$OrderDetails3$De","PendingItemQuantity","_ref11","_row$OrderDetails4","_row$OrderDetails4$De","Subraction","ItemTradeConfirmDate","_ref12","_row$OrderDetails5","LocalDate","ItemOwnerName","_ref14","ItemBrokerName","_ref15","ItemActions","_ref16","ArrivedDate","_ref17","ArrivalDate","ArrivedLocation","ArrivalRate","_ref18","_row$OrderDetails7","_row$OrderDetails8","_OrderedItems$find$Ra","_OrderedItems$find","OrderedRate","find","ItemLOLLedgerName","_ref19","_row$OrderDetails9","ItemLOLPartyDistrict","_ref20","_row$OrderDetails10","StockItem","StockGroup","preprocessDataForExport","columns","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","toLowerCase","key","arguments","undefined","align","verticalAlign","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","event","currentTarget","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","LocalTime","FilterableTable","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","sx","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isCommonValue","tdClass","tdIndex","horizondalalignClass","verticalAlignClass","foundEntry","Object","entries","console","log","colSpan","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","i","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","_OrderDetails$PartyNa","_OrderDetails$PartyAd","_OrderDetails$Payment","_OrderDetails$Remarks","onCloseDialog","dialog","setDialog","tdStyle","printRef","useRef","useEffect","closeDialog","handlePrint","useReactToPrint","content","current","Dialog","maxWidth","fullWidth","DialogTitle","Button","startIcon","variant","DialogContent","ref","Units","Discount","QualityCondition","_o$BilledRate","Location","Concern","BillNo","BillDate","rowSpan","Loading_Load","Loading_Empty","Unloading_Load","Unloading_Empty","EX_SH","DriverName","VehicleNo","PhoneNumber","DialogActions"],"sourceRoot":""}