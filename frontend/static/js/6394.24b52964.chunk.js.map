{"version":3,"file":"static/js/6394.24b52964.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/icons-material/esm/FiberManualRecord.js","../node_modules/@mui/icons-material/esm/AccessTime.js","../node_modules/@mui/icons-material/esm/SmsOutlined.js","Pages/Reports/workDocument.jsx","Components/filterableTable2.jsx","Components/tablecolumn.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"8\"\n}), 'FiberManualRecord');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'AccessTime');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m0 14H5.17L4 17.17V4h16zM7 9h2v2H7zm8 0h2v2h-2zm-4 0h2v2h-2z\"\n}), 'SmsOutlined');","// import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n// import { Card, CardHeader, CardContent, Paper } from '@mui/material';\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import Select from 'react-select';\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { AccessTime, FiberManualRecord, SmsOutlined } from '@mui/icons-material';\r\n// import { useReactToPrint } from 'react-to-print';\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n// import { getPreviousDate, ISOString, LocalDate } from \"../../Components/functions\";\r\n\r\n// const EmployeeDayAbstract = ({ loadingOn, loadingOff }) => {\r\n//     const localData = localStorage.getItem(\"user\");\r\n//     const parseData = JSON.parse(localData);\r\n//     const [workedDetails, setWorkedDetails] = useState([]);\r\n//     const [users, setUsers] = useState([]);\r\n//     const [tasks, setTasks] = useState([]);\r\n//     const [process,setProcess]=useState([])\r\n\r\n//     const { contextObj } = useContext(MyContext);\r\n//     const [filter, setFilter] = useState({\r\n//         startDate: getPreviousDate(1),\r\n//         endDate: ISOString(),\r\n//         Emp_Id: parseData?.UserId,\r\n//         Emp_Name: parseData?.Name,\r\n//         Task_Id: '',\r\n//         Task_Name: 'Select Task',\r\n//         Id:'',\r\n//         Process_Name:'Select Process'\r\n//     });\r\n//     const printRef = useRef()\r\n\r\n//     useEffect(() => {\r\n//         if (loadingOn) {\r\n//             loadingOn();\r\n//         }\r\n//         fetchLink({\r\n//             address: `taskManagement/task/work?Emp_Id=${filter?.Emp_Id}&from=${filter.startDate}&to=${filter.endDate}&Task_Id=${filter?.Task_Id}&Process_Id=${filter?.Id}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 const groupedData = data?.data?.reduce((acc, current) => {\r\n//                     const workDate = ISOString(current?.Work_Dt);\r\n//                     if (!acc[workDate]) {\r\n//                         acc[workDate] = [];\r\n//                     }\r\n//                     acc[workDate].push(current);\r\n//                     return acc;\r\n//                 }, {});\r\n//                 setWorkedDetails(groupedData)\r\n//             }\r\n//         }).catch(e => console.error(e)).finally(() => {\r\n//             if (loadingOff) {\r\n//                 loadingOff();\r\n//             }\r\n//         })\r\n//     }, [parseData?.UserId, filter])\r\n\r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/task/assignEmployee/task/dropDown`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setTasks(data.data)\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n//     }, [])\r\n\r\n\r\n\r\n//     useEffect(()=>{\r\n//         fetchLink({\r\n//             address:`masters/processMaster`\r\n//         }).then(data=>{\r\n//             if(data.success){\r\n//                 setProcess(data.data)\r\n//             }\r\n//         }).catch(e=>console.error(e))\r\n//     },[])\r\n//     useEffect(() => {\r\n//         if (Number(contextObj?.Print_Rights) === 1) {\r\n//             fetchLink({\r\n//                 address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n//             }).then(data => {\r\n//                 if (data.success) {\r\n//                     setUsers(data?.data?.sort((a, b) => String(a?.Name).localeCompare(b?.Name)))\r\n//                 }\r\n//             }).catch(e => console.error(e))\r\n//         }\r\n//     }, [contextObj?.Print_Rights, parseData?.Company_id])\r\n\r\n//     const formatTime24 = (time24) => {\r\n//         const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n//         let hours12 = hours % 12;\r\n//         hours12 = hours12 || 12;\r\n//         const period = hours < 12 ? 'AM' : 'PM';\r\n//         const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n//         const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n//         const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n//         return time12;\r\n//     }\r\n\r\n//     const handlePrint = useReactToPrint({\r\n//         content: () => printRef.current,\r\n//     });\r\n\r\n//     const getColor = (status) => {\r\n//         const numStatus = Number(status);\r\n//         const color = ['', 'bg-primary', 'bg-warning', 'bg-success', 'bg-danger']\r\n\r\n//         return color[numStatus]\r\n//     }\r\n\r\n//     const CardAndTableComp = () => {\r\n//         return (\r\n//             <div className=\"px-2\">\r\n//                 {Object.keys(workedDetails).map(workDate => (\r\n//                     <div key={workDate} className=\"cus-card pb-0\">\r\n//                         <h6 className=\"p-3 mb-0 bg-light\">\r\n//                             Date:\r\n//                             {LocalDate(workDate)}\r\n//                             {\" ( \" + workedDetails[workDate]?.length + \" Tasks )\"}\r\n//                         </h6>\r\n\r\n//                         <hr className=\"m-0\" />\r\n\r\n//                         <div className=\"table-responsive day-abstract-table\">\r\n//                             <table className=\"table\">\r\n//                                 <tbody>\r\n//                                     {workedDetails[workDate].map((taskDetail, oi) => (\r\n//                                         <tr key={oi}>\r\n\r\n//                                             <td style={{ verticalAlign: 'middle' }}><FiberManualRecord className='fa-in text-primary' /> {taskDetail.Task_Name}</td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}><AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes</td>\r\n//                                             <td className=\"fa-14 \" style={{ verticalAlign: 'middle' }}>\r\n//                                                 {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n//                                                     {taskDetail?.WorkStatus}\r\n//                                                 </span>\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 <p className=\"mb-0 fa-14 text-muted\">\r\n//                                                     <SmsOutlined className=\"fa-in\" />\r\n//                                                     <span>&emsp;{taskDetail.Work_Done}</span>\r\n//                                                 </p>\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 {taskDetail?.Work_Param?.length > 0 && (\r\n//                                                     <div className=\"cus-card p-2 m-0\">\r\n//                                                         {taskDetail?.Work_Param?.map((o, i) => (\r\n//                                                             <p className=\"mb-0 fa-14 d-flex\" key={i}>\r\n//                                                                 <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n//                                                                 <span className=\"text-primary\">\r\n//                                                                     {\r\n//                                                                         (isNaN(o?.Current_Value) || (o?.Paramet_Data_Type) !== 'number')\r\n//                                                                             ? o?.Current_Value\r\n//                                                                             : Number(o?.Current_Value).toLocaleString('en-IN')\r\n//                                                                     }\r\n//                                                                 </span>\r\n//                                                             </p>\r\n//                                                         ))}\r\n//                                                     </div>\r\n//                                                 )}\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     ))}\r\n//                                 </tbody>\r\n//                             </table>\r\n//                         </div>\r\n\r\n//                         <div className=\"row mb-2 px-3 day-abstract-card d-none\">\r\n\r\n//                             {workedDetails[workDate].map(taskDetail => (\r\n\r\n//                                 <div key={taskDetail.Work_Id} className=\"col-xl-3 col-lg-4 col-md-6 p-2 py-0\">\r\n//                                     <div className=\"cus-card shadow-sm p-3\">\r\n\r\n//                                         <p className=\"mb-2 fa-15 fw-bold text-secondary\">\r\n//                                             {taskDetail.Task_Name + \" \"}\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-2 fa-14 text-secondary\">\r\n//                                             {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n//                                             <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n//                                                 {taskDetail?.WorkStatus}\r\n//                                             </span>\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-2 fa-14 text-secondary\">\r\n//                                             <AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-0 fa-14 text-muted\">\r\n//                                             <span className=\"fw-bold\">Summary : </span><br />\r\n//                                             <span>&emsp;{taskDetail.Work_Done}</span>\r\n//                                         </p>\r\n\r\n//                                         {taskDetail?.Work_Param?.length > 0 && (\r\n//                                             <p className=\"mb-1 text-secondary fa-14 fw-bold\">Parameters ( {taskDetail?.Work_Param?.length} )</p>\r\n//                                         )}\r\n\r\n//                                         {taskDetail?.Work_Param?.length > 0 && <hr className=\"m-0\" />}\r\n\r\n//                                         {taskDetail?.Work_Param?.map((o, i) => (\r\n//                                             <p className=\"mb-0 fa-14 d-flex flex-wrap\" key={i}>\r\n//                                                 <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n//                                                 <span> {o?.Current_Value}</span>\r\n//                                             </p>\r\n//                                         ))}\r\n\r\n//                                     </div>\r\n//                                 </div>\r\n//                             ))}\r\n//                         </div>\r\n\r\n//                     </div>\r\n//                 ))}\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Card component={Paper} variant='elevation'>\r\n//                 <CardHeader title='Work Abstract' className=\"pb-0\" />\r\n\r\n//                 <CardContent className=\"pt-2\" style={{ minHeight: '500px' }}>\r\n\r\n//                     <div className=\"row\">\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">From: </label>\r\n//                             <input\r\n//                                 type=\"date\"\r\n//                                 className=\"cus-inpt\"\r\n//                                 value={filter.startDate}\r\n//                                 onChange={e => setFilter({ ...filter, startDate: e.target.value })}\r\n//                             />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">To: </label>\r\n//                             <input\r\n//                                 type=\"date\"\r\n//                                 className=\"cus-inpt\"\r\n//                                 value={filter.endDate}\r\n//                                 onChange={e => setFilter({ ...filter, endDate: e.target.value })}\r\n//                             />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">User </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Emp_Id, label: filter?.Emp_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Emp_Id: e.value, Emp_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: parseData?.UserId, label: parseData?.Name },\r\n//                                     { value: '', label: \"ALL EMPLOYEE\" },\r\n//                                     ...users.map(obj => ({ value: obj.UserId, label: obj.Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isDisabled={Number(contextObj?.Print_Rights) === 0}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"User Name\"} />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Task </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Task_Id, label: filter?.Task_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Task_Id: e.value, Task_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Task' },\r\n//                                     ...tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Process </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Id, label: filter?.Process_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Id: e.value, Process_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Process' },\r\n//                                     ...process.map(obj => ({ value: obj.Id, label: obj.Process_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Project </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Id, label: filter?.Process_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Id: e.value, Process_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Process' },\r\n//                                     ...process.map(obj => ({ value: obj.Id, label: obj.Process_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 d-flex align-items-end p-2\">\r\n//                             <button className=\"btn btn-primary rounded-5 px-3\" onClick={handlePrint}>Print PDF</button>\r\n//                         </div>\r\n\r\n//                     </div>\r\n\r\n//                     <CardAndTableComp />\r\n\r\n//                     <div className=\"d-none px-3\">\r\n//                         <div className=\"px-3\" ref={printRef}>\r\n//                             <h5>Work Abstract Of {filter.Emp_Name} </h5>\r\n//                             <p className=\"mb-0\">\r\n//                                 From {LocalDate(filter.startDate)}\r\n//                                 &nbsp; - To: {LocalDate(filter.endDate)}\r\n//                             </p>\r\n//                             <CardAndTableComp />\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardContent>\r\n//             </Card>\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default EmployeeDayAbstract;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Paper\r\n\r\n} from \"@mui/material\";\r\n\r\nimport Select from \"react-select\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { getPreviousDate, ISOString, LocalDate } from \"../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { AccessTime, FiberManualRecord, SmsOutlined } from '@mui/icons-material';\r\n\r\nconst EmployeeDayAbstract = ({ loadingOn, loadingOff }) => {\r\n  const localData = localStorage.getItem(\"user\");\r\n  const parseData = JSON.parse(localData);\r\n  const { contextObj } = useContext(MyContext);\r\n  const printRef = useRef();\r\n\r\n  const initialFilter = {\r\n    startDate: getPreviousDate(1),\r\n    endDate: ISOString(),\r\n    Emp_Id: parseData?.UserId,\r\n    Emp_Name: parseData?.Name,\r\n    Task_Id: \"\",\r\n    Task_Name: \"Select Task\",\r\n    Id: \"\",\r\n    Process_Name: \"Select Process\",\r\n    Project_Id: \"\",\r\n    Project_Name: \"Select Project\",\r\n  };\r\n\r\n  const [workedDetails, setWorkedDetails] = useState({});\r\n  const [users, setUsers] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [process, setProcess] = useState([]);\r\n  const [project, setProject] = useState([]);\r\n//   const [openFilterDialog, setOpenFilterDialog] = useState(false);\r\n  const [appliedFilter, setAppliedFilter] = useState(initialFilter);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (loadingOn) loadingOn();\r\n    fetchLink({\r\n      address: `taskManagement/task/work?Emp_Id=${appliedFilter?.Emp_Id}&from=${appliedFilter.startDate}&to=${appliedFilter.endDate}&Task_Id=${appliedFilter?.Task_Id}&Process_Id=${appliedFilter?.Id}&Project_Id=${appliedFilter?.Project_Id}`,\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          const groupedData = data?.data?.reduce((acc, current) => {\r\n            const workDate = ISOString(current?.Work_Dt);\r\n            if (!acc[workDate]) acc[workDate] = [];\r\n            acc[workDate].push(current);\r\n            return acc;\r\n          }, {});\r\n          setWorkedDetails(groupedData);\r\n        }\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => loadingOff && loadingOff());\r\n  }, [appliedFilter]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetchLink({ address: `taskManagement/task/assignEmployee/task/dropDown` })\r\n      .then((data) => data.success && setTasks(data.data))\r\n      .catch(console.error);\r\n\r\n    fetchLink({\r\n      address: `taskManagement/tasks/project/dropdown?Company_id=${parseData?.Company_id}`,\r\n    })\r\n      .then((data) => data.success && setProject(data.data))\r\n      .catch(console.error);\r\n\r\n    fetchLink({ address: `masters/processMaster` })\r\n      .then((data) => data.success && setProcess(data.data))\r\n      .catch(console.error);\r\n\r\n    if (Number(contextObj?.Print_Rights) === 1) {\r\n      fetchLink({\r\n        address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`,\r\n      })\r\n        .then((data) => {\r\n          if (data.success) {\r\n            setUsers(\r\n              data.data.sort((a, b) => String(a?.Name).localeCompare(b?.Name))\r\n            );\r\n          }\r\n        })\r\n        .catch(console.error);\r\n    }\r\n  }, [contextObj?.Print_Rights, parseData?.Company_id]);\r\n\r\n\r\n  const formatTime24 = (time24) => {\r\n    if (!time24) return \"-\";\r\n    const [hours, minutes] = time24.split(\":\").map(Number);\r\n    let hours12 = hours % 12 || 12;\r\n    const period = hours < 12 ? \"AM\" : \"PM\";\r\n    return `${hours12.toString().padStart(2, \"0\")}:${minutes\r\n      .toString()\r\n      .padStart(2, \"0\")} ${period}`;\r\n  };\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => printRef.current,\r\n  });\r\n\r\n  const getColor = (status) => {\r\n    const color = [\"\", \"bg-primary\", \"bg-warning\", \"bg-success\", \"bg-danger\"];\r\n    return color[Number(status)] || \"bg-secondary\";\r\n  };\r\n\r\n\r\n\r\n  const CardAndTableComp = () => {\r\n        return (\r\n            <div className=\"px-2\">\r\n                {Object.keys(workedDetails).map(workDate => (\r\n                    <div key={workDate} className=\"cus-card pb-0\">\r\n                        <h6 className=\"p-3 mb-0 bg-light\">\r\n                            Date:\r\n                            {LocalDate(workDate)}\r\n                            {\" ( \" + workedDetails[workDate]?.length + \" Tasks )\"}\r\n                        </h6>\r\n\r\n                        <hr className=\"m-0\" />\r\n\r\n                        <div className=\"table-responsive day-abstract-table\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    {workedDetails[workDate].map((taskDetail, oi) => (\r\n                                        <tr key={oi}>\r\n\r\n                                            <td style={{ verticalAlign: 'middle' }}><FiberManualRecord className='fa-in text-primary' /> {taskDetail.Task_Name}</td>\r\n                                            <td style={{ verticalAlign: 'middle' }}><AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes</td>\r\n                                            <td className=\"fa-14 \" style={{ verticalAlign: 'middle' }}>\r\n                                                {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n                                            </td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>\r\n                                                <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n                                                    {taskDetail?.WorkStatus}\r\n                                                </span>\r\n                                            </td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>\r\n                                                <p className=\"mb-0 fa-14 text-muted\">\r\n                                                    <SmsOutlined className=\"fa-in\" />\r\n                                                    <span>&emsp;{taskDetail.Work_Done}</span>\r\n                                                </p>\r\n                                            </td>\r\n                                            <td style={{ verticalAlign: 'middle' }}>\r\n                                                {taskDetail?.Work_Param?.length > 0 && (\r\n                                                    <div className=\"cus-card p-2 m-0\">\r\n                                                        {taskDetail?.Work_Param?.map((o, i) => (\r\n                                                            <p className=\"mb-0 fa-14 d-flex\" key={i}>\r\n                                                                <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n                                                                <span className=\"text-primary\">\r\n                                                                    {\r\n                                                                        (isNaN(o?.Current_Value) || (o?.Paramet_Data_Type) !== 'number')\r\n                                                                            ? o?.Current_Value\r\n                                                                            : Number(o?.Current_Value).toLocaleString('en-IN')\r\n                                                                    }\r\n                                                                </span>\r\n                                                            </p>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                )}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"row mb-2 px-3 day-abstract-card d-none\">\r\n\r\n                            {workedDetails[workDate].map(taskDetail => (\r\n\r\n                                <div key={taskDetail.Work_Id} className=\"col-xl-3 col-lg-4 col-md-6 p-2 py-0\">\r\n                                    <div className=\"cus-card shadow-sm p-3\">\r\n\r\n                                        <p className=\"mb-2 fa-15 fw-bold text-secondary\">\r\n                                            {taskDetail.Task_Name + \" \"}\r\n                                        </p>\r\n\r\n                                        <p className=\"mb-2 fa-14 text-secondary\">\r\n                                            {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n                                            <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n                                                {taskDetail?.WorkStatus}\r\n                                            </span>\r\n                                        </p>\r\n\r\n                                        <p className=\"mb-2 fa-14 text-secondary\">\r\n                                            <AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes\r\n                                        </p>\r\n\r\n                                        <p className=\"mb-0 fa-14 text-muted\">\r\n                                            <span className=\"fw-bold\">Summary : </span><br />\r\n                                            <span>&emsp;{taskDetail.Work_Done}</span>\r\n                                        </p>\r\n\r\n                                        {taskDetail?.Work_Param?.length > 0 && (\r\n                                            <p className=\"mb-1 text-secondary fa-14 fw-bold\">Parameters ( {taskDetail?.Work_Param?.length} )</p>\r\n                                        )}\r\n\r\n                                        {taskDetail?.Work_Param?.length > 0 && <hr className=\"m-0\" />}\r\n\r\n                                        {taskDetail?.Work_Param?.map((o, i) => (\r\n                                            <p className=\"mb-0 fa-14 d-flex flex-wrap\" key={i}>\r\n                                                <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n                                                <span> {o?.Current_Value}</span>\r\n                                            </p>\r\n                                        ))}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n  const dataArray = Object.keys(workedDetails || {}).flatMap((workDate) =>\r\n    workedDetails[workDate].map((task) => ({\r\n      ...task,\r\n      Work_Date: workDate,\r\n    }))\r\n  );\r\n\r\n    function formatMinutesToHours(totalMinutes) {\r\n  const hours = Math.floor(totalMinutes / 60);\r\n  const minutes = totalMinutes % 60;\r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes}m`;\r\n  }\r\n  return `${minutes}m`;\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n     <Card component={Paper} variant=\"elevation\">\r\n\r\n  <div className=\"row align-items-center justify-content-between px-3 pt-3\">\r\n    <div className=\"col\">\r\n      <h5 className=\"mb-0 fw-bold\">Work Abstract</h5>\r\n    </div>\r\n\r\n    <div className=\"col-auto d-flex align-items-center gap-2\">\r\n \r\n    \r\n\r\n      <button\r\n        className=\"btn btn-primary rounded-5 px-3\"\r\n        onClick={handlePrint}\r\n      >\r\n        Print PDF\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <CardContent className=\"pt-2\" style={{ minHeight: \"500px\" }}>\r\n  <div className=\"row\">\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">From:</label>\r\n    <input\r\n      type=\"date\"\r\n      className=\"cus-inpt\"\r\n      value={appliedFilter.startDate}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, startDate: e.target.value })\r\n      }\r\n    />\r\n  </div>\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">To:</label>\r\n    <input\r\n      type=\"date\"\r\n      className=\"cus-inpt\"\r\n      value={appliedFilter.endDate}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, endDate: e.target.value })\r\n      }\r\n    />\r\n  </div>\r\n\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">User</label>\r\n    <Select\r\n      value={{ value: appliedFilter.Emp_Id, label: appliedFilter.Emp_Name }}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, Emp_Id: e.value, Emp_Name: e.label })\r\n      }\r\n      options={[\r\n        { value: parseData.UserId, label: parseData.Name },\r\n        { value: \"\", label: \"ALL EMPLOYEE\" },\r\n        ...users.map((u) => ({ value: u.UserId, label: u.Name })),\r\n      ]}\r\n      styles={customSelectStyles}\r\n      isDisabled={Number(contextObj?.Print_Rights) === 0}\r\n      isSearchable\r\n      placeholder=\"User Name\"\r\n    />\r\n  </div>\r\n\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">Project</label>\r\n    <Select\r\n      value={{ value: appliedFilter.Project_Id, label: appliedFilter.Project_Name }}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, Project_Id: e.value, Project_Name: e.label })\r\n      }\r\n      options={[\r\n        { value: \"\", label: \"All Project\" },\r\n        ...project.map((p) => ({ value: p.Project_Id, label: p.Project_Name })),\r\n      ]}\r\n      styles={customSelectStyles}\r\n      isSearchable\r\n      placeholder=\"Project Name\"\r\n      menuPortalTarget={document.body}\r\n    />\r\n  </div>\r\n\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">Process</label>\r\n    <Select\r\n      value={{ value: appliedFilter.Id, label: appliedFilter.Process_Name }}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, Id: e.value, Process_Name: e.label })\r\n      }\r\n      options={[\r\n        { value: \"\", label: \"All Process\" },\r\n        ...process.map((p) => ({ value: p.Id, label: p.Process_Name })),\r\n      ]}\r\n      styles={customSelectStyles}\r\n      menuPortalTarget={document.body}\r\n      isSearchable\r\n      placeholder=\"Process Name\"\r\n    />\r\n  </div>\r\n\r\n\r\n  <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n    <label className=\"pb-2\">Task</label>\r\n    <Select\r\n      value={{ value: appliedFilter.Task_Id, label: appliedFilter.Task_Name }}\r\n      onChange={(e) =>\r\n        setAppliedFilter({ ...appliedFilter, Task_Id: e.value, Task_Name: e.label })\r\n      }\r\n      options={[\r\n        { value: \"\", label: \"All Task\" },\r\n        ...tasks.map((t) => ({ value: t.Task_Id, label: t.Task_Name })),\r\n      ]}\r\n      styles={customSelectStyles}\r\n      isSearchable\r\n      placeholder=\"Task Name\"\r\n    />\r\n  </div>\r\n</div>\r\n\r\n     <div className=\"d-none px-3\">\r\n                         <div className=\"px-3\" ref={printRef}>\r\n                             <h5>Work Abstract Of {appliedFilter.Emp_Name} </h5>\r\n                             <p className=\"mb-0\">\r\n                                From {LocalDate(appliedFilter.startDate)}\r\n                                 &nbsp; - To: {LocalDate(appliedFilter.endDate)}\r\n                            </p>\r\n                          <CardAndTableComp />\r\n                        </div>\r\n                     </div>\r\n\r\n    <FilterableTable\r\n      title=\"Work Abstract\"\r\n      dataArray={dataArray}\r\n      EnableSerialNumber\r\n      columns={[\r\n          createCol(\"Project_Name\", \"string\", \"Project_Name\"),\r\n        createCol(\"Work_Date\", \"date\", \"Date\"),\r\n        createCol(\"Task_Name\", \"string\", \"Task\"),\r\n        createCol(\"Sub_Task_Name\", \"string\", \"Sub Task\"),\r\n        createCol(\"EmployeeName\", \"string\", \"Staff\"),\r\n        createCol(\"Work_Done\", \"string\", \"Comments\"),\r\n        {\r\n          ColumnHeader: \"Status\",\r\n          isVisible: 1,\r\n          align: \"center\",\r\n          isCustomCell: true,\r\n          Cell: ({ row }) => (\r\n            <span className={`badge fa-10 p-1 ${getColor(row?.Work_Status)}`}>\r\n              {row?.WorkStatus || \"-\"}\r\n            </span>\r\n          ),\r\n        },\r\n      {\r\n  ColumnHeader: \"Duration\",\r\n  isVisible: 1,\r\n  align: \"center\",\r\n  isCustomCell: true,\r\n  Cell: ({ row }) => (\r\n    <div style={{ width: '100px', wordWrap: 'break-word', textAlign: 'center' }}>\r\n      <span>{row?.Tot_Minutes ? `${row.Tot_Minutes} min` : \"-\"}</span>\r\n      <br />\r\n      <span>({row?.Tot_Minutes ? formatMinutesToHours(row?.Tot_Minutes) : \"-\"})</span>\r\n    </div>\r\n  ),\r\n}\r\n,\r\n        {\r\n          ColumnHeader: \"Time\",\r\n          isVisible: 1,\r\n          align: \"center\",\r\n          isCustomCell: true,\r\n          Cell: ({ row }) => (\r\n            <span>\r\n              {formatTime24(row?.Start_Time)} - {formatTime24(row?.End_Time)}\r\n            </span>\r\n          ),\r\n        },\r\n        {\r\n          ColumnHeader: \"Parameters\",\r\n          isVisible: 1,\r\n          isCustomCell: true,\r\n          Cell: ({ row }) =>\r\n            row?.Work_Param?.length > 0 ? (\r\n              <div className=\"text-start\">\r\n                {row.Work_Param.map((param, i) => (\r\n                  <div key={i} className=\"d-flex justify-content-between small\">\r\n                    <span>{param.Paramet_Name}:</span>\r\n                    <span className=\"text-primary\">\r\n                      {isNaN(param.Current_Value) ||\r\n                      param.Paramet_Data_Type !== \"number\"\r\n                        ? param.Current_Value\r\n                        : Number(param.Current_Value).toLocaleString(\"en-IN\")}\r\n                    </span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              \"-\"\r\n            ),\r\n        },\r\n      ]}\r\n    />\r\n  </CardContent>\r\n</Card>\r\n\r\n\r\n   \r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployeeDayAbstract;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]"],"names":["getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","createSvgIcon","cx","cy","r","d","_ref","loadingOn","loadingOff","localData","localStorage","getItem","parseData","JSON","parse","contextObj","useContext","MyContext","printRef","useRef","initialFilter","startDate","getPreviousDate","endDate","ISOString","Emp_Id","UserId","Emp_Name","Name","Task_Id","Task_Name","Id","Process_Name","Project_Id","Project_Name","workedDetails","setWorkedDetails","useState","users","setUsers","tasks","setTasks","process","setProcess","project","setProject","appliedFilter","setAppliedFilter","useEffect","fetchLink","address","concat","then","data","success","_data$data","groupedData","reduce","acc","current","workDate","Work_Dt","push","catch","console","error","finally","Company_id","Number","Print_Rights","sort","a","b","String","localeCompare","formatTime24","time24","hours","minutes","split","map","period","toString","padStart","handlePrint","useReactToPrint","content","getColor","status","CardAndTableComp","children","Object","keys","_workedDetails$workDa","_jsxs","LocalDate","length","taskDetail","oi","_taskDetail$Work_Para","_taskDetail$Work_Para2","style","verticalAlign","FiberManualRecord","AccessTime","Tot_Minutes","Start_Time","End_Time","Work_Status","WorkStatus","SmsOutlined","Work_Done","Work_Param","o","i","Paramet_Name","isNaN","Current_Value","Paramet_Data_Type","toLocaleString","_taskDetail$Work_Para3","_taskDetail$Work_Para4","_taskDetail$Work_Para5","_taskDetail$Work_Para6","Work_Id","dataArray","flatMap","task","_objectSpread","Work_Date","formatMinutesToHours","totalMinutes","Math","floor","_Fragment","Card","Paper","variant","onClick","CardContent","minHeight","type","value","onChange","e","target","Select","label","options","u","customSelectStyles","isDisabled","isSearchable","placeholder","p","menuPortalTarget","document","body","t","FilterableTable","title","EnableSerialNumber","columns","createCol","ColumnHeader","isVisible","align","isCustomCell","Cell","_ref2","row","_ref3","width","wordWrap","textAlign","_ref4","_ref5","_row$Work_Param","param","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","replace","toLowerCase","key","Field_Name","field","arguments","undefined","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","IconButton","event","currentTarget","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalTime","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","entries","log","colSpan","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}