{"version":3,"file":"static/js/8800.b2bc24ae.chunk.js","mappings":"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","sources":["Pages/Reports/PendingDetails.jsx","Components/filterableTable2.jsx"],"sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\r\nimport { \r\n  Button,Box,\r\n  Dialog, \r\n  Tooltip, \r\n  IconButton, \r\n  DialogTitle, \r\n  DialogContent, \r\n  DialogActions, \r\n  ToggleButtonGroup, \r\n  ToggleButton,\r\n  Card,\r\n  Switch,\r\n  Typography\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { \r\n  Addition, \r\n  getSessionFiltersByPageId, \r\n  isEqualNumber, \r\n  ISOString, \r\n  NumberFormat, \r\n  setSessionFilters, \r\n  toNumber \r\n} from \"../../Components/functions\";\r\nimport { Add, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst PendingDetails = ({ loadingOn, loadingOff, AddRights, EditRights, pageID }) => {\r\n    const sessionValue = sessionStorage.getItem('filterValues');\r\n    const defaultFilters = {\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        Retailer: { value: '', label: 'ALL' },\r\n        CreatedBy: { value: '', label: 'ALL' },\r\n        SalesPerson: { value: '', label: 'ALL' },\r\n        VoucherType: { value: '', label: 'ALL' },\r\n        DeliveryPerson: { value: '', label: 'ALL' },\r\n        Cancel_status: 0\r\n    };\r\n\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const navigate = useNavigate();\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [deliveryOrders, setDeliveryOrders] = useState([]);\r\n    const [retailers, setRetailers] = useState([]);\r\n    const [salesPerson, setSalePerson] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [voucher, setVoucher] = useState([]);\r\n    const [deliveryPerson, setDeliveryPerson] = useState([]);\r\n    const [viewOrder, setViewOrder] = useState({});\r\n    const [viewType, setViewType] = useState('sales');\r\n    const [deliveryStatusFilter, setDeliveryStatusFilter] = useState(\"All\");\r\n    const [statusCounts, setStatusCounts] = useState({\r\n        all: 0,\r\n        delivered: 0,\r\n        pending: 0,\r\n        previousDaySalesCount: 0\r\n    });\r\n\r\n    const [filters, setFilters] = useState(defaultFilters);\r\n    const [dialog, setDialog] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n useEffect(() => {\r\n        const otherSessionFiler = getSessionFiltersByPageId(pageID);\r\n        const {\r\n            Fromdate, Todate,\r\n            Retailer = defaultFilters.Retailer,\r\n            CreatedBy = defaultFilters.CreatedBy,\r\n            SalesPerson = defaultFilters.SalesPerson,\r\n            VoucherType = defaultFilters.VoucherType,\r\n            DeliveryPerson = defaultFilters.DeliveryPerson,\r\n            Cancel_status = defaultFilters.Cancel_status\r\n        } = otherSessionFiler;\r\n\r\n        setFilters(pre => ({\r\n            ...pre,\r\n            Fromdate, Todate,\r\n            Retailer, CreatedBy, SalesPerson,\r\n            VoucherType, DeliveryPerson, Cancel_status\r\n        }));\r\n    }, [sessionValue, pageID, viewType]); \r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/saleOrder/retailers`\r\n        }).then(data => {\r\n            if (data.success) setRetailers(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/users/salesPerson/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) setSalePerson(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/user/dropDown?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) setUsers(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/voucher`\r\n        }).then(data => {\r\n            if (data.success) setVoucher(data.data);\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `dataEntry/costCenter`\r\n        }).then(data => {\r\n            if (data.success) setDeliveryPerson(data.data);\r\n        }).catch(e => console.error(e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const otherSessionFiler = getSessionFiltersByPageId(pageID);\r\n        const {\r\n            Fromdate, Todate,\r\n            Retailer = defaultFilters.Retailer,\r\n            CreatedBy = defaultFilters.CreatedBy,\r\n            SalesPerson = defaultFilters.SalesPerson,\r\n            VoucherType = defaultFilters.VoucherType,\r\n            DeliveryPerson = defaultFilters.DeliveryPerson,\r\n            Cancel_status = defaultFilters.Cancel_status\r\n        } = otherSessionFiler;\r\n\r\n        if (viewType === 'sales') {\r\n            fetchLink({\r\n                address: `reports/reportsNonconvert/sales?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${Retailer?.value}&Sales_Person_Id=${SalesPerson?.value}&Created_by=${CreatedBy?.value}&VoucherType=${VoucherType?.value}&Cancel_status=${Cancel_status}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) setSaleOrders(data?.data);\r\n            }).catch(e => console.error(e));\r\n        } else {\r\n            fetchLink({\r\n                address: `delivery/deliveryOrderListData?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${Retailer?.value}&Sales_Person_Id=${SalesPerson?.value}&Delivery_Person_Id=${DeliveryPerson?.value}&Created_by=${CreatedBy?.value}&Cancel_status=${Cancel_status}`,\r\n                loadingOn, loadingOff\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setDeliveryOrders(data?.data);\r\n                    const delivered = data.data.filter(row => row.DeliveryStatusName === \"Delivered\").length;\r\n                    const pending = data.data.filter(row => row.Delivery_Status === 1).length;\r\n                    const all = data.data.length;\r\n                    const previousDaySalesCount = data.data.length > 0 ? data.data[0].PreviousDaySalesOrderCount || 0 : 0;\r\n                    setStatusCounts({ all, delivered, pending, previousDaySalesCount });\r\n                }\r\n            }).catch(e => console.error(e));\r\n        }\r\n    }, [sessionValue, pageID, viewType]);\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Branch</td>\r\n                        <td className=\"border p-2\">{row.Branch_Name}</td>\r\n                        <td className=\"border p-2 bg-light\">\r\n                            {viewType === 'sales' ? 'Sales Person' : 'Delivery Person'}\r\n                        </td>\r\n                        <td className=\"border p-2\">\r\n                            {viewType === 'sales' ? row.Sales_Person_Name : row.Delivery_Person_Name}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Round off</td>\r\n                        <td className=\"border p-2\">{row.Round_off}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Invoice Type</td>\r\n                        <td className=\"border p-2\">\r\n                            {isEqualNumber(row.GST_Inclusive, 1) && 'Inclusive'}\r\n                            {isEqualNumber(row.GST_Inclusive, 0) && 'Exclusive'}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Tax Type</td>\r\n                        <td className=\"border p-2\">\r\n                            {isEqualNumber(row.IS_IGST, 1) && 'IGST'}\r\n                            {isEqualNumber(row.IS_IGST, 0) && 'GST'}\r\n                        </td>\r\n                        <td className=\"border p-2 bg-light\">Sales Person</td>\r\n                        <td className=\"border p-2\">{row.Sales_Person_Name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2 bg-light\">Narration</td>\r\n                        <td className=\"border p-2\" colSpan={5}>{row.Narration}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(prev => ({ ...prev, filters: false, orderDetails: false }));\r\n    };\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const data = viewType === 'sales' ? saleOrders : deliveryOrders;\r\n        return data.reduce((acc, orders) => Addition(acc, orders?.Total_Invoice_value), 0);\r\n    }, [saleOrders, deliveryOrders, viewType]);\r\n\r\n    const filteredDeliveryData = useMemo(() => {\r\n        if (viewType !== 'delivery') return deliveryOrders;\r\n        if (deliveryStatusFilter === \"Delivered\") {\r\n            return deliveryOrders.filter(row => row.Delivery_Status === 7);\r\n        } else if (deliveryStatusFilter === \"Pending\") {\r\n            return deliveryOrders.filter(row => row.Delivery_Status === 1);\r\n        } else {\r\n            return deliveryOrders;\r\n        }\r\n    }, [deliveryOrders, deliveryStatusFilter, viewType]);\r\n\r\n\r\n    const resetFilters = () => {\r\n  setFilters(defaultFilters);\r\n  setSessionFilters({\r\n    ...defaultFilters,\r\n    pageID\r\n  });\r\n};\r\n    const columns = useMemo(() => {\r\n        if (viewType === 'sales') {\r\n            return [\r\n                createCol('So_Date', 'date', 'SoDate'),\r\n                createCol('So_Inv_No', 'string', 'SO ID'),\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('VoucherTypeGet', 'string', 'Voucher'),\r\n                createCol('Total_Before_Tax', 'number', 'Before Tax'),\r\n                createCol('Total_Tax', 'number', 'Tax'),\r\n                createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                {\r\n                    Field_Name: 'Action',\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='View Order'>\r\n                                <IconButton\r\n                                    onClick={() => setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List || []\r\n                                    })}\r\n                                    color='primary' \r\n                                    size=\"small\"\r\n                                >\r\n                                    <Visibility className=\"fa-16\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            {EditRights && (\r\n                                <Tooltip title='Edit'>\r\n                                    <IconButton\r\n                                        onClick={() => navigate('create', {\r\n                                            state: { ...row, isEdit: true }\r\n                                        })}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        <Edit className=\"fa-16\" />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n                        </>\r\n                    ),\r\n                },\r\n            ];\r\n        } else {\r\n            return [\r\n                createCol('Do_Id', 'string', 'Delivery ID'),\r\n                createCol('So_No', 'string', 'Sale Order ID'),\r\n                createCol('Do_Inv_No', 'string', 'DO Inv No'),\r\n                createCol('Retailer_Name', 'string', 'Customer'),\r\n                createCol('SalesDate', 'date', 'Sale Order Date'),\r\n                createCol('Do_Date', 'date', 'Delivery Date'),\r\n                createCol('Total_Before_Tax', 'number', 'Before Tax'),\r\n                createCol('Total_Tax', 'number', 'Tax'),\r\n                createCol('Total_Invoice_value', 'number', 'Invoice Value'),\r\n                createCol('DeliveryStatusName', 'string', 'Delivery Status'),\r\n                {\r\n                    Field_Name: 'Action',\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='View Order'>\r\n                                <IconButton\r\n                                    onClick={() => setViewOrder({\r\n                                        orderDetails: row,\r\n                                        orderProducts: row?.Products_List || []\r\n                                    })}\r\n                                    color='primary' \r\n                                    size=\"small\"\r\n                                >\r\n                                    <Visibility className=\"fa-16\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            {EditRights && (\r\n                                <Tooltip title='Edit'>\r\n                                    <IconButton\r\n                                        onClick={() => navigate('create', {\r\n                                            state: { ...row, isEdit: true }\r\n                                        })}\r\n                                        size=\"small\"\r\n                                    >\r\n                                        <Edit className=\"fa-16\" />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            )}\r\n                        </>\r\n                    ),\r\n                },\r\n            ];\r\n        }\r\n    }, [viewType, EditRights, navigate]);\r\n\r\n    return (\r\n        <>\r\n         <FilterableTable\r\n  title={`${viewType === 'sales' ? 'Sale' : 'Delivery'} Orders`}\r\n  dataArray={viewType === 'sales' ? saleOrders : filteredDeliveryData}\r\n  EnableSerialNumber\r\n  columns={columns}\r\n  ButtonArea={\r\n    <>\r\n      <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap', mb: 2 }}>\r\n   \r\n        <ToggleButtonGroup\r\n          value={viewType}\r\n          exclusive\r\n          onChange={(e, newView) => {\r\n            if (newView) {\r\n              resetFilters();\r\n              setViewType(newView);\r\n            }\r\n          }}\r\n          aria-label=\"view type\"\r\n          sx={{ \r\n            '& .MuiToggleButton-root': {\r\n              px: 3,  \r\n              py:1,  \r\n              m: 0.5, \r\n            }\r\n          }}\r\n        >\r\n          <ToggleButton \r\n            value=\"sales\" \r\n            aria-label=\"sales view\"\r\n            sx={{\r\n              backgroundColor: viewType === 'sales' ? '#1976d2' : 'inherit',\r\n              color: viewType === 'sales' ? 'white' : 'inherit',\r\n              fontWeight: viewType === 'sales' ? 'bold' : 'normal',\r\n              '&:hover': {\r\n                backgroundColor: viewType === 'sales' ? '#1565c0' : 'rgba(0, 0, 0, 0.04)'\r\n              }\r\n            }}\r\n          >\r\n            Sales\r\n          </ToggleButton>\r\n          <ToggleButton \r\n            value=\"delivery\" \r\n            aria-label=\"delivery view\"\r\n            sx={{\r\n              backgroundColor: viewType === 'delivery' ? '#1976d2' : 'inherit',\r\n              color: viewType === 'delivery' ? 'white' : 'inherit',\r\n              fontWeight: viewType === 'delivery' ? 'bold' : 'normal',\r\n              '&:hover': {\r\n                backgroundColor: viewType === 'delivery' ? '#1565c0' : 'rgba(0, 0, 0, 0.04)'\r\n              }\r\n            }}\r\n          >\r\n            Delivery\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n     \r\n\r\n        {viewType === 'delivery' && (\r\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n          \r\n            <Button\r\n              variant={deliveryStatusFilter === \"All\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              onClick={() => setDeliveryStatusFilter(\"All\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"All\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              All - {statusCounts.all}\r\n            </Button>\r\n            <Button\r\n              variant={deliveryStatusFilter === \"Delivered\" ? \"contained\" : \"outlined\"}\r\n              color=\"success\"\r\n              onClick={() => setDeliveryStatusFilter(\"Delivered\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"Delivered\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              Delivered - {statusCounts.delivered}\r\n            </Button>\r\n         \r\n            <Button\r\n              variant={deliveryStatusFilter === \"Pending\" ? \"contained\" : \"outlined\"}\r\n              color=\"warning\"\r\n              onClick={() => setDeliveryStatusFilter(\"Pending\")}\r\n              sx={{ \r\n                px: 3,\r\n                py: 1,\r\n                fontWeight: deliveryStatusFilter === \"Pending\" ? 'bold' : 'normal',\r\n                m: 0.5\r\n              }}\r\n            >\r\n              Pending - {statusCounts.pending}\r\n            </Button>\r\n                  <Typography variant=\"body1\" sx={{ mr: 1, fontWeight: 'bold' }}>\r\n              Sales Order: {statusCounts.previousDaySalesCount}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n      \r\n        <Tooltip title='Filters'>\r\n          <IconButton\r\n            size=\"medium\"\r\n            onClick={() => setDialog(prev => ({ ...prev, filters: true }))}\r\n            sx={{ ml: 1 }}\r\n          >\r\n            <FilterAlt />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        {/* Total Value */}\r\n        <Box sx={{ \r\n          bgcolor: 'background.paper', \r\n          px: 2, \r\n          py: 1, \r\n          borderRadius: 1,\r\n          ml: 'auto'\r\n        }}>\r\n          {toNumber(Total_Invoice_value) > 0 && (\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              Total: {NumberFormat(Total_Invoice_value)}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  }\r\n  isExpendable={true}\r\n  tableMaxHeight={550}\r\n  expandableComp={ExpendableComponent}\r\n/>\r\n\r\n            <Dialog\r\n                open={dialog.filters}\r\n                onClose={closeDialog}\r\n                fullWidth \r\n                maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Fromdate: e.target.value }))}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Todate: e.target.value }))}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Retailer</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.Retailer}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Retailer: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...retailers.map(obj => ({\r\n                                                    value: obj?.Retailer_Id,\r\n                                                    label: `${obj?.Retailer_Name} - ₹${NumberFormat(toNumber(obj?.TotalSales))} (${toNumber(obj?.OrderCount)})`\r\n                                                }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Retailer Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                {viewType === 'delivery' && (\r\n                                    <tr>\r\n                                        <td style={{ verticalAlign: 'middle' }}>Delivery Person</td>\r\n                                        <td>\r\n                                            <Select\r\n                                                value={filters.DeliveryPerson}\r\n                                                onChange={e => setFilters(prev => ({ ...prev, DeliveryPerson: e }))}\r\n                                                options={[\r\n                                                    { value: '', label: 'ALL' },\r\n                                                    ...deliveryPerson.map(obj => ({\r\n                                                        value: obj?.Cost_Center_Id,\r\n                                                        label: obj?.Cost_Center_Name\r\n                                                    }))\r\n                                                ]}\r\n                                                isSearchable={true}\r\n                                                placeholder=\"Delivery Person Name\"\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Sales Person</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.SalesPerson}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, SalesPerson: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...salesPerson.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Sales Person Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Created By</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.CreatedBy}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, CreatedBy: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...users.map(obj => ({ value: obj?.UserId, label: obj?.Name }))\r\n                                            ]}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Created By\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Voucher</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.VoucherType}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, VoucherType: e }))}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...voucher.filter(obj => obj.Type === 'SALES')\r\n                                                    .map(obj => ({ value: obj?.Vocher_Type_Id, label: obj?.Voucher_Type }))\r\n                                            ]}\r\n                                            menuPortalTarget={document.body}\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Voucher Name\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Canceled Order</td>\r\n                                    <td>\r\n                                        <select\r\n                                            value={filters.Cancel_status}\r\n                                            onChange={e => setFilters(prev => ({ ...prev, Cancel_status: Number(e.target.value) }))}\r\n                                            className=\"cus-inpt\"\r\n                                        >\r\n                                            <option value={1}>Show</option>\r\n                                            <option value={0}>Hide</option>\r\n                                        </select>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            closeDialog();\r\n                            setSessionFilters({\r\n                                Fromdate: filters.Fromdate,\r\n                                Todate: filters.Todate,\r\n                                pageID,\r\n                                Retailer: filters.Retailer,\r\n                                CreatedBy: filters.CreatedBy,\r\n                                SalesPerson: filters.SalesPerson,\r\n                                DeliveryPerson: filters.DeliveryPerson,\r\n                                VoucherType: filters.VoucherType,\r\n                                Cancel_status: filters.Cancel_status\r\n                            });\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PendingDetails;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}"],"names":["_ref","loadingOn","loadingOff","AddRights","EditRights","pageID","sessionValue","sessionStorage","getItem","defaultFilters","Fromdate","ISOString","Todate","Retailer","value","label","CreatedBy","SalesPerson","VoucherType","DeliveryPerson","Cancel_status","storage","JSON","parse","localStorage","navigate","useNavigate","saleOrders","setSaleOrders","useState","deliveryOrders","setDeliveryOrders","retailers","setRetailers","salesPerson","setSalePerson","users","setUsers","voucher","setVoucher","deliveryPerson","setDeliveryPerson","viewOrder","setViewOrder","viewType","setViewType","deliveryStatusFilter","setDeliveryStatusFilter","statusCounts","setStatusCounts","all","delivered","pending","previousDaySalesCount","filters","setFilters","dialog","setDialog","orderDetails","useEffect","otherSessionFiler","getSessionFiltersByPageId","pre","_objectSpread","fetchLink","address","then","data","success","catch","e","console","error","concat","Company_id","filter","row","DeliveryStatusName","length","Delivery_Status","PreviousDaySalesOrderCount","closeDialog","prev","Total_Invoice_value","useMemo","reduce","acc","orders","Addition","filteredDeliveryData","columns","createCol","Field_Name","isVisible","isCustomCell","Cell","_ref3","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","orderProducts","Products_List","color","size","Visibility","className","state","isEdit","Edit","_ref4","FilterableTable","dataArray","EnableSerialNumber","ButtonArea","Box","sx","display","gap","alignItems","flexWrap","mb","ToggleButtonGroup","exclusive","onChange","newView","setSessionFilters","px","py","m","ToggleButton","backgroundColor","fontWeight","Button","variant","Typography","mr","ml","FilterAlt","bgcolor","borderRadius","toNumber","NumberFormat","isExpendable","tableMaxHeight","expandableComp","_ref2","Branch_Name","Sales_Person_Name","Delivery_Person_Name","Round_off","isEqualNumber","GST_Inclusive","IS_IGST","colSpan","Narration","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","style","verticalAlign","type","target","Select","options","map","obj","Retailer_Id","Retailer_Name","TotalSales","OrderCount","isSearchable","placeholder","Cost_Center_Id","Cost_Center_Name","UserId","Name","Type","Vocher_Type_Id","Voucher_Type","menuPortalTarget","document","body","Number","DialogActions","startIcon","Search","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","field","arguments","undefined","align","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","LocalDate","LocalTime","onClickFun","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","log","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","i","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}