{"version":3,"file":"static/js/2804.c3e23e3c.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Visibility.js","Pages/Sales/TripMaster/DeliveryTripSheet.jsx","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","Components/tablecolumn.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport FilterableTable, { ButtonActions, createCol } from \"../../../Components/filterableTable2\";\r\nimport { useNavigate, useLocation, json } from \"react-router-dom\";\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { ISOString, isValidDate, LocalDate, LocalTime, NumberFormat, numberToWords, Subraction, timeDuration } from \"../../../Components/functions\";\r\nimport { Download, Edit, FilterAlt, Search, Visibility } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify'\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\nconst defaultFilters = {\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n};\r\n\r\nconst TripSheets = ({ loadingOn, loadingOff }) => {\r\n\r\n    const nav = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const [tripData, setTripData] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: defaultFilters.Fromdate,\r\n        Todate: defaultFilters.Todate,\r\n        fetchFrom: defaultFilters.Fromdate,\r\n        fetchTo: defaultFilters.Todate,\r\n        filterDialog: false,\r\n        refresh: false,\r\n        printPreviewDialog: false,\r\n        shortPreviewDialog: false,\r\n        FromGodown: [],\r\n        ToGodown: [],\r\n        Staffs: [],\r\n        Items: []\r\n    });\r\n    const [selectedRow, setSelectedRow] = useState([]);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [selectedId, setSelectedId] = useState(null);\r\n    const [reload, setReload] = useState(false)\r\n    const printRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `delivery/deliveryTripSheet?Fromdate=${filters?.fetchFrom}&Todate=${filters?.fetchTo}`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n\r\n                setTripData(data.data);\r\n            }\r\n        }).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        }).catch(e => console.error(e))\r\n    }, [filters?.fetchFrom, filters?.fetchTo, reload]);\r\n\r\n    const handleDeleteConfirm = async () => {\r\n\r\n        fetchLink({\r\n            address: `delivery/tripDetails`,\r\n            method: \"DELETE\",\r\n            bodyData: { Trip_Id: selectedId },\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setReload(!reload);\r\n                setDeleteDialog(false);\r\n                toast.success(\"Trip deleted successfully!\");\r\n            } else {\r\n                toast.error(\"Failed to delete area:\");\r\n            }\r\n        }).catch(e => console.error(e));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            Fromdate: query.get(\"Fromdate\") && isValidDate(query.get(\"Fromdate\"))\r\n                ? query.get(\"Fromdate\")\r\n                : defaultFilters.Fromdate,\r\n            Todate: query.get(\"Todate\") && isValidDate(query.get(\"Todate\"))\r\n                ? query.get(\"Todate\")\r\n                : defaultFilters.Todate,\r\n        };\r\n        setFilters(pre => ({ ...pre, fetchFrom: queryFilters.Fromdate, fetchTo: queryFilters.Todate }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        nav(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters({\r\n            ...filters,\r\n            filterDialog: false,\r\n        });\r\n    }\r\n\r\n    const allProducts = (selectedRow?.Product_Array || []).flatMap(product => product.Products_List || []);\r\n\r\n    const TaxData = allProducts.reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode === item.HSN_Code);\r\n\r\n        const {\r\n            HSN_Code,\r\n            Taxable_Amount = 0,\r\n            Igst_Amo = 0,\r\n            Cgst_Amo = 0,\r\n            Sgst_Amo = 0\r\n        } = item;\r\n\r\n        const Total_Tax = Igst_Amo + Cgst_Amo + Sgst_Amo;\r\n\r\n        if (HSNindex !== -1) {\r\n\r\n            data[HSNindex] = {\r\n                ...data[HSNindex],\r\n                taxableValue: data[HSNindex].taxableValue + Taxable_Amount,\r\n                igst: data[HSNindex].igst + Igst_Amo,\r\n                cgst: data[HSNindex].cgst + Cgst_Amo,\r\n                sgst: data[HSNindex].sgst + Sgst_Amo,\r\n                totalBeforeTax: data[HSNindex].totalBeforeTax + Taxable_Amount,\r\n                totalTax: data[HSNindex].totalTax + Total_Tax\r\n            };\r\n        } else {\r\n            data.push({\r\n                hsnCode: HSN_Code,\r\n                taxableValue: Taxable_Amount,\r\n                igst: Igst_Amo,\r\n                cgst: Cgst_Amo,\r\n                sgst: Sgst_Amo,\r\n                totalBeforeTax: Taxable_Amount,\r\n                totalTax: Total_Tax\r\n            });\r\n        }\r\n\r\n        return data;\r\n    }, []);\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const uniqueStaffs = useMemo(() => {\r\n        const allStaffs = tripData.flatMap((trip) =>\r\n            trip.Employees_Involved.map((staff) => staff.Emp_Name)\r\n        );\r\n        return [...new Set(allStaffs)].map((name) => ({\r\n            value: name,\r\n            label: name,\r\n        }));\r\n    }, [tripData]);\r\n\r\n    const filteredData = useMemo(() => {\r\n        return tripData.filter(trip => {\r\n            const hasFromGodownMatch = filters.FromGodown.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.FromGodown.some(selected => selected.value === product.FromLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasToGodownMatch = filters.ToGodown.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.ToGodown.some(selected => selected.value === product.ToLocation)\r\n                )\r\n                : false;\r\n\r\n            const hasItemMatch = filters.Items.length > 0\r\n                ? trip.Product_Array.some(product =>\r\n                    filters.Items.some(selected => selected.value === product.Product_Name)\r\n                )\r\n                : false;\r\n\r\n            const hasEmployeeMatch = filters.Staffs.length > 0\r\n                ? trip.Employees_Involved.some(staff =>\r\n                    filters.Staffs.some(selected => selected.value === staff.Emp_Name)\r\n                )\r\n                : false;\r\n\r\n            return hasFromGodownMatch || hasToGodownMatch || hasItemMatch || hasEmployeeMatch;\r\n        });\r\n    }, [tripData, filters]);\r\n\r\n    const flattenProductsList = (productArray) => {\r\n        if (!Array.isArray(productArray)) return [];\r\n\r\n        return productArray.flatMap((product) =>\r\n            Array.isArray(product.Products_List)\r\n                ? product.Products_List\r\n                    .map((item) => ({\r\n                        ...item,\r\n                        Reason: product.Reason || \"Delivery\",\r\n                    }))\r\n                    .filter(item => Object.keys(item).length > 1)\r\n                : []\r\n        ).filter(row => row && Object.keys(row).length > 1);\r\n    };\r\n\r\n\r\n    const closeDeleteDialog = () => {\r\n        setDeleteDialog(false);\r\n        setSelectedId(null);\r\n    };\r\n\r\n    const openDeleteDialog = (id) => {\r\n        setSelectedId(id);\r\n        setDeleteDialog(true);\r\n    };\r\n    return (\r\n        <>\r\n\r\n            <FilterableTable\r\n                dataArray={(\r\n                    filters.FromGodown.length > 0 ||\r\n                    filters.ToGodown.length > 0 ||\r\n                    filters.Staffs.length > 0\r\n                ) ? filteredData : tripData}\r\n                title=\"Trip Sheets\"\r\n                maxHeightOption\r\n                ExcelPrintOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => nav('/erp/sales/Tripsheet/Tripsheetcreation')}\r\n                        >Add</Button>\r\n                        <Tooltip title='Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                            ><FilterAlt /></IconButton>\r\n                        </Tooltip>\r\n                    </>\r\n                }\r\n                EnableSerialNumber\r\n\r\n                initialPageCount={10}\r\n                columns={[\r\n                    createCol('Trip_Date', 'date', 'Date'),\r\n                    createCol('Trip_No', 'string'),\r\n                    createCol('Challan_No', 'string', 'Challan'),\r\n                    createCol('Vehicle_No', 'string', 'Vehicle'),\r\n                    createCol('StartTime', 'time', 'Start Time'),\r\n                    createCol('EndTime', 'time', 'End Time'),\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Time Taken',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n                            const startTime = row?.StartTime ? new Date(row.StartTime) : '';\r\n                            const endTime = row.EndTime ? new Date(row.EndTime) : '';\r\n                            const timeTaken = (startTime && endTime) ? timeDuration(startTime, endTime) : '00:00';\r\n                            return (\r\n                                <span className=\"cus-badge bg-light\">{timeTaken}</span>\r\n                            )\r\n                        }\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Distance',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => NumberFormat(Subraction(row?.Trip_EN_KM, row?.Trip_ST_KM))\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Qty',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n\r\n                            const totalQty = row?.Product_Array?.reduce((sum, product) => {\r\n\r\n                                const productQty = product?.Products_List?.reduce((productSum, item) => {\r\n                                    return productSum + (item.Bill_Qty || 0);\r\n                                }, 0);\r\n                                return sum + productQty;\r\n                            }, 0);\r\n\r\n\r\n                            return <span>{totalQty}</span>;\r\n                        },\r\n                    },\r\n\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Total Item',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => {\r\n\r\n                            const totalQty = row?.Product_Array?.reduce((sum, product) => {\r\n\r\n                                const productQty = product?.Products_List?.reduce((productSum, item) => {\r\n                                    return productSum + 1;\r\n                                }, 0);\r\n                                return sum + productQty;\r\n                            }, 0);\r\n\r\n\r\n                            return <span>{totalQty}</span>;\r\n                        },\r\n                    },\r\n\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: 'Action',\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <ButtonActions\r\n                                buttonsData={[\r\n                                    {\r\n                                        name: 'Delete',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            openDeleteDialog(true)\r\n\r\n                                            setSelectedId(row?.Trip_Id)\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        name: 'Edit',\r\n                                        icon: <Edit className=\"fa-14\" />,\r\n\r\n                                        onclick: () => nav('/erp/sales/Tripsheet/Tripsheetcreation', {\r\n\r\n                                            state: {\r\n                                                ...row,\r\n                                                isEditable: false,\r\n\r\n                                            },\r\n                                        }),\r\n\r\n                                    },\r\n                                    {\r\n                                        name: 'Short Preview',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            setFilters(pre => ({ ...pre, shortPreviewDialog: true }));\r\n\r\n                                            setSelectedRow(row);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        name: 'Preview',\r\n                                        icon: <Visibility className=\"fa-14\" />,\r\n                                        onclick: () => {\r\n                                            setFilters(pre => ({ ...pre, printPreviewDialog: true }));\r\n                                            setSelectedRow(row);\r\n                                        }\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        )\r\n                    }\r\n                ]}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <>\r\n                        {row?.Employees_Involved?.length > 0 && (\r\n                            <table className=\"fa-14\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\" colSpan={3}>Involved Employees</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th className=\"py-1 px-2 border text-muted\">SNo</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Name</th>\r\n                                        <th className=\"py-1 px-2 border text-muted\">Role</th>\r\n                                    </tr>\r\n                                    {row.Employees_Involved.map((o, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"py-1 px-2 border\">{i + 1}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Emp_Name}</td>\r\n                                            <td className=\"py-1 px-2 border\">{o?.Cost_Category}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        )}\r\n\r\n\r\n\r\n                        <FilterableTable\r\n                            title=\"Items\"\r\n                            EnableSerialNumber\r\n                            dataArray={\r\n                                Array.isArray(row?.Product_Array)\r\n                                    ? flattenProductsList(row?.Product_Array).filter(row => Object.keys(row).length > 1)\r\n                                    : []\r\n                            }\r\n                            columns={[\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Reason',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => row.Reason ?? 'Delivery',\r\n                                },\r\n                                createCol('Product_Name', 'string', 'Product_Name'),\r\n                                createCol('HSN_Code', 'string'),\r\n                                createCol('Taxable_Rate', 'number', 'Taxable_Rate'),\r\n                                createCol('Taxable_Amount', 'number', 'Tax_Before_Amount'),\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Tax',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const cgstP = Number(row.Cgst_Amo) || 0;\r\n                                        const sgstP = Number(row.Sgst_Amo) || 0;\r\n                                        const taxValue = cgstP + sgstP;\r\n                                        return taxValue.toFixed(2);\r\n                                    },\r\n                                },\r\n                                createCol('Final_Amo', 'number', 'Final_Amo'),\r\n\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Round off',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const total = Number(row.Total_Value) || 0;\r\n                                        const integerPart = Math.floor(total);\r\n                                        const decimalPart = total - integerPart;\r\n\r\n                                        let roundedTotal = integerPart;\r\n                                        let roundOffDiff = 0;\r\n\r\n                                        if (decimalPart >= 0.56 && decimalPart <= 0.99) {\r\n                                            roundedTotal = integerPart + 1;\r\n                                        } else if (decimalPart >= 0.05 && decimalPart <= 0.55) {\r\n                                            roundedTotal = integerPart;\r\n                                        } else if (decimalPart >= 0.00 && decimalPart <= 0.04) {\r\n                                            roundedTotal = integerPart;\r\n                                        }\r\n\r\n                                        roundOffDiff = (roundedTotal - total).toFixed(2);\r\n                                        return roundOffDiff > 0 ? `+${roundOffDiff}` : roundOffDiff;\r\n                                    },\r\n                                },\r\n                                createCol('Branch', 'string', 'From'),\r\n                                createCol('Retailer_Name', 'string', 'To'),\r\n                            ]}\r\n                            disablePagination\r\n                            ExcelPrintOption\r\n                        />\r\n\r\n\r\n                    </>\r\n                )}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='md'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-4\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={e => setFilters({ ...filters, Fromdate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                    <td style={{ verticalAlign: 'middle' }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={e => setFilters({ ...filters, Todate: e.target.value })}\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Staffs</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Staffs}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Staffs: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueStaffs}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Staff\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Items</td>\r\n                                    <td colSpan={3}>\r\n                                        <Select\r\n                                            value={filters.Items}\r\n                                            onChange={(selectedOptions) =>\r\n                                                setFilters((prev) => ({ ...prev, Items: selectedOptions }))\r\n                                            }\r\n                                            menuPortalTarget={document.body}\r\n                                            options={uniqueItems}\r\n                                            isMulti\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Select Items\"}\r\n                                            maxMenuHeight={300}\r\n                                        />\r\n                                    </td>\r\n                                </tr> */}\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                Fromdate: filters?.Fromdate,\r\n                                Todate: filters?.Todate\r\n                            };\r\n                            updateQueryString(updatedFilters);\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.shortPreviewDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, shortPreviewDialog: false }))}\r\n                maxWidth=\"xl\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Print Preview</DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    {selectedRow?.Product_Array && (\r\n                        <React.Fragment>\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-12 bg-light\">Retailer Name</th>\r\n                                        <th className=\"fa-12 bg-light\">Do_Date</th>\r\n                                        <th className=\"fa-12 bg-light\">Delivery_Person</th>\r\n                                        <th className=\"fa-12 bg-light\">Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {selectedRow.Product_Array.length > 0 ? (\r\n                                        <>\r\n                                            {selectedRow.Product_Array.map((group, idx) => {\r\n                                                const totalAmount = group.Products_List.reduce(\r\n                                                    (sum, product) => sum + product.Final_Amo,\r\n                                                    0\r\n                                                );\r\n\r\n\r\n                                                const deliveryDetail = selectedRow.Trip_Details.find(\r\n                                                    (detail) => detail.Do_Id === group.Do_Id\r\n                                                );\r\n\r\n                                                return (\r\n                                                    <tr key={idx}>\r\n                                                        <td className=\"fw-bold\">{group.Retailer_Name}</td>\r\n                                                        <td className=\"fw-bold text-end\">{group.Product_Do_Date}</td>\r\n                                                        <td className=\"fw-bold text-end\">{deliveryDetail?.Name || \"N/A\"}</td>\r\n                                                        <td className=\"fw-bold text-end\">{NumberFormat(totalAmount)}</td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })}\r\n\r\n                                            <tr>\r\n                                                <td className=\"fw-bold text-end\" colSpan={3}>Total:</td>\r\n                                                <td className=\"fw-bold text-end\">\r\n                                                    {NumberFormat(\r\n                                                        selectedRow.Product_Array.reduce(\r\n                                                            (acc, group) => acc +\r\n                                                                group.Products_List.reduce(\r\n                                                                    (sum, product) => sum + product.Final_Amo,\r\n                                                                    0\r\n                                                                ),\r\n                                                            0\r\n                                                        )\r\n                                                    )}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colSpan=\"5\" className=\"text-center\">No data available</td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </React.Fragment>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, shortPreviewDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={filters.printPreviewDialog}\r\n                onClose={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                maxWidth=\"xl\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Print Preview</DialogTitle>\r\n                <DialogContent ref={printRef}>\r\n                    {selectedRow?.Product_Array && (\r\n                        <React.Fragment>\r\n                            <table className=\"table table-bordered fa-13 m-0\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td colSpan={3}>DELIVERY CHALLAN</td>\r\n                                        <td colSpan={3}>GSTIN :33AAOCP0807F1ZN</td>\r\n                                        <td colSpan={2}>ORIGINAL / DUPLICATE</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={3} rowSpan={2}>\r\n                                            <span className=\"fa-14 fw-bold\">PUKAL FOODS PRIVATE LIMITED</span> <br />\r\n                                            6A, First Floor, North, Viswanadha puram, Main road,<br />\r\n                                            Reserve Line, Viswanathapuram, Madurai, Tamil Nadu 625014\r\n                                        </td>\r\n                                        <td colSpan={3}>FSSAI No :</td>\r\n                                        <td>Challan No</td>\r\n                                        <td>{selectedRow?.Challan_No}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={3}>Phone No: 9842131353, 9786131353</td>\r\n                                        <td>Date</td>\r\n                                        <td>{selectedRow.Trip_Date ? LocalDate(selectedRow.Trip_Date) : ''}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan={8} className=\"text-center\">Reason for Transfer - Branch Transfer / Line Sales / Purchase Return / Job Work</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Vehicle No</td>\r\n                                        <td>{selectedRow?.Vehicle_No}</td>\r\n                                        <td>Delivery Person </td>\r\n                                        <td>\r\n                                            {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                                staff?.Cost_Category === 'Delivery Man'\r\n                                            ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                        </td>\r\n                                        <td>Start Time</td>\r\n                                        <td>{selectedRow?.StartTime ? LocalTime(new Date(selectedRow.StartTime)) : ''}</td>\r\n                                        <td>Start KM</td>\r\n                                        <td>{selectedRow?.Trip_ST_KM}</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Trip No</td>\r\n                                        <td>{selectedRow?.Trip_No}</td>\r\n                                        <td>LoadMan</td>\r\n                                        <td>\r\n                                            {selectedRow?.Employees_Involved?.filter(staff => (\r\n                                                staff?.Cost_Category === 'Load Man'\r\n                                            ))?.map(staff => staff?.Emp_Name).join(', ')}\r\n                                        </td>\r\n                                        <td>End Time</td>\r\n                                        <td>{selectedRow?.EndTime ? LocalTime(new Date(selectedRow.EndTime)) : ''}</td>\r\n                                        <td>End KM</td>\r\n                                        <td>{selectedRow?.Trip_EN_KM}</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            {/* items */}\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"fa-12 bg-light\">#</th>\r\n                                        <th className=\"fa-12 bg-light\">Reason</th>\r\n                                        <th className=\"fa-12 bg-light\">Party</th>\r\n                                        <th className=\"fa-12 bg-light\">Address</th>\r\n                                        <th className=\"fa-12 bg-light\">Item</th>\r\n                                        <th className=\"fa-12 bg-light\">HSN</th>\r\n                                        <th className=\"fa-12 bg-light\">Qty</th>\r\n                                        <th className=\"fa-12 bg-light\">KGS</th>\r\n                                        <th className=\"fa-12 bg-light\">Rate</th>\r\n                                        <th className=\"fa-12 bg-light\">Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n\r\n                                    {selectedRow?.Product_Array?.map((product, productIndex) => (\r\n                                        (product?.Products_List || []).map((item, index) => (\r\n                                            <tr key={`${productIndex}-${index}`}>\r\n                                                <td className=\"fa-10\">{index + 1}</td>\r\n                                                <td className=\"fa-10\">{item.Reason || \"Delivery\"}</td>\r\n                                                <td className=\"fa-10\">{item?.Retailer_Name}</td>\r\n                                                <td className=\"fa-10\">{item?.Retailer_Address}</td>\r\n                                                <td className=\"fa-10\">{item?.Product_Name}</td>\r\n                                                <td className=\"fa-10\">{item?.HSN_Code}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Bill_Qty)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.KGS || 0)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Taxable_Rate)}</td>\r\n                                                <td className=\"fa-10\">{NumberFormat(item?.Taxable_Rate * item?.Bill_Qty)}</td>\r\n                                            </tr>\r\n                                        ))\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className=\"bg-light fa-12 text-center\">HSN / SAC</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">Taxable Value</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">IGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">CGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">SGST</td>\r\n                                        <td className=\"bg-light fa-12 text-center\">Total Tax</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {/* Map through aggregated data */}\r\n\r\n                                    {TaxData.map((item, i) => (\r\n                                        <tr key={i}>\r\n                                            <td className=\"fa-10 text-end\">{item.hsnCode}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.totalBeforeTax)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.igst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.cgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.sgst)}</td>\r\n                                            <td className=\"fa-10 text-end\">{NumberFormat(item.totalTax)}</td>\r\n                                        </tr>\r\n                                    ))}\r\n\r\n                                    {/* Total Row */}\r\n                                    <tr>\r\n                                        <td className=\"border fa-10 text-end\">Total</td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.totalBeforeTax, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.igst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.cgst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.sgst, 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-10 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum + item.totalTax, 0))}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                                <td colSpan={6} className=' fa-13 fw-bold'>\r\n\r\n                                    Tax Amount (in words) : INR &nbsp;\r\n                                    {numberToWords(\r\n                                        parseInt(Object.values(selectedRow?.Product_Array).reduce(\r\n                                            (sum, item) => sum + Number(item.Total_Tax || 0), 0\r\n                                        ))\r\n                                    )} only.\r\n                                </td>\r\n\r\n                            </table>\r\n\r\n                            <table className=\"table table-bordered fa-10\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>Prepared By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                        <td>Executed By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                        <td>Verified By</td>\r\n                                        <td style={{ minWidth: 150 }}></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>Other Expenses</td>\r\n                                        <td>0</td>\r\n                                        <td>Round Off</td>\r\n                                        <td>0</td>\r\n                                        <td>Grand Total</td>\r\n                                        <td className=\"fa-15 fw-bold\">\r\n                                            {/* Calculate Total Value (Taxable Value + Total Tax) */}\r\n                                            {NumberFormat(\r\n                                                Object.values(TaxData).reduce(\r\n                                                    (acc, item) => acc + (item.taxableValue ?? 0) + (item.igst ?? 0) + (item.cgst ?? 0) + (item.sgst ?? 0), 0\r\n                                                )\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n\r\n                            </table>\r\n\r\n                            <td colSpan={6} className='col-12 fa-15 fw-bold'>\r\n                                {numberToWords(\r\n                                    parseInt(Object.values(TaxData).reduce(\r\n                                        (acc, item) => acc + (item.taxableValue ?? 0) + (item.igst ?? 0) + (item.cgst ?? 0) + (item.sgst ?? 0), 0\r\n                                    ))\r\n                                )} only.\r\n                            </td>\r\n                            <div className=\"col-12 text-center\">\r\n                                <p>This is a Computer Generated Invoice</p>\r\n                            </div>\r\n\r\n                        </React.Fragment>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setFilters(pre => ({ ...pre, printPreviewDialog: false }))}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<Download />}\r\n                        variant=\"outlined\"\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n            <Dialog open={deleteDialog} onClose={closeDeleteDialog} fullWidth maxWidth=\"sm\">\r\n                <DialogTitle>Confirm Delete</DialogTitle>\r\n                <DialogContent>\r\n                    <p>Are you sure you want to delete this item?</p>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDeleteDialog}>Cancel</Button>\r\n\r\n                    <Button onClick={handleDeleteConfirm} variant=\"contained\" color=\"error\">\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* <h6 className=\"m-0 text-end text-muted px-3\">Total Invoice Amount ({tripData?.length}) : {Total_Invoice_value}</h6> */}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TripSheets;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["createSvgIcon","_jsx","d","defaultFilters","Fromdate","ISOString","Todate","_ref","_selectedRow$Employee","_selectedRow$Employee2","_selectedRow$Employee3","_selectedRow$Employee4","_selectedRow$Product_","loadingOn","loadingOff","nav","useNavigate","location","useLocation","query","URLSearchParams","search","tripData","setTripData","useState","filters","setFilters","fetchFrom","fetchTo","filterDialog","refresh","printPreviewDialog","shortPreviewDialog","FromGodown","ToGodown","Staffs","Items","selectedRow","setSelectedRow","deleteDialog","setDeleteDialog","selectedId","setSelectedId","reload","setReload","printRef","useRef","useEffect","fetchLink","address","concat","then","data","success","finally","catch","e","console","error","queryFilters","get","isValidDate","pre","_objectSpread","closeDialog","TaxData","Product_Array","flatMap","product","Products_List","reduce","item","HSNindex","findIndex","obj","hsnCode","HSN_Code","Taxable_Amount","Igst_Amo","Cgst_Amo","Sgst_Amo","Total_Tax","taxableValue","igst","cgst","sgst","totalBeforeTax","totalTax","push","handlePrint","useReactToPrint","content","current","uniqueStaffs","useMemo","allStaffs","trip","Employees_Involved","map","staff","Emp_Name","Set","name","value","label","filteredData","filter","hasFromGodownMatch","length","some","selected","FromLocation","hasToGodownMatch","ToLocation","hasItemMatch","Product_Name","hasEmployeeMatch","closeDeleteDialog","_jsxs","_Fragment","children","FilterableTable","dataArray","title","maxHeightOption","ExcelPrintOption","ButtonArea","Button","variant","onClick","Tooltip","IconButton","size","FilterAlt","EnableSerialNumber","initialPageCount","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref2","row","startTime","StartTime","Date","endTime","EndTime","timeTaken","timeDuration","className","_ref3","NumberFormat","Subraction","Trip_EN_KM","Trip_ST_KM","_ref4","_row$Product_Array","totalQty","sum","_product$Products_Lis","productSum","Bill_Qty","_ref5","_row$Product_Array2","_product$Products_Lis2","_ref6","ButtonActions","buttonsData","icon","Visibility","onclick","Trip_Id","Edit","state","isEditable","isExpendable","expandableComp","_ref7","_row$Employees_Involv","colSpan","o","i","Cost_Category","Array","isArray","productArray","Reason","Object","keys","_ref8","_row$Reason","_ref9","Number","toFixed","_ref10","total","Total_Value","integerPart","Math","floor","decimalPart","roundedTotal","roundOffDiff","disablePagination","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","style","verticalAlign","type","onChange","target","Select","selectedOptions","prev","menuPortalTarget","document","body","options","isMulti","styles","customSelectStyles","isSearchable","placeholder","maxMenuHeight","DialogActions","newFilters","params","toString","replace","updateQueryString","startIcon","Search","ref","React","group","idx","totalAmount","Final_Amo","deliveryDetail","Trip_Details","find","detail","Do_Id","Retailer_Name","Product_Do_Date","Name","acc","rowSpan","Challan_No","Trip_Date","LocalDate","Vehicle_No","join","LocalTime","Trip_No","productIndex","index","Retailer_Address","KGS","Taxable_Rate","numberToWords","parseInt","values","minWidth","_item$taxableValue","_item$igst","_item$cgst","_item$sgst","_item$taxableValue2","_item$igst2","_item$cgst2","_item$sgst2","Download","async","method","bodyData","toast","color","preprocessDataForExport","flattenedRow","forEach","column","Defult_Display","cellContent","safeColumnHeader","String","toLowerCase","key","Field_Name","field","arguments","undefined","align","Fied_Data","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","disabled","ListItemIcon","ListItemText","formatString","val","dataType","onClickFun","tableMaxHeight","CellSize","PDFPrintOption","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","sx","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","verticalAlignClass","foundEntry","entries","log","Card","component","Paper","ToggleOn","ToggleOff","generatePDF","doc","jsPDF","processedData","headers","rows","header","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","rowsPerPageOptions","from","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","width","headCells","menu","provided","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}