{"version":3,"file":"static/js/2522.425c457d.chunk.js","mappings":"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","sources":["Pages/Reports/storageClosingStock/itemGroupBasedStockValue.jsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/FilterAltOff.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","Components/filterableTable2.jsx","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","Pages/Reports/storageClosingStock/variable.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Addition, checkIsNumber, filterableText,\r\n    groupData, isEqualNumber, ISOString, stringCompare, toArray, toNumber,\r\n} from \"../../../Components/functions\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport {\r\n    Autocomplete, Button, Card, Checkbox, Dialog,\r\n    DialogActions, DialogContent, DialogTitle, IconButton, \r\n    Paper, Switch, TextField, Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, Settings,\r\n} from \"@mui/icons-material\";\r\nimport { useMemo } from \"react\";\r\nimport { itemGroupWiseStockValue } from \"./variable\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst ItemGroupWiseStockValue = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    defaultGrouping = \"\",\r\n    groupingOption = true,\r\n}) => {\r\n\r\n    const [reportData, setReportData] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState(defaultGrouping);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const [fetchFilters, setFetchFilters] = useState({\r\n        reqDate: ISOString(),\r\n    })\r\n\r\n    const propsColumns = itemGroupWiseStockValue.map((col, colInd) => ({\r\n        isVisible: colInd < 11 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1,\r\n        isEnabled: true,\r\n    }));\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `reports/itemGroup/stockInfo?\r\n            reqDate=${fetchFilters.reqDate}`,\r\n            loadingOn, loadingOff\r\n        }).then((data) => {\r\n            if (data.success) {\r\n                setReportData(toArray(data.data));\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n    }, [fetchFilters.reqDate, loadingOn, loadingOff]);\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...columns].sort((a, b) =>\r\n            a?.OrderBy && b?.OrderBy\r\n                ? a?.OrderBy - b?.OrderBy\r\n                : b?.OrderBy - a?.OrderBy\r\n        );\r\n    }, [columns]);\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedColumns.filter(\r\n            (col) =>\r\n                (isEqualNumber(col?.Defult_Display, 1) ||\r\n                    isEqualNumber(col?.isVisible, 1)) &&\r\n                col.isEnabled === true\r\n        );\r\n    }, [sortedColumns]);\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0;\r\n        const grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : reportData;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(\r\n            (fil) => filterableText(fil.Fied_Data) === \"number\"\r\n        ).map((col) => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map((grp) => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map((key) => [\r\n                        key,\r\n                        grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ),\r\n                    ])\r\n                ),\r\n            };\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered;\r\n    }, [filters, reportData, filteredData, groupBy, DisplayColumn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters((prevFilters) => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...reportData];\r\n        for (const column of sortedColumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === \"range\") {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter((item) => {\r\n                        const value = item[column.Field_Name];\r\n                        return (\r\n                            (min === undefined || value >= min) &&\r\n                            (max === undefined || value <= max)\r\n                        );\r\n                    });\r\n                } else if (filters[column.Field_Name].type === \"date\") {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter((item) => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (\r\n                            (start === undefined || dateValue >= new Date(start)) &&\r\n                            (end === undefined || dateValue <= new Date(end))\r\n                        );\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered =\r\n                        filters[column.Field_Name]?.length > 0\r\n                            ? filtered.filter((item) =>\r\n                                filters[column.Field_Name].includes(\r\n                                    item[column.Field_Name]?.toLowerCase().trim()\r\n                                )\r\n                            )\r\n                            : filtered;\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === \"number\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                min: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"range\",\r\n                                ...filters[Field_Name],\r\n                                max: e.target.value ? parseFloat(e.target.value) : undefined,\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"date\") {\r\n            return (\r\n                <div className=\"d-flex justify-content-between px-2\">\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    start: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? \"\"}\r\n                        onChange={(e) =>\r\n                            handleFilterChange(Field_Name, {\r\n                                type: \"date\",\r\n                                value: {\r\n                                    ...filters[Field_Name]?.value,\r\n                                    end: e.target.value || undefined,\r\n                                },\r\n                            })\r\n                        }\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === \"string\") {\r\n            const distinctValues = [\r\n                ...new Set(\r\n                    reportData.map((item) => item[Field_Name]?.toLowerCase()?.trim())\r\n                ),\r\n            ];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={(option) => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) =>\r\n                        handleFilterChange(Field_Name, newValue)\r\n                    }\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    };\r\n\r\n    const resetColumns = () => {\r\n        setColumns(propsColumns);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Item Wise\"\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title=\"Column Visibility\">\r\n                            <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Clear Filters\">\r\n                            <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton onClick={() => setFilterDialog(true)} size=\"small\">\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        {groupingOption && (\r\n                            <div className=\"d-flex align-items-center flex-wrap\">\r\n                                <span>Group-By: </span>\r\n                                <select\r\n                                    className=\"cus-inpt p-2 w-auto m-1\"\r\n                                    value={groupBy}\r\n                                    onChange={(e) => setGroupBy(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">select group</option>\r\n                                    {DisplayColumn.filter(\r\n                                        (fil) =>\r\n                                            filterableText(fil.Fied_Data) === \"string\" &&\r\n                                            fil?.Field_Name !== \"Ledger_Name\" &&\r\n                                            fil.isEnabled\r\n                                    ).map((col, colInd) => (\r\n                                        <option value={col?.Field_Name} key={colInd}>\r\n                                            {col?.Field_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                }\r\n                ExcelPrintOption\r\n                dataArray={showData}\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(\r\n                            (fil) =>\r\n                                showData.length > 0 &&\r\n                                Object.keys(showData[0]).includes(fil.Field_Name) &&\r\n                                fil.isEnabled\r\n                        ).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name,\r\n                        }))\r\n                        : DisplayColumn.filter((col) => col.isEnabled).map((col) => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name,\r\n                        }))\r\n                }\r\n                isExpendable={groupBy ? true : false}\r\n                expandableComp={({ row }) => (\r\n                    <FilterableTable\r\n                        EnableSerialNumber\r\n                        headerFontSizePx={12}\r\n                        bodyFontSizePx={12}\r\n                        dataArray={toArray(row?.groupedData)}\r\n                        columns={DisplayColumn.filter(\r\n                            (clm) => !stringCompare(clm.Field_Name, groupBy) && clm.isEnabled\r\n                        )}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <Dialog open={filterDialog} onClose={closeDialog} maxWidth=\"sm\" fullWidth>\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title=\"Column Visibility\">\r\n                                <IconButton size=\"small\" onClick={() => setDialog(true)}>\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Clear Filters\">\r\n                                <IconButton size=\"small\" onClick={() => setFilters({})}>\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n\r\n                    <div className=\"border rounded-3\">\r\n                        {DisplayColumn.filter((col) => col.isEnabled).map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className=\"mt-2 mb-1\">\r\n                                    {column?.Field_Name}\r\n                                </label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? \"bg-light\" : \"\"\r\n                                        } ${!o.isEnabled ? \"opacity-50\" : \"\"}`}\r\n                                >\r\n                                    <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isVisible) && o.isEnabled}\r\n                                            onChange={(e) =>\r\n                                                o.isEnabled &&\r\n                                                setColumns((prevColumns) =>\r\n                                                    prevColumns.map((oo) =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        // disabled={!o.isEnabled}\r\n                                        />\r\n                                        <h6 className=\"fa-13 mb-0 fw-bold\">\r\n                                            {o.Field_Name}\r\n                                            {!o.isEnabled && (\r\n                                                <span className=\"text-muted small\"></span>\r\n                                            )}\r\n                                        </h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : \"\"}\r\n                                        onChange={(e) =>\r\n                                            o.isEnabled &&\r\n                                            setColumns((prevColumns) =>\r\n                                                prevColumns.map((oo) =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        disabled={!o.isEnabled}\r\n                                        className=\"mt-2 p-1 border-0 cus-inpt\"\r\n                                        style={{ width: \"80px\" }}\r\n                                        placeholder=\"Order\"\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetColumns} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialog(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ItemGroupWiseStockValue;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2m-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckBox');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41z\"\n}), 'FilterAltOff');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2\"\n}), 'CheckBoxOutlineBlank');","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);\nexport default checkboxClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n  const {\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon: iconProp = defaultIcon,\n      indeterminate = false,\n      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n      inputProps,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","export const storageStockColumnsForItemWise = [\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n];\r\n\r\nexport const storageStockColumnsForGodownWise = [\r\n    // { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    { Column_Name: 'Godown_Name', Data_Type: 'string' },\r\n    { Column_Name: 'stock_item_name', Data_Type: 'string' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Act_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Stock_Item', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Bag', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Product_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Item_Name_Modified', Data_Type: 'string' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n]\r\n\r\nexport const itemGroupWiseStockValue = [\r\n    { Column_Name: 'Group_Name', Data_Type: 'string' },\r\n    { Column_Name: 'Brand', Data_Type: 'string' },\r\n    { Column_Name: 'Group_ST', Data_Type: 'string' },\r\n    { Column_Name: 'Stock_Group', Data_Type: 'string' },\r\n    { Column_Name: 'S_Sub_Group_1', Data_Type: 'string' },\r\n    { Column_Name: 'Grade_Item_Group', Data_Type: 'string' },\r\n    { Column_Name: 'Trans_Date', Data_Type: 'date' },\r\n    \r\n    { Column_Name: 'OB_Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'OB_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Pur_value', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'IN_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Adj_Sal_value', Data_Type: 'number' },\r\n    { Column_Name: 'OUT_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Out_Value', Data_Type: 'number' },\r\n    { Column_Name: 'Expense_value', Data_Type: 'number' },\r\n    { Column_Name: 'Act_Expense', Data_Type: 'number' },\r\n    { Column_Name: 'Bal_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'CL_Value', Data_Type: 'number' },\r\n    { Column_Name: 'CR_CL_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Qty', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_Rate', Data_Type: 'number' },\r\n    { Column_Name: 'Pre_CL_Value', Data_Type: 'number' },\r\n]"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","loadingOn","loadingOff","defaultGrouping","groupingOption","reportData","setReportData","useState","filters","setFilters","groupBy","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","fetchFilters","setFetchFilters","reqDate","ISOString","propsColumns","itemGroupWiseStockValue","map","col","colInd","isVisible","Field_Name","Column_Name","Fied_Data","Data_Type","OrderBy","isEnabled","columns","setColumns","useEffect","fetchLink","address","concat","then","data","success","toArray","catch","e","console","error","sortedColumns","useMemo","sort","a","b","DisplayColumn","filter","isEqualNumber","Defult_Display","showData","Object","keys","length","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_objectSpread","fromEntries","key","_grp$groupedData","groupedData","reduce","acc","colmn","Addition","toNumber","applyFilters","handleFilterChange","column","value","prevFilters","type","min","max","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","_item$column$Field_Na","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","closeDialog","_Fragment","FilterableTable","title","EnableSerialNumber","headerFontSizePx","bodyFontSizePx","maxHeightOption","ButtonArea","Tooltip","IconButton","size","onClick","Settings","FilterAltOff","FilterAlt","ExcelPrintOption","dataArray","ColumnHeader","isExpendable","expandableComp","_ref3","row","clm","stringCompare","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","ke","DialogActions","Button","color","DialogTitle","o","i","Card","component","Paper","Switch","Boolean","prevColumns","oo","checkIsNumber","disabled","width","resetColumns","variant","createSvgIcon","d","preprocessDataForExport","flattenedRow","forEach","index","isCustomCell","Cell","cellContent","safeColumnHeader","String","replace","createCol","field","arguments","align","verticalAlign","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","ListItemIcon","ListItemText","name","formatString","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","MenuButtons","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","entries","_ref4","log","colSpan","Number","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","from","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","getCheckboxUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CheckboxRoot","styled","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","indeterminate","capitalize","theme","_extends","vars","palette","text","secondary","disableRipple","action","activeChannel","mainChannel","hoverOpacity","alpha","main","checkboxClasses","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","React","inProps","ref","_icon$props$fontSize","_indeterminateIcon$pr","useDefaultProps","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","other","_objectWithoutPropertiesLoose","classes","slots","composedClasses","composeClasses","useUtilityClasses","clsx","storageStockColumnsForItemWise","storageStockColumnsForGodownWise"],"sourceRoot":""}