{"version":3,"file":"static/js/592.80dd1e73.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/DataSetDisplay.jsx","Components/filterableTable2.jsx"],"sourcesContent":["import React from 'react';\r\nimport { checkIsNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Paper, Box, Card, Switch } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, Settings } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport FilterableTable from '../../../Components/filterableTable2';\r\n\r\nconst csvConfig = mkConfig({\r\n    fieldSeparator: ',',\r\n    decimalSeparator: '.',\r\n    useKeysAsHeaders: true,\r\n});\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst DisplayArrayData = ({ \r\n    dataArray = [], \r\n    columns = [], \r\n    ExpandableComp, \r\n    enableFilters = false,\r\n    ExportAllData = false,\r\n\r\n}) => {\r\n    const [dispColmn, setDispColmn] = useState([]);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        columnSettings: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        const colWithDataTypes = columns.map((keys, index) => ({\r\n            Field_Name: keys?.Column_Name,\r\n            Fied_Data: keys?.Data_Type,\r\n            isVisible: index <= 7 ? 1 : 0,\r\n            align: 'center',\r\n            OrderBy: index + 1\r\n        }))\r\n        setDispColmn(colWithDataTypes);\r\n    }, [columns])\r\n\r\n    const sortedColumns = useMemo(() => {\r\n        return [...dispColmn].sort((a, b) => a.OrderBy - b.OrderBy);\r\n    }, [dispColmn]);\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of dispColmn) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name].toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(showData.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    gap: '16px',\r\n                    padding: '8px',\r\n                    flexWrap: 'wrap',\r\n                }}\r\n            >\r\n                <Button\r\n                    onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                    className={enableFilters ? \"d-md-none d-inline\" : 'd-none'}\r\n                    startIcon={<FilterAlt />}\r\n                >\r\n                    Filters\r\n                </Button>\r\n            </Box>\r\n\r\n            <div className=\"row \">\r\n\r\n                <div className={enableFilters ? \"col-xxl-10 col-lg-9 col-md-8\" : ''}>\r\n                    <div className=\"p-2\">\r\n                        <FilterableTable\r\n                            dataArray={showData}\r\n                            columns={sortedColumns}\r\n                            isExpendable={ExpandableComp ? true : false}\r\n                            expandableComp={ExpandableComp ? ExpandableComp : undefined}\r\n                            tableMaxHeight={650}\r\n                            ExcelPrintOption\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {enableFilters && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 d-none d-md-block\">\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, columnSettings: true }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                        <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                            {dispColmn.map((column, ke) => (\r\n                                <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                    <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                    {renderFilter(column)}\r\n                                </div>\r\n                            ))}\r\n                            <br />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <span>\r\n                        <h5 className=\"d-flex justify-content-between px-2\">\r\n                            <span>Filters</span>\r\n                            <span>\r\n                                <Tooltip title='Column Visiblity'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                                    >\r\n                                        <Settings />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Clear Filters'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({})}\r\n                                    >\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </span>\r\n                        </h5>\r\n                    </span>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {dispColmn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.columnSettings}\r\n                onClose={() => setDialogs(pre => ({ ...pre, columnSettings: false }))}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => {\r\n\r\n                            const displayedColumn = dispColmn.find(oo => oo.Field_Name === o?.Column_Name)\r\n\r\n                            return (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                    <Card\r\n                                        component={Paper}\r\n                                        className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                    >\r\n                                        <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                            <Switch\r\n                                                checked={Boolean(displayedColumn?.isVisible)}\r\n                                                onChange={e =>\r\n                                                    setDispColmn(prevColumns =>\r\n                                                        prevColumns.map(oo =>\r\n                                                            oo.Field_Name === o?.Column_Name\r\n                                                                ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                                : oo\r\n                                                        )\r\n                                                    )}\r\n                                            />\r\n\r\n                                            <h6 className='fa-13 mb-0 fw-bold '>{o?.Column_Name}</h6>\r\n                                        </div>\r\n                                        <input\r\n                                            type='number'\r\n                                            value={checkIsNumber(displayedColumn?.OrderBy) ? displayedColumn?.OrderBy : ''}\r\n                                            onChange={e =>\r\n                                                setDispColmn(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === displayedColumn?.Field_Name\r\n                                                            ? { ...oo, OrderBy: e.target.value }\r\n                                                            : oo\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            label={'Order Value'}\r\n                                            className='mt-2 p-1 border-0 cus-inpt'\r\n                                            style={{ width: '80px' }}\r\n                                            placeholder='Order'\r\n                                        />\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {/* <Button onClick={() => setColumns(columnsInitialValue)} variant=\"outlined\">Reset</Button> */}\r\n                    <Button onClick={() => setDialogs(pre => ({ ...pre, columnSettings: false }))} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayArrayData;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}"],"names":["mkConfig","fieldSeparator","decimalSeparator","useKeysAsHeaders","icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","dataArray","columns","ExpandableComp","enableFilters","ExportAllData","dispColmn","setDispColmn","useState","filters","setFilters","filteredData","setFilteredData","showData","Object","keys","length","dialogs","setDialogs","columnSettings","useEffect","colWithDataTypes","map","index","Field_Name","Column_Name","Fied_Data","Data_Type","isVisible","align","OrderBy","sortedColumns","useMemo","sort","a","b","applyFilters","handleFilterChange","column","value","prevFilters","_objectSpread","filtered","type","min","max","filter","item","undefined","start","end","dateValue","Date","Array","isArray","_filters$column$Field","includes","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","className","children","placeholder","onChange","e","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","concat","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref2","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","_Fragment","Box","sx","display","gap","padding","flexWrap","Button","onClick","pre","startIcon","FilterAlt","FilterableTable","isExpendable","expandableComp","tableMaxHeight","ExcelPrintOption","Tooltip","title","IconButton","size","Settings","FilterAltOff","maxHeight","overflow","ke","_column$Field_Name","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","_column$Field_Name2","DialogActions","o","i","displayedColumn","find","oo","Card","component","Paper","Switch","Boolean","prevColumns","checkIsNumber","width","color","preprocessDataForExport","data","row","flattenedRow","forEach","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","key","createCol","field","arguments","verticalAlign","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","ListItemText","name","formatString","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","Fragment","TableRow","TableCell","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","verticalAlignClass","foundEntry","entries","_ref4","console","log","colSpan","Number","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","Sno","autoTable","head","body","save","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","Table","stickyHeader","TableHead","backgroundColor","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_columnAlign$find3","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","from","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}