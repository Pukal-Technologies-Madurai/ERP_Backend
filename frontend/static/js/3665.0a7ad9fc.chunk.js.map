{"version":3,"file":"static/js/3665.0a7ad9fc.chunk.js","mappings":"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","sources":["Pages/Authorization/newMenuManagement.jsx","Components/requiredStar.jsx","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { isEqualNumber, isValidObject } from '../../Components/functions';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip } from \"@mui/material\";\r\nimport { Add, Edit } from \"@mui/icons-material\";\r\nimport { toast } from \"react-toastify\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\n\r\nconst initialValue = {\r\n    id: '',\r\n    name: '',\r\n    menu_type: 1,\r\n    parent_id: '',\r\n    url: '',\r\n    display_order: 1,\r\n    is_active: 1,\r\n    parantDetails: {},\r\n}\r\n\r\nconst MenuManagement = ({ loadingOn, loadingOff }) => {\r\n    const [inputValues, setInputValues] = useState(initialValue);\r\n    const [reload, setReload] = useState(false);\r\n    const [menuData, setMenuData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `authorization/menuMaster`,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setMenuData(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload]);\r\n\r\n    const DisplaySubRoutings = ({ dataSource }) => (\r\n        <FilterableTable\r\n            dataArray={dataSource?.SubRoutes ?? []}\r\n            title='Sub Routes'\r\n            columns={[\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'name',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Menu',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'url',\r\n                    Fied_Data: 'string',\r\n                    ColumnHeader: 'Address',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <Tooltip title='Add SubRouting'>\r\n                            <span>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    className=\"bg-light\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            menu_type: 0,\r\n                                            parent_id: row.id,\r\n                                            parantDetails: row,\r\n                                            url: (row?.url ?? '') + '/'\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                    startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                >\r\n                                    {row?.SubRoutes?.length ?? 0}\r\n                                </Button>\r\n                            </span>\r\n                        </Tooltip>\r\n                    ),\r\n                    ColumnHeader: 'Sub Routings',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    Field_Name: 'display_order',\r\n                    Fied_Data: 'number',\r\n                    ColumnHeader: 'Order',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        isEqualNumber(row?.is_active, 1) ? (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                        ) : (\r\n                            <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                        )\r\n                    ),\r\n                    ColumnHeader: 'Status',\r\n                },\r\n                {\r\n                    isVisible: 1,\r\n                    isCustomCell: true,\r\n                    Cell: ({ row }) => (\r\n                        <>\r\n                            <Tooltip title='Edit Menu'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"p-1\"\r\n                                    onClick={() => {\r\n                                        setInputValues(pre => ({\r\n                                            ...pre,\r\n                                            id: row?.id,\r\n                                            name: row?.name ?? '',\r\n                                            menu_type: 0,\r\n                                            parent_id: row?.parent_id ?? '',\r\n                                            url: row?.url ?? '',\r\n                                            display_order: row?.display_order ?? '',\r\n                                            is_active: row?.is_active ?? '',\r\n                                        }));\r\n                                        setDialog(true);\r\n                                    }}\r\n                                >\r\n                                    <Edit sx={{ fontSize: '18px' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </>\r\n                    ),\r\n                    ColumnHeader: 'Action',\r\n                }\r\n            ]}\r\n            tableMaxHeight={700}\r\n            isExpendable={true}\r\n            expandableComp={({ row }) => (row?.SubRoutes?.length > 0) && <DisplaySubRoutings dataSource={row} />}\r\n        />\r\n    )\r\n\r\n    const DisplayChildMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row?.ChildMenu?.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.ChildMenu ?? []}\r\n                        title='Child Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => row?.SubRoutes?.length > 0 && <DisplaySubRoutings dataSource={row} />}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const DisplaySubMenu = ({ row }) => {\r\n\r\n        return (\r\n            <>\r\n                {row.SubMenu.length > 0 && (\r\n                    <FilterableTable\r\n                        dataArray={row?.SubMenu ?? []}\r\n                        title='Sub Menus'\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'name',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Sub Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'url',\r\n                                Fied_Data: 'string',\r\n                                ColumnHeader: 'Address',\r\n                            },\r\n\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add Child-Menu'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 3,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.ChildMenu?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Child Menu',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <Tooltip title='Add SubRouting'>\r\n                                        <span>\r\n                                            <Button\r\n                                                size=\"small\"\r\n                                                className=\"bg-light\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        menu_type: 0,\r\n                                                        parent_id: row.id,\r\n                                                        parantDetails: row,\r\n                                                        url: (row?.ParantData?.url ? (row?.ParantData?.url + '/') : '') + (row?.url ?? '') + '/'\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                                startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                            >\r\n                                                {row?.SubRoutes?.length ?? 0}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                ),\r\n                                ColumnHeader: 'Sub Routings',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                Field_Name: 'display_order',\r\n                                Fied_Data: 'number',\r\n                                ColumnHeader: 'Order',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    isEqualNumber(row?.is_active, 1) ? (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                                    ) : (\r\n                                        <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                                    )\r\n                                ),\r\n                                ColumnHeader: 'Status',\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <>\r\n                                        <Tooltip title='Edit Menu'>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                className=\"p-1\"\r\n                                                onClick={() => {\r\n                                                    setInputValues(pre => ({\r\n                                                        ...pre,\r\n                                                        id: row?.id,\r\n                                                        name: row?.name ?? '',\r\n                                                        menu_type: 2,\r\n                                                        parent_id: row?.parent_id ?? '',\r\n                                                        url: row?.url ?? '',\r\n                                                        display_order: row?.display_order ?? '',\r\n                                                        is_active: row?.is_active ?? '',\r\n                                                    }));\r\n                                                    setDialog(true);\r\n                                                }}\r\n                                            >\r\n                                                <Edit sx={{ fontSize: '18px' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                ),\r\n                                ColumnHeader: 'Action',\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={700}\r\n                        isExpendable={true}\r\n                        expandableComp={({ row }) => (row?.ChildMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplayChildMenu row={row} />}\r\n                    />\r\n                )}\r\n\r\n                {row.SubRoutes.length > 0 && (\r\n                    <>\r\n                        <br />\r\n                        <DisplaySubRoutings dataSource={row} />\r\n                    </>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setInputValues(initialValue);\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n        fetchLink({\r\n            address: 'authorization/menuMaster',\r\n            method: inputValues.id ? 'PUT' : 'POST',\r\n            bodyData: inputValues\r\n        }).then(data => {\r\n            if (data.success) {\r\n                toast.success(data.message);\r\n                closeDialog();\r\n                setReload(pre => !pre);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {/* <div className=\"d-flex justify-content-end pb-2\">\r\n\r\n            </div> */}\r\n\r\n            <FilterableTable\r\n                title=\"Main Menu\"\r\n                ButtonArea={\r\n                    <Button\r\n                        onClick={() => {\r\n                            setDialog(true);\r\n                            setInputValues(initialValue);\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        startIcon={<Add />}\r\n                    >\r\n                        New Menu\r\n                    </Button>\r\n                }\r\n                dataArray={menuData}\r\n                columns={[\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'name',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Main Menu',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'url',\r\n                        Fied_Data: 'string',\r\n                        ColumnHeader: 'Address',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add Sub-Menu'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 2,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubMenu?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Menu',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <Tooltip title='Add SubRouting'>\r\n                                <span>\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        className=\"bg-light\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                menu_type: 0,\r\n                                                parent_id: row.id,\r\n                                                parantDetails: row,\r\n                                                url: (row?.url ?? '') + '/'\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                        startIcon={<Add sx={{ fontSize: '18px' }} />}\r\n                                    >\r\n                                        {row?.SubRoutes?.length ?? 0}\r\n                                    </Button>\r\n                                </span>\r\n                            </Tooltip>\r\n                        ),\r\n                        ColumnHeader: 'Sub Routings',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        Field_Name: 'display_order',\r\n                        Fied_Data: 'number',\r\n                        ColumnHeader: 'Order',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            isEqualNumber(row?.is_active, 1) ? (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-success\">Active</span>\r\n                            ) : (\r\n                                <span className=\"px-3 py-1 rounded-3 text-white bg-danger\">Disabled</span>\r\n                            )\r\n                        ),\r\n                        ColumnHeader: 'Status',\r\n                    },\r\n                    {\r\n                        isVisible: 1,\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <>\r\n                                <Tooltip title='Edit Menu'>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        className=\"p-1\"\r\n                                        onClick={() => {\r\n                                            setInputValues(pre => ({\r\n                                                ...pre,\r\n                                                id: row?.id,\r\n                                                name: row?.name ?? '',\r\n                                                menu_type: 1,\r\n                                                parent_id: row?.parent_id ?? '',\r\n                                                url: row?.url ?? '',\r\n                                                display_order: row?.display_order ?? '',\r\n                                                is_active: row?.is_active ?? '',\r\n                                            }));\r\n                                            setDialog(true);\r\n                                        }}\r\n                                    >\r\n                                        <Edit sx={{ fontSize: '18px' }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n\r\n\r\n                            </>\r\n                        ),\r\n                        ColumnHeader: 'Action',\r\n                    }\r\n                ]}\r\n                tableMaxHeight={700}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (row?.SubMenu?.length > 0 || row?.SubRoutes?.length > 0) && <DisplaySubMenu row={row} />}\r\n            />\r\n\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogTitle>\r\n                    {inputValues.id ? 'Modify ' : 'Add '}\r\n                    {(() => {\r\n                        switch (inputValues.menu_type) {\r\n                            case 0:\r\n                                return 'SUB ROUTING'\r\n                            case 1:\r\n                                return 'MAIN MENU'\r\n                            case 2:\r\n                                return 'SUB MENU'\r\n                            case 3:\r\n                                return 'CHILD MENU'\r\n                            default:\r\n                                return ''\r\n                        }\r\n                    })()}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    saveData();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            {(isValidObject(inputValues.parantDetails) && inputValues.parantDetails.name) && (\r\n                                <div className=\"col-lg-12 p-2\">\r\n                                    <label>Parant Name </label>\r\n                                    <input\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues?.parantDetails?.name}\r\n                                        disabled\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Name <RequiredStar /></label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.name}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, name: e.target.value }))}\r\n                                    required\r\n                                    minLength={3}\r\n                                    maxLength={20}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-6 p-2\">\r\n                                <label>Order No</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.display_order}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, display_order: e.target.value }))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-lg-12 p-2\">\r\n                                <label>URL (Link)</label>\r\n                                <input\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValues.url}\r\n                                    onChange={e => setInputValues(pre => ({ ...pre, url: e.target.value }))}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValues.id && (\r\n                                <div className=\"col-lg-6 p-2\">\r\n                                    <label>Is Active</label>\r\n                                    <select\r\n                                        className=\"cus-inpt\"\r\n                                        value={inputValues.is_active}\r\n                                        onChange={e => setInputValues(pre => ({ ...pre, is_active: e.target.value }))}\r\n                                    >\r\n                                        <option value='' disabled>select</option>\r\n                                        <option value='1'>Active</option>\r\n                                        <option value='0'>Disable</option>\r\n                                    </select>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={closeDialog}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default MenuManagement","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["initialValue","id","name","menu_type","parent_id","url","display_order","is_active","parantDetails","_ref","_inputValues$parantDe","loadingOn","loadingOff","inputValues","setInputValues","useState","reload","setReload","menuData","setMenuData","dialog","setDialog","useEffect","fetchLink","address","then","data","success","catch","e","console","error","DisplaySubRoutings","_ref2","_dataSource$SubRoutes","dataSource","_jsx","FilterableTable","dataArray","SubRoutes","title","columns","isVisible","Field_Name","Fied_Data","ColumnHeader","isCustomCell","Cell","_ref3","_row$SubRoutes$length","_row$SubRoutes","row","Tooltip","children","Button","size","className","onClick","pre","_row$url","_objectSpread","startIcon","Add","sx","fontSize","length","_ref4","isEqualNumber","_ref5","_Fragment","IconButton","_row$name","_row$parent_id","_row$url2","_row$display_order","_row$is_active","Edit","tableMaxHeight","isExpendable","expandableComp","_ref6","_row$SubRoutes2","DisplayChildMenu","_ref7","_row$ChildMenu","_row$ChildMenu2","_jsxs","ChildMenu","_ref8","_row$SubRoutes$length2","_row$SubRoutes3","_row$ParantData","_row$ParantData2","_row$url3","ParantData","_ref9","_ref10","_row$name2","_row$parent_id2","_row$url4","_row$display_order2","_row$is_active2","_ref11","_row$SubRoutes4","DisplaySubMenu","_ref12","_row$SubMenu","SubMenu","_ref13","_row$ChildMenu$length","_row$ChildMenu3","_row$ParantData3","_row$ParantData4","_row$url5","_ref14","_row$SubRoutes$length3","_row$SubRoutes5","_row$ParantData5","_row$ParantData6","_row$url6","_ref15","_ref16","_row$name3","_row$parent_id3","_row$url7","_row$display_order3","_row$is_active3","_ref17","_row$ChildMenu4","_row$SubRoutes6","closeDialog","ButtonArea","variant","_ref18","_row$SubMenu$length","_row$SubMenu2","_row$url8","align","_ref19","_row$SubRoutes$length4","_row$SubRoutes7","_row$url9","_ref20","_ref21","_row$name4","_row$parent_id4","_row$url10","_row$display_order4","_row$is_active4","_ref22","_row$SubMenu3","_row$SubRoutes8","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","onSubmit","preventDefault","method","bodyData","toast","message","finally","DialogContent","isValidObject","value","disabled","RequiredStar","onChange","target","required","minLength","maxLength","DialogActions","type","style","color","fontWeight","preprocessDataForExport","map","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","String","replace","toLowerCase","concat","key","createCol","field","arguments","undefined","verticalAlign","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","Fragment","TableRow","TableCell","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","log","colSpan","Number","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","createSvgIcon","d"],"sourceRoot":""}