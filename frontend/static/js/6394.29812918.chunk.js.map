{"version":3,"file":"static/js/6394.29812918.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/icons-material/esm/FiberManualRecord.js","../node_modules/@mui/icons-material/esm/AccessTime.js","../node_modules/@mui/icons-material/esm/SmsOutlined.js","Pages/Reports/workDocument.jsx","Components/filterableTable2.jsx","Components/tablecolumn.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/system/esm/createBox.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"8\"\n}), 'FiberManualRecord');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'AccessTime');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m0 14H5.17L4 17.17V4h16zM7 9h2v2H7zm8 0h2v2h-2zm-4 0h2v2h-2z\"\n}), 'SmsOutlined');","// import React, { useEffect, useState, useContext, useRef } from \"react\";\r\n// import { Card, CardHeader, CardContent, Paper } from '@mui/material';\r\n// import { MyContext } from \"../../Components/context/contextProvider\";\r\n// import Select from 'react-select';\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { AccessTime, FiberManualRecord, SmsOutlined } from '@mui/icons-material';\r\n// import { useReactToPrint } from 'react-to-print';\r\n// import { fetchLink } from \"../../Components/fetchComponent\";\r\n// import { getPreviousDate, ISOString, LocalDate } from \"../../Components/functions\";\r\n\r\n// const EmployeeDayAbstract = ({ loadingOn, loadingOff }) => {\r\n//     const localData = localStorage.getItem(\"user\");\r\n//     const parseData = JSON.parse(localData);\r\n//     const [workedDetails, setWorkedDetails] = useState([]);\r\n//     const [users, setUsers] = useState([]);\r\n//     const [tasks, setTasks] = useState([]);\r\n//     const [process,setProcess]=useState([])\r\n\r\n//     const { contextObj } = useContext(MyContext);\r\n//     const [filter, setFilter] = useState({\r\n//         startDate: getPreviousDate(1),\r\n//         endDate: ISOString(),\r\n//         Emp_Id: parseData?.UserId,\r\n//         Emp_Name: parseData?.Name,\r\n//         Task_Id: '',\r\n//         Task_Name: 'Select Task',\r\n//         Id:'',\r\n//         Process_Name:'Select Process'\r\n//     });\r\n//     const printRef = useRef()\r\n\r\n//     useEffect(() => {\r\n//         if (loadingOn) {\r\n//             loadingOn();\r\n//         }\r\n//         fetchLink({\r\n//             address: `taskManagement/task/work?Emp_Id=${filter?.Emp_Id}&from=${filter.startDate}&to=${filter.endDate}&Task_Id=${filter?.Task_Id}&Process_Id=${filter?.Id}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 const groupedData = data?.data?.reduce((acc, current) => {\r\n//                     const workDate = ISOString(current?.Work_Dt);\r\n//                     if (!acc[workDate]) {\r\n//                         acc[workDate] = [];\r\n//                     }\r\n//                     acc[workDate].push(current);\r\n//                     return acc;\r\n//                 }, {});\r\n//                 setWorkedDetails(groupedData)\r\n//             }\r\n//         }).catch(e => console.error(e)).finally(() => {\r\n//             if (loadingOff) {\r\n//                 loadingOff();\r\n//             }\r\n//         })\r\n//     }, [parseData?.UserId, filter])\r\n\r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/task/assignEmployee/task/dropDown`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setTasks(data.data)\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n//     }, [])\r\n\r\n\r\n\r\n//     useEffect(()=>{\r\n//         fetchLink({\r\n//             address:`masters/processMaster`\r\n//         }).then(data=>{\r\n//             if(data.success){\r\n//                 setProcess(data.data)\r\n//             }\r\n//         }).catch(e=>console.error(e))\r\n//     },[])\r\n//     useEffect(() => {\r\n//         if (Number(contextObj?.Print_Rights) === 1) {\r\n//             fetchLink({\r\n//                 address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n//             }).then(data => {\r\n//                 if (data.success) {\r\n//                     setUsers(data?.data?.sort((a, b) => String(a?.Name).localeCompare(b?.Name)))\r\n//                 }\r\n//             }).catch(e => console.error(e))\r\n//         }\r\n//     }, [contextObj?.Print_Rights, parseData?.Company_id])\r\n\r\n//     const formatTime24 = (time24) => {\r\n//         const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n//         let hours12 = hours % 12;\r\n//         hours12 = hours12 || 12;\r\n//         const period = hours < 12 ? 'AM' : 'PM';\r\n//         const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n//         const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n//         const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n//         return time12;\r\n//     }\r\n\r\n//     const handlePrint = useReactToPrint({\r\n//         content: () => printRef.current,\r\n//     });\r\n\r\n//     const getColor = (status) => {\r\n//         const numStatus = Number(status);\r\n//         const color = ['', 'bg-primary', 'bg-warning', 'bg-success', 'bg-danger']\r\n\r\n//         return color[numStatus]\r\n//     }\r\n\r\n//     const CardAndTableComp = () => {\r\n//         return (\r\n//             <div className=\"px-2\">\r\n//                 {Object.keys(workedDetails).map(workDate => (\r\n//                     <div key={workDate} className=\"cus-card pb-0\">\r\n//                         <h6 className=\"p-3 mb-0 bg-light\">\r\n//                             Date:\r\n//                             {LocalDate(workDate)}\r\n//                             {\" ( \" + workedDetails[workDate]?.length + \" Tasks )\"}\r\n//                         </h6>\r\n\r\n//                         <hr className=\"m-0\" />\r\n\r\n//                         <div className=\"table-responsive day-abstract-table\">\r\n//                             <table className=\"table\">\r\n//                                 <tbody>\r\n//                                     {workedDetails[workDate].map((taskDetail, oi) => (\r\n//                                         <tr key={oi}>\r\n\r\n//                                             <td style={{ verticalAlign: 'middle' }}><FiberManualRecord className='fa-in text-primary' /> {taskDetail.Task_Name}</td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}><AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes</td>\r\n//                                             <td className=\"fa-14 \" style={{ verticalAlign: 'middle' }}>\r\n//                                                 {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n//                                                     {taskDetail?.WorkStatus}\r\n//                                                 </span>\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 <p className=\"mb-0 fa-14 text-muted\">\r\n//                                                     <SmsOutlined className=\"fa-in\" />\r\n//                                                     <span>&emsp;{taskDetail.Work_Done}</span>\r\n//                                                 </p>\r\n//                                             </td>\r\n//                                             <td style={{ verticalAlign: 'middle' }}>\r\n//                                                 {taskDetail?.Work_Param?.length > 0 && (\r\n//                                                     <div className=\"cus-card p-2 m-0\">\r\n//                                                         {taskDetail?.Work_Param?.map((o, i) => (\r\n//                                                             <p className=\"mb-0 fa-14 d-flex\" key={i}>\r\n//                                                                 <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n//                                                                 <span className=\"text-primary\">\r\n//                                                                     {\r\n//                                                                         (isNaN(o?.Current_Value) || (o?.Paramet_Data_Type) !== 'number')\r\n//                                                                             ? o?.Current_Value\r\n//                                                                             : Number(o?.Current_Value).toLocaleString('en-IN')\r\n//                                                                     }\r\n//                                                                 </span>\r\n//                                                             </p>\r\n//                                                         ))}\r\n//                                                     </div>\r\n//                                                 )}\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     ))}\r\n//                                 </tbody>\r\n//                             </table>\r\n//                         </div>\r\n\r\n//                         <div className=\"row mb-2 px-3 day-abstract-card d-none\">\r\n\r\n//                             {workedDetails[workDate].map(taskDetail => (\r\n\r\n//                                 <div key={taskDetail.Work_Id} className=\"col-xl-3 col-lg-4 col-md-6 p-2 py-0\">\r\n//                                     <div className=\"cus-card shadow-sm p-3\">\r\n\r\n//                                         <p className=\"mb-2 fa-15 fw-bold text-secondary\">\r\n//                                             {taskDetail.Task_Name + \" \"}\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-2 fa-14 text-secondary\">\r\n//                                             {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n//                                             <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n//                                                 {taskDetail?.WorkStatus}\r\n//                                             </span>\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-2 fa-14 text-secondary\">\r\n//                                             <AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes\r\n//                                         </p>\r\n\r\n//                                         <p className=\"mb-0 fa-14 text-muted\">\r\n//                                             <span className=\"fw-bold\">Summary : </span><br />\r\n//                                             <span>&emsp;{taskDetail.Work_Done}</span>\r\n//                                         </p>\r\n\r\n//                                         {taskDetail?.Work_Param?.length > 0 && (\r\n//                                             <p className=\"mb-1 text-secondary fa-14 fw-bold\">Parameters ( {taskDetail?.Work_Param?.length} )</p>\r\n//                                         )}\r\n\r\n//                                         {taskDetail?.Work_Param?.length > 0 && <hr className=\"m-0\" />}\r\n\r\n//                                         {taskDetail?.Work_Param?.map((o, i) => (\r\n//                                             <p className=\"mb-0 fa-14 d-flex flex-wrap\" key={i}>\r\n//                                                 <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n//                                                 <span> {o?.Current_Value}</span>\r\n//                                             </p>\r\n//                                         ))}\r\n\r\n//                                     </div>\r\n//                                 </div>\r\n//                             ))}\r\n//                         </div>\r\n\r\n//                     </div>\r\n//                 ))}\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <Card component={Paper} variant='elevation'>\r\n//                 <CardHeader title='Work Abstract' className=\"pb-0\" />\r\n\r\n//                 <CardContent className=\"pt-2\" style={{ minHeight: '500px' }}>\r\n\r\n//                     <div className=\"row\">\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">From: </label>\r\n//                             <input\r\n//                                 type=\"date\"\r\n//                                 className=\"cus-inpt\"\r\n//                                 value={filter.startDate}\r\n//                                 onChange={e => setFilter({ ...filter, startDate: e.target.value })}\r\n//                             />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">To: </label>\r\n//                             <input\r\n//                                 type=\"date\"\r\n//                                 className=\"cus-inpt\"\r\n//                                 value={filter.endDate}\r\n//                                 onChange={e => setFilter({ ...filter, endDate: e.target.value })}\r\n//                             />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">User </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Emp_Id, label: filter?.Emp_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Emp_Id: e.value, Emp_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: parseData?.UserId, label: parseData?.Name },\r\n//                                     { value: '', label: \"ALL EMPLOYEE\" },\r\n//                                     ...users.map(obj => ({ value: obj.UserId, label: obj.Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isDisabled={Number(contextObj?.Print_Rights) === 0}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"User Name\"} />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Task </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Task_Id, label: filter?.Task_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Task_Id: e.value, Task_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Task' },\r\n//                                     ...tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Process </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Id, label: filter?.Process_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Id: e.value, Process_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Process' },\r\n//                                     ...process.map(obj => ({ value: obj.Id, label: obj.Process_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 p-2\">\r\n//                             <label className=\"pb-2\">Project </label>\r\n//                             <Select\r\n//                                 value={{ value: filter?.Id, label: filter?.Process_Name }}\r\n//                                 onChange={(e) => setFilter({ ...filter, Id: e.value, Process_Name: e.label })}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Process' },\r\n//                                     ...process.map(obj => ({ value: obj.Id, label: obj.Process_Name }))\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder={\"Task Name\"} />\r\n//                         </div>\r\n\r\n//                         <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-6 d-flex align-items-end p-2\">\r\n//                             <button className=\"btn btn-primary rounded-5 px-3\" onClick={handlePrint}>Print PDF</button>\r\n//                         </div>\r\n\r\n//                     </div>\r\n\r\n//                     <CardAndTableComp />\r\n\r\n//                     <div className=\"d-none px-3\">\r\n//                         <div className=\"px-3\" ref={printRef}>\r\n//                             <h5>Work Abstract Of {filter.Emp_Name} </h5>\r\n//                             <p className=\"mb-0\">\r\n//                                 From {LocalDate(filter.startDate)}\r\n//                                 &nbsp; - To: {LocalDate(filter.endDate)}\r\n//                             </p>\r\n//                             <CardAndTableComp />\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardContent>\r\n//             </Card>\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default EmployeeDayAbstract;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport {  ChatBubbleOutline } from \"@mui/icons-material\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  Modal,\r\n  Box,\r\n  Typography,\r\n  IconButton\r\n} from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { getPreviousDate, ISOString, LocalDate } from \"../../Components/functions\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { AccessTime, FiberManualRecord, SmsOutlined } from '@mui/icons-material';\r\n\r\nconst EmployeeDayAbstract = ({ loadingOn, loadingOff }) => {\r\n  const localData = localStorage.getItem(\"user\");\r\n  const parseData = JSON.parse(localData);\r\n  const { contextObj } = useContext(MyContext);\r\n  const printRef = useRef();\r\n\r\n  const initialFilter = {\r\n    startDate: getPreviousDate(1),\r\n    endDate: ISOString(),\r\n    Emp_Id: parseData?.UserId,\r\n    Emp_Name: parseData?.Name,\r\n    Task_Id: \"\",\r\n    Task_Name: \"Select Task\",\r\n    Id: \"\",\r\n    Process_Name: \"Select Process\",\r\n    Project_Id: \"\",\r\n    Project_Name: \"Select Project\",\r\n  };\r\n\r\n  const [workedDetails, setWorkedDetails] = useState({});\r\n  const [users, setUsers] = useState([]);\r\n  const [allTasks, setAllTasks] = useState([]); // store all tasks\r\n  const [tasks, setTasks] = useState([]); // filtered tasks for dropdown based on current data\r\n  const [process, setProcess] = useState([]);\r\n  const [project, setProject] = useState([]);\r\n  const [appliedFilter, setAppliedFilter] = useState(initialFilter);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [popupData, setPopupData] = useState({ title: \"\", details: [] });\r\nconst [expandAll, setExpandAll] = useState(false);\r\n\r\n const handleOpenPopup = (title, details) => {\r\n    setPopupData({ title, details });\r\n    setOpenPopup(true);\r\n  };\r\n  const handleClosePopup = () => setOpenPopup(false);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(workedDetails).length > 0) {\r\n      const allWorkEntries = Object.values(workedDetails).flat();\r\n      const uniqueTasks = allWorkEntries.reduce((acc, current) => {\r\n        if (!acc.some(task => task.Task_Id === current.Task_Id)) {\r\n          acc.push({\r\n            Task_Id: current.Task_Id,\r\n            Task_Name: current.Task_Name,\r\n            Project_Id: current.Project_Id,\r\n            Process_Id: current.Process_Id\r\n          });\r\n        }\r\n        return acc;\r\n      }, []);\r\n      setTasks(uniqueTasks);\r\n    } else setTasks([]);\r\n  }, [workedDetails]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(workedDetails).length > 0) {\r\n\r\n      const allWorkEntries = Object.values(workedDetails).flat();\r\n      const uniqueTasks = allWorkEntries.reduce((acc, current) => {\r\n        if (!acc.some(task => task.Task_Id === current.Task_Id)) {\r\n          acc.push({\r\n            Task_Id: current.Task_Id,\r\n            Task_Name: current.Task_Name,\r\n            Project_Id: current.Project_Id,\r\n            Process_Id: current.Process_Id\r\n          });\r\n        }\r\n        return acc;\r\n      }, []);\r\n      \r\n      setTasks(uniqueTasks);\r\n    } else {\r\n\r\n      setTasks([]);\r\n    }\r\n  }, [workedDetails]);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n    let filtered = [...allTasks];\r\n    if (appliedFilter.Project_Id) filtered = filtered.filter(t => t.Project_Id === appliedFilter.Project_Id);\r\n    if (appliedFilter.Id) filtered = filtered.filter(t => t.Process_Id === appliedFilter.Id);\r\n    if (!filtered.some(t => t.Task_Id === appliedFilter.Task_Id)) {\r\n      setAppliedFilter(prev => ({ ...prev, Task_Id: \"\", Task_Name: \"Select Task\" }));\r\n    }\r\n  }, [appliedFilter.Project_Id, appliedFilter.Id, allTasks]);\r\n\r\n    useEffect(() => {\r\n    if (loadingOn) loadingOn();\r\n    fetchLink({\r\n      address: `taskManagement/task/work?Emp_Id=${appliedFilter?.Emp_Id}&from=${appliedFilter.startDate}&to=${appliedFilter.endDate}&Task_Id=${appliedFilter?.Task_Id}&Process_Id=${appliedFilter?.Id}&Project_Id=${appliedFilter?.Project_Id}`,\r\n    })\r\n      .then(data => {\r\n        if (data.success) {\r\n          const groupedData = data?.data?.reduce((acc, current) => {\r\n            const workDate = ISOString(current?.Work_Dt);\r\n            if (!acc[workDate]) acc[workDate] = [];\r\n            acc[workDate].push(current);\r\n            return acc;\r\n          }, {});\r\n          setWorkedDetails(groupedData);\r\n        } else setWorkedDetails({});\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => loadingOff && loadingOff());\r\n  }, [appliedFilter]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchLink({ address: `taskManagement/task/assignEmployee/task/dropDown` })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          setAllTasks(data.data);\r\n        }\r\n      })\r\n      .catch(console.error);\r\n\r\n    fetchLink({\r\n      address: `taskManagement/tasks/project/dropdown?Company_id=${parseData?.Company_id}`,\r\n    })\r\n      .then((data) => data.success && setProject(data.data))\r\n      .catch(console.error);\r\n\r\n    fetchLink({ address: `masters/processMaster` })\r\n      .then((data) => data.success && setProcess(data.data))\r\n      .catch(console.error);\r\n\r\n    if (Number(contextObj?.Print_Rights) === 1) {\r\n      fetchLink({\r\n        address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}&User_Id=${parseData?.UserId}`,\r\n      })\r\n        .then((data) => {\r\n          if (data.success) {\r\n            setUsers(\r\n              data.data.sort((a, b) => String(a?.Name).localeCompare(b?.Name))\r\n            );\r\n          }\r\n        })\r\n        .catch(console.error);\r\n    }\r\n  }, [contextObj?.Print_Rights, parseData?.Company_id]);\r\n\r\n  const formatTime24 = (time24) => {\r\n    if (!time24) return \"-\";\r\n    const [hours, minutes] = time24.split(\":\").map(Number);\r\n    let hours12 = hours % 12 || 12;\r\n    const period = hours < 12 ? \"AM\" : \"PM\";\r\n    return `${hours12.toString().padStart(2, \"0\")}:${minutes\r\n      .toString()\r\n      .padStart(2, \"0\")} ${period}`;\r\n  };\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => printRef.current,\r\n  });\r\n\r\n  const getColor = (status) => {\r\n    const color = [\"\", \"bg-primary\", \"bg-warning\", \"bg-success\", \"bg-danger\"];\r\n    return color[Number(status)] || \"bg-secondary\";\r\n  };\r\n\r\n\r\n  const CardAndTableComp = () => {\r\n    return (\r\n      <div className=\"px-2\">\r\n        {Object.keys(dataArray).map(workDate => (\r\n          <div key={workDate} className=\"cus-card pb-0\">\r\n            <h6 className=\"p-3 mb-0 bg-light\">\r\n              Date:\r\n              {LocalDate(workDate)}\r\n              {\" ( \" + dataArray[workDate]?.length + \" Tasks )\"}\r\n            </h6>\r\n\r\n            <hr className=\"m-0\" />\r\n\r\n            <div className=\"table-responsive day-abstract-table\">\r\n              <table className=\"table\">\r\n                <tbody>\r\n                  {dataArray[workDate].map((taskDetail, oi) => (\r\n                    <tr key={oi}>\r\n                      <td style={{ verticalAlign: 'middle' }}><FiberManualRecord className='fa-in text-primary' /> {taskDetail.Task_Name}</td>\r\n                      <td style={{ verticalAlign: 'middle' }}><AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes</td>\r\n                      <td className=\"fa-14 \" style={{ verticalAlign: 'middle' }}>\r\n                        {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n                      </td>\r\n                      <td style={{ verticalAlign: 'middle' }}>\r\n                        <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n                          {taskDetail?.WorkStatus}\r\n                        </span>\r\n                      </td>\r\n                      <td style={{ verticalAlign: 'middle' }}>\r\n                        <p className=\"mb-0 fa-14 text-muted\">\r\n                          <SmsOutlined className=\"fa-in\" />\r\n                          <span>&emsp;{taskDetail.Work_Done}</span>\r\n                        </p>\r\n                      </td>\r\n                      <td style={{ verticalAlign: 'middle' }}>\r\n                        {taskDetail?.Work_Param?.length > 0 && (\r\n                          <div className=\"cus-card p-2 m-0\">\r\n                            {taskDetail?.Work_Param?.map((o, i) => (\r\n                              <p className=\"mb-0 fa-14 d-flex\" key={i}>\r\n                                <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n                                <span className=\"text-primary\">\r\n                                  {\r\n                                    (isNaN(o?.Current_Value) || (o?.Paramet_Data_Type) !== 'number')\r\n                                      ? o?.Current_Value\r\n                                      : Number(o?.Current_Value).toLocaleString('en-IN')\r\n                                  }\r\n                                </span>\r\n                              </p>\r\n                            ))}\r\n                          </div>\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"row mb-2 px-3 day-abstract-card d-none\">\r\n              {dataArray[workDate].map(taskDetail => (\r\n                <div key={taskDetail.Work_Id} className=\"col-xl-3 col-lg-4 col-md-6 p-2 py-0\">\r\n                  <div className=\"cus-card shadow-sm p-3\">\r\n                    <p className=\"mb-2 fa-15 fw-bold text-secondary\">\r\n                      {taskDetail.Task_Name + \" \"}\r\n                    </p>\r\n\r\n                    <p className=\"mb-2 fa-14 text-secondary\">\r\n                      {formatTime24(taskDetail.Start_Time) + \" - \" + formatTime24(taskDetail.End_Time)}\r\n                      <span className={`badge fa-10 ms-2 p-1 ${getColor(taskDetail?.Work_Status)}`}>\r\n                        {taskDetail?.WorkStatus}\r\n                      </span>\r\n                    </p>\r\n\r\n                    <p className=\"mb-2 fa-14 text-secondary\">\r\n                      <AccessTime className=\"fa-15\" /> {taskDetail.Tot_Minutes} Minutes\r\n                    </p>\r\n\r\n                    <p className=\"mb-0 fa-14 text-muted\">\r\n                      <span className=\"fw-bold\">Summary : </span><br />\r\n                      <span>&emsp;{taskDetail.Work_Done}</span>\r\n                    </p>\r\n\r\n                    {taskDetail?.Work_Param?.length > 0 && (\r\n                      <p className=\"mb-1 text-secondary fa-14 fw-bold\">Parameters ( {taskDetail?.Work_Param?.length} )</p>\r\n                    )}\r\n\r\n                    {taskDetail?.Work_Param?.length > 0 && <hr className=\"m-0\" />}\r\n\r\n                    {taskDetail?.Work_Param?.map((o, i) => (\r\n                      <p className=\"mb-0 fa-14 d-flex flex-wrap\" key={i}>\r\n                        <span className=\"flex-grow-1\">{o?.Paramet_Name}:</span>\r\n                        <span> {o?.Current_Value}</span>\r\n                      </p>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const dataArray = Object.keys(workedDetails || {}).flatMap((workDate) =>\r\n    workedDetails[workDate].map((task) => ({\r\n      ...task,\r\n      Work_Date: workDate,\r\n    }))\r\n  );\r\n\r\n  function formatMinutesToHours(totalMinutes) {\r\n    const hours = Math.floor(totalMinutes / 60);\r\n    const minutes = totalMinutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    }\r\n    return `${minutes}m`;\r\n  }\r\n\r\n\r\n  const WorkDetailsExpandable = ({ row }) => {\r\n  return (\r\n    <div className=\"p-2\">\r\n      {row.Work_Done && (\r\n        <div className=\"mb-2\">\r\n          <strong>Comments:</strong>\r\n          <p className=\"mb-0\">{row.Work_Done}</p>\r\n        </div>\r\n      )}\r\n\r\n      {row.Work_Param?.length > 0 && (\r\n        <div>\r\n          <strong>Parameters:</strong>\r\n          <div className=\"cus-card p-2 mt-1\">\r\n            {row.Work_Param.map((param, i) => (\r\n              <p key={i} className=\"mb-0 d-flex justify-content-between\">\r\n                <span>{param.Paramet_Name}:</span>\r\n                <span className=\"text-primary\">\r\n                  {isNaN(param.Current_Value) || param.Paramet_Data_Type !== \"number\"\r\n                    ? param.Current_Value\r\n                    : Number(param.Current_Value).toLocaleString(\"en-IN\")}\r\n                </span>\r\n              </p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n  return (\r\n    <>\r\n      <Card component={Paper} variant=\"elevation\">\r\n        <div className=\"row align-items-center justify-content-between px-3 pt-3\">\r\n          <div className=\"col\">\r\n            <h5 className=\"mb-0 fw-bold\">Work Abstract</h5>\r\n          </div>\r\n\r\n      \r\n     <div className=\"col-auto d-flex align-items-center gap-2\">\r\n \r\n    \r\n<button className=\"btn btn-primary rounded-5 px-3\" onClick={handlePrint}>\r\n  Print PDF\r\n</button>\r\n\r\n    </div>\r\n\r\n          \r\n        </div>\r\n\r\n        <CardContent className=\"pt-2\" style={{ minHeight: \"500px\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n              <label className=\"pb-2\">Project</label>\r\n              <Select\r\n                value={{ value: appliedFilter.Project_Id, label: appliedFilter.Project_Name }}\r\n                onChange={(e) =>\r\n                  setAppliedFilter({ ...appliedFilter, Project_Id: e.value, Project_Name: e.label })\r\n                }\r\n                options={[\r\n                  { value: \"\", label: \"All Project\" },\r\n                  ...project.map((p) => ({ value: p.Project_Id, label: p.Project_Name })),\r\n                ]}\r\n                styles={customSelectStyles}\r\n                isSearchable\r\n                placeholder=\"Project Name\"\r\n                menuPortalTarget={document.body}\r\n              />\r\n            </div>\r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n              <label className=\"pb-2\">From:</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"cus-inpt\"\r\n                value={appliedFilter.startDate}\r\n                onChange={(e) =>\r\n                  setAppliedFilter({ ...appliedFilter, startDate: e.target.value })\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n              <label className=\"pb-2\">To:</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"cus-inpt\"\r\n                value={appliedFilter.endDate}\r\n                onChange={(e) =>\r\n                  setAppliedFilter({ ...appliedFilter, endDate: e.target.value })\r\n                }\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n               <label className=\"pb-2\">Task</label>\r\n              <Select\r\n                value={{ value: appliedFilter.Task_Id, label: appliedFilter.Task_Name }}\r\n                onChange={(e) => setAppliedFilter({ ...appliedFilter, Task_Id: e.value, Task_Name: e.label })}\r\n                options={[\r\n                  { value: \"\", label: \"All Task\" }, \r\n                  ...tasks.map((t) => ({ \r\n                    value: t.Task_Id, \r\n                    label: t.Task_Name \r\n                  }))\r\n                ]}\r\n                styles={customSelectStyles}\r\n                menuPortalTarget={document.body}\r\n                isSearchable\r\n                placeholder=\"Task Name\"\r\n              />\r\n            </div>\r\n\r\n            \r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n              <label className=\"pb-2\">Process</label>\r\n              <Select\r\n                value={{ value: appliedFilter.Id, label: appliedFilter.Process_Name }}\r\n                onChange={(e) =>\r\n                  setAppliedFilter({ ...appliedFilter, Id: e.value, Process_Name: e.label })\r\n                }\r\n                options={[\r\n                  { value: \"\", label: \"All Process\" },\r\n                  ...process.map((p) => ({ value: p.Id, label: p.Process_Name })),\r\n                ]}\r\n                styles={customSelectStyles}\r\n                menuPortalTarget={document.body}\r\n                isSearchable\r\n                placeholder=\"Process Name\"\r\n              />\r\n            </div>\r\n\r\n           \r\n\r\n            <div className=\"col-xxl-2 col-lg-3 col-md-3 col-sm-6 p-2\">\r\n              <label className=\"pb-2\">User</label>\r\n              <Select\r\n                value={{ value: appliedFilter.Emp_Id, label: appliedFilter.Emp_Name }}\r\n                onChange={(e) =>\r\n                  setAppliedFilter({ ...appliedFilter, Emp_Id: e.value, Emp_Name: e.label })\r\n                }\r\n                options={[\r\n                  { value: parseData.UserId, label: parseData.Name },\r\n                  { value: \"\", label: \"ALL EMPLOYEE\" },\r\n                  ...users.map((u) => ({ value: u.UserId, label: u.Name })),\r\n                ]}\r\n                styles={customSelectStyles}\r\n                isDisabled={Number(contextObj?.Print_Rights) === 0}\r\n                isSearchable\r\n                placeholder=\"User Name\"\r\n              />\r\n            </div>\r\n          </div>\r\n<div style={{ display: \"none\" }} ref={printRef}>\r\n  <h5>Work Abstract Of {appliedFilter.Emp_Name}</h5>\r\n  <p className=\"mb-2\">\r\n    From {LocalDate(appliedFilter.startDate)} &nbsp; - To: {LocalDate(appliedFilter.endDate)}\r\n  </p>\r\n\r\n  <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\r\n    <thead>\r\n      <tr>\r\n        <th>Project</th>\r\n        <th>Date</th>\r\n        <th>Task</th>\r\n        <th>Sub Task</th>\r\n        <th>Staff</th>\r\n        <th>Status</th>\r\n        <th>Duration</th>\r\n        <th>Time</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {dataArray.map((row, idx) => (\r\n        <tr key={idx} style={{ borderBottom: \"1px solid #ccc\" }}>\r\n          <td>{row.Project_Name}</td>\r\n          <td>{LocalDate(row.Work_Date)}</td>\r\n          <td>{row.Task_Name}</td>\r\n          <td>{row.Sub_Task_Name}</td>\r\n          <td>{row.EmployeeName}</td>\r\n          <td>{row.WorkStatus || \"-\"}</td>\r\n          <td>\r\n            {row.Tot_Minutes ? `${row.Tot_Minutes} min (${formatMinutesToHours(row.Tot_Minutes)})` : \"-\"}\r\n          </td>\r\n          <td>{formatTime24(row.Start_Time)} - {formatTime24(row.End_Time)}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n\r\n\r\n          <FilterableTable\r\n            title=\"Work Abstract\"\r\n            dataArray={dataArray}\r\n            EnableSerialNumber\r\n             isExpendable={true}\r\n              expandAllRows={expandAll} // <-- pass the toggle state here\r\n            columns={[\r\n              createCol(\"Project_Name\", \"string\", \"Project_Name\"),\r\n              createCol(\"Work_Date\", \"date\", \"Date\"),\r\n              createCol(\"Task_Name\", \"string\", \"Task\"),\r\n              createCol(\"Sub_Task_Name\", \"string\", \"Sub Task\"),\r\n              createCol(\"EmployeeName\", \"string\", \"Staff\"),\r\n              // createCol(\"Work_Done\", \"string\", \"Comments\"),\r\n              // {\r\n              //   ColumnHeader: \"Comments\",\r\n              //   isVisible: 1,\r\n              //   align: \"center\",\r\n              //   isCustomCell: true,\r\n              //   Cell: ({ row }) => (\r\n              //     <IconButton onClick={() => handleOpenPopup(\"Comments\", [{ label: \"Comment\", value: row.Work_Done }])}>\r\n              //       <SmsOutlined style={{ color: row.Work_Done ? \"blue\" : \"gray\" }} />\r\n              //     </IconButton>\r\n              //   ),\r\n              // },\r\n              {\r\n                ColumnHeader: \"Status\",\r\n                isVisible: 1,\r\n                align: \"center\",\r\n                isCustomCell: true,\r\n                Cell: ({ row }) => (\r\n                  <span className={`badge fa-10 p-1 ${getColor(row?.Work_Status)}`}>\r\n                    {row?.WorkStatus || \"-\"}\r\n                  </span>\r\n                ),\r\n              },\r\n              {\r\n                ColumnHeader: \"Duration\",\r\n                isVisible: 1,\r\n                align: \"center\",\r\n                isCustomCell: true,\r\n                Cell: ({ row }) => (\r\n                  <div style={{ width: '100px', wordWrap: 'break-word', textAlign: 'center' }}>\r\n                    <span>{row?.Tot_Minutes ? `${row.Tot_Minutes} min` : \"-\"}</span>\r\n                    <br />\r\n                    <span>({row?.Tot_Minutes ? formatMinutesToHours(row?.Tot_Minutes) : \"-\"})</span>\r\n                  </div>\r\n                ),\r\n              },\r\n              {\r\n                ColumnHeader: \"Time\",\r\n                isVisible: 1,\r\n                align: \"center\",\r\n                isCustomCell: true,\r\n                Cell: ({ row }) => (\r\n                  <span>\r\n                    {formatTime24(row?.Start_Time)} - {formatTime24(row?.End_Time)}\r\n                  </span>\r\n                ),\r\n              },\r\n              // {\r\n              //   ColumnHeader: \"Parameters\",\r\n              //   isVisible: 1,\r\n              //   isCustomCell: true,\r\n              //   Cell: ({ row }) =>\r\n              //     row?.Work_Param?.length > 0 ? (\r\n              //       <div className=\"text-start\">\r\n              //         {row.Work_Param.map((param, i) => (\r\n              //           <div key={i} className=\"d-flex justify-content-between small\">\r\n              //             <span>{param.Paramet_Name}:</span>\r\n              //             <span className=\"text-primary\">\r\n              //               {isNaN(param.Current_Value) ||\r\n              //               param.Paramet_Data_Type !== \"number\"\r\n              //                 ? param.Current_Value\r\n              //                 : Number(param.Current_Value).toLocaleString(\"en-IN\")}\r\n              //             </span>\r\n              //           </div>\r\n              //         ))}\r\n              //       </div>\r\n              //     ) : (\r\n              //       \"-\"\r\n              //     ),\r\n              // },\r\n              // {\r\n              //   ColumnHeader: \"Parameters\",\r\n              //   isVisible: 1,\r\n              //   align: \"center\",\r\n              //   isCustomCell: true,\r\n              //   Cell: ({ row }) =>\r\n              //     row?.Work_Param?.length > 0 ? (\r\n              //       <IconButton onClick={() => handleOpenPopup(\"Parameters\", row.Work_Param)}>\r\n              //         <ChatBubbleOutline style={{ color: \"green\" }} />\r\n              //       </IconButton>\r\n              //     ) : \"-\",\r\n              // },\r\n            ]}\r\n             expandableComp={(props) => <WorkDetailsExpandable {...props} />}\r\n          />\r\n\r\n\r\n           <Modal open={openPopup} onClose={handleClosePopup}>\r\n            <Box\r\n              sx={{\r\n                position: \"absolute\",\r\n                top: \"50%\",\r\n                left: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n                width: 400,\r\n                bgcolor: \"background.paper\",\r\n                boxShadow: 24,\r\n                p: 3,\r\n                borderRadius: 2,\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\" mb={2}>\r\n                {popupData.title} Details\r\n              </Typography>\r\n              {popupData.details.length > 0 ? (\r\n                popupData.details.map((item, i) => (\r\n                  <Box key={i} className=\"mb-1\">\r\n                    <strong>{item.Paramet_Name || item.label}:</strong>{\" \"}\r\n                    {item.Current_Value || item.value || \"-\"}\r\n                  </Box>\r\n                ))\r\n              ) : (\r\n                <Typography>No data available</Typography>\r\n              )}\r\n            </Box>\r\n          </Modal>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmployeeDayAbstract;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport styleFunctionSx, { extendSxProp } from './styleFunctionSx';\nimport useTheme from './useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    themeId,\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName\n  } = options;\n  const BoxRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'\n  })(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n    const _extendSxProp = extendSxProp(inProps),\n      {\n        className,\n        component = 'div'\n      } = _extendSxProp,\n      other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded);\n    return /*#__PURE__*/_jsx(BoxRoot, _extends({\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: themeId ? theme[themeId] || theme : theme\n    }, other));\n  });\n  return Box;\n}"],"names":["getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","createSvgIcon","cx","cy","r","d","_ref","loadingOn","loadingOff","localData","localStorage","getItem","parseData","JSON","parse","contextObj","useContext","MyContext","printRef","useRef","initialFilter","startDate","getPreviousDate","endDate","ISOString","Emp_Id","UserId","Emp_Name","Name","Task_Id","Task_Name","Id","Process_Name","Project_Id","Project_Name","workedDetails","setWorkedDetails","useState","users","setUsers","allTasks","setAllTasks","tasks","setTasks","process","setProcess","project","setProject","appliedFilter","setAppliedFilter","openPopup","setOpenPopup","popupData","setPopupData","title","details","expandAll","setExpandAll","useEffect","Object","keys","length","uniqueTasks","values","flat","reduce","acc","current","some","task","push","Process_Id","filtered","filter","t","prev","_objectSpread","fetchLink","address","concat","then","data","success","_data$data","groupedData","workDate","Work_Dt","catch","console","error","finally","Company_id","Number","Print_Rights","sort","a","b","String","localeCompare","formatTime24","time24","hours","minutes","split","map","period","toString","padStart","handlePrint","useReactToPrint","content","getColor","status","dataArray","flatMap","Work_Date","formatMinutesToHours","totalMinutes","Math","floor","WorkDetailsExpandable","_ref2","_row$Work_Param","row","_jsxs","children","Work_Done","Work_Param","param","i","Paramet_Name","isNaN","Current_Value","Paramet_Data_Type","toLocaleString","_Fragment","Card","Paper","variant","onClick","CardContent","style","minHeight","Select","value","label","onChange","e","options","p","customSelectStyles","isSearchable","placeholder","menuPortalTarget","document","body","type","target","u","isDisabled","display","LocalDate","width","borderCollapse","idx","borderBottom","Sub_Task_Name","EmployeeName","WorkStatus","Tot_Minutes","Start_Time","End_Time","FilterableTable","EnableSerialNumber","isExpendable","expandAllRows","columns","createCol","ColumnHeader","isVisible","align","isCustomCell","Cell","_ref3","Work_Status","_ref4","wordWrap","textAlign","_ref5","expandableComp","Modal","open","onClose","handleClosePopup","Box","sx","position","top","left","transform","bgcolor","boxShadow","borderRadius","Typography","mb","item","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","replace","toLowerCase","key","Field_Name","field","arguments","undefined","verticalAlign","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","IconButton","event","currentTarget","size","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalTime","onClickFun","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","setOpen","fontSize","Fragment","TableRow","TableCell","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","entries","log","colSpan","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","defaultTheme","createTheme","createBox","themeId","THEME_ID","defaultClassName","boxClasses","generateClassName","ClassNameGenerator","generate","BoxRoot","shouldForwardProp","prop","styleFunctionSx","theme","useTheme","_extendSxProp","extendSxProp"],"sourceRoot":""}