{"version":3,"file":"static/js/2152.a945e5d1.chunk.js","mappings":"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","sources":["Pages/Reports/productclosingStockReports.jsx","Components/filterableTable2.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n\r\n  ISOString\r\n} from \"../../Components/functions\";\r\n\r\nimport { Card } from \"@mui/material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol }  from \"../../Components/filterableTable2\";\r\n\r\nfunction ProductclosingStockReports({ loadingOn, loadingOff }) {\r\n\r\n  const initialValue = {\r\n    Id: 0,\r\n    fromDate: ISOString(),\r\n    ToDate: ISOString(),\r\n    godown_Id: \"\",\r\n    godown_Name: \"\",\r\n    reqDate: ISOString(),\r\n    reqLocation: \"MILL\",\r\n    dialog: false,\r\n  };\r\n  const [activityData, setActivityData] = useState([]);\r\n\r\n  const [reload, setReload] = useState(false);\r\n  const [filter, setFilter] = useState(initialValue);\r\n  const [location, setLocation] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (loadingOn) loadingOn();\r\n    fetchLink({\r\n      address: `delivery/closingStock?fromDate=${filter?.fromDate}&toDate=${filter?.ToDate}&godownId=${filter.godown_Id}`,\r\n    })\r\n      .then((data) => {\r\n        if (data.success) {\r\n          setActivityData(data.data);\r\n        }\r\n      })\r\n      .catch((e) => console.error(e))\r\n      .finally(() => {\r\n        if (loadingOff) {\r\n          loadingOff();\r\n        }\r\n      });\r\n  }, [reload, filter.fromDate, filter.ToDate, filter?.godown_Id]);\r\n\r\n  useEffect(() => {\r\n    fetchLink({\r\n      address: `dataEntry/godownLocationMaster`,\r\n    }).then((data) => {\r\n      if (data.success) {\r\n        setLocation(data.data);\r\n        setReload(true)\r\n      }\r\n    });\r\n  }, []);\r\n\r\n\r\n  const ExpendableComponent = ({ row }) => {\r\n    return (\r\n      <table className=\"table w-full\">\r\n        <tbody>\r\n        \r\n           \r\n         \r\n              <table className=\"table table-sm w-full\">\r\n                <thead>\r\n                  <tr className=\"bg-secondary text-white\">\r\n                    <th className=\"border p-1\">Product Name</th>\r\n                    <th className=\"border p-1\">Opening Stock</th>\r\n                    <th className=\"border p-1\">Total Arrival</th>\r\n                    <th className=\"border p-1\">Total Delivery</th>\r\n                    <th className=\"border p-1\">Closing Stock</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {row?.Products?.map((data, i) => (\r\n                    <tr key={data.Product_Id}>\r\n                      <td className=\"border p-1\">{data.Product_Name}</td>\r\n                      <td className=\"border p-1 text-center\">{data.OpeningStock}</td>\r\n                      <td className=\"border p-1 text-center\">{data.Total_Arrival}</td>\r\n                      <td className=\"border p-1 text-center\">{data.Total_Delivery}</td>\r\n                      <td className=\"border p-1 text-center\">{data.ClosingStock}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n          \r\n         \r\n  \r\n        \r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Card>\r\n        <div className=\"p-2 border-bottom fa-16 fw-bold d-flex justify-content-between align-items-center\">\r\n          <span className=\"text-primary text-uppercase ps-3\">\r\n            Stock Reports\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"d-flex px-3 gap-4\">\r\n          <div className=\"d-flex flex-column\">\r\n            <label className=\"mb-1 w-100\">FROM DATE</label>\r\n            <input\r\n              type=\"date\"\r\n              className=\"cus-inpt w-auto\"\r\n              value={filter.fromDate}\r\n              onChange={(e) =>\r\n                setFilter((pre) => ({ ...pre, fromDate: e.target.value }))\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            <label className=\"mb-1 w-100\">TO DATE</label>\r\n            <input\r\n              type=\"date\"\r\n              className=\"cus-inpt w-auto\"\r\n              value={filter.ToDate}\r\n              onChange={(e) =>\r\n                setFilter((pre) => ({ ...pre, ToDate: e.target.value }))\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            <label className=\"mb-1 w-100\">LOCATION</label>\r\n            <select\r\n              className=\"cus-inpt w-auto\"\r\n              onChange={(e) => {\r\n                const value =\r\n                  e.target.value === \"\" ? \"\" : Number(e.target.value);\r\n                setFilter({ ...filter, godown_Id: value });\r\n              }}\r\n              value={filter?.godown_Id || \"\"}\r\n            >\r\n              <option value=\"\" label=\"ALL\">\r\n                select Branch\r\n              </option>\r\n              {location.map((loc, ind) => (\r\n                <option value={loc.Godown_Id} key={ind}>\r\n                  {loc.Godown_Name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <FilterableTable\r\n                title=\"Opening Stock\"\r\n                dataArray={activityData}\r\n                EnableSerialNumber\r\n                columns={[\r\n                    createCol('Pro_Group', 'string', 'Product_Group')\r\n                ]}\r\n             \r\n                // EnableSerialNumber={true}\r\n                isExpendable={true}\r\n                tableMaxHeight={550}\r\n                expandableComp={ExpendableComponent}\r\n            />\r\n       \r\n      </Card>\r\n\r\n      {/*      \r\n            <datalist id='staffList'>\r\n                {staffs.map((o, i) => <option key={i} value={o.WeingtCheckedBy} />)}\r\n            </datalist>\r\n\r\n            <datalist id='StockItem'>\r\n                {stockItems.map((o, i) => <option key={i} value={o.StockItem} />)}\r\n            </datalist> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProductclosingStockReports;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}"],"names":["_ref","loadingOn","loadingOff","initialValue","Id","fromDate","ISOString","ToDate","godown_Id","godown_Name","reqDate","reqLocation","dialog","activityData","setActivityData","useState","reload","setReload","filter","setFilter","location","setLocation","useEffect","fetchLink","address","concat","then","data","success","catch","e","console","error","finally","_jsx","_Fragment","children","_jsxs","Card","className","type","value","onChange","pre","_objectSpread","target","Number","label","map","loc","ind","Godown_Id","Godown_Name","FilterableTable","title","dataArray","EnableSerialNumber","columns","createCol","isExpendable","tableMaxHeight","expandableComp","_ref2","_row$Products","row","Products","i","Product_Name","OpeningStock","Total_Arrival","Total_Delivery","ClosingStock","Product_Id","preprocessDataForExport","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","field","arguments","length","undefined","align","verticalAlign","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","IconButton","onClick","event","currentTarget","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","log","colSpan","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}