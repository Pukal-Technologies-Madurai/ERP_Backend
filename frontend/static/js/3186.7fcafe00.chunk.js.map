{"version":3,"file":"static/js/3186.7fcafe00.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/FilterAltOff.js","Pages/Reports/CostCenterReports/purchaseBrokerageReport.jsx","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","Components/tablecolumn.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41z\"\n}), 'FilterAltOff');","import { useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable, {\r\n    createCol,\r\n} from \"../../../Components/filterableTable2\";\r\nimport {\r\n    Addition,\r\n    ISOString,\r\n    NumberFormat,\r\n    toArray,\r\n} from \"../../../Components/functions\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n} from \"@mui/material\";\r\nimport { FilterAlt, FilterAltOff } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n\r\nconst PurchaseBrokerageReport = ({ loadingOn, loadingOff }) => {\r\n    const [reportData, setReportData] = useState([]);\r\n    const [deliveryReport, setDeliveryReport] = useState([]);\r\n    const [reportType, setReportType] = useState(\"purchase\");\r\n    const [dropDown, setDropDown] = useState({ broker: [] });\r\n\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        Broker: { value: \"\", label: \"ALL Brokers\" },\r\n        refresh: false,\r\n        filterDialog: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/brokerageReport/getInvolvedBroker`,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDown((prev) => ({\r\n                        ...prev,\r\n                        broker: toArray(data.data),\r\n                    }));\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                loadingOn();\r\n\r\n                const [purchaseRes, salesRes] = await Promise.all([\r\n                    fetchLink({\r\n                        address: `reports/brokerageReport/purchaseInvoice?Fromdate=${filters.Fromdate}&Todate=${filters.Todate}&broker=${filters.Broker.value}`,\r\n                    }),\r\n                    fetchLink({\r\n                        address: `reports/brokerageReport/salesInvoice?Fromdate=${filters.Fromdate}&Todate=${filters.Todate}&broker=${filters.Broker.value}`,\r\n                    }),\r\n                ]);\r\n\r\n                if (purchaseRes.success) setReportData(toArray(purchaseRes.data));\r\n                else setReportData([]);\r\n\r\n                if (salesRes.success) setDeliveryReport(toArray(salesRes.data));\r\n                else setDeliveryReport([]);\r\n\r\n            } catch (err) {\r\n                setReportData([]);\r\n                setDeliveryReport([]);\r\n            } finally {\r\n                loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [filters.refresh]);\r\n\r\n\r\n\r\n\r\n    const closeDialog = () => {\r\n        setFilters((prev) => ({ ...prev, filterDialog: false }));\r\n    };\r\n\r\n    const currentData = reportType === \"purchase\" ? reportData : deliveryReport;\r\n\r\n    const totalBags = useMemo(() => {\r\n        return currentData.reduce(\r\n            (acc, item) => Addition(acc, item.displayQuantity),\r\n            0\r\n        );\r\n    }, [currentData]);\r\n\r\n    const showBrokerColumn = filters.Broker.value === \"\";\r\n\r\n    const purchaseColumns = [\r\n        ...(showBrokerColumn\r\n            ? [createCol(\"CostCenterGet\", \"string\", \"Broker\")]\r\n            : []),\r\n        createCol(\"Retailer_Name\", \"string\", \"Party\"),\r\n        createCol(\"Po_Entry_Date\", \"date\", \"Date\"),\r\n        createCol(\"Po_Inv_No\", \"string\", \"Inv_No\"),\r\n        createCol(\"Product_Name\", \"string\", \"Item\"),\r\n        createCol(\"displayQuantity\", \"number\", \"Bag\"),\r\n        createCol(\"Item_Rate\", \"number\", \"Rate\"),\r\n        createCol(\"Act_Qty\", \"number\"),\r\n        createCol(\"Total_Invoice_value\", \"string\", \"Total_Invo_value\"),\r\n        createCol(\"VoucherGet\", \"string\", \"Voucher\"),\r\n    ];\r\n\r\n    const salesColumns = [\r\n        ...(showBrokerColumn\r\n            ? [createCol(\"CostCenterGet\", \"string\", \"Broker\")]\r\n            : []),\r\n        createCol(\"Retailer_Name\", \"string\", \"Party\"),\r\n        createCol(\"Do_Inv_No\", \"string\", \"Inv_No\"),\r\n        createCol(\"Date\", \"date\", \"Date\"),\r\n        createCol(\"Product_Name\", \"string\", \"Item\"),\r\n        createCol(\"displayQuantity\", \"number\", \"Bag\"),\r\n        createCol(\"Item_Rate\", \"number\", \"Rate\"),\r\n        createCol(\"Act_Qty\", \"string\", \"Act_Qty\"),\r\n        createCol(\"Total_Invoice_value\", \"string\", \"Total_Invo_value\"),\r\n        createCol(\"VoucherGet\", \"string\", \"Voucher\"),\r\n    ];\r\n\r\n    const currentColumns =\r\n        reportType === \"purchase\" ? purchaseColumns : salesColumns;\r\n\r\n    const brokerLabel =\r\n        filters.Broker.value === \"\" ? \"ALL Brokers\" : filters.Broker.label;\r\n    const titleText = `${reportType === \"purchase\" ? \"Purchase Broker\" : \"Sales Broker\"\r\n        } : ${brokerLabel}`;\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={titleText}\r\n                EnableSerialNumber\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                maxHeightOption\r\n                ExcelPrintOption\r\n                dataArray={currentData}\r\n                columns={currentColumns}\r\n                ButtonArea={\r\n                    <>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() =>\r\n                                setFilters((prev) => ({ ...prev, filterDialog: true }))\r\n                            }\r\n                        >\r\n                            <FilterAlt />\r\n                        </IconButton>\r\n                        <span className=\"p-2\">Total Bags: {NumberFormat(totalBags)}</span>\r\n                        <div className=\"d-flex align-items-center mb-2\">\r\n                            <Button\r\n                                variant={reportType === \"purchase\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setReportType(\"purchase\")}\r\n                                size=\"small\"\r\n                                style={{ minWidth: \"100px\" }}\r\n                            >\r\n                                Purchase\r\n                            </Button>\r\n                            <Button\r\n                                variant={reportType === \"sales\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setReportType(\"sales\")}\r\n                                size=\"small\"\r\n                                style={{ marginLeft: \"10px\", minWidth: \"100px\" }}\r\n                            >\r\n                                Sales\r\n                            </Button>\r\n                        </div>\r\n                    </>\r\n                }\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <IconButton size=\"small\" onClick={closeDialog}>\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table m-0\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Fromdate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Fromdate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={filters.Todate}\r\n                                            onChange={(e) =>\r\n                                                setFilters({ ...filters, Todate: e.target.value })\r\n                                            }\r\n                                            className=\"cus-inpt\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: \"middle\" }}>Broker</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={filters.Broker}\r\n                                            onChange={(e) => setFilters({ ...filters, Broker: e })}\r\n                                            options={[\r\n                                                { value: \"\", label: \"ALL Brokers\" },\r\n                                                ...dropDown.broker,\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            menuPortalTarget={document.body}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Broker Name\"}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        onClick={() => {\r\n                            setFilters((prev) => ({ ...prev, refresh: !prev.refresh }));\r\n                            closeDialog();\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PurchaseBrokerageReport;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]"],"names":["createSvgIcon","_jsx","d","_ref","loadingOn","loadingOff","reportData","setReportData","useState","deliveryReport","setDeliveryReport","reportType","setReportType","dropDown","setDropDown","broker","filters","setFilters","Fromdate","ISOString","Todate","Broker","value","label","refresh","filterDialog","useEffect","fetchLink","address","then","data","success","prev","_objectSpread","toArray","catch","console","error","async","purchaseRes","salesRes","Promise","all","concat","err","fetchData","closeDialog","currentData","totalBags","useMemo","reduce","acc","item","Addition","displayQuantity","showBrokerColumn","purchaseColumns","createCol","salesColumns","currentColumns","brokerLabel","titleText","_jsxs","_Fragment","children","FilterableTable","title","EnableSerialNumber","headerFontSizePx","bodyFontSizePx","maxHeightOption","ExcelPrintOption","dataArray","columns","ButtonArea","IconButton","size","onClick","FilterAlt","className","NumberFormat","Button","variant","style","minWidth","marginLeft","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","FilterAltOff","verticalAlign","type","onChange","e","target","Select","options","styles","customSelectStyles","menuPortalTarget","document","body","isSearchable","placeholder","DialogActions","preprocessDataForExport","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","field","arguments","length","undefined","align","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","LocalDate","LocalTime","_ref2","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","MenuButtons","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","width","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}