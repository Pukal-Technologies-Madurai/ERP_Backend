{"version":3,"file":"static/js/6700.e47edf11.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Reports/smtstockPaper.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    Tooltip,\r\n    Typography,\r\n    Chip,\r\n    Box,\r\n    Grid,\r\n    TextField,\r\n    Autocomplete,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Checkbox,\r\n    ListItemText\r\n} from \"@mui/material\";\r\nimport {\r\n    FilterAlt,\r\n    FilterAltOff\r\n} from \"@mui/icons-material\";\r\nimport { useEffect, useState, useMemo, useCallback } from \"react\";\r\n\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport ExcelJS from \"exceljs\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst getFormattedDate = (date = new Date()) => {\r\n    return date.toISOString().split('T')[0];\r\n};\r\n\r\nconst defaultFilters = {\r\n    passingDate: getFormattedDate(),\r\n    selectedBrands: [],\r\n    selectedProducts: [],\r\n    selectedGodowns: [\"Main Location\", \"Smt Mill\"] \r\n};\r\n\r\nconst StockPaper = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [reportData, setReportData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [filters, setFilters] = useState({ ...defaultFilters, filterDialog: false });\r\n    const [allBrands, setAllBrands] = useState([]);\r\n    const [allProducts, setAllProducts] = useState([]);\r\n    const [allGodowns, setAllGodowns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (reportData) {\r\n            const brands = [...new Set(reportData.map(item => item.brandName).filter(Boolean))];\r\n            setAllBrands(brands);\r\n\r\n            const products = [];\r\n            const godowns = new Set();\r\n            \r\n            reportData.forEach(brand => {\r\n                if (brand.godowns) {\r\n                    brand.godowns.forEach(godown => {\r\n                        // Collect all godown names\r\n                        godowns.add(godown.godownName);\r\n                        \r\n                        if (godown.products) {\r\n                            godown.products.forEach(product => {\r\n                                if (product.baseProduct && !products.includes(product.baseProduct)) {\r\n                                    products.push(product.baseProduct);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            \r\n            setAllProducts(products);\r\n            setAllGodowns(Array.from(godowns).sort());\r\n        }\r\n    }, [reportData]);\r\n\r\n    const fetchReportData = useCallback(async () => {\r\n         loadingOn();\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `reports/smtreports?PassingDate=${filters.passingDate}`,\r\n                method: 'POST',\r\n            });\r\n\r\n            if (response.success) {\r\n                setReportData(response.data);\r\n            } else {\r\n                console.error(\"Failed to fetch data:\", response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching data:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n            loadingOff(); \r\n        }\r\n    }, [filters.passingDate]);\r\n\r\n    useEffect(() => {\r\n        if (storage?.Company_id && filters.passingDate) {\r\n            fetchReportData();\r\n        }\r\n    }, [storage?.Company_id, fetchReportData]);\r\n\r\n    const filteredData = useMemo(() => {\r\n        if (!reportData) return [];\r\n\r\n    \r\n        if (filters.selectedBrands.length === 0 && \r\n            filters.selectedProducts.length === 0 && \r\n            filters.selectedGodowns.length === 0) {\r\n            return reportData;\r\n        }\r\n\r\n        return reportData\r\n            .filter(brand => {\r\n         \r\n                const brandMatch = filters.selectedBrands.length === 0 || \r\n                                 filters.selectedBrands.includes(brand.brandName);\r\n                if (!brandMatch) return false;\r\n\r\n            \r\n                if (filters.selectedProducts.length > 0) {\r\n                    const hasProduct = brand.godowns?.some(godown =>\r\n                        godown.products?.some(product =>\r\n                            filters.selectedProducts.includes(product.baseProduct)\r\n                        )\r\n                    );\r\n                    if (!hasProduct) return false;\r\n                }\r\n\r\n            \r\n                if (filters.selectedGodowns.length > 0) {\r\n                    const hasGodown = brand.godowns?.some(godown =>\r\n                        filters.selectedGodowns.includes(godown.godownName)\r\n                    );\r\n                    if (!hasGodown) return false;\r\n                }\r\n\r\n                return true;\r\n            })\r\n            .map(brand => {\r\n                let filteredGodowns = brand.godowns;\r\n\r\n              \r\n                if (filters.selectedGodowns.length > 0) {\r\n                    filteredGodowns = filteredGodowns.filter(godown =>\r\n                        filters.selectedGodowns.includes(godown.godownName)\r\n                    );\r\n                }\r\n\r\n             \r\n                if (filters.selectedProducts.length > 0) {\r\n                    filteredGodowns = filteredGodowns\r\n                        .map(godown => {\r\n                            const filteredProducts = godown.products\r\n                                .filter(product => filters.selectedProducts.includes(product.baseProduct));\r\n                            return { ...godown, products: filteredProducts };\r\n                        })\r\n                        .filter(godown => godown.products.length > 0);\r\n                }\r\n\r\n                return { ...brand, godowns: filteredGodowns };\r\n            });\r\n    }, [reportData, filters.selectedBrands, filters.selectedProducts, filters.selectedGodowns]);\r\n\r\n    const ExpendableComponent2 = ({ row }) => {\r\n        const godownPackMap = row.godowns.map(godown => ({\r\n            godownName: godown.godownName,\r\n            godownId: godown.godownId,\r\n            packTypes: [...new Set(godown.products.flatMap(p => p.packs.map(pack => pack.packType)))],\r\n        }));\r\n\r\n        const totalCols = 1 + godownPackMap.reduce((sum, g) => sum + g.packTypes.length * 3, 0);\r\n\r\n        return (\r\n            <div className=\"p-3\">\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered text-center\" style={{ fontSize: \"12px\" }}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan={totalCols} className=\"text-center bg-light\">\r\n                                    STOCK PAPER - {new Date().toLocaleDateString(\"en-GB\")}\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th className=\"bg-light\">Products</th>\r\n                                {godownPackMap.map((godown) => (\r\n                                    <th\r\n                                        key={godown.godownId}\r\n                                        colSpan={godown.packTypes.length * 3}\r\n                                        className=\"text-center bg-light\"\r\n                                    >\r\n                                        {godown.godownName}\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                            <tr>\r\n                                <th className=\"bg-light\"></th>\r\n                                {godownPackMap.map((godown) =>\r\n                                    godown.packTypes.map(packType => (\r\n                                        <th\r\n                                            key={`${godown.godownId}-${packType}`}\r\n                                            colSpan={3}\r\n                                            className=\"text-center bg-light\"\r\n                                        >\r\n                                            {packType}\r\n                                        </th>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                            <tr>\r\n                                <th className=\"bg-light\"></th>\r\n                                {godownPackMap.map((godown) =>\r\n                                    godown.packTypes.map(packType => (\r\n                                        <>\r\n                                            <th key={`wk-${godown.godownId}-${packType}`} className=\"text-center bg-light\">Wk Avg</th>\r\n                                            <th key={`yest-${godown.godownId}-${packType}`} className=\"text-center bg-light\">Yest</th>\r\n                                            <th key={`bal-${godown.godownId}-${packType}`} className=\"text-center bg-light\">Bal</th>\r\n                                        </>\r\n                                    ))\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {row.godowns[0]?.products.map((product, pIndex) => (\r\n                                <tr key={pIndex}>\r\n                                    <td className=\"fw-medium\">{product.baseProduct}</td>\r\n                                    {godownPackMap.map((godown) =>\r\n                                        godown.packTypes.map((packType) => {\r\n                                            const godownObj = row.godowns.find(g => g.godownId === godown.godownId);\r\n                                            const productObj = godownObj?.products.find(p => p.baseProduct === product.baseProduct);\r\n                                            const pack = productObj?.packs.find(pk => pk.packType === packType);\r\n\r\n                                            return (\r\n                                                <>\r\n                                                    <td key={`wkVal-${godown.godownId}-${pIndex}-${packType}`} className=\"text-center\">\r\n                                                        {(pack?.weeklyAverage || 0).toFixed(2)}\r\n                                                    </td>\r\n                                                    <td key={`yestVal-${godown.godownId}-${pIndex}-${packType}`} className=\"text-center\">\r\n                                                        {(pack?.yesterdayQty || 0).toFixed(2)}\r\n                                                    </td>\r\n                                                    <td key={`balVal-${godown.godownId}-${pIndex}-${packType}`} className=\"text-center\">\r\n                                                        {(pack?.balanceQty || 0).toFixed(2)}\r\n                                                    </td>\r\n                                                </>\r\n                                            );\r\n                                        })\r\n                                    )}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n// const exportToExcel = async () => {\r\n//     if (!filteredData || filteredData.length === 0) {\r\n//         alert(\"No data to export\");\r\n//         return;\r\n//     }\r\n\r\n//     const workbook = new ExcelJS.Workbook();\r\n//     const worksheet = workbook.addWorksheet(\"SMT Report\");\r\n\r\n//     worksheet.mergeCells(\"A1:D1\");\r\n//     worksheet.getCell(\"A1\").value = `SMT STOCK REPORT - ${new Date(\r\n//         filters.passingDate\r\n//     ).toLocaleDateString(\"en-GB\")}`;\r\n//     worksheet.getCell(\"A1\").font = { bold: true, size: 14 };\r\n//     worksheet.getCell(\"A1\").alignment = { horizontal: \"center\" };\r\n\r\n//     const godownPackMap = filteredData[0].godowns.map((godown) => ({\r\n//         godownName: godown.godownName,\r\n//         godownId: godown.godownId,\r\n//         packTypes: [\r\n//             ...new Set(\r\n//                 godown.products.flatMap((p) => p.packs.map((pack) => pack.packType))\r\n//             ),\r\n//         ],\r\n//     }));\r\n\r\n//     const headerRow1 = [\"Products\"];\r\n//     const headerRow2 = [\"\"];\r\n//     const headerRow3 = [\"\"];\r\n\r\n//     godownPackMap.forEach((g) => {\r\n//         const span = g.packTypes.length * 3;\r\n\r\n//         for (let i = 0; i < span; i++) {\r\n//             headerRow1.push(\"\");\r\n//         }\r\n\r\n//         g.packTypes.forEach((pt) => {\r\n//             headerRow2.push(pt, \"\", \"\");\r\n//             headerRow3.push(\"Wk Avg\", \"Yest\", \"Bal\");\r\n//         });\r\n//     });\r\n\r\n//     worksheet.addRow(headerRow1);\r\n//     worksheet.addRow(headerRow2);\r\n//     worksheet.addRow(headerRow3);\r\n\r\n//     let colIndex = 2;\r\n//     godownPackMap.forEach((g) => {\r\n//         const span = g.packTypes.length * 3;\r\n\r\n//         worksheet.mergeCells(2, colIndex, 2, colIndex + span - 1);\r\n//         const godownCell = worksheet.getCell(2, colIndex);\r\n//         godownCell.value = g.godownName;\r\n\r\n//         godownCell.font = { bold: true, size: 12, color: { argb: \"FFFFFFFF\" } };\r\n\r\n//         godownCell.alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n\r\n//         godownCell.fill = {\r\n//             type: \"pattern\",\r\n//             pattern: \"solid\",\r\n//             fgColor: { argb: \"4472C4\" },\r\n//         };\r\n\r\n//         for (let i = colIndex; i <= colIndex + span - 1; i++) {\r\n//             const cell = worksheet.getCell(2, i);\r\n//             cell.border = {\r\n//                 top: { style: \"medium\" },\r\n//                 left: { style: i === colIndex ? \"medium\" : \"thin\" },\r\n//                 right: { style: i === colIndex + span - 1 ? \"medium\" : \"thin\" },\r\n//                 bottom: { style: \"medium\" },\r\n//             };\r\n//         }\r\n\r\n//         colIndex += span;\r\n//     });\r\n\r\n//     colIndex = 2;\r\n//     godownPackMap.forEach((g) => {\r\n//         g.packTypes.forEach(() => {\r\n//             worksheet.mergeCells(3, colIndex, 3, colIndex + 2);\r\n//             colIndex += 3;\r\n//         });\r\n//     });\r\n\r\n//     worksheet.getRow(4).eachCell((cell) => {\r\n//         cell.font = { bold: true };\r\n//         cell.alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n//         cell.fill = {\r\n//             type: \"pattern\",\r\n//             pattern: \"solid\",\r\n//             fgColor: { argb: \"FFFF00\" },\r\n//         };\r\n//         cell.border = {\r\n//             top: { style: \"thin\" },\r\n//             left: { style: \"thin\" },\r\n//             bottom: { style: \"thin\" },\r\n//             right: { style: \"thin\" },\r\n//         };\r\n//     });\r\n\r\n//     // Get total columns for styling\r\n//     const totalCols = 1 + godownPackMap.reduce((sum, g) => sum + g.packTypes.length * 3, 0);\r\n\r\n//     filteredData.forEach((brand) => {\r\n//         // Get all unique products across all godowns for this brand\r\n//         const allProducts = new Set();\r\n//         brand.godowns.forEach(godown => {\r\n//             godown.products.forEach(product => {\r\n//                 allProducts.add(product.baseProduct);\r\n//             });\r\n//         });\r\n        \r\n//         const productList = Array.from(allProducts);\r\n\r\n//         const brandRow = worksheet.addRow([brand.brandName]);\r\n//         for (let i = 1; i <= totalCols; i++) {\r\n//             const cell = brandRow.getCell(i);\r\n//             cell.fill = {\r\n//                 type: \"pattern\",\r\n//                 pattern: \"solid\",\r\n//                 fgColor: { argb: \"7030A0\" },\r\n//             };\r\n//             cell.font = { bold: true, size: 13, color: { argb: \"FFFFFFFF\" } };\r\n//             cell.alignment = {\r\n//                 horizontal: i === 1 ? \"left\" : \"center\",\r\n//                 vertical: \"middle\",\r\n//             };\r\n//         }\r\n\r\n//         // Iterate through all products across all godowns\r\n//         productList.forEach((productName) => {\r\n//             const row = [productName];\r\n//             godownPackMap.forEach((godown) => {\r\n//                 const godownObj = brand.godowns.find(\r\n//                     (g) => g.godownId === godown.godownId\r\n//                 );\r\n//                 const productObj = godownObj?.products.find(\r\n//                     (p) => p.baseProduct === productName\r\n//                 );\r\n//                 godown.packTypes.forEach((packType) => {\r\n//                     const pack = productObj?.packs.find((pk) => pk.packType === packType);\r\n//                     row.push(pack?.weeklyAverage || 0);\r\n//                     row.push(pack?.yesterdayQty || 0);\r\n//                     row.push(pack?.balanceQty || 0);\r\n//                 });\r\n//             });\r\n//             worksheet.addRow(row);\r\n//         });\r\n\r\n//         worksheet.addRow([]);\r\n//     });\r\n\r\n//     worksheet.columns.forEach((col) => {\r\n//         col.width = 15;\r\n//     });\r\n\r\n//     const buffer = await workbook.xlsx.writeBuffer();\r\n//     saveAs(new Blob([buffer]), `STOCK_REPORT_${filters.passingDate}.xlsx`);\r\n// };\r\n\r\nconst exportToExcel = async () => {\r\n    if (!filteredData || filteredData.length === 0) {\r\n        alert(\"No data to export\");\r\n        return;\r\n    }\r\n\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(\"SMT Report\");\r\n\r\n    worksheet.mergeCells(\"A1:D1\");\r\n    worksheet.getCell(\"A1\").value = `SMT STOCK REPORT - ${new Date(\r\n        filters.passingDate\r\n    ).toLocaleDateString(\"en-GB\")}`;\r\n    worksheet.getCell(\"A1\").font = { bold: true, size: 14 };\r\n    worksheet.getCell(\"A1\").alignment = { horizontal: \"center\" };\r\n\r\n  \r\n    const allPackTypes = new Set();\r\n    filteredData.forEach(brand => {\r\n        brand.godowns.forEach(godown => {\r\n            godown.products.forEach(product => {\r\n                product.packs.forEach(pack => {\r\n                    allPackTypes.add(pack.packType);\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    const godownPackMap = filteredData[0].godowns.map((godown) => ({\r\n        godownName: godown.godownName,\r\n        godownId: godown.godownId,\r\n        packTypes: Array.from(allPackTypes).sort(),\r\n    }));\r\n\r\n    const headerRow1 = [\"Products\"];\r\n    const headerRow2 = [\"\"];\r\n    const headerRow3 = [\"\"];\r\n\r\n    godownPackMap.forEach((g) => {\r\n        const span = g.packTypes.length * 3;\r\n\r\n        for (let i = 0; i < span; i++) {\r\n            headerRow1.push(\"\");\r\n        }\r\n\r\n        g.packTypes.forEach((pt) => {\r\n            headerRow2.push(pt, \"\", \"\");\r\n            headerRow3.push(\"Wk Avg\", \"Yest\", \"Bal\");\r\n        });\r\n    });\r\n\r\n    worksheet.addRow(headerRow1);\r\n    worksheet.addRow(headerRow2);\r\n    worksheet.addRow(headerRow3);\r\n\r\n    let colIndex = 2;\r\n    godownPackMap.forEach((g) => {\r\n        const span = g.packTypes.length * 3;\r\n\r\n        worksheet.mergeCells(2, colIndex, 2, colIndex + span - 1);\r\n        const godownCell = worksheet.getCell(2, colIndex);\r\n        godownCell.value = g.godownName;\r\n\r\n        godownCell.font = { bold: true, size: 12, color: { argb: \"FFFFFFFF\" } };\r\n\r\n        godownCell.alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n\r\n        godownCell.fill = {\r\n            type: \"pattern\",\r\n            pattern: \"solid\",\r\n            fgColor: { argb: \"4472C4\" },\r\n        };\r\n\r\n        for (let i = colIndex; i <= colIndex + span - 1; i++) {\r\n            const cell = worksheet.getCell(2, i);\r\n            cell.border = {\r\n                top: { style: \"medium\" },\r\n                left: { style: i === colIndex ? \"medium\" : \"thin\" },\r\n                right: { style: i === colIndex + span - 1 ? \"medium\" : \"thin\" },\r\n                bottom: { style: \"medium\" },\r\n            };\r\n        }\r\n\r\n        colIndex += span;\r\n    });\r\n\r\n    colIndex = 2;\r\n    godownPackMap.forEach((g) => {\r\n        g.packTypes.forEach(() => {\r\n            worksheet.mergeCells(3, colIndex, 3, colIndex + 2);\r\n            colIndex += 3;\r\n        });\r\n    });\r\n\r\n    worksheet.getRow(4).eachCell((cell) => {\r\n        cell.font = { bold: true };\r\n        cell.alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n        cell.fill = {\r\n            type: \"pattern\",\r\n            pattern: \"solid\",\r\n            fgColor: { argb: \"FFFF00\" },\r\n        };\r\n        cell.border = {\r\n            top: { style: \"thin\" },\r\n            left: { style: \"thin\" },\r\n            bottom: { style: \"thin\" },\r\n            right: { style: \"thin\" },\r\n        };\r\n    });\r\n\r\n \r\n    const totalCols = 1 + godownPackMap.reduce((sum, g) => sum + g.packTypes.length * 3, 0);\r\n\r\n    filteredData.forEach((brand) => {\r\n    \r\n        const allProducts = new Set();\r\n        brand.godowns.forEach(godown => {\r\n            godown.products.forEach(product => {\r\n                allProducts.add(product.baseProduct);\r\n            });\r\n        });\r\n        \r\n        const productList = Array.from(allProducts);\r\n\r\n        const brandRow = worksheet.addRow([brand.brandName]);\r\n        for (let i = 1; i <= totalCols; i++) {\r\n            const cell = brandRow.getCell(i);\r\n            cell.fill = {\r\n                type: \"pattern\",\r\n                pattern: \"solid\",\r\n                fgColor: { argb: \"7030A0\" },\r\n            };\r\n            cell.font = { bold: true, size: 13, color: { argb: \"FFFFFFFF\" } };\r\n            cell.alignment = {\r\n                horizontal: i === 1 ? \"left\" : \"center\",\r\n                vertical: \"middle\",\r\n            };\r\n        }\r\n\r\n       \r\n        productList.forEach((productName) => {\r\n            const row = [productName];\r\n            \r\n            godownPackMap.forEach((godown) => {\r\n                const godownObj = brand.godowns.find(\r\n                    (g) => g.godownId === godown.godownId\r\n                );\r\n                \r\n                const productObj = godownObj?.products.find(\r\n                    (p) => p.baseProduct === productName\r\n                );\r\n             \r\n             godown.packTypes.forEach((packType) => {\r\n    if (productObj) {\r\n        const pack = productObj.packs.find((pk) => pk.packType === packType);\r\n\r\n        row.push(Number((pack?.weeklyAverage || 0).toFixed(2)));\r\n        row.push(Number((pack?.yesterdayQty || 0).toFixed(2)));\r\n        row.push(Number((pack?.balanceQty || 0).toFixed(2)));\r\n    } else {\r\n        row.push(0.00, 0.00, 0.00);\r\n    }\r\n});\r\n\r\n            });\r\n            \r\n            worksheet.addRow(row);\r\n        });\r\n\r\n        worksheet.addRow([]);\r\n    });\r\n\r\n    worksheet.columns.forEach((col) => {\r\n        col.width = 15;\r\n    });\r\n\r\n    const buffer = await workbook.xlsx.writeBuffer();\r\n    saveAs(new Blob([buffer]), `STOCK_REPORT_${filters.passingDate}.xlsx`);\r\n};\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n                <Typography variant=\"h4\" component=\"h1\">\r\n                    Stock Paper\r\n                </Typography>\r\n\r\n                <Box sx={{ display: 'flex', gap: 1, marginLeft: 'auto' }}>\r\n                    <Tooltip title=\"Filter\">\r\n                        <IconButton\r\n                            color=\"primary\"\r\n                            onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                        >\r\n                            <FilterAlt />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title=\"Download Excel\">\r\n                        <Button variant=\"contained\" color=\"success\" onClick={exportToExcel}>\r\n                            Download Excel\r\n                        </Button>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Box>\r\n\r\n            {(filters.selectedBrands.length > 0 || filters.selectedProducts.length > 0 || filters.selectedGodowns.length > 0) && (\r\n                <Box sx={{ mb: 2 }}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                        Active Filters:\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                        {filters.selectedBrands.map(brand => (\r\n                            <Chip\r\n                                key={brand}\r\n                                label={`Brand: ${brand}`}\r\n                                onDelete={() => setFilters({\r\n                                    ...filters,\r\n                                    selectedBrands: filters.selectedBrands.filter(b => b !== brand)\r\n                                })}\r\n                                color=\"primary\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        ))}\r\n                        {filters.selectedProducts.map(product => (\r\n                            <Chip\r\n                                key={product}\r\n                                label={`Product: ${product}`}\r\n                                onDelete={() => setFilters({\r\n                                    ...filters,\r\n                                    selectedProducts: filters.selectedProducts.filter(p => p !== product)\r\n                                })}\r\n                                color=\"secondary\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        ))}\r\n                        {filters.selectedGodowns.map(godown => (\r\n                            <Chip\r\n                                key={godown}\r\n                                label={`Godown: ${godown}`}\r\n                                onDelete={() => setFilters({\r\n                                    ...filters,\r\n                                    selectedGodowns: filters.selectedGodowns.filter(g => g !== godown)\r\n                                })}\r\n                                color=\"info\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        ))}\r\n                    </Box>\r\n                </Box>\r\n            )}\r\n\r\n            <FilterableTable\r\n                title=\"Stock Details\"\r\n                dataArray={filteredData}\r\n                EnableSerialNumber\r\n                columns={[\r\n                    createCol(\"brandName\", \"string\", \"Brand Name\"),\r\n                ]}\r\n                ButtonArea={\r\n                    <Tooltip title=\"Clear Filters\">\r\n                        <IconButton onClick={() => setFilters({\r\n                            ...defaultFilters,\r\n                            passingDate: filters.passingDate\r\n                        })}>\r\n                            <FilterAltOff />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                isExpendable={true}\r\n                tableMaxHeight={550}\r\n                expandableComp={ExpendableComponent2}\r\n            />\r\n\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={() => setFilters({ ...filters, filterDialog: false })}\r\n                maxWidth=\"md\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Filter Options</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Date\"\r\n                                type=\"date\"\r\n                                value={filters.passingDate}\r\n                                onChange={(e) => setFilters({\r\n                                    ...filters,\r\n                                    passingDate: e.target.value,\r\n                                })}\r\n                                InputLabelProps={{ shrink: true }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                multiple\r\n                                options={allBrands}\r\n                                value={filters.selectedBrands}\r\n                                onChange={(e, newValue) =>\r\n                                    setFilters({ ...filters, selectedBrands: newValue })\r\n                                }\r\n                                renderInput={(params) => (\r\n                                    <TextField {...params} label=\"Brands\" placeholder=\"Search brands...\" />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                multiple\r\n                                options={allProducts}\r\n                                value={filters.selectedProducts}\r\n                                onChange={(e, newValue) =>\r\n                                    setFilters({ ...filters, selectedProducts: newValue })\r\n                                }\r\n                                renderInput={(params) => (\r\n                                    <TextField {...params} label=\"Products\" placeholder=\"Search products...\" />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <FormControl fullWidth>\r\n                                <InputLabel>Godowns</InputLabel>\r\n                                <Select\r\n                                    multiple\r\n                                    value={filters.selectedGodowns}\r\n                                    onChange={(e) => setFilters({\r\n                                        ...filters,\r\n                                        selectedGodowns: e.target.value\r\n                                    })}\r\n                                    renderValue={(selected) => selected.join(', ')}\r\n                                    label=\"Godowns\"\r\n                                >\r\n                                    {allGodowns.map((godown) => (\r\n                                        <MenuItem key={godown} value={godown}>\r\n                                            <Checkbox checked={filters.selectedGodowns.indexOf(godown) > -1} />\r\n                                            <ListItemText primary={godown} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={() => setFilters({ ...filters, filterDialog: false })}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setFilters({ ...filters, filterDialog: false });\r\n                            fetchReportData();\r\n                        }}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default StockPaper;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","arguments","length","undefined","Fied_Data","align","verticalAlign","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","type","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","defaultFilters","passingDate","Date","toISOString","split","getFormattedDate","selectedBrands","selectedProducts","selectedGodowns","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","reportData","setReportData","loading","setLoading","filters","setFilters","filterDialog","allBrands","setAllBrands","allProducts","setAllProducts","allGodowns","setAllGodowns","useEffect","brands","item","brandName","products","godowns","brand","godown","add","godownName","product","baseProduct","includes","push","fetchReportData","useCallback","async","response","fetchLink","address","method","success","message","Company_id","filteredData","useMemo","_brand$godowns","some","_godown$products","_brand$godowns2","filteredGodowns","filteredProducts","Box","p","display","alignItems","mb","Typography","variant","gap","marginLeft","FilterAlt","Button","alert","ExcelJS","addWorksheet","mergeCells","getCell","toLocaleDateString","font","bold","alignment","allPackTypes","packs","pack","packType","godownPackMap","godownId","packTypes","headerRow1","headerRow2","headerRow3","g","span","pt","addRow","colIndex","godownCell","argb","fill","pattern","fgColor","border","top","style","left","right","bottom","getRow","eachCell","cell","totalCols","reduce","sum","productList","brandRow","productName","godownObj","productObj","pk","weeklyAverage","toFixed","yesterdayQty","balanceQty","col","width","buffer","xlsx","writeBuffer","saveAs","Blob","gutterBottom","flexWrap","Chip","label","onDelete","FilterAltOff","_row$godowns$","flatMap","pIndex","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","Grid","container","spacing","mt","xs","TextField","onChange","InputLabelProps","shrink","Autocomplete","multiple","options","newValue","renderInput","params","placeholder","FormControl","InputLabel","Select","renderValue","selected","join","Checkbox","checked","indexOf","primary","DialogActions"],"sourceRoot":""}