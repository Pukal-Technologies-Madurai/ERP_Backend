{"version":3,"file":"static/js/2959.75f4e260.chunk.js","mappings":"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","sources":["Components/filterableTable2.jsx","Pages/Reports/outStandingNew.jsx"],"sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Tooltip,\r\n  MenuItem,\r\n  Select,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  InputLabel,\r\n  Checkbox,\r\n  Chip,\r\n  ListItemText,\r\n  Sync\r\n} from \"@mui/material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction OutStandingNew({ loadingOn, loadingOff }) {\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split(\"T\")[0];\r\n  };\r\n\r\n  const [filters, setFilters] = useState({\r\n    Fromdate: getTodayDate(),\r\n    File_No: [],\r\n    filterMode: \"include\",\r\n  });\r\n  const [fileNoOptions, setFileNoOptions] = useState([]);\r\n  const [allOutstandingData, setAllOutstandingData] = useState([]);\r\n  const [salesReceipts, setSalesReceipts] = useState([]);\r\n  const [Total_Invoice_value, setTotal_Invoice_value] = useState(0);\r\n  const [activeButton, setActiveButton] = useState(\"tillBilling\");\r\n  const [filterDialogOpen, setFilterDialogOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const convertToPositive = (value) => {\r\n    const numValue = Number(value || 0);\r\n    return Math.abs(numValue);\r\n  };\r\n\r\n\r\n  const processData = (data) => {\r\n    if (!Array.isArray(data)) return [];\r\n    return data.map((item) => ({\r\n      ...item,\r\n      \"Above 30 Pending Amt\": convertToPositive(item[\"Above 30 Pending Amt\"]),\r\n      \"Overall Outstanding Amt\": convertToPositive(item[\"Overall Outstanding Amt\"]),\r\n      Total_Invoice_value: convertToPositive(item.Total_Invoice_value || 0),\r\n    }));\r\n  };\r\n\r\n  const calculateTotal = (arr) => {\r\n    if (!Array.isArray(arr)) return 0;\r\n    return arr.reduce((sum, item) => sum + (item.Total_Invoice_value || 0), 0);\r\n  };\r\n\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      if (loadingOn) loadingOn();\r\n\r\n      const formattedDate = encodeURIComponent(filters.Fromdate);\r\n\r\n      \r\n      const outstandingRes = await fetchLink({ \r\n        address: `receipt/outStandingAbove?reqDate=${formattedDate}` \r\n      });\r\n      \r\n  \r\n      \r\n      const outstandingData = Array.isArray(outstandingRes) \r\n        ? outstandingRes \r\n        : outstandingRes?.data || [];\r\n\r\n\r\n      const processedData = processData(outstandingData);\r\n      setAllOutstandingData(processedData);\r\n\r\n    \r\n      const uniqueFileNos = [...new Set(processedData.map((item) => item.File_No).filter(Boolean))];\r\n      setFileNoOptions(uniqueFileNos);\r\n\r\n  \r\n      const tillBillingData = processedData.filter(item => \r\n        item.Billing === 'Till_Billing'\r\n      );\r\n      \r\n      setSalesReceipts(tillBillingData);\r\n      setTotal_Invoice_value(calculateTotal(tillBillingData));\r\n      setActiveButton(\"tillBilling\");\r\n      \r\n    } catch (error) {\r\n     \r\n      setAllOutstandingData([]);\r\n      setSalesReceipts([]);\r\n      setTotal_Invoice_value(0);\r\n      setFileNoOptions([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n      if (loadingOff) loadingOff();\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (allOutstandingData.length === 0) return;\r\n\r\n    let sourceData = [];\r\n    \r\n\r\n    if (activeButton === \"tillBilling\") {\r\n      sourceData = allOutstandingData.filter(item => item.Billing === 'Till_Billing');\r\n    } else if (activeButton === \"noBilling\") {\r\n      sourceData = allOutstandingData.filter(item => item.Billing === 'No_Billing');\r\n    }\r\n\r\n\r\n    let filtered = sourceData;\r\n    if (filters.File_No.length > 0) {\r\n      if (filters.filterMode === \"include\") {\r\n        filtered = sourceData.filter((row) => filters.File_No.includes(row.File_No));\r\n      } else {\r\n        filtered = sourceData.filter((row) => !filters.File_No.includes(row.File_No));\r\n      }\r\n    }\r\n\r\n    setSalesReceipts(filtered);\r\n    setTotal_Invoice_value(calculateTotal(filtered));\r\n  }, [filters, activeButton, allOutstandingData]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const handleButtonClick = (buttonType) => {\r\n    setActiveButton(buttonType);\r\n\r\n  };\r\n\r\n\r\n  const applyFilters = () => {\r\n    setFilterDialogOpen(false);\r\n  };\r\n\r\n      const syncLOS = () => {\r\n          if (loadingOn) loadingOn();\r\n         \r\n          fetchLink({\r\n              address: `reports/syncPosPending`,\r\n              method: 'POST',\r\n              bodyData:allOutstandingData\r\n          }).then(data => {\r\n              if (data.success) toast.success(data.message);\r\n              else toast.error(data.message);\r\n          }).catch(e => console.error(e)).finally(() => {\r\n              if (loadingOff) loadingOff();\r\n          })\r\n      }\r\n\r\n  return (\r\n    <div>\r\n      <FilterableTable\r\n        title={\r\n          activeButton === \"tillBilling\" ? \"Till Billing\" : \"OutStanding No Bill\"\r\n        }\r\n        ButtonArea={\r\n          <div style={{ display: \"flex\",gap: \"8px\" }}>\r\n            <input\r\n              type=\"date\"\r\n              value={filters.Fromdate || \"\"}\r\n              onChange={(e) => setFilters({ ...filters, Fromdate: e.target.value })}\r\n              className=\"cus-inpt\"\r\n              style={{ padding: \"4px\", minWidth: '150px' }}\r\n            />\r\n\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              onClick={() => setFilterDialogOpen(true)}\r\n              sx={{ height: 40 }}\r\n              disabled={isLoading}\r\n            >\r\n              Filter\r\n            </Button>\r\n <Button\r\n      variant=\"contained\"\r\n      color=\"success\"\r\n      onClick={syncLOS}\r\n      sx={{ height: 40, minWidth: 100 }}\r\n      disabled={isLoading}\r\n    >\r\n      Sync\r\n    </Button>\r\n\r\n            <Tooltip title=\"Search\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                onClick={fetchData}\r\n                sx={{ height: 40 }}\r\n                disabled={isLoading}\r\n              >\r\n                <SearchIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n\r\n            <Button\r\n              variant={activeButton === \"tillBilling\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              onClick={() => handleButtonClick(\"tillBilling\")}\r\n              sx={{ minWidth: 120, height: 40 }}\r\n              disabled={isLoading}\r\n            >\r\n              Till Billing\r\n            </Button>\r\n\r\n            <Button\r\n              variant={activeButton === \"noBilling\" ? \"contained\" : \"outlined\"}\r\n              color=\"primary\"\r\n              onClick={() => handleButtonClick(\"noBilling\")}\r\n              sx={{ minWidth: 120, height: 40 }}\r\n              disabled={isLoading}\r\n            >\r\n              No Billing\r\n            </Button>\r\n\r\n            {Number(Total_Invoice_value) > 0 && (\r\n              <h6 className=\"m-0 text-end text-muted px-3\">\r\n                Total: {Math.round(Total_Invoice_value).toLocaleString()}\r\n              </h6>\r\n            )}\r\n\r\n          </div>\r\n        }\r\n        EnableSerialNumber\r\n        dataArray={salesReceipts}\r\n        headerFontSizePx={14}\r\n        bodyFontSizePx={13}\r\n        ExcelPrintOption={true}\r\n        columns={[\r\n          createCol(\"Retailer_Name\", \"string\", \"Retailer Name\"),\r\n          createCol(\"Ref_Owners\", \"string\", \"Ref Owners\"),\r\n          createCol(\"Ref_Brokers\", \"string\", \"Ref Brokers\"),\r\n          createCol(\"QPay\", \"number\", \"QPay\"),\r\n          createCol(\"Above_30_Days_Pending_Amt\", \"number\", \"Above 30 Pending Amt\"),\r\n          createCol(\"Total_Pending_Bills\", \"number\", \"No of Bills\"),\r\n          createCol(\"Overall_Outstanding_Amt\", \"number\", \"Overall Outstanding Amt\"),\r\n          createCol(\"Billing\", \"string\", \"Billing Type\"),\r\n        ]}\r\n        isExpendable={false}\r\n        expandableComp={({ row }) => (\r\n          <div className=\"py-2\">\r\n            <FilterableTable\r\n              disablePagination\r\n              headerFontSizePx={13}\r\n              bodyFontSizePx={12}\r\n              dataArray={Array.isArray(row?.Receipts) ? row.Receipts : []}\r\n              columns={[\r\n                createCol(\"Do_Inv_No\", \"string\", \"Delivery Invoice\"),\r\n                createCol(\"Do_Date\", \"date\", \"Delivery Date\"),\r\n                createCol(\"collected_amount\", \"number\", \"Receipt Amount\"),\r\n                createCol(\"total_receipt_amount\", \"number\", \"Total Receipt\"),\r\n                createCol(\"Total_Invoice_value\", \"number\", \"Invoice Value\"),\r\n                {\r\n                  isVisible: 1,\r\n                  ColumnHeader: \"Pending Amount\",\r\n                  isCustomCell: true,\r\n                  Cell: ({ row }) => convertToPositive(\r\n                    Number(row?.bill_amount || 0) - Number(row?.total_receipt_amount || 0)\r\n                  ),\r\n                },\r\n              ]}\r\n            />\r\n          </div>\r\n        )}\r\n      />\r\n\r\n      <Dialog open={filterDialogOpen} onClose={() => setFilterDialogOpen(false)}>\r\n        <DialogTitle>File Name Filter</DialogTitle>\r\n        <DialogContent dividers sx={{ minWidth: 400 }}>\r\n          <div style={{ marginBottom: \"20px\" }}>\r\n            <InputLabel>File Nos</InputLabel>\r\n            <Select\r\n              multiple\r\n              fullWidth\r\n              value={filters.File_No}\r\n              onChange={(e) => setFilters({\r\n                ...filters,\r\n                File_No: typeof e.target.value === \"string\" ? e.target.value.split(\",\") : e.target.value,\r\n              })}\r\n              renderValue={(selected) => (\r\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: \"4px\" }}>\r\n                  {selected.map((value) => (\r\n                    <Chip\r\n                      key={value}\r\n                      label={value}\r\n                      size=\"small\"\r\n                      onDelete={() => setFilters({\r\n                        ...filters,\r\n                        File_No: filters.File_No.filter((f) => f !== value),\r\n                      })}\r\n                      onMouseDown={(e) => e.stopPropagation()}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            >\r\n              {fileNoOptions.map((file, idx) => (\r\n                <MenuItem key={idx} value={file}>\r\n                  <Checkbox checked={filters.File_No.includes(file)} />\r\n                  <ListItemText primary={file} />\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n\r\n          <div>\r\n            <InputLabel>Filter Mode</InputLabel>\r\n            <Select\r\n              fullWidth\r\n              value={filters.filterMode}\r\n              onChange={(e) => setFilters({ ...filters, filterMode: e.target.value })}\r\n            >\r\n              <MenuItem value=\"include\">Include Selected</MenuItem>\r\n              <MenuItem value=\"exclude\">Exclude Selected</MenuItem>\r\n            </Select>\r\n          </div>\r\n        </DialogContent>\r\n\r\n        <DialogActions sx={{ justifyContent: \"space-between\", px: 3, pb: 2 }}>\r\n          <Button\r\n            onClick={() => setFilters({ ...filters, File_No: [] })}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n          >\r\n            Clear All\r\n          </Button>\r\n          <Button onClick={applyFilters} variant=\"contained\" color=\"primary\">\r\n            Apply\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutStandingNew;"],"names":["preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","_jsx","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","loadingOn","loadingOff","filters","setFilters","Fromdate","Date","toISOString","split","File_No","filterMode","fileNoOptions","setFileNoOptions","allOutstandingData","setAllOutstandingData","salesReceipts","setSalesReceipts","Total_Invoice_value","setTotal_Invoice_value","activeButton","setActiveButton","filterDialogOpen","setFilterDialogOpen","isLoading","setIsLoading","convertToPositive","numValue","Math","abs","calculateTotal","arr","isArray","reduce","sum","item","fetchData","async","formattedDate","encodeURIComponent","outstandingRes","fetchLink","address","outstandingData","uniqueFileNos","tillBillingData","Billing","useEffect","sourceData","filtered","includes","handleButtonClick","buttonType","style","display","gap","onChange","padding","minWidth","Button","variant","height","syncLOS","method","bodyData","then","success","toast","message","catch","finally","SearchIcon","round","toLocaleString","Receipts","bill_amount","total_receipt_amount","Dialog","DialogTitle","DialogContent","dividers","marginBottom","InputLabel","Select","multiple","fullWidth","renderValue","selected","flexWrap","Chip","label","onDelete","f","onMouseDown","stopPropagation","file","idx","Checkbox","checked","primary","DialogActions","justifyContent","px","pb","applyFilters"],"sourceRoot":""}