{"version":3,"file":"static/js/2063.46affd99.chunk.js","mappings":"kNAEO,SAASA,EAA2BC,GACzC,OAAOC,EAAAA,EAAAA,IAAqB,iBAAkBD,EAChD,EAC2BE,EAAAA,EAAAA,GAAuB,iBAAkB,CAAC,S,eCDrE,MAAMC,EAAY,CAAC,YAAa,aAkB1BC,GAAkBC,EAAAA,EAAAA,IAAO,MAAO,CACpCC,KAAM,iBACNN,KAAM,OACNO,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOC,MAHvBL,CAIrB,KACM,CACLM,QAAS,GACT,eAAgB,CACdC,cAAe,OAoDrB,EAhDiCC,EAAAA,WAAiB,SAAqBC,EAASC,GAC9E,MAAMP,GAAQQ,EAAAA,EAAAA,GAAgB,CAC5BR,MAAOM,EACPR,KAAM,oBAEF,UACFW,EAAS,UACTC,EAAY,OACVV,EACJW,GAAQC,EAAAA,EAAAA,GAA8BZ,EAAOL,GACzCkB,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGd,EAAO,CACrCU,cAEIK,EAlCkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZd,KAAM,CAAC,SAEoBX,EAA4BwB,IA2BzCE,CAAkBJ,GAClC,OAAoBK,EAAAA,EAAAA,KAAKtB,GAAiBkB,EAAAA,EAAAA,GAAS,CACjDK,GAAIT,EACJD,WAAWW,EAAAA,EAAAA,GAAKL,EAAQb,KAAMO,GAC9BI,WAAYA,EACZN,IAAKA,GACJI,GACL,E,uYCYA,MAAMU,EAA0BA,CAACC,EAAMC,IAC5BD,EAAKE,IAAKC,IACb,MAAMC,EAAe,CAAC,EA2BtB,OAzBAH,EAAQI,QAAQ,CAACC,EAAQC,KACrB,GAAID,EAAOE,WAAaF,EAAOG,eAC3B,GAAIH,EAAOI,cAAgBJ,EAAOK,KAAM,CACpC,MAAMC,EAAcN,EAAOK,KAAK,CAAER,QAE5BU,EAAmBP,EAAOQ,aAC1BC,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,cAAa,SAAAC,OACrDX,EAAQ,GAEI,kBAAhBK,GAAmD,kBAAhBA,GAAmD,kBAAhBA,IAC7ER,EAAaS,GAAoBD,EAOzC,KAAO,CAEH,IAAIO,EAAMb,EAAOc,WACjBhB,EAAae,GAAOhB,EAAIgB,IAAQ,EACpC,IAIDf,IA0CTiB,EAAY,WAOZ,IANFC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACRG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SACPT,EAAYS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfI,EAAKJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OACRK,EAAaL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SAChBf,EAASe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAEZ,OAAAM,EAAAA,EAAAA,GAAA,CACIrB,UAAWA,EACXY,WAAYE,EACZQ,UAAWJ,EACXC,QACAC,iBACId,GAAgB,CAAEA,gBAE9B,EAEMiB,EAAgBC,IAAoD,IAAnD,YAAEC,EAAc,GAAE,YAAEC,EAAc,WAAWF,EAChE,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,MAEnCC,EAAcC,QAAQJ,GAU5B,OACIK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACI9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,CAACC,MAAOV,EAAYQ,UACxB9C,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAAC,mBAAkBP,EAAaQ,QAXlCC,IACjBX,EAAYW,EAAMC,gBAUuD7D,UAAU,OAAO8D,KAAK,QAAOP,UAC1F9C,EAAAA,EAAAA,KAACsD,EAAAA,EAAQ,SAIjBtD,EAAAA,EAAAA,KAACuD,EAAAA,GAAO,CACJC,KAAMd,EACNH,SAAUA,EACVkB,QAfQC,KAChBlB,EAAY,OAeJmB,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,QACdf,UAEF9C,EAAAA,EAAAA,KAAC+D,EAAAA,EAAQ,CAAAjB,SACJT,EAAY/B,IAAI,CAAC0D,EAAKC,KACnBrB,EAAAA,EAAAA,MAACsB,EAAAA,EAAQ,CAELhB,QAASA,KAAS,OAAHc,QAAG,IAAHA,OAAG,EAAHA,EAAKG,WAAc,OAAHH,QAAG,IAAHA,OAAG,EAAHA,EAAKG,WACpCC,SAAa,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKI,SAAStB,SAAA,EAExB9C,EAAAA,EAAAA,KAACqE,EAAAA,EAAY,CAAAvB,SAAK,OAAHkB,QAAG,IAAHA,OAAG,EAAHA,EAAKM,QACpBtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAY,CAAAzB,SAAK,OAAHkB,QAAG,IAAHA,OAAG,EAAHA,EAAKpF,SALfqF,YAc3BO,EAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOD,GAAME,EAAAA,EAAAA,IAAaF,GAAOA,EACrC,IAAK,OACD,OAAOA,GAAMG,EAAAA,EAAAA,IAAUH,GAAOA,EAClC,IAAK,OACD,OAAOA,GAAMI,EAAAA,EAAAA,IAAUJ,GAAOA,EAClC,IAAK,SACD,OAAOA,EACX,QACI,MAAO,KAIbK,EAAkBC,IAmBjB,IAnBkB,UACrBC,EAAY,GAAE,QACd3E,EAAU,GAAE,WACZ4E,EAAa,KAAI,aACjBC,GAAe,EAAK,eACpBC,EAAiB,KAAI,eACrBC,EAAiB,IAAG,iBACpBC,EAAmB,GAAE,mBACrBC,GAAqB,EAAK,SAC1BC,EAAW,QAAmB,kBAC9BC,GAAoB,EAAK,MACzBxC,EAAQ,GAAE,eACVyC,GAAiB,EAAK,iBACtBC,GAAmB,EAAK,gBACxBC,GAAkB,EAAK,WACvBC,EAAa,KAAI,YACjBC,EAAc,GAAE,eAChBC,EAAiB,GAAE,iBACnBC,EAAmB,IACtBhB,EAEG,MAAOiB,EAAMC,IAAWxD,EAAAA,EAAAA,UAAS,IAC1ByD,EAAaC,IAAkB1D,EAAAA,EAAAA,UAAS4C,IACxCe,EAAcC,IAAmB5D,EAAAA,EAAAA,UAAS,KAC1C6D,EAAgBC,IAAqB9D,EAAAA,EAAAA,WAAS,GAC/C+D,EAAeF,GAAkBX,EAAmB,gBAAkBP,EAEtEqB,EAAc,CAChB,CACI3E,KAAM,OACN4E,MAAO,cACR,CACC5E,KAAM,QACN4E,MAAO,YACR,CACC5E,KAAM,SACN4E,MAAO,gBAITC,GAAsB,CACxB,CACI7E,KAAM,MACN4E,MAAO,UACR,CACC5E,KAAM,SACN4E,MAAO,aACR,CACC5E,KAAM,SACN4E,MAAO,WAkDTE,GAvBYxG,KACd,IAAKgG,EAAaxE,OAAQ,OAAOxB,EAmBjC,MAjBmB,IAAIA,GAAMyG,KAAK,CAACC,EAAGC,KAClC,IAAK,MAAMC,KAAYZ,EAAc,CACjC,MAAM,SAAEa,EAAQ,UAAEC,GAAcF,EAC1BG,EAASL,EAAEG,GACXG,EAASL,EAAEE,GAEjB,GAAIE,IAAWC,EACX,MAAkB,QAAdF,EACOC,EAASC,EAAS,GAAK,EAEvBD,EAASC,EAAS,GAAK,CAG1C,CACA,OAAO,KAMIC,CAASrC,GACtBsC,GAAatB,EAAOE,EACpBqB,GAAWD,GAAapB,EACxBsB,GAAgBZ,GAAWa,MAAMH,GAAYC,IAE7CG,GAAUC,IAAqB,IAApB,IAAEpH,EAAG,MAAEI,GAAOgH,EAC3B,MAAOnE,EAAMoE,IAAWnF,EAAAA,EAAAA,WAAS,GAC3BoF,EAAW,OAEjB,OACIjF,EAAAA,EAAAA,MAACkF,EAAAA,SAAQ,CAAAhF,SAAA,EACLF,EAAAA,EAAAA,MAACmF,EAAAA,EAAQ,CAAAjF,SAAA,EAEc,IAAjBoC,GAAyBC,IACvBnF,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAACzI,UAAU,8BAA8B0I,GAAI,CAAEJ,SAAS,GAADvG,OAAKwE,EAAc,OAAOhD,UACvF9C,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAACI,KAAK,QAAQH,QAASA,IAAM0E,EAAQM,IAAQA,GAAKpF,SACxDU,GAAOxD,EAAAA,EAAAA,KAACmI,EAAAA,EAAe,CAACF,GAAI,CAAEJ,eAAiB7H,EAAAA,EAAAA,KAACoI,EAAAA,EAAiB,CAACH,GAAI,CAAEJ,mBAK7D,IAAvBvC,IACGtF,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAACzI,UAAU,8BAA8B0I,GAAI,CAAEJ,SAAS,GAADvG,OAAKwE,EAAc,OAAOhD,SACrFoD,EAAcF,EAAQrF,EAAQ,IAIhC,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASC,IAAI,CAACI,EAAQ2H,KAAe,IAADC,EAAAC,EACjC,MAAMC,GAAkBC,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4H,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/FE,EAAe6B,QAAc,OAANjC,QAAM,IAANA,OAAM,EAANA,EAAQI,eAAiBJ,EAAOK,KACvD2H,GAAiB5H,EAEjB6H,EAAUA,CAACpI,EAAKiB,EAAYoH,IACxB,OAANlI,QAAM,IAANA,GAAAA,EAAQiI,QAAO,IAAArH,OAAa,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQiI,QAAQ,CAAEpI,MAAKiB,aAAYb,MAAOiI,IAAU,KAAM,GAG9EC,EAAuBnI,EAAOqB,MAC8C,QADzCuG,EACnC7B,EAAYqC,KAAK/G,GAASA,EAAMD,OAASX,OAAOT,EAAOqB,OAAOV,sBAAc,IAAAiH,OAAA,EAA5EA,EAA8E5B,MAC9E,GAEAqC,EAAqBrI,EAAOsB,cACgE,QADnDuG,EACzC5B,GAAoBmC,KAAK/G,GAASA,EAAMD,OAASX,OAAOT,EAAOsB,eAAeX,sBAAc,IAAAkH,OAAA,EAA5FA,EAA8F7B,MAC9F,SAEN,GAAI8B,GAAmBE,EAAe,CAClC,MAAMM,EAAaC,OAAOC,QAAQ3I,GAAKuI,KAAKK,IAAA,IAAE5H,GAAI4H,EAAA,OAAK5H,IAAQb,EAAOc,aAEtE,OACIxB,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAENzI,UAAS,cAAA+B,OAAgBuH,EAAoB,KAAAvH,OAAIyH,EAAkB,KAAAzH,OAAIqH,EAAQpI,EAAKG,EAAOc,WAAYb,IACvGsH,GAAI,CAAEJ,SAAS,GAADvG,OAAKwE,EAAc,OACjC5C,QAASA,IAAM+B,EAAaA,EAAW1E,GAAO6I,QAAQC,IAAI,yBAAyBvG,SAElFkG,EAAaxE,EAAawE,EAAW,GAAU,OAANtI,QAAM,IAANA,OAAM,EAANA,EAAQwB,WAAa,KAL1DmG,EAQjB,CAEA,OAAIG,GAAmB1H,GAEfd,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAENzI,UAAS,cAAA+B,OAAgBuH,EAAoB,KAAAvH,OAAIyH,EAAkB,KAAAzH,OAAIqH,EAAQpI,EAAKG,EAAOc,WAAYb,IACvGsH,GAAI,CAAEJ,SAAS,GAADvG,OAAKwE,EAAc,OAAOhD,SAEvCpC,EAAOK,KAAK,CAAER,MAAKiB,WAAYd,EAAOc,WAAYb,WAJ9C0H,IAUbrI,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAENC,GAAI,CAAEJ,SAAS,GAADvG,OAAKwE,EAAc,OACjCvG,UAAS,cAAA+B,OAAgBuH,EAAoB,KAAAvH,OAAIyH,GAAqBjG,SACzE,KAHQuF,SAWF,IAAjBnD,GAAyBC,GAAkB3B,IACzCxD,EAAAA,EAAAA,KAAC+H,EAAAA,EAAQ,CAAAjF,UACL9C,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAACsB,QAASC,OAAc,OAAPlJ,QAAO,IAAPA,OAAO,EAAPA,EAASuB,UAAkC,IAAvB0D,EAA8B,EAAI,GAAGxC,SAAEqC,EAAe,CAAE5E,MAAKI,kBAOhI,OACIiC,EAAAA,EAAAA,MAAC4G,EAAAA,EAAI,CAACjK,UAAU,qCAAqCC,UAAWiK,EAAAA,EAAM3G,SAAA,EAClEF,EAAAA,EAAAA,MAAA,OACIrD,UAAU,kEAAiEuD,SAAA,EAEzE2C,GAAkBC,GAAoBG,EAAYjE,OAAS,GAAK+D,KAC9D3F,EAAAA,EAAAA,KAACmC,EAAa,CACVG,YAAY,gBACZD,YAAa,IACLsD,EACE,CAAC,CACC/G,KAAM,aACN0F,KAAMgC,GACAtG,EAAAA,EAAAA,KAAC0J,EAAAA,EAAQ,CAAC7B,SAAS,QAAQ8B,MAAM,aACjC3J,EAAAA,EAAAA,KAAC4J,EAAAA,EAAS,CAAC/B,SAAS,UAC1B1D,QAASA,IAAMoC,EAAkB2B,IAAQA,GACzC9D,UAAUqE,EAAAA,EAAAA,IAAuB,OAATzD,QAAS,IAATA,OAAS,EAATA,EAAWpD,OAAQ,KAE7C,MACF6D,EACE,CAAC,CACC7G,KAAM,YACN0F,MAAMtE,EAAAA,EAAAA,KAAC6J,EAAAA,EAAQ,CAAChC,SAAS,QAAQ8B,MAAM,YACvCxF,QAASA,IAjVzB2F,EAAC9E,EAAW3E,KAC5B,IACI,MAAM0J,EAAM,IAAIC,EAAAA,QACVC,EAAgB9J,EAAwB6E,EAAW3E,GAEnD6J,EAAU7J,EACX8J,OAAQzJ,GAAWA,EAAOE,WAAaF,EAAOG,gBAC9CP,IAAKI,GAAWA,EAAOc,YAAcL,OAAOT,EAAOQ,cAAcE,QAAQ,OAAQ,KAAKC,eAErF+I,EAAOH,EAAc3J,IAAKC,GAC5B2J,EAAQ5J,IAAK+J,GAAW9J,EAAI8J,KAC9B/J,IAAI,CAACgK,EAAGC,KAACtI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWqI,GAAC,IAAEE,IAAKD,EAAI,KAElCR,EAAIU,UAAU,CACVC,KAAM,CAACR,GACPS,KAAMP,IAGVL,EAAIa,KAAK,YACb,CAAE,MAAOC,GACLzB,QAAQ0B,MAAMD,EAClB,GA4T+Cf,CAAY9E,EAAW3E,GACtC+D,UAAUqE,EAAAA,EAAAA,IAAuB,OAATzD,QAAS,IAATA,OAAS,EAATA,EAAWpD,OAAQ,KAE7C,MACF8D,EACE,CAAC,CACC9G,KAAM,cACN0F,MAAMtE,EAAAA,EAAAA,KAAC6J,EAAAA,EAAQ,CAAChC,SAAS,QAAQ8B,MAAM,YACvCxF,QAASA,IAjUvB4G,EAAC/F,EAAW3E,KAC9B,IACI,MAAM4J,EAAgB9J,EAAwB6E,EAAW3E,GAEnD2K,EAAYC,EAAAA,GAAWC,cAAcjB,GACrCkB,EAAWF,EAAAA,GAAWG,WAE5BH,EAAAA,GAAWI,kBAAkBF,EAAUH,EAAW,QAClDC,EAAAA,GAAeE,EAAU,aAC7B,CAAE,MAAON,GACLzB,QAAQ0B,MAAMD,EAClB,GAsT+CE,CAAc/F,EAAW3E,GACxC+D,UAAUqE,EAAAA,EAAAA,IAAuB,OAATzD,QAAS,IAATA,OAAS,EAATA,EAAWpD,OAAQ,KAE7C,MACHiE,KAIdD,GAAcA,EACd5C,IAAShD,EAAAA,EAAAA,KAAA,MAAIT,UAAU,qCAAoCuD,SAAEE,QAGlEhD,EAAAA,EAAAA,KAACsL,EAAAA,EAAc,CAACrD,GAAI,CAAEsD,UAAW/E,GAAc1D,UAE3CF,EAAAA,EAAAA,MAAC4I,EAAAA,EAAK,CAACC,cAAY,EAACpI,KAAMkC,EAASzC,SAAA,EAE/B9C,EAAAA,EAAAA,KAAC0L,EAAAA,EAAS,CAAA5I,UACNF,EAAAA,EAAAA,MAACmF,EAAAA,EAAQ,CAAAjF,SAAA,CAEJoC,GAAgBC,IACbnF,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CACNzI,UAAU,4CACV0I,GAAI,CAAEJ,SAAS,GAADvG,OAAKyE,EAAgB,MAAM4F,gBAAiB,WAAY7I,SACzE,MAMJwC,IACGtF,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CACNzI,UAAU,4CACV0I,GAAI,CAAEJ,SAAS,GAADvG,OAAKyE,EAAgB,MAAM4F,gBAAiB,WAAY7I,SACzE,QAMJzC,EAAQC,IAAI,CAACI,EAAQkL,KAClB,MAAMpD,GAAkBC,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQG,eAAgB,KAAM4H,EAAAA,EAAAA,IAAoB,OAAN/H,QAAM,IAANA,OAAM,EAANA,EAAQE,UAAW,GAC/FiL,GAA+C,IAAlClJ,QAAc,OAANjC,QAAM,IAANA,OAAM,EAANA,EAAQI,gBAA4BJ,EAAOK,KAChE+K,EAAoB1F,EAAa0C,KAAK9B,GAAYA,EAASC,WAAavG,EAAOc,YAC/EuK,EAAgBD,EAAoBA,EAAkB5E,UAAY,MAElD,IAAD8E,EAAAC,EAAAC,EAAAC,EAArB,OAAI3D,EACOqD,GACH7L,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAENzI,UAAW,kCACNmB,EAAOqB,MAAoF,QAA/EiK,EAAGvF,EAAYqC,KAAK/G,GAASA,EAAMD,OAASX,OAAOT,EAAOqB,OAAOV,sBAAc,IAAA2K,OAAA,EAA5EA,EAA8EtF,MAAQ,IAC1GuB,GAAI,CAAEJ,SAAS,GAADvG,OAAKyE,EAAgB,MAAM4F,gBAAiB,WAC1DI,gBAAeD,GAAoBC,EAAsBjJ,UAEzD9C,EAAAA,EAAAA,KAACoM,EAAAA,EAAc,CACXC,SAAUP,EACV5E,UAAW6E,EACX7I,QAASA,IA1N1B+D,KACvB,MAAMqF,EAAmBlG,EAAa0C,KAAK9B,GAAYA,EAASC,WAAaA,GAC7E,GAAIqF,EAAkB,CAClB,MAAMC,EAAuC,QAA/BD,EAAiBpF,UAC/Bb,EAAgBD,EAAa9F,IAAI0G,GAC7BA,EAASC,WAAaA,GAAQhF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnB+E,GAAQ,IAAEE,UAAWqF,EAAQ,OAAS,QAC3CvF,GAEd,MACIX,EAAgB,IAAID,EAAc,CAAEa,WAAUC,UAAW,UAgNNsF,CAAkB9L,EAAOc,YAAYsB,SAEnDpC,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZuL,EAANvL,EAAQc,kBAAU,IAAAyK,OAAZ,EAANA,EAAoB7K,QAAQ,KAAM,SAXzDwK,IAeT5L,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CAENzI,UACI,GAAA+B,OAAIZ,EAAOQ,cAAsB,OAANR,QAAM,IAANA,GAAAA,EAAQc,WAC7B,8CACA,QAAO,MAEZd,EAAOqB,MAC0E,QADrEmK,EACPzF,EAAYqC,KAAK/G,GAASA,EAAMD,OAASX,OAAOT,EAAOqB,OAAOV,sBAAc,IAAA6K,OAAA,EAA5EA,EAA8ExF,MAC9E,IAEVuB,GAAI,CAAEJ,SAAS,GAADvG,OAAKyE,EAAgB,MAAM4F,gBAAiB,WAAY7I,SAErEpC,EAAOQ,eAAsB,OAANR,QAAM,IAANA,GAAkB,QAAZyL,EAANzL,EAAQc,kBAAU,IAAA2K,OAAZ,EAANA,EAAoB/K,QAAQ,KAAM,OAZrDwK,GAgBV,aAKnBhJ,EAAAA,EAAAA,MAAC6J,EAAAA,EAAS,CAAA3J,SAAA,EACJ0C,EAAoBoB,GAAaY,IAAelH,IAAI,CAACC,EAAKI,KACxDX,EAAAA,EAAAA,KAAC0H,GAAO,CAAanH,IAAKA,EAAKI,MAAOA,GAAxBA,IAEI,IAArBqE,EAAUpD,SACP5B,EAAAA,EAAAA,KAAC+H,EAAAA,EAAQ,CAAAjF,UACL9C,EAAAA,EAAAA,KAACgI,EAAAA,EAAS,CACNsB,QACIjJ,EAAQuB,SACW,IAAjBsD,GAAyBC,EAAkB,EAAI,KACzB,IAAvBG,EAA8B,EAAI,GAEvC2C,GAAI,CAAEyE,UAAW,UAAW5J,SAC/B,uBAUnB0C,GAA8C,IAAzBgC,GAAc5F,SACjC5B,EAAAA,EAAAA,KAAA,OACIT,UAAU,WAAUuD,UAEpB9C,EAAAA,EAAAA,KAAC2M,EAAAA,EAAe,CACZnN,UAAU,MACVoN,MAAO5H,EAAUpD,OACjBoE,KAAMA,EACN6G,aA9RKC,CAAC3J,EAAO4J,KAC7B9G,EAAQ8G,IA8RQ7G,YAAaA,EACb8G,oBA5Ra7J,IAC7BgD,EAAe8G,SAAS9J,EAAM+J,OAAOC,MAAO,KAC5ClH,EAAQ,IA2RQmH,mBAAoBC,MAAMC,KAAK,IAAIC,IAAI,CAAClI,EAAkB,EAAG,GAAI,GAAI,IAAK,IAAK,OAAOwB,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACzGyG,iBAAiB,gBACjBC,iBAAe,EACfC,gBAAc,UAsCtC5I,EAAgB6I,aAAe,CAC3B3I,UAAW,GACX3E,QAAS,GACT4E,WAAY,KACZC,cAAc,EACdC,eAAgB,KAChBC,eAAgB,IAChBC,iBAAkB,GAClBC,oBAAoB,EACpBC,SAAU,QACVC,mBAAmB,EACnBxC,WAAOnB,EACP4D,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,WAAY,KACZC,YAAa,GACbE,iBAAkB,GAClBD,eAAgB,IAGpB,S,mMCxmBA,MAsHA,EAtHoB8H,KAChB,MAAMC,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,IACtBM,EAAcC,IAAmB3L,EAAAA,EAAAA,UAAS,KAC1C4L,EAASC,IAAc7L,EAAAA,EAAAA,UAAS,CACnC8L,OAAiB,OAATP,QAAS,IAATA,OAAS,EAATA,EAAWQ,OACnBC,OAAiB,OAATT,QAAS,IAATA,OAAS,EAATA,EAAWU,KACnBC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,MAGvCC,EAAOC,IAAYvM,EAAAA,EAAAA,UAAS,KAC7B,WAAEwM,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAkBlC,OAhBAC,EAAAA,EAAAA,WAAU,MACNC,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8BAADhO,OAAuC,OAAP+M,QAAO,IAAPA,OAAO,EAAPA,EAASE,OAAM,cAAAjN,OAAoB,OAAP+M,QAAO,IAAPA,OAAO,EAAPA,EAASM,QAC7EY,KAAKnP,IACJgO,EAAgBhO,EAAKoP,QAAUpP,EAAKA,KAAO,MAC5CqP,MAAM5E,GAAKzB,QAAQ0B,MAAMD,KAC7B,CAAQ,OAAPwD,QAAO,IAAPA,OAAO,EAAPA,EAASE,OAAe,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASM,KAAa,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASqB,MAE7CN,EAAAA,EAAAA,WAAU,MACNC,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8CAADhO,OAAyD,OAAT0M,QAAS,IAATA,OAAS,EAATA,EAAW2B,cACnEJ,KAAKnP,IACJ4O,EAAS5O,EAAKoP,QAAUpP,EAAKA,KAAO,MACrCqP,MAAM5E,GAAKzB,QAAQ0B,MAAMD,KAC7B,CAAU,OAATmD,QAAS,IAATA,OAAS,EAATA,EAAW2B,cAGX/M,EAAAA,EAAAA,MAAC4G,EAAAA,EAAI,CAAChK,UAAWiK,EAAAA,EAAM3G,SAAA,EACnB9C,EAAAA,EAAAA,KAAC4P,EAAAA,EAAU,CAAC5M,MAAM,YAAYiF,GAAI,CAAE4H,GAAI,MACxCjN,EAAAA,EAAAA,MAACkN,EAAAA,EAAW,CAAAhN,SAAA,EACRF,EAAAA,EAAAA,MAAA,OAAKrD,UAAU,MAAKuD,SAAA,CACsB,IAArCyG,OAAiB,OAAV0F,QAAU,IAAVA,OAAU,EAAVA,EAAYc,gBAChBnN,EAAAA,EAAAA,MAAA,OAAKrD,UAAU,2CAA0CuD,SAAA,EACrD9C,EAAAA,EAAAA,KAAA,SAAA8C,SAAO,mBACP9C,EAAAA,EAAAA,KAACgQ,EAAAA,GAAM,CACH7C,MAAO,CAAEA,MAAc,OAAPkB,QAAO,IAAPA,OAAO,EAAPA,EAASE,OAAQ0B,MAAc,OAAP5B,QAAO,IAAPA,OAAO,EAAPA,EAASI,QACjDyB,SAAWrF,GAAMyD,GAAUrM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoM,GAAO,IAAEE,OAAQ1D,EAAEsC,MAAOsB,OAAQ5D,EAAEoF,SACrEE,QAASpB,EAAMzO,IAAI8P,IAAG,CAAOjD,MAAOiD,EAAI5B,OAAQyB,MAAOG,EAAI1B,QAC3D3P,OAAQsR,EAAAA,GACRC,cAAc,EACdC,YAAY,sBAIxB3N,EAAAA,EAAAA,MAAA,OAAKrD,UAAU,2CAA0CuD,SAAA,EACrD9C,EAAAA,EAAAA,KAAA,SAAA8C,SAAO,eACP9C,EAAAA,EAAAA,KAAA,SACI8B,KAAK,OACLoO,SAAUrF,GAAKyD,GAAUrM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoM,GAAO,IAAEM,KAAM9D,EAAEqC,OAAOC,SACvDA,MAAc,OAAPkB,QAAO,IAAPA,OAAO,EAAPA,EAASM,KAChBpP,UAAU,oBAMtBS,EAAAA,EAAAA,KAAC8E,EAAAA,GAAe,CACZzE,QAAS,CACL,CAAEmB,WAAY,UAAWN,aAAc,UAAWgB,UAAW,SAAUtB,UAAW,GAElF,CAAEY,WAAY,YAAaN,aAAc,YAAagB,UAAW,OAAQtB,UAAW,GACpF,CAAEY,WAAY,OAAQN,aAAc,OAAQgB,UAAW,SAAUtB,UAAW,GAC5E,CAAEY,WAAY,mBAAoBN,aAAc,mBAAoBgB,UAAW,SAAUtB,UAAW,GACpG,CAAEY,WAAY,mBAAoBN,aAAc,mBAAoBgB,UAAW,SAAUtB,UAAW,IAGxGoE,UAAWqI,MAAMmD,QAAQrC,GAAgBA,EAAe,GACxD7I,oBAAoB,EACpBJ,cAAc,EACdC,eAAgB/C,IAAA,IAAC,IAAE7B,GAAK6B,EAAA,OACpBpC,EAAAA,EAAAA,KAAC8E,EAAAA,GAAe,CACZE,UAAWqI,MAAMmD,QAAQjQ,EAAIkQ,cAAgBlQ,EAAIkQ,aAAe,GAChEnL,oBAAoB,EACpBjF,QAAS,CACL,CAAEmB,WAAY,UAAWN,aAAc,UAAWgB,UAAW,SAAUtB,UAAW,GAClF,CAAEY,WAAY,gBAAiBN,aAAc,gBAAiBgB,UAAW,SAAUtB,UAAW,GAE9F,CAAEY,WAAY,sBAAuBN,aAAc,sBAAuBgB,UAAW,SAAUtB,UAAW,GAC1G,CAAEY,WAAY,oBAAqBN,aAAc,oBAAqBgB,UAAW,SAAUtB,UAAW,GACtG,CAAEY,WAAY,oBAAqBN,aAAc,oBAAqBgB,UAAW,SAAUtB,UAAW,GACtG,CAAEY,WAAY,qBAAsBN,aAAc,qBAAsBgB,UAAW,SAAUtB,UAAW,GACxG,CAAEY,WAAY,eAAgBN,aAAc,eAAgBgB,UAAW,SAAUtB,UAAW,GAC5F,CAAEY,WAAY,mBAAoBN,aAAc,mBAAoBgB,UAAW,SAAUtB,UAAW,GACpG,CAAEY,WAAY,eAAgBN,aAAc,eAAgBgB,UAAW,SAAUtB,UAAW,GAC5F,CAAEY,WAAY,iBAAkBN,aAAc,iBAAkBgB,UAAW,SAAUtB,UAAW,GAChG,CAAEY,WAAY,iBAAkBN,aAAc,iBAAkBgB,UAAW,SAAUtB,UAAW,GAChG,CACIY,WAAY,aACZN,aAAc,aACdN,UAAW,EACXE,cAAc,EACdC,KAAMgE,IAAA,IAAC,IAAExE,GAAKwE,EAAA,OACV/E,EAAAA,EAAAA,KAAA,OAAKT,UAAU,+CAA8CuD,SACxDuK,MAAMmD,QAAQjQ,EAAImQ,oBAAsBnQ,EAAImQ,kBAAkBpQ,IAAI,CAACqQ,EAAIC,KACpEhO,EAAAA,EAAAA,MAAA,OAAcrD,UAAU,iCAAgCuD,SAAA,EACpDF,EAAAA,EAAAA,MAAA,KAAGrD,UAAU,OAAMuD,SAAA,CAAI,OAAF6N,QAAE,IAAFA,OAAE,EAAFA,EAAIE,aAAa,QACtC7Q,EAAAA,EAAAA,KAAA,KAAGT,UAAU,qCAAoCuD,UAC1CgO,EAAAA,EAAAA,IAAgB,OAAFH,QAAE,IAAFA,OAAE,EAAFA,EAAII,gBAA4C,YAAxB,OAAFJ,QAAE,IAAFA,OAAE,EAAFA,EAAIK,mBAErCzH,OAAS,OAAFoH,QAAE,IAAFA,OAAE,EAAFA,EAAII,eAAeE,eAAe,SADvC,OAAFN,QAAE,IAAFA,OAAE,EAAFA,EAAII,kBAJRH,oB,+ICvG7CM,EAAoB,CAC7BC,MAAO,CACHC,MAAO,CACHC,MAAO,OACP1F,gBAAiB,gBAIzBvB,KAAM,CACFgH,MAAO,CACHzF,gBAAiB,gBAGzB2F,UAAW,CACPF,MAAO,CACHzF,gBAAiB,YACjBhC,MAAO,QACP9B,SAAU,UAMTwI,EAAqB,CAM9BkB,KAAMA,CAACC,EAAUC,KAAKxP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfuP,GAAQ,IACXE,OAAQ,OAEZC,WAAYC,IAAI3P,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU2P,GAAI,IAAEF,OAAQ,OACxCG,aAAeD,IAAI3P,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZ2P,GAAI,IACPjG,gBAAiB,UACjBhC,MAAO,OACPmI,WAAY,OACZjK,SAAU,OACV5I,QAAS,WACT8S,aAAc,iBACdC,cAAe,cAEnBC,OAAQA,CAACL,EAAMH,KAAKxP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb2P,GAAI,IACPjG,gBAAiB8F,EAAMS,WACjB,UACAT,EAAMU,UACF,UACA,QACVxI,MAAO8H,EAAMS,WAAa,QAAU,OACpCjT,QAAS,eAmBJmT,EAAW,CACpB,CACIC,GAAI,EACJC,SAAU,UACVC,QAAS,OACTxQ,MAAO,OACPsP,MAAO,KAEX,CACIgB,GAAI,EACJC,SAAU,YAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,cAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,iBAEd,CACID,GAAI,EACJC,SAAU,gBAEd,CACID,GAAI,EACJC,SAAU,WAILE,EAAiB,CAC1B,CACIC,SAAU,EACV7T,KAAM,kBACN8T,SAAU,8BACVpD,QAAS,iGACTqD,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIR,SAAU,EACV7T,KAAM,oBACN8T,SAAU,GACVpD,QAAS,4JACTqD,KAAMC,EACNC,MAAO,kBACPC,MAAO,eACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIR,SAAU,EACV7T,KAAM,kBACN8T,SAAU,GACVpD,QAAS,4HACTqD,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,gBAIDC,EAAa,CACtB,CAAEtU,KAAM,kBACR,CAAEA,KAAM,oBACR,CAAEA,KAAM,cACR,CAAEA,KAAM,gBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,iBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,U,oJC9JL,SAASuU,EAA0B7U,GACxC,OAAOC,EAAAA,EAAAA,IAAqB,gBAAiBD,EAC/C,CACA,MACA,GAD0BE,EAAAA,EAAAA,GAAuB,gBAAiB,CAAC,OAAQ,SAAU,SAAU,UAAW,QAAS,c,eCDnH,MAAMC,EAAY,CAAC,SAAU,SAAU,YAAa,YAAa,oBAAqB,YAAa,2BAA4B,QAAS,wBAyBlI2U,GAAiBzU,EAAAA,EAAAA,IAAO,MAAO,CACnCC,KAAM,gBACNN,KAAM,OACNO,kBAAmBA,CAACC,EAAOC,KAAWa,EAAAA,EAAAA,GAAS,CAC7C,CAAC,MAAD0B,OAAO+R,EAAkBrQ,QAAUjE,EAAOiE,MAC1C,CAAC,MAAD1B,OAAO+R,EAAkBC,YAAcvU,EAAOuU,WAC7CvU,EAAOC,OANWL,CAOpB,CACD4U,QAAS,OACTC,WAAY,SACZvU,QAAS,KAELwU,GAAmB9U,EAAAA,EAAAA,IAAO,MAAO,CACrCC,KAAM,gBACNN,KAAM,SACNO,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO2U,QAHtB/U,CAItB,CACD4U,QAAS,OACTI,KAAM,WACNC,YAAa,KAETC,GAAmBlV,EAAAA,EAAAA,IAAO,MAAO,CACrCC,KAAM,gBACNN,KAAM,SACNO,kBAAmBA,CAACC,EAAOC,IAAWA,EAAO+U,QAHtBnV,CAItB,CACDgV,KAAM,WACNI,UAAW,aACXC,WAAY,EACZJ,aAAc,EACdK,cAAe,IAEXC,GAAoBvV,EAAAA,EAAAA,IAAO,MAAO,CACtCC,KAAM,gBACNN,KAAM,UACNO,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOoV,SAHrBxV,CAIvB,CACDgV,KAAM,aAiIR,EA/HgCxU,EAAAA,WAAiB,SAAoBC,EAASC,GAC5E,MAAMP,GAAQQ,EAAAA,EAAAA,GAAgB,CAC5BR,MAAOM,EACPR,KAAM,mBAEF,OACFkV,EAAM,OACNJ,EAAM,UACNnU,EAAS,UACTC,EAAY,MAAK,kBACjB4U,GAAoB,EACpBd,UAAWe,EAAa,yBACxBC,EACAtR,MAAOuR,EAAS,qBAChBC,GACE1V,EACJW,GAAQC,EAAAA,EAAAA,GAA8BZ,EAAOL,GACzCkB,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGd,EAAO,CACrCU,YACA4U,sBAEIvU,EA1EkBF,KACxB,MAAM,QACJE,GACEF,EASJ,OAAOG,EAAAA,EAAAA,GARO,CACZd,KAAM,CAAC,QACP0U,OAAQ,CAAC,UACTI,OAAQ,CAAC,UACTK,QAAS,CAAC,WACVnR,MAAO,CAAC,SACRsQ,UAAW,CAAC,cAEeH,EAA2BtT,IA8DxCE,CAAkBJ,GAClC,IAAIqD,EAAQuR,EACC,MAATvR,GAAiBA,EAAMlB,OAAS2S,EAAAA,GAAeL,IACjDpR,GAAqBhD,EAAAA,EAAAA,KAAKyU,EAAAA,GAAY7U,EAAAA,EAAAA,GAAS,CAC7C2S,QAASmB,EAAS,QAAU,KAC5BnU,UAAWM,EAAQmD,MACnBxD,UAAW,OACX+T,QAAS,SACRiB,EAAsB,CACvB1R,SAAUE,MAGd,IAAIsQ,EAAYe,EAYhB,OAXiB,MAAbf,GAAqBA,EAAUxR,OAAS2S,EAAAA,GAAeL,IACzDd,GAAyBtT,EAAAA,EAAAA,KAAKyU,EAAAA,GAAY7U,EAAAA,EAAAA,GAAS,CACjD2S,QAASmB,EAAS,QAAU,QAC5BnU,UAAWM,EAAQyT,UACnB3J,MAAO,iBACPnK,UAAW,OACX+T,QAAS,SACRe,EAA0B,CAC3BxR,SAAUwQ,OAGM1Q,EAAAA,EAAAA,MAAMwQ,GAAgBxT,EAAAA,EAAAA,GAAS,CACjDL,WAAWW,EAAAA,EAAAA,GAAKL,EAAQb,KAAMO,GAC9BU,GAAIT,EACJH,IAAKA,EACLM,WAAYA,GACXF,EAAO,CACRqD,SAAU,CAAC4Q,IAAuB1T,EAAAA,EAAAA,KAAKyT,EAAkB,CACvDlU,UAAWM,EAAQ6T,OACnB/T,WAAYA,EACZmD,SAAU4Q,KACK9Q,EAAAA,EAAAA,MAAMsR,EAAmB,CACxC3U,UAAWM,EAAQsU,QACnBxU,WAAYA,EACZmD,SAAU,CAACE,EAAOsQ,KAChBQ,IAAuB9T,EAAAA,EAAAA,KAAK6T,EAAkB,CAChDtU,UAAWM,EAAQiU,OACnBnU,WAAYA,EACZmD,SAAUgR,OAGhB,E","sources":["../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","Components/filterableTable2.jsx","Pages/Reports/tripReports.jsx","Components/tablecolumn.js","../node_modules/@mui/material/CardHeader/cardHeaderClasses.js","../node_modules/@mui/material/CardHeader/CardHeader.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import { useEffect, useState, useContext } from \"react\";\r\nimport { Card, CardHeader, CardContent, Paper } from '@mui/material';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport { checkIsNumber } from \"../../Components/functions\";\r\n\r\nconst TripReports = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const [tallyDetails, setTallyDetails] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Emp_Id: parseData?.UserId,\r\n        EmpGet: parseData?.Name,\r\n        From: new Date().toISOString().split('T')[0],\r\n\r\n    });\r\n    const [users, setUsers] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `reports/tripReports?UserId=${filters?.Emp_Id}&Fromdate=${filters?.From}`\r\n        }).then(data => {\r\n            setTallyDetails(data.success ? data.data : []);\r\n        }).catch(e => console.error(e));\r\n    }, [filters?.Emp_Id, filters?.From, filters?.To]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setUsers(data.success ? data.data : []);\r\n        }).catch(e => console.error(e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    return (\r\n        <Card component={Paper}>\r\n            <CardHeader title=\"User Work\" sx={{ pb: 0 }} />\r\n            <CardContent>\r\n                <div className=\"row\">\r\n                    {Number(contextObj?.Print_Rights) === 1 && (\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <label>Employee Name</label>\r\n                            <Select\r\n                                value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\r\n                                onChange={(e) => setFilters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\r\n                                options={users.map(obj => ({ value: obj.UserId, label: obj.Name }))}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder=\"Employee Name\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                        <label>From Date</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            onChange={e => setFilters({ ...filters, From: e.target.value })}\r\n                            value={filters?.From}\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <FilterableTable\r\n                    columns={[\r\n                        { Field_Name: \"Trip_Id\", ColumnHeader: \"Trip_Id\", Fied_Data: \"string\", isVisible: 1 },\r\n\r\n                        { Field_Name: \"Trip_Date\", ColumnHeader: \"Trip_Date\", Fied_Data: \"date\", isVisible: 1 },\r\n                        { Field_Name: \"Name\", ColumnHeader: \"Name\", Fied_Data: \"string\", isVisible: 1 },\r\n                        { Field_Name: \"Cost_Center_Type\", ColumnHeader: \"Cost_Center_Type\", Fied_Data: \"string\", isVisible: 1 },\r\n                        { Field_Name: \"Trip_Details_QTY\", ColumnHeader: \"Trip_Details_QTY\", Fied_Data: \"string\", isVisible: 1 },\r\n\r\n                    ]}\r\n                    dataArray={Array.isArray(tallyDetails) ? tallyDetails : []}\r\n                    EnableSerialNumber={true}\r\n                    isExpendable={true}\r\n                    expandableComp={({ row }) => (\r\n                        <FilterableTable\r\n                            dataArray={Array.isArray(row.Trip_Details) ? row.Trip_Details : []}\r\n                            EnableSerialNumber={true}\r\n                            columns={[\r\n                                { Field_Name: \"Trip_Id\", ColumnHeader: \"Trip_Id\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Retailer_Name\", ColumnHeader: \"Retailer_Name\", Fied_Data: \"string\", isVisible: 1 },\r\n\r\n                                { Field_Name: \"Total_Invoice_value\", ColumnHeader: \"Total_Invoice_value\", Fied_Data: \"number\", isVisible: 1 },\r\n                                { Field_Name: \"Delivery_Location\", ColumnHeader: \"Delivery_Location\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Delivery_Latitude\", ColumnHeader: \"Delivery_Latitude\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Delivery_Longitude\", ColumnHeader: \"Delivery_Longitude\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Collected_By\", ColumnHeader: \"Collected_By\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Collected_Status\", ColumnHeader: \"Collected_Status\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Payment_Mode\", ColumnHeader: \"Payment_Mode\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Payment_Ref_No\", ColumnHeader: \"Payment_Ref_No\", Fied_Data: \"string\", isVisible: 1 },\r\n                                { Field_Name: \"Payment_Status\", ColumnHeader: \"Payment_Status\", Fied_Data: \"string\", isVisible: 1 },\r\n                                {\r\n                                    Field_Name: \"Parameters\",\r\n                                    ColumnHeader: \"Parameters\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <div className=\"d-flex align-items-center flex-wrap p-2 pb-0\">\r\n                                            {Array.isArray(row.Parameter_Details) && row.Parameter_Details.map((oo, oi) => (\r\n                                                <div key={oi} className=\"d-flex align-items-center me-2\">\r\n                                                    <p className=\"me-2\">{oo?.Paramet_Name}:</p>\r\n                                                    <p className=\"fw-bold px-3 py-1 border rounded-3\">\r\n                                                        {(!checkIsNumber(oo?.Current_Value) || oo?.Paramet_Data_Type !== 'number')\r\n                                                            ? oo?.Current_Value\r\n                                                            : Number(oo?.Current_Value).toLocaleString('en-IN')}\r\n                                                    </p>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            ]}\r\n                        />\r\n                    )}\r\n                />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TripReports;","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Typography from '../Typography';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n  const {\n      action,\n      avatar,\n      className,\n      component = 'div',\n      disableTypography = false,\n      subheader: subheaderProp,\n      subheaderTypographyProps,\n      title: titleProp,\n      titleTypographyProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    disableTypography\n  });\n  const classes = useUtilityClasses(ownerState);\n  let title = titleProp;\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n  let subheader = subheaderProp;\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      ownerState: ownerState,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;"],"names":["getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","event","currentTarget","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","TripReports","localData","localStorage","getItem","parseData","JSON","parse","tallyDetails","setTallyDetails","filters","setFilters","Emp_Id","UserId","EmpGet","Name","From","Date","toISOString","split","users","setUsers","contextObj","useContext","MyContext","useEffect","fetchLink","address","then","success","catch","To","Company_id","CardHeader","pb","CardContent","Print_Rights","Select","label","onChange","options","obj","customSelectStyles","isSearchable","placeholder","isArray","Trip_Details","Parameter_Details","oo","oi","Paramet_Name","checkIsNumber","Current_Value","Paramet_Data_Type","toLocaleString","customTableStyles","table","style","width","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","getCardHeaderUtilityClass","CardHeaderRoot","cardHeaderClasses","subheader","display","alignItems","CardHeaderAvatar","avatar","flex","marginRight","CardHeaderAction","action","alignSelf","marginTop","marginBottom","CardHeaderContent","content","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","Typography"],"sourceRoot":""}