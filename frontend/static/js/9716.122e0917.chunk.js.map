{"version":3,"file":"static/js/9716.122e0917.chunk.js","mappings":"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","sources":["Pages/Sales/SalesReportComponent/newInvoiceTemplate.jsx","Components/filterableTable2.jsx","Components/tablecolumn.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, Button, DialogActions } from '@mui/material';\r\nimport { Close, Download } from '@mui/icons-material';\r\nimport { isEqualNumber, isGraterNumber, LocalDate, NumberFormat, numberToWords, Multiplication, Subraction, Addition, RoundNumber } from '../../../Components/functions';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\n\r\n\r\nconst taxCalc = (method = 1, amount = 0, percentage = 0) => {\r\n    switch (method) {\r\n        case 0:\r\n            return RoundNumber(amount * (percentage / 100));\r\n        case 1:\r\n            return RoundNumber(amount - (amount * (100 / (100 + percentage))));\r\n        case 2:\r\n            return 0;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nconst InvoiceBillTemplate = ({ orderDetails, orderProducts, download, actionOpen, clearDetails, children, TitleText }) => {\r\n    const storage = JSON.parse(localStorage.getItem('user'));\r\n    const [open, setOpen] = useState(false);\r\n    const [retailerInfo, setRetailerInfo] = useState({});\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n    const printRef = useRef(null);\r\n\r\n    const isExclusiveBill = isEqualNumber(orderDetails.GST_Inclusive, 0);\r\n    const isInclusive = isEqualNumber(orderDetails.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(orderDetails.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(orderDetails.IS_IGST, 1);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/company?Company_id=${storage?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setCompanyInfo(data?.data[0] ? data?.data[0] : {})\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    useEffect(() => {\r\n        if (actionOpen) {\r\n            setOpen(true);\r\n        }\r\n    }, [actionOpen])\r\n\r\n    useEffect(() => {\r\n        if (orderDetails?.Retailer_Id) {\r\n            fetchLink({\r\n                address: `masters/retailers/info?Retailer_Id=${orderDetails?.Retailer_Id}`\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setRetailerInfo(data?.data[0] ? data?.data[0] : {})\r\n                }\r\n            }).catch(e => console.error(e))\r\n        }\r\n    }, [orderDetails?.Retailer_Id])\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        if (clearDetails) {\r\n            clearDetails();\r\n        }\r\n    };\r\n\r\n    const includedProducts = orderProducts.filter(orderProduct => isGraterNumber(orderProduct?.Bill_Qty, 0));\r\n\r\n    const totalValueBeforeTax = orderProducts.reduce((acc, item) => {\r\n        const itemRate = RoundNumber(item?.Item_Rate);\r\n        const billQty = parseInt(item?.Bill_Qty) || 0;\r\n\r\n        if (isNotTaxableBill) {\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n            return acc;\r\n        }\r\n\r\n        const gstPercentage = IS_IGST ? item?.Igst : Addition(item?.Sgst, item?.Cgst);\r\n\r\n        if (isInclusive) {\r\n            const itemTax = taxCalc(1, itemRate, gstPercentage);\r\n            const basePrice = Subraction(itemRate, itemTax);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, basePrice);\r\n        }\r\n        if (isExclusiveBill) {\r\n            const itemTax = taxCalc(0, itemRate, gstPercentage);\r\n            acc.TotalTax += Multiplication(billQty, itemTax);\r\n            acc.TotalValue += Multiplication(billQty, itemRate);\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        TotalValue: 0,\r\n        TotalTax: 0\r\n    });\r\n\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    const extraDetails = [\r\n        {\r\n            labelOne: 'Invoice No',\r\n            dataOne: orderDetails?.So_Id,\r\n            labelTwo: 'Dated',\r\n            dataTwo: LocalDate(orderDetails?.So_Date),\r\n        },\r\n        {\r\n            labelOne: 'Delivery Note',\r\n            dataOne: '',\r\n            labelTwo: 'Mode/Terms of Payment',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Reference No. & Date',\r\n            dataOne: '',\r\n            labelTwo: 'Other References',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Buyer\\'s Order No',\r\n            dataOne: '',\r\n            labelTwo: 'Dated',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatch Doc No',\r\n            dataOne: '',\r\n            labelTwo: 'Delivery Note Date',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Dispatched through',\r\n            dataOne: '',\r\n            labelTwo: 'Destination',\r\n            dataTwo: '',\r\n        },\r\n        {\r\n            labelOne: 'Bill of Lading/LR-RR No',\r\n            dataOne: '',\r\n            labelTwo: 'Motor Vehicle No',\r\n            dataTwo: '',\r\n        },\r\n    ]\r\n\r\n    const TaxData = orderProducts?.reduce((data, item) => {\r\n        const HSNindex = data.findIndex(obj => obj.hsnCode == item.HSN_Code);\r\n\r\n        const {\r\n            Taxable_Amount, Cgst_Amo, Sgst_Amo, Igst_Amo, HSN_Code,\r\n            Cgst, Sgst, Igst,\r\n        } = item;\r\n\r\n        if (HSNindex !== -1) {\r\n            const prev = data[HSNindex];\r\n            const newValue = {\r\n                ...prev,\r\n                taxableValue: prev.taxableValue + Taxable_Amount,\r\n                cgst: Addition(prev.cgst, Cgst_Amo),\r\n                sgst: Addition(prev.sgst, Sgst_Amo),\r\n                igst: Addition(prev.igst, Igst_Amo),\r\n                totalTax: prev.totalTax + Number(orderDetails.IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo)),\r\n            };\r\n\r\n            data[HSNindex] = newValue;\r\n            return data;\r\n        }\r\n\r\n        const newEntry = {\r\n            hsnCode: HSN_Code,\r\n            taxableValue: Taxable_Amount,\r\n            cgst: Cgst_Amo,\r\n            cgstPercentage: Cgst,\r\n            sgst: Sgst_Amo,\r\n            sgstPercentage: Sgst,\r\n            igst: Igst_Amo,\r\n            igstPercentage: Igst,\r\n            totalTax: orderDetails.IS_IGST ? Number(Igst_Amo) : Addition(Cgst_Amo, Sgst_Amo),\r\n        };\r\n\r\n        return [...data, newEntry];\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <span onClick={handleOpen}>{children}</span>\r\n\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n\r\n                <DialogTitle>Order Preview</DialogTitle>\r\n\r\n                <DialogContent ref={printRef}>\r\n                    <h3 className='text-center mb-2'>{TitleText ?? 'Invoice Details'}</h3>\r\n\r\n                    {/* General Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 p-0 border border-bottom-0 border-end-0\"> {/* Company Info */}\r\n                            <div className=\"border-bottom p-2\">\r\n                                <p className='m-0 fa-17'>{companyInfo?.Company_Name}</p>\r\n                                <p className='m-0 fa-14'>Address: {companyInfo?.Company_Address}</p>\r\n                                {/* <p className='m-0 fa-14'></p> */}\r\n                                <p className='m-0 fa-14'>City: {companyInfo?.Region} - {companyInfo?.Pincode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gst_Number}</p>\r\n                                <p className='m-0 fa-14'>State: {companyInfo?.State}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                            <div className=\"p-2\"> {/* buyer info */}\r\n                                <p className='m-0 fa-12'>Buyer (Bill to)</p>\r\n                                <p className='m-0 fa-15'>{retailerInfo?.Retailer_Name}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Mobile_No + ' - ' + retailerInfo?.Reatailer_Address}</p>\r\n                                <p className='m-0 fa-14'>{retailerInfo?.Reatailer_City} - {retailerInfo?.PinCode}</p>\r\n                                <p className='m-0 fa-14'>GSTIN / UIN: {companyInfo?.Gstno}</p>\r\n                                <p className='m-0 fa-14'>State Name: {companyInfo?.StateGet}</p>\r\n                                <p className='m-0 fa-14'>Code: </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6 p-0 border border-bottom-0\">\r\n                            <table className=\"table m-0\">\r\n                                <tbody>\r\n                                    {extraDetails.map((detail, index) => (\r\n                                        <tr key={index}>\r\n                                            <td className=\"border-end fa-12 p-0 px-1\">\r\n                                                <p className=\"m-0\">{detail.labelOne}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataOne}</p>\r\n                                            </td>\r\n                                            <td className='fa-12 p-0 px-1'>\r\n                                                <p className=\"m-0\">{detail.labelTwo}</p>\r\n                                                <p className=\"m-0\">&emsp;{detail.dataTwo}</p>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                    <tr>\r\n                                        <td colSpan={2} className='border-0 fa-12 p-0'>\r\n                                            <p className=\"m-0\">Terms of Delivery</p>\r\n                                            <p className=\"m-0\"></p>\r\n                                            <br />\r\n                                            <br />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Product Info */}\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 p-0\">\r\n                            <table className=\"table m-0\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td className='border bg-light fa-14'>Sno</td>\r\n                                        <td className='border bg-light fa-14'>Product</td>\r\n                                        <td className='border bg-light fa-14'>HSN/SAC</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Quantity</td>\r\n                                        <td className='border bg-light fa-14 text-end'>Rate</td>\r\n                                        <td className='border bg-light fa-14 text-end'>\r\n                                            <p className='m-2 '>Rate</p>\r\n                                            <p className='m-0 '>\r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 1) && '(Incl. of Tax)'}\r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 2) && '(Tax not applicable)'}\r\n                                                {isEqualNumber(orderDetails.GST_Inclusive, 0) && '(Excl. of Tax)'}\r\n                                            </p>\r\n                                        </td>\r\n                                        <td className='border bg-light fa-14 text-end'>Amount</td>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n\r\n                                    {includedProducts.map((o, i) => {\r\n                                        const percentage = (IS_IGST ? o?.Igst_P : o?.Cgst + o?.Sgst) ?? 0;\r\n                                        const quantity = Number(o?.Bill_Qty || 0);\r\n                                        const Item_Rate = Number(o?.Item_Rate || 0);\r\n                                        const itemTax = taxCalc(orderDetails.GST_Inclusive, Item_Rate, percentage)\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td className='border fa-13'>{i + 1}</td>\r\n                                                <td className='border fa-13'>{o?.Product_Name}</td>\r\n                                                <td className='border fa-13'>{o?.HSN_Code}</td>\r\n\r\n                                                <td className='border fa-13 text-end'>\r\n                                                    {NumberFormat(quantity)}\r\n                                                    {o?.UOM && ' (' + o?.UOM + ') '}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable item value */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? (Item_Rate - itemTax) : Item_Rate)}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* rate per item */}\r\n                                                    {NumberFormat(isEqualNumber(\r\n                                                        orderDetails.GST_Inclusive, 1\r\n                                                    ) ? Item_Rate : (Item_Rate + itemTax))}\r\n                                                </td>\r\n\r\n                                                <td className='border fa-13 text-end'> {/* taxable amount (qty * rate) */}\r\n                                                    {NumberFormat(o?.Taxable_Amount)}\r\n                                                </td>\r\n\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n\r\n                                    <tr>\r\n                                        <td\r\n                                            className=\"border p-2\"\r\n                                            rowSpan={IS_IGST ? 4 : 5}\r\n                                            colSpan={4}\r\n                                        >\r\n                                            <p className='m-0'>Amount Chargeable (in words):</p>\r\n                                            <p className='m-0'>&emsp; INR {numberToWords(parseInt(orderDetails?.Total_Invoice_value))} Only.</p>\r\n                                        </td>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total Taxable Amount</td>\r\n                                        <td className=\"border p-2 text-end fa-14\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    {!IS_IGST ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>CGST</td>\r\n                                                <td className=\"border p-2 text-end fa-14\">\r\n                                                    {NumberFormat(orderDetails?.CSGT_Total)}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2 fa-14\" colSpan={2}>SGST</td>\r\n                                                <td className=\"border p-2 fa-14 text-end\">\r\n                                                    {NumberFormat(orderDetails?.SGST_Total)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2 fa-14\" colSpan={2}>IGST</td>\r\n                                            <td className=\"border p-2 fa-14 text-end\">\r\n                                                {NumberFormat(orderDetails.IGST_Total)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Round Off</td>\r\n                                        <td className=\"border p-2 fa-14 text-end\">\r\n                                            {NumberFormat(orderDetails?.Round_off)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"border p-2 fa-14\" colSpan={2}>Total</td>\r\n                                        <td className=\"border p-2 fa-14 text-end fw-bold\">\r\n                                            {NumberFormat(orderDetails?.Total_Invoice_value)}\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Tax Calculations */}\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>HSN / SAC</td>\r\n                                <td className=\"border bg-light fa-14 text-center\" rowSpan={2} style={{ verticalAlign: 'middle' }}>Taxable Value</td>\r\n                                {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                    <td className=\"border bg-light fa-14 text-center\" colSpan={2}>IGST Tax</td>\r\n                                ) : (\r\n                                    <>\r\n                                        <td className=\"border bg-light fa-14 text-center\" colSpan={2}>Central Tax</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\" colSpan={2}>State Tax</td>\r\n                                    </>\r\n                                )}\r\n                                <td className=\"border bg-light fa-14 text-center\">Total</td>\r\n                            </tr>\r\n                            <tr>\r\n                                {isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                    <>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Rate</td>\r\n                                        <td className=\"border bg-light fa-14 text-center\">Amount</td>\r\n                                    </>\r\n                                )}\r\n                                <td className=\"border bg-light fa-14 text-center\">Tax Amount</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {TaxData.map((o, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td className=\"border fa-13 text-end\">{o?.hsnCode}</td>\r\n                                        <td className=\"border fa-13 text-end\">{NumberFormat(o?.taxableValue)}</td>\r\n                                        {orderDetails.IS_IGST ? (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.igstPercentage)}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.igst)}</td>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgstPercentage)}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.cgst)}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgstPercentage)}</td>\r\n                                                <td className=\"border fa-13 text-end\">{NumberFormat(o?.sgst)}</td>\r\n                                            </>\r\n                                        )}\r\n                                        <td className=\"border fa-13 text-end\">\r\n                                            {NumberFormat(o?.totalTax)}\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <td className=\"border fa-13 text-end\">Total</td>\r\n                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.taxableValue), 0))}\r\n                                </td>\r\n\r\n                                {orderDetails.IS_IGST ? (\r\n                                    <>\r\n                                        <td className=\"border fa-13 text-end\"></td>\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.igst), 0))}\r\n                                        </td>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <td className=\"border fa-13 text-end\"></td>\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.cgst), 0))}\r\n                                        </td>\r\n                                        <td className=\"border fa-13 text-end\"></td>\r\n                                        <td className=\"border fa-13 text-end fw-bold\">\r\n                                            {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.sgst), 0))}\r\n                                        </td>\r\n                                    </>\r\n                                )}\r\n\r\n                                <td className=\"border fa-13 text-end fw-bold\">\r\n                                    {NumberFormat(TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0))}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td\r\n                                    colSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 5 : 7}\r\n                                    className='border fa-13 fw-bold'\r\n                                >\r\n                                    Tax Amount (in words) : INR &nbsp;\r\n                                    {numberToWords(\r\n                                        parseInt(\r\n                                            TaxData.reduce((sum, item) => sum += Number(item.totalTax), 0)\r\n                                        )\r\n                                    )} only.\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"col-12 text-center\">\r\n                        <p>This is a Computer Generated Invoice</p>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button startIcon={<Close />} variant='outlined' color='error' onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    {download && (\r\n                        <Button\r\n                            startIcon={<Download />}\r\n                            variant='outlined'\r\n                            onClick={handlePrint}\r\n                        >\r\n                            Download\r\n                        </Button>\r\n                    )}\r\n                </DialogActions>\r\n\r\n            </Dialog >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceBillTemplate;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]"],"names":["taxCalc","amount","arguments","length","undefined","percentage","RoundNumber","_ref","orderDetails","orderProducts","download","actionOpen","clearDetails","children","TitleText","storage","JSON","parse","localStorage","getItem","open","setOpen","useState","retailerInfo","setRetailerInfo","companyInfo","setCompanyInfo","printRef","useRef","isExclusiveBill","isEqualNumber","GST_Inclusive","isInclusive","isNotTaxableBill","IS_IGST","useEffect","fetchLink","address","concat","Company_id","then","data","success","catch","e","console","error","Retailer_Id","handleClose","includedProducts","filter","orderProduct","isGraterNumber","Bill_Qty","totalValueBeforeTax","reduce","acc","item","itemRate","Item_Rate","billQty","parseInt","TotalValue","Multiplication","gstPercentage","Igst","Addition","Sgst","Cgst","itemTax","basePrice","Subraction","TotalTax","handlePrint","useReactToPrint","content","current","extraDetails","labelOne","dataOne","So_Id","labelTwo","dataTwo","LocalDate","So_Date","TaxData","HSNindex","findIndex","obj","hsnCode","HSN_Code","Taxable_Amount","Cgst_Amo","Sgst_Amo","Igst_Amo","prev","newValue","_objectSpread","taxableValue","cgst","sgst","igst","totalTax","Number","newEntry","cgstPercentage","sgstPercentage","igstPercentage","_jsxs","_Fragment","_jsx","onClick","handleOpen","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","ref","className","Company_Name","Company_Address","Region","Pincode","Gst_Number","State","Retailer_Name","Mobile_No","Reatailer_Address","Reatailer_City","PinCode","Gstno","StateGet","map","detail","index","colSpan","o","i","_ref2","Igst_P","quantity","Product_Name","NumberFormat","UOM","rowSpan","numberToWords","Total_Invoice_value","IGST_Total","CSGT_Total","SGST_Total","Round_off","style","verticalAlign","sum","DialogActions","Button","startIcon","Close","variant","color","Download","preprocessDataForExport","columns","row","flattenedRow","forEach","column","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","key","Field_Name","createCol","field","type","align","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","title","IconButton","event","currentTarget","size","MoreVert","Popover","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","LocalTime","FilterableTable","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","log","Card","component","Paper","ToggleOn","ToggleOff","generatePDF","doc","jsPDF","processedData","headers","rows","header","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}