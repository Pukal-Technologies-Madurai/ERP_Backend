{"version":3,"file":"static/js/5313.7722610f.chunk.js","mappings":"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","sources":["Pages/Sales/SalesInvoice/taxDetails.jsx","Pages/Sales/SalesInvoice/manageExpences.jsx","Pages/Sales/SalesInvoice/manageGeneralInfo.jsx","../node_modules/@mui/icons-material/esm/ReceiptLong.js","Pages/Sales/SalesInvoice/manageInvolvedStaff.jsx","Pages/Sales/SalesInvoice/salesInvoiceCreation.jsx","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["import { useMemo } from \"react\";\r\nimport { Addition, isEqualNumber, NumberFormat, numberToWords, onlynumAndNegative, RoundNumber, toArray } from \"../../../Components/functions\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SalesInvoiceTaxDetails = ({\r\n    invoiceProducts = [],\r\n    invoiceExpences = [],\r\n    isNotTaxableBill,\r\n    isInclusive,\r\n    IS_IGST,\r\n    products = [],\r\n    invoiceInfo = {},\r\n    setInvoiceInfo\r\n}) => {\r\n\r\n    const invExpencesTotal = useMemo(() => {\r\n        return toArray(invoiceExpences).reduce((acc, exp) => Addition(acc, exp?.Expence_Value), 0)\r\n    }, [invoiceExpences]);\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const invValue = invoiceProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0);\r\n\r\n        return Addition(invValue, invExpencesTotal);\r\n    }, [invoiceProducts, isNotTaxableBill, products, IS_IGST, isInclusive, invExpencesTotal])\r\n\r\n    const taxSplitUp = useMemo(() => {\r\n        if (!invoiceProducts || invoiceProducts.length === 0) return {};\r\n\r\n        let totalTaxable = 0;\r\n        let totalTax = 0;\r\n\r\n        invoiceProducts.forEach(item => {\r\n            const Amount = RoundNumber(item?.Amount || 0);\r\n\r\n            if (isNotTaxableBill) {\r\n                totalTaxable = Addition(totalTaxable, Amount);\r\n                return;\r\n            }\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n\r\n            totalTaxable = Addition(totalTaxable, parseFloat(taxInfo.without_tax));\r\n            totalTax = Addition(totalTax, parseFloat(taxInfo.tax_amount));\r\n        });\r\n\r\n        const totalWithTax = Addition(totalTaxable, totalTax);\r\n        const totalWithExpenses = Addition(totalWithTax, invExpencesTotal);\r\n        const roundedTotal = Math.round(totalWithExpenses);\r\n        const roundOff = RoundNumber(roundedTotal - totalWithExpenses);\r\n\r\n        const cgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const sgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const igst = isEqualNumber(IS_IGST, 1) ? RoundNumber(totalTax) : 0;\r\n\r\n        return {\r\n            totalTaxable: RoundNumber(totalTaxable),\r\n            totalTax: RoundNumber(totalTax),\r\n            cgst,\r\n            sgst,\r\n            igst,\r\n            roundOff,\r\n            invoiceTotal: roundedTotal\r\n        };\r\n\r\n    }, [invoiceProducts, products, IS_IGST, isNotTaxableBill, isInclusive, invExpencesTotal]);\r\n\r\n    // Update invoiceInfo when roundOff changes\r\n    useMemo(() => {\r\n        if (taxSplitUp.roundOff !== undefined && taxSplitUp.roundOff !== invoiceInfo.Round_off) {\r\n            setInvoiceInfo(pre => ({ ...pre, Round_off: taxSplitUp.roundOff }));\r\n        }\r\n    }, [taxSplitUp.roundOff]);\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2\" rowSpan={IS_IGST ? 5 : 6}>\r\n                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                        </td>\r\n                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                        <td className=\"border p-2\">\r\n                            {taxSplitUp.totalTaxable}\r\n                        </td>\r\n                    </tr>\r\n                    {!IS_IGST ? (\r\n                        <>\r\n                            <tr>\r\n                                <td className=\"border p-2\">CGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.cgst}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border p-2\">SGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.sgst}\r\n                                </td>\r\n                            </tr>\r\n                        </>\r\n                    ) : (\r\n                        <tr>\r\n                            <td className=\"border p-2\">IGST</td>\r\n                            <td className=\"border p-2\">\r\n                                {taxSplitUp.igst}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total Expences</td>\r\n                        <td className=\"border p-2\">\r\n                            {RoundNumber(invExpencesTotal)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Round Off</td>\r\n                        <td className=\"border p-0\">\r\n                            <input\r\n                                value={invoiceInfo.Round_off || taxSplitUp.roundOff || 0}\r\n                                className=\"cus-inpt p-2 m-0 border-0\"\r\n                                onInput={onlynumAndNegative}\r\n                                onChange={e => setInvoiceInfo(pre => ({ \r\n                                    ...pre, \r\n                                    Round_off: parseFloat(e.target.value) || 0 \r\n                                }))}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total</td>\r\n                        <td className=\"border p-2\">\r\n                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesInvoiceTaxDetails;","import { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { Addition, checkIsNumber, Division, isEqualNumber, NumberFormat, onlynum, onlynumAndNegative, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { salesInvoiceExpencesInfo } from \"./variable\";\r\nimport { useState } from \"react\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst ExpencesOfSalesInvoice = ({\r\n    invoiceExpences = [],\r\n    setInvoiceExpences,\r\n    expenceMaster = [],\r\n    IS_IGST,\r\n    taxType,\r\n}) => {\r\n\r\n    const handleInputChange = (index, field, value) => {\r\n\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n\r\n                const updated = { ...item, [field]: value };\r\n\r\n                if (field === 'Expence_Value') {\r\n                    const\r\n                        Cgst = item.Cgst ? toNumber(item.Cgst) : 0,\r\n                        Sgst = item.Sgst ? toNumber(item.Sgst) : 0,\r\n                        Igst = item.Igst ? toNumber(item.Igst) : 0,\r\n                        expVal = toNumber(value),\r\n                        taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst_Amo = (Cgst > 0 && !IS_IGST)\r\n                        ? taxAmount.cgst_amount\r\n                        : 0;\r\n                    updated.Sgst_Amo = (Sgst > 0 && !IS_IGST)\r\n                        ? taxAmount.sgst_amount\r\n                        : 0;\r\n                    updated.Igst_Amo = (Igst > 0 && IS_IGST)\r\n                        ? taxAmount.igst_amount\r\n                        : 0;\r\n                }\r\n\r\n                if (field === 'Igst') {\r\n                    const \r\n                        Igst = IS_IGST ? toNumber(value) : 0, \r\n                        Cgst = !IS_IGST ? Division(toNumber(value), 2) : 0, \r\n                        Sgst = !IS_IGST ? Division(toNumber(value), 2) : 0;\r\n\r\n                    const expVal = toNumber(item.Expence_Value), taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst = Cgst;\r\n                    updated.Sgst = Sgst;\r\n                    updated.Cgst_Amo = Cgst > 0 ? taxAmount.cgst_amount : 0;\r\n                    updated.Sgst_Amo = Sgst > 0 ? taxAmount.sgst_amount : 0;\r\n                    updated.Igst_Amo = Igst > 0 ? taxAmount.igst_amount : 0;\r\n                }\r\n\r\n                return updated;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSelectChange = (index, selectedOption) => {\r\n        const selected = expenceMaster.find(exp => isEqualNumber(exp.Id, selectedOption.value)) || {};\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n                return {\r\n                    ...item,\r\n                    Expense_Id: selected.Id,\r\n                    Expence_Value: 0\r\n                };\r\n            })\r\n        );\r\n    };\r\n\r\n    const addNewRow = () => {\r\n        setInvoiceExpences(prev => [...prev, { ...salesInvoiceExpencesInfo, Sno: prev.length }]);\r\n    };\r\n\r\n    const removeRow = index => {\r\n        setInvoiceExpences(prev => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n     return (\r\n        <>\r\n            <Card >\r\n                <div className=\"d-flex align-items-center justify-content-between flex-wrap px-3 py-2\">\r\n                    <h5 className=\"m-0\">Expenses</h5>\r\n                    <Button variant=\"outlined\" type=\"button\" onClick={addNewRow}>Add</Button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered m-0\">\r\n                        <thead className=\"table-light\">\r\n                            <tr>\r\n                                {[\r\n                                    'S.No', 'Expense', \r\n                                    'Expense Value', 'Action'].map(\r\n                                    (o, i) => <th className=\"fa-13 bg-light\" key={i}>{o}</th>\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{ fontSize: '13px' }}>\r\n                            {invoiceExpences.map((row, index) => {\r\n                                // Get the current expense name for display\r\n                                const currentExpenseName = expenceMaster.find(\r\n                                    exp => isEqualNumber(exp.Id, row?.Expense_Id)\r\n                                )?.Expence_Name || '';\r\n                                \r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className=\"p-0 vctr\" style={{ minWidth: '180px' }}>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: row?.Expense_Id,\r\n                                                    label: currentExpenseName,\r\n                                                }}\r\n                                                onChange={e => handleSelectChange(index, e)}\r\n                                                options={expenceMaster\r\n                                                    // Fix the filtering logic\r\n                                                    .filter(exp => {\r\n                                                        // Always include the currently selected expense\r\n                                                        if (isEqualNumber(exp.Id, row?.Expense_Id)) return true;\r\n                                                        \r\n                                                        // Exclude expenses that are already selected in other rows\r\n                                                        return !invoiceExpences.some(\r\n                                                            (inv, idx) => idx !== index && isEqualNumber(inv.Expense_Id, exp.Id)\r\n                                                        );\r\n                                                    })\r\n                                                    .map(exp => ({ value: exp.Id, label: exp.Expence_Name }))\r\n                                                }\r\n                                                styles={customSelectStyles}\r\n                                                menuPortalTarget={document.body}\r\n                                                isSearchable={true}\r\n                                                placeholder=\"Select Expense\"\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr\">\r\n                                            <input\r\n                                                onInput={onlynumAndNegative}\r\n                                                className=\"cus-inpt p-2 border-0\"\r\n                                                value={row.Expence_Value || ''}\r\n                                                disabled={!checkIsNumber(row.Expense_Id)}\r\n                                                onChange={e => {\r\n                                                    handleInputChange(index, 'Expence_Value', e.target.value)\r\n                                                }}\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr  text-center \">\r\n                                            <IconButton onClick={() => removeRow(index)} size=\"small\">\r\n                                                <Delete color=\"error\" fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                            {invoiceExpences.length === 0 && (\r\n                                <tr><td className=\"text-center\" colSpan={6}>No rows</td></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpencesOfSalesInvoice;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\"\r\nimport { checkIsNumber, isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport RequiredStar from '../../../Components/requiredStar';\r\n\r\nconst ManageSalesInvoiceGeneralInfo = ({\r\n    invoiceInfo = {},\r\n    setInvoiceInfo,\r\n    retailers = [],\r\n    voucherType = [],\r\n    branches = [],\r\n    onChangeRetailer,\r\n    stockItemLedgerName = []\r\n}) => {\r\n\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n\r\n                {/* customer name */}\r\n                <div className=\"col-sm-8 p-2\">\r\n                    <label className='fa-13'>Party Name</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo?.Retailer_Id,\r\n                            label: invoiceInfo?.Retailer_Name\r\n                        }}\r\n                        onChange={e => {\r\n                            setInvoiceInfo(pre => ({\r\n                                ...pre,\r\n                                Retailer_Id: e.value,\r\n                                Retailer_Name: e.label\r\n                            }));\r\n\r\n                            if (onChangeRetailer) onChangeRetailer();\r\n                        }}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(retailers).map(obj => ({\r\n                                value: obj?.Retailer_Id,\r\n                                label: obj?.Retailer_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select Vendor\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* voucher type */}\r\n                <div className=\"col-sm-4 p-2\">\r\n                    <label className='fa-13'>Voucher Type</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo.Voucher_Type,\r\n                            label: toArray(voucherType).find(v => isEqualNumber(v.Vocher_Type_Id, invoiceInfo.Voucher_Type))?.Voucher_Type\r\n                        }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Voucher_Type: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(voucherType).filter(\r\n                                fil => fil?.Type === 'SALES'\r\n                            ).map(obj => ({\r\n                                value: obj?.Vocher_Type_Id,\r\n                                label: obj?.Voucher_Type\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        required={true}\r\n                        placeholder={\"Select Voucher Type\"}\r\n                        maxMenuHeight={300}\r\n                       isDisabled={!!checkIsNumber(invoiceInfo?.Do_Id)}\r\n                    />\r\n                </div>\r\n\r\n                {/* Date */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Entry Date <RequiredStar /></label>\r\n                    <input\r\n                        value={invoiceInfo?.Do_Date}\r\n                        type=\"date\"\r\n                        required\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Do_Date: e.target.value }))}\r\n                    />\r\n                </div>\r\n\r\n                {/* branch */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Branch <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        value={invoiceInfo?.Branch_Id}\r\n                        required\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                    >\r\n                        <option value=\"\">select</option>\r\n                        {branches.map((o, i) => (\r\n                            <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* GST TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>GST Type <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                        value={invoiceInfo.GST_Inclusive}\r\n                        required\r\n                    >\r\n                        <option value={1}>Inclusive Tax</option>\r\n                        <option value={0}>Exclusive Tax</option>\r\n                        <option value={2}>Not Taxable</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* TAX TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Tax Type</label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                        value={invoiceInfo.IS_IGST}\r\n                    >\r\n                        <option value='0'>GST</option>\r\n                        <option value='1'>IGST</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* stock item ledger name */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Stock Item Ledger Name</label>\r\n                    <Select\r\n                        value={{ value: invoiceInfo.Stock_Item_Ledger_Name, label: invoiceInfo.Stock_Item_Ledger_Name }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Stock_Item_Ledger_Name: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...stockItemLedgerName.map(obj => ({\r\n                                value: obj?.Stock_Item_Ledger_Name,\r\n                                label: obj?.Stock_Item_Ledger_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        menuPortalTarget={document.body}\r\n                        required={true}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* STATUS */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Status</label>\r\n                    <select\r\n                        value={invoiceInfo?.Cancel_status}\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Cancel_status: e.target.value }))}\r\n                    >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        <option value=\"1\">New</option>\r\n                        <option value=\"2\">Progess</option>\r\n                        <option value=\"3\">Completed</option>\r\n                        <option value=\"0\">Canceled</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <label className='fa-13'>Narration</label>\r\n            <textarea\r\n                className=\"cus-inpt fa-14\"\r\n                rows={2}\r\n                value={invoiceInfo.Narration}\r\n                onChange={e => setInvoiceInfo(pre => ({ ...pre, Narration: e.target.value }))}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageSalesInvoiceGeneralInfo;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.5 3.5 18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2v14H3v3c0 1.66 1.34 3 3 3h12c1.66 0 3-1.34 3-3V2zM19 19c0 .55-.45 1-1 1s-1-.45-1-1v-3H8V5h11z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 7h6v2H9zm7 0h2v2h-2zm-7 3h6v2H9zm7 0h2v2h-2z\"\n}, \"1\")], 'ReceiptLong');","import { Button, IconButton } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { salesInvoiceStaffInfo } from \"./variable\";\r\nimport { checkIsNumber, isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\n\r\nconst InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [], }) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => setStaffArray(pre => [...pre, { ...salesInvoiceStaffInfo }])}\r\n                >Add</Button>\r\n            </div>\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"fa-13\">Sno</th>\r\n                        <th className=\"fa-13\">Staff Name</th>\r\n                        <th className=\"fa-13\">Category</th>\r\n                        <th className=\"fa-13\">#</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {toArray(StaffArray).map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                            <td className='fa-13 w-100 p-0'>\r\n                                <Select\r\n                                    value={{\r\n                                        value: row?.Emp_Id,\r\n                                        label: row?.Emp_Name,\r\n                                    }}\r\n                                    onChange={e => setStaffArray(prev => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                const staff = toArray(costCenter).find(c => isEqualNumber(c?.Cost_Center_Id, e.value))\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id:\r\n                                                        checkIsNumber(staffRow?.Emp_Type_Id)\r\n                                                            ? Number(staffRow?.Emp_Type_Id)\r\n                                                            : checkIsNumber(staff.User_Type)\r\n                                                                ? Number(staff.User_Type)\r\n                                                                : 0,\r\n                                                    Emp_Id: Number(e.value),\r\n                                                    Emp_Name: e.label\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    options={\r\n                                        [...toArray(costCenter).filter(fil => (\r\n                                            !StaffArray.some(st => (\r\n                                                isEqualNumber(st.Emp_Id, fil.Cost_Center_Id)\r\n                                            ))\r\n                                        ))].map(st => ({\r\n                                            value: st.Cost_Center_Id,\r\n                                            label: st.Cost_Center_Name\r\n                                        }))\r\n                                    }\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Staff\"}\r\n                                />\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                <select\r\n                                    value={row?.Emp_Type_Id}\r\n                                    onChange={e => setStaffArray((prev) => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Emp_Type_Id: e.target.value\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    className=\"cus-inpt p-2 border-0\"\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {toArray(costCategory).map((st, sti) =>\r\n                                        <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                    )}\r\n                                </select>\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0'>\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setStaffArray(prev => {\r\n                                            return prev.filter((_, filIndex) => index !== filIndex);\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                >\r\n                                    <Delete color='error' />\r\n                                </IconButton>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvolvedStaffs;","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, IconButton, CardContent, Card } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    NumberFormat, numberToWords,\r\n    RoundNumber, Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber,\r\n    toArray,\r\n    stringCompare\r\n} from \"../../../Components/functions\";\r\nimport { Add, ArrowLeft, Clear, Delete, Download, Edit, ReceiptLong, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { salesInvoiceGeneralInfo, salesInvoiceDetailsInfo, salesInvoiceExpencesInfo, salesInvoiceStaffInfo } from './variable';\r\nimport InvolvedStaffs from \"./manageInvolvedStaff\";\r\nimport ManageSalesInvoiceGeneralInfo from \"./manageGeneralInfo\";\r\nimport SalesInvoiceTaxDetails from \"./taxDetails\";\r\nimport AddItemToSaleOrderCart from \"../SaleOrder/addItemToCart\";\r\nimport AddProductsInSalesInvoice from \"./importFromSaleOrder\";\r\nimport ExpencesOfSalesInvoice from \"./manageExpences\";\r\n\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst CreateSalesInvoice = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const editValues = location.state;\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        brand: [],\r\n        godown: [],\r\n        expence: [],\r\n        stockInGodown: [],\r\n        stockItemLedgerName: [],\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        addProductDialog: false,\r\n        importFromSaleOrder: false,\r\n    })\r\n\r\n    const [invoiceInfo, setInvoiceInfo] = useState(salesInvoiceGeneralInfo)\r\n    const [invoiceProducts, setInvoiceProduct] = useState([]);\r\n    const [invoiceExpences, setInvoiceExpences] = useState([]);\r\n    const [staffArray, setStaffArray] = useState([]);\r\n\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n    const isInclusive = isEqualNumber(invoiceInfo.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceInfo.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceInfo.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n    const minimumRows = 3;\r\n    const dummyRowCount = minimumRows - invoiceProducts.length\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                if (loadingOn) loadingOn();\r\n\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    godownLocationsResponse,\r\n                    expenceResponse,\r\n                    godownWiseStock,\r\n                    stockItemLedgerNameResponse\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n                    fetchLink({ address: `masters/defaultAccountMaster` }),\r\n                    fetchLink({ address: `sales/stockInGodown` }),\r\n                    fetchLink({ address: `purchase/stockItemLedgerName?type=SALES` }),\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n                );\r\n                const expencesMaster = (expenceResponse.success ? toArray(expenceResponse.data) : []).sort(\r\n                    (a, b) => String(a?.Account_Name).localeCompare(b?.Account_Name)\r\n                );\r\n                const stockInGodowns = (godownWiseStock.success ? godownWiseStock.data : []).sort(\r\n                    (a, b) => String(a?.stock_item_name).localeCompare(b?.stock_item_name)\r\n                );\r\n                const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n                    (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    godown: godownLocations,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n                    expence: expencesMaster.filter(\r\n                        exp => !stringCompare(exp.Type, 'DEFAULT')\r\n                    ).map(exp => ({ Id: exp.Acc_Id, Expence_Name: exp.Account_Name })),\r\n                    stockInGodown: stockInGodowns,\r\n                    stockItemLedgerName: stockItemLedgerName\r\n                }));\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            } finally {\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const clearValues = () => {\r\n        setInvoiceInfo(salesInvoiceGeneralInfo);\r\n        setInvoiceProduct([]);\r\n        setInvoiceExpences([]);\r\n        setStaffArray([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInvoiceProduct(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(item).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setInvoiceExpences(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                const\r\n                    Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n                    Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n                    Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n                    Expence_Value = toNumber(item?.Expence_Value),\r\n                    taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n\r\n                return {\r\n                    ...item,\r\n                    Cgst, Sgst, Igst,\r\n                    Expence_Value,\r\n                    Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n                    Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n                    Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n                }\r\n            })\r\n        })\r\n    }, [\r\n        baseData.expence,\r\n        IS_IGST,\r\n        taxType,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(editValues) &&\r\n            Array.isArray(editValues?.Products_List)\r\n        ) {\r\n            const { Products_List, Expence_Array, Staffs_Array } = editValues;\r\n            setInvoiceInfo(\r\n                Object.fromEntries(\r\n                    Object.entries(salesInvoiceGeneralInfo).map(([key, value]) => {\r\n                        if (key === 'Do_Date') return [key, editValues[key] ? ISOString(editValues[key]) : value]\r\n                        return [key, editValues[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setInvoiceProduct(\r\n                Products_List.map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceDetailsInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setInvoiceExpences(\r\n                toArray(Expence_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceExpencesInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setStaffArray(\r\n                toArray(Staffs_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceStaffInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [editValues])\r\n\r\n\r\n    const saveSalesInvoice = () => {\r\n        if (loadingOn) loadingOn();\r\n\r\n        fetchLink({\r\n            address: `sales/salesInvoice`,\r\n            method: checkIsNumber(invoiceInfo?.Do_Id) ? 'PUT' : 'POST',\r\n            bodyData: {\r\n                ...invoiceInfo,\r\n                Product_Array: invoiceProducts,\r\n                Staffs_Array: staffArray,\r\n                Expence_Array: invoiceExpences\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                clearValues();\r\n                toast.success(data.message);\r\n                navigate('/erp/sales/invoice')\r\n            } else {\r\n                toast.warn(data.message)\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <AddItemToSaleOrderCart\r\n                orderProducts={invoiceProducts}\r\n                setOrderProducts={setInvoiceProduct}\r\n                open={dialog.addProductDialog}\r\n                onClose={() => {\r\n                    setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                godowns={baseData.godown}\r\n                GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={{ ...salesInvoiceDetailsInfo, Pre_Id: invoiceInfo.So_No }}\r\n                stockInGodown={baseData.stockInGodown}\r\n            />\r\n\r\n            <Card>\r\n                <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n                    <span className=\"flex-grow-1 fa-16 fw-bold\">Sales Invoice</span>\r\n                    <span>\r\n                        <Button type='button' onClick={() => {\r\n                            if (window.history.length > 1) {\r\n                                navigate(-1);\r\n                            } else {\r\n                                navigate('/erp/sales/invoice');\r\n                            }\r\n                        }}>Cancel</Button>\r\n                        <Button onClick={() => saveSalesInvoice()} variant=\"contained\">submit</Button>\r\n                    </span>\r\n                </div>\r\n                <CardContent>\r\n                    <div className=\"row p-0\">\r\n                        {/* staff info */}\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <InvolvedStaffs\r\n                                    StaffArray={staffArray}\r\n                                    setStaffArray={setStaffArray}\r\n                                    costCenter={baseData.staff}\r\n                                    costCategory={baseData.staffType}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* general info */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <ManageSalesInvoiceGeneralInfo\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    retailers={baseData.retailers}\r\n                                    branches={baseData.branch}\r\n                                    voucherType={baseData.voucherType}\r\n                                    stockItemLedgerName={baseData.stockItemLedgerName}\r\n                                    onChangeRetailer={() => {\r\n                                        setInvoiceProduct([]);\r\n                                        setInvoiceExpences([]);\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* product details */}\r\n                    <FilterableTable\r\n                        title=\"Items\"\r\n                        headerFontSizePx={13}\r\n                        bodyFontSizePx={13}\r\n                        EnableSerialNumber\r\n                        disablePagination\r\n                        ButtonArea={\r\n                            <>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setSelectedProductToEdit(null);\r\n                                        setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                    }}\r\n                                    sx={{ ml: 1 }}\r\n                                    variant='outlined'\r\n                                    type=\"button\"\r\n                                    startIcon={<Add />}\r\n                                    disabled={\r\n                                        !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                        || (invoiceProducts.length > 0\r\n                                            && checkIsNumber(invoiceInfo.So_No))\r\n                                    }\r\n                                >Add Product</Button>\r\n\r\n\r\n                                <AddProductsInSalesInvoice\r\n                                    loadingOn={loadingOn}\r\n                                    loadingOff={loadingOff}\r\n                                    open={dialog.importFromSaleOrder}\r\n                                    onClose={() => setDialog(pre => ({ ...pre, importFromSaleOrder: false }))}\r\n                                    retailer={invoiceInfo?.Retailer_Id}\r\n                                    selectedItems={invoiceProducts}\r\n                                    setSelectedItems={setInvoiceProduct}\r\n                                    staffArray={staffArray}\r\n                                    setStaffArray={setStaffArray}\r\n                                    products={baseData.products}\r\n                                    GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                                    IS_IGST={IS_IGST}\r\n                                    invoiceInfo={invoiceInfo}\r\n                                    setInvoiceInfo={setInvoiceInfo}\r\n                                    godowns={baseData.godown}\r\n                                    stockInGodown={baseData.stockInGodown}\r\n                                >\r\n                                    <Button\r\n                                        onClick={() => setDialog(pre => ({ ...pre, importFromSaleOrder: true }))}\r\n                                        disabled={\r\n                                            !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                            || (\r\n                                                invoiceProducts.length > 0\r\n                                                && !checkIsNumber(invoiceInfo.So_No)\r\n                                            )\r\n                                        }\r\n                                        sx={{ ml: 1 }}\r\n                                        type=\"button\"\r\n                                        variant='outlined'\r\n                                        startIcon={<ReceiptLong />}\r\n                                    >Choose Sale Order</Button>\r\n                                </AddProductsInSalesInvoice>\r\n                            </>\r\n                        }\r\n                        dataArray={[\r\n                            ...invoiceProducts,\r\n                            ...Array.from({\r\n                                length: dummyRowCount > 0 ? dummyRowCount : 0\r\n                            }).map(d => salesInvoiceDetailsInfo)\r\n                        ]}\r\n                        columns={[\r\n                            createCol('Item_Name', 'string'),\r\n                            createCol('HSN_Code', 'string'),\r\n                            createCol('Bill_Qty', 'number'),\r\n                            createCol('Act_Qty', 'number'),\r\n                            createCol('Item_Rate', 'number'),\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Tax',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const { Cgst = 0, Sgst = 0, Igst = 0, Cgst_Amo = 0, Sgst_Amo = 0, Igst_Amo = 0 } = row;\r\n                                    const taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                                    const taxAmount = IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo);\r\n\r\n                                    return !checkIsNumber(row?.Item_Id) ? '' : `${taxAmount} - (${taxPercentage} %)`\r\n                                }\r\n                            },\r\n                            {\r\n                                isVisible: 1,\r\n                                ColumnHeader: 'Godown',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => baseData.godown.find(\r\n                                    godown => isEqualNumber(godown.Godown_Id, row?.GoDown_Id)\r\n                                )?.Godown_Name ?? ''\r\n                            },\r\n                            createCol('Amount', 'number'),\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    setSelectedProductToEdit(row);\r\n                                                    setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                                }}\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                type=\"button\"\r\n                                                onClick={() => setInvoiceProduct(\r\n                                                    pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id))\r\n                                                )}\r\n                                                color='error'\r\n                                                disabled={!checkIsNumber(row?.Item_Id)}\r\n                                            >\r\n                                                <Delete />\r\n                                            </IconButton>\r\n                                        </>\r\n                                    )\r\n                                },\r\n                                ColumnHeader: 'Action',\r\n                                isVisible: 1,\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <ExpencesOfSalesInvoice\r\n                        invoiceExpences={invoiceExpences}\r\n                        setInvoiceExpences={setInvoiceExpences}\r\n                        expenceMaster={baseData.expence}\r\n                        IS_IGST={IS_IGST}\r\n                        taxType={taxType}\r\n                    />\r\n\r\n                    <br />\r\n\r\n                    <SalesInvoiceTaxDetails\r\n                        invoiceProducts={invoiceProducts}\r\n                        invoiceExpences={invoiceExpences}\r\n                        isNotTaxableBill={isNotTaxableBill}\r\n                        isInclusive={isInclusive}\r\n                        IS_IGST={IS_IGST}\r\n                        products={baseData.products}\r\n                        invoiceInfo={invoiceInfo}\r\n                        setInvoiceInfo={setInvoiceInfo}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateSalesInvoice;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["findProductDetails","_arr$find","productid","arguments","length","undefined","find","obj","isEqualNumber","Product_Id","_ref","invoiceProducts","invoiceExpences","isNotTaxableBill","isInclusive","IS_IGST","products","invoiceInfo","setInvoiceInfo","invExpencesTotal","useMemo","toArray","reduce","acc","exp","Addition","Expence_Value","Total_Invoice_value","invValue","item","Amount","RoundNumber","product","Item_Id","gstPercentage","Igst_P","Gst_P","calculateGSTDetails","with_tax","taxSplitUp","totalTaxable","totalTax","forEach","taxInfo","parseFloat","without_tax","tax_amount","totalWithTax","totalWithExpenses","roundedTotal","Math","round","roundOff","cgst","sgst","igst","invoiceTotal","Round_off","pre","_objectSpread","_jsx","_Fragment","children","className","_jsxs","rowSpan","numberToWords","parseInt","value","onInput","onlynumAndNegative","onChange","e","target","NumberFormat","setInvoiceExpences","expenceMaster","taxType","Card","Button","variant","type","onClick","addNewRow","prev","salesInvoiceExpencesInfo","Sno","map","o","i","style","fontSize","row","index","_expenceMaster$find","currentExpenseName","Id","Expense_Id","Expence_Name","minWidth","Select","label","handleSelectChange","selectedOption","selected","options","filter","some","inv","idx","styles","customSelectStyles","menuPortalTarget","document","body","isSearchable","placeholder","disabled","checkIsNumber","handleInputChange","field","updated","Cgst","toNumber","Sgst","Igst","expVal","taxPercentage","taxAmount","Cgst_Amo","cgst_amount","Sgst_Amo","sgst_amount","Igst_Amo","igst_amount","Division","IconButton","_","removeRow","size","Delete","color","colSpan","_toArray$find","retailers","voucherType","branches","onChangeRetailer","stockItemLedgerName","inputStyle","Retailer_Id","Retailer_Name","isDisabled","maxMenuHeight","Voucher_Type","v","Vocher_Type_Id","fil","Type","required","Do_Id","RequiredStar","Do_Date","Branch_Id","BranchId","BranchName","GST_Inclusive","Number","Stock_Item_Ledger_Name","Cancel_status","rows","Narration","createSvgIcon","d","StaffArray","setStaffArray","costCenter","costCategory","salesInvoiceStaffInfo","Emp_Id","Emp_Name","staffRow","ind","staff","c","Cost_Center_Id","Emp_Type_Id","User_Type","st","Cost_Center_Name","maxWidth","sti","Cost_Category_Id","Cost_Category","filIndex","storage","getSessionUser","user","loadingOn","loadingOff","navigate","useNavigate","editValues","useLocation","state","baseData","setBaseData","useState","branch","uom","staffType","brand","godown","expence","stockInGodown","dialog","setDialog","addProductDialog","importFromSaleOrder","salesInvoiceGeneralInfo","setInvoiceProduct","staffArray","selectedProductToEdit","setSelectedProductToEdit","dummyRowCount","useEffect","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","godownLocationsResponse","expenceResponse","godownWiseStock","stockItemLedgerNameResponse","Promise","all","fetchLink","address","concat","Company_id","branchData","success","data","sort","a","b","String","localeCompare","productsData","Product_Name","retailersData","uomData","Units","staffData","staffCategoryData","godownLocations","Godown_Name","expencesMaster","Account_Name","stockInGodowns","stock_item_name","getUniqueData","stringCompare","Acc_Id","console","error","fetchData","Object","fromEntries","entries","_ref2","key","productMaster","isTaxable","Bill_Qty","Item_Rate","itemRateGst","gstInfo","cgstPer","cgst_per","igstPer","igst_per","base_amount","isValidObject","Array","isArray","Products_List","Expence_Array","Staffs_Array","_ref3","_editValues$key","ISOString","salesInvoiceDetailsInfo","_ref4","_item$key","_ref5","_item$key2","_ref6","_item$key3","saveSalesInvoice","method","bodyData","Product_Array","then","toast","message","warn","catch","finally","AddItemToSaleOrderCart","orderProducts","setOrderProducts","open","onClose","brands","godowns","initialValue","Pre_Id","So_No","window","history","CardContent","minHeight","height","InvolvedStaffs","ManageSalesInvoiceGeneralInfo","FilterableTable","title","headerFontSizePx","bodyFontSizePx","EnableSerialNumber","disablePagination","ButtonArea","sx","ml","startIcon","Add","AddProductsInSalesInvoice","retailer","selectedItems","setSelectedItems","ReceiptLong","dataArray","from","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref7","_ref8","_baseData$godown$find","_baseData$godown$find2","Godown_Id","GoDown_Id","_ref9","Edit","ExpencesOfSalesInvoice","SalesInvoiceTaxDetails"],"sourceRoot":""}