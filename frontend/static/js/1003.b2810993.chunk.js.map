{"version":3,"file":"static/js/1003.b2810993.chunk.js","mappings":"yOAGA,MAoEA,EApEgCA,IAAoB,IAAnB,UAAEC,GAAWD,EAC1C,MAAME,EAAiB,CAAC,cAAe,qBAAsB,KAAM,KAAM,KAAM,KAAM,cAC9EC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IAEjCC,GAAWC,EAAAA,EAAAA,SAAQ,IACdN,EAAUO,IAAIC,IACjB,MAAMC,EAAcC,MAAMC,QAAS,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGI,kBAAqB,OAADJ,QAAC,IAADA,OAAC,EAADA,EAAGI,iBAAmB,GACzEC,EAASJ,EAAY,IAAM,CAAC,EAC5BK,EAASC,OAAOC,YAClBD,OAAOE,QAAQJ,GAAQK,OAAOC,IAAA,IAAEC,GAAID,EAAA,OAC/BlB,EAAeoB,SAASD,KAASE,MAAMC,OAAOH,MACjDb,IAAIiB,IAAY,IAAVJ,GAAII,EACRrB,EAAWsB,GAAOA,EAAIJ,SAASD,GAAOK,EAAM,IAAIA,EAAKL,IACrD,MAAMM,EAAQjB,EAAYkB,OAAO,CAACC,EAAKC,IAASD,GAAOL,OAAOM,EAAKT,KAAS,GAAI,GAChF,MAAO,CAACA,EAAKM,MAIrB,OAAAI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOtB,GACAM,KAGZ,CAACd,IAEJ,OACI+B,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZlC,UAAWK,EACX8B,cAAc,EACdC,QAAS,EACLC,EAAAA,EAAAA,IAAU,cAAe,WACzBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,YAAa,aACpBnC,EAAQK,IAAI+B,IAAOD,EAAAA,EAAAA,IAAUC,EAAK,SAAS,OAADC,OAASD,MAE1DE,eAAgBC,IAAc,IAAb,IAAEC,GAAKD,EACpB,MAAMhC,EAAcC,MAAMC,QAAW,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAK9B,kBAAuB,OAAH8B,QAAG,IAAHA,OAAG,EAAHA,EAAK9B,iBAAmB,GAC7E+B,EAAgB,EAClBN,EAAAA,EAAAA,IAAU,qBAAsB,SAAU,SAC1CA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,KAAM,WAChBA,EAAAA,EAAAA,IAAU,YAAa,WAGrBD,EAAUrB,OAAO6B,KAAKnC,EAAY,IAAM,CAAC,GAAGS,OAC9CE,IAAQnB,EAAeoB,SAASD,IAAgB,gBAARA,GAC1Cb,IAAIa,IAAOiB,EAAAA,EAAAA,IAAUjB,EAAK,WAE5B,OACIW,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZW,iBAAkB,GAClB7C,UAAWS,EACX2B,QAAS,IAAIO,KAAkBP,MAI3CU,eAAgB,SCmEhC,EAhImC/C,IAA0B,IAAzB,UAAEC,EAAS,KAAE+C,GAAMhD,EAEnD,MAAMM,GAAWC,EAAAA,EAAAA,SAAQ,IACdN,EAAUO,IAAIC,IAAC,IAAAwC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAtB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACftB,GAAC,IACJ6C,OAAgE,QAA1DL,GAAEM,EAAAA,EAAAA,IAAS9C,EAAE+C,YAAaC,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAR,EAAAA,EAAI,EACpES,OAAgE,QAA1DR,GAAEK,EAAAA,EAAAA,IAAS9C,EAAEkD,YAAaF,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAP,EAAAA,EAAI,EACpEU,OAAgE,QAA1DT,GAAEI,EAAAA,EAAAA,IAAS9C,EAAEoD,YAAaJ,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAN,EAAAA,EAAI,EACpEW,OAAgE,QAA1DV,GAAEG,EAAAA,EAAAA,IAAS9C,EAAEsD,YAAaN,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAL,EAAAA,EAAI,EACpEY,QAAyE,QAAlEX,GAAEE,EAAAA,EAAAA,IAAS9C,EAAEwD,kBAAmBR,EAAAA,EAAAA,IAAwB,IAAM,WAAI,IAAAJ,EAAAA,EAAI,EAC7Ea,YAAYC,EAAAA,EAAAA,IAAU1D,EAAEI,iBAAkB,YAC1CuD,YAAYD,EAAAA,EAAAA,IAAU1D,EAAEI,iBAAkB,YAAcmC,EACxDnC,iBAAkBJ,EAAEI,iBAAiBL,IAAI6D,IAAE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA3C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpCsC,GAAE,IACLM,iBAAkBN,EAAGO,mBACrBtB,OAAiE,QAA3DgB,GAAEf,EAAAA,EAAAA,IAASc,EAAGQ,YAAapB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAa,EAAAA,EAAI,EACrEZ,OAAiE,QAA3Da,GAAEhB,EAAAA,EAAAA,IAASc,EAAGS,YAAarB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAc,EAAAA,EAAI,EACrEX,OAAiE,QAA3DY,GAAEjB,EAAAA,EAAAA,IAASc,EAAGU,YAAatB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAe,EAAAA,EAAI,EACrEV,OAAiE,QAA3DW,GAAElB,EAAAA,EAAAA,IAASc,EAAGW,YAAavB,EAAAA,EAAAA,IAAwB,GAAK,UAAG,IAAAgB,EAAAA,EAAI,EACrET,QAA0E,QAAnEU,GAAEnB,EAAAA,EAAAA,IAASc,EAAGY,kBAAmBxB,EAAAA,EAAAA,IAAwB,IAAM,WAAI,IAAAiB,EAAAA,EAAI,UAElFlE,IAAIC,IAACsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFtB,GAAC,IACJyD,YAAYC,EAAAA,EAAAA,IAAU1D,EAAEI,iBAAkB,eAG/C,CAACZ,IAEJ,OACI+B,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACLF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZlC,UAAWK,EACX8B,cAAc,EACdC,QAAS,CACL,CACI6C,WAAY,cACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,aACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,aACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,WAGnB3C,eAAgBrB,IAAc,IAAb,IAAEuB,GAAKvB,EACpB,OACIY,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZW,iBAAkB,GAClB7C,UAAWU,MAAMC,QAAQ+B,EAAI9B,kBAAoB8B,EAAI9B,iBAAmB,GACxEwB,QAAS,CACL,CACI6C,WAAY,mBACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,WACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,SACZC,UAAW,EACXC,UAAW,UAEf,CACIF,WAAY,UACZC,UAAW,EACXC,UAAW,cAO/BrC,eAAgB,S,gNCtHhC,MAAMsC,GAAOrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAoB,CAACC,SAAS,UACtCC,GAAcxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAQ,CAACF,SAAS,UAEjCG,EAAgB1F,IAAoC,IAAnC,IAAE2C,EAAG,SAAEgD,EAAQ,OAAEC,EAAM,GAAEC,GAAI7F,EAChD,MAAO8F,EAAWC,IAAgB1F,EAAAA,EAAAA,UAAS,KACpC2F,EAAWC,IAAgB5F,EAAAA,EAAAA,UAAS,KACpC6F,EAASC,IAAc9F,EAAAA,EAAAA,WAAS,GAsBvC,OApBA+F,EAAAA,EAAAA,WAAU,KACND,GAAW,IACXE,EAAAA,EAAAA,GAAU,CACNC,QAAQ,mDAAD9D,OAAqDmD,EAAQ,YAAAnD,OAAWoD,EAAM,eAAApD,OAAiB,OAAHG,QAAG,IAAHA,OAAG,EAAHA,EAAK4D,iBACxGC,QAAS,CACL,GAAMX,KAEXY,KAAKrF,IAAgC,IAA/B,QAAEsF,EAAO,KAAEC,EAAI,OAAEC,GAAQxF,EAC9B,GAAIsF,EAAS,CACT,MAAM,aAAEG,GAAiBD,EACzBb,EAAaY,GACbV,EAAavE,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEoF,UAAWnG,MAAMC,QAAQiG,GAAgBA,EAAe,KAC3F,MACId,EAAa,MAElBgB,MAAMC,GAAKC,QAAQC,MAAMF,IAAIG,QAAQ,KACpChB,GAAW,MAEhB,CAAI,OAAHxD,QAAG,IAAHA,OAAG,EAAHA,EAAK4D,gBAAiBZ,EAAUC,IAGhCM,GACMlE,EAAAA,EAAAA,KAAA,MAAIoF,UAAU,4BAA2BlF,SAAC,gBAC1CF,EAAAA,EAAAA,KAACqF,EAAAA,EAAgB,CAACpH,UAAW6F,EAAWzD,QAAS2D,EAAUc,aAInEQ,EAAoB7F,IAAoC,IAAnC,IAAEkB,EAAG,SAAEgD,EAAQ,OAAEC,EAAM,GAAEC,GAAIpE,EACpD,MAAOqE,EAAWC,IAAgB1F,EAAAA,EAAAA,UAAS,KACpC2F,EAAWC,IAAgB5F,EAAAA,EAAAA,UAAS,KACpC6F,EAASC,IAAc9F,EAAAA,EAAAA,WAAS,GAEjCkH,GAAYhH,EAAAA,EAAAA,SAAQ,KACViH,EAAAA,EAAAA,IAAW,OAAH7E,QAAG,IAAHA,OAAG,EAAHA,EAAK8E,aAAajH,IAAIkH,GAAQ,OAAFA,QAAE,IAAFA,OAAE,EAAFA,EAAInB,iBACzCpF,OAAOwG,SAASC,KAAK,CAACC,EAAGC,IAAMC,OAAOF,GAAGG,cAAcD,OAAOD,KAAKG,KAAK,KACpF,CAAI,OAAHtF,QAAG,IAAHA,OAAG,EAAHA,EAAK8E,cA4BT,OA1BArB,EAAAA,EAAAA,WAAU,KACN,IAAKmB,EAA+B,YAAlBxB,EAAa,IAE/B,IAAImC,GAAY,EAoBhB,OAnBA/B,GAAW,IAEXE,EAAAA,EAAAA,GAAU,CACNC,QAAQ,kDAAD9D,OAAoDmD,EAAQ,YAAAnD,OAAWoD,EAAM,eAAApD,OAAc+E,GAClGf,QAAS,CAAE2B,GAAItC,KAEdY,KAAK/D,IAAgC,IAA/B,QAAEgE,EAAO,KAAEC,EAAI,OAAEC,GAAQlE,EAC5B,IAAIwF,EACJ,GAAIxB,EAAS,CACT,MAAM,aAAEG,GAAiBD,GAAU,CAAC,EACpCb,EAAaY,GAAQ,IACrBV,EAAamC,IAAIrG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUqG,GAAI,IAAEtB,UAAWnG,MAAMC,QAAQiG,GAAgBA,EAAe,KAC7F,MACId,EAAa,MAGpBgB,MAAME,QAAQC,OACdC,QAAQ,KAAae,GAAW/B,GAAW,KAEzC,KAAQ+B,GAAY,IAC5B,CAACX,EAAW5B,EAAUC,EAAQC,IAG7BK,GACMlE,EAAAA,EAAAA,KAAA,MAAIoF,UAAU,4BAA2BlF,SAAC,gBAC1CF,EAAAA,EAAAA,KAACqF,EAAAA,EAAgB,CAACpH,UAAW6F,EAAWzD,QAAS2D,EAAUc,aAInEuB,EAAuBC,IAAmF,IAAlF,IAAE3F,EAAG,QAAE4F,EAAO,GAAE1C,EAAE,SAAEF,EAAQ,OAAEC,EAAM,cAAE4C,EAAa,sBAAEC,GAAuBH,EAItG,OAFArB,QAAQyB,IAAI,CAAE/F,MAAK8F,wBAAuBF,YAEnCA,EACHE,GACIzG,EAAAA,EAAAA,KAACsF,EAAiB,CACd3E,IAAKA,EACLkD,GAAIA,EACJF,SAAUA,EACVC,OAAQA,KAGZ5D,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZwG,MAAOhG,EAAI4F,GAAW,aACtBtI,UAAWU,MAAMC,QAAW,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAK8E,aAAkB,OAAH9E,QAAG,IAAHA,OAAG,EAAHA,EAAK8E,YAAc,GAChEpF,QAASmG,EACTI,kBAAgB,EAChBxG,cAAc,EACdK,eAAgBoG,IAAA,IAAC,IAAElG,GAAKkG,EAAA,OACpB7G,EAAAA,EAAAA,KAAC0D,EAAa,CACV/C,IAAKA,EACLkD,GAAIA,EACJF,SAAUA,EACVC,OAAQA,QAMxB5D,EAAAA,EAAAA,KAAC0D,EAAa,CACV/C,IAAKA,EACLkD,GAAIA,EACJF,SAAUA,EACVC,OAAQA,KAqXpB,EAhX+BkD,IAAoD,IAAnD,UAAE7I,EAAS,SAAE8I,EAAQ,GAAElD,EAAE,SAAEF,EAAQ,OAAEC,GAAQkD,EACzE,MAAOE,EAASC,IAAc5I,EAAAA,EAAAA,UAAS,CAAC,IACjCkI,EAASW,IAAc7I,EAAAA,EAAAA,UAAS,KAChC8I,EAAcC,IAAmB/I,EAAAA,EAAAA,UAAS,KAC1CgJ,EAAQC,IAAajJ,EAAAA,EAAAA,WAAS,IAC9BkJ,EAAcC,IAAmBnJ,EAAAA,EAAAA,WAAS,IAC1CoI,EAAuBgB,IAA4BpJ,EAAAA,EAAAA,WAAS,GAE7DqJ,EAAeX,EAASvI,IAAI,CAACmJ,EAAKC,KAAM,CAC1CzE,UAAWyE,EAAS,GAAK,EAAI,EAC7B1E,WAAe,OAAHyE,QAAG,IAAHA,OAAG,EAAHA,EAAKE,YACjBzE,UAAc,OAAHuE,QAAG,IAAHA,OAAG,EAAHA,EAAKG,UAChBC,QAASH,EAAS,MAGfvH,EAAS2H,IAAc3J,EAAAA,EAAAA,UAASqJ,GAEjCO,GAAiB1J,EAAAA,EAAAA,SAAQ,IACpB,IAAI8B,GAASuF,KAChB,CAACC,EAAGC,IACC,OAADD,QAAC,IAADA,GAAAA,EAAGkC,SAAY,OAADjC,QAAC,IAADA,GAAAA,EAAGiC,SAChB,OAADlC,QAAC,IAADA,OAAC,EAADA,EAAGkC,UAAW,OAADjC,QAAC,IAADA,OAAC,EAADA,EAAGiC,UAAW,OAADjC,QAAC,IAADA,OAAC,EAADA,EAAGiC,UAAW,OAADlC,QAAC,IAADA,OAAC,EAADA,EAAGkC,UAEnD,CAAC1H,IAEEmG,GAAgBjI,EAAAA,EAAAA,SAAQ,IACnB0J,EAAe9I,OAClBwI,IAAQO,EAAAA,EAAAA,IAAiB,OAAHP,QAAG,IAAHA,OAAG,EAAHA,EAAKQ,eAAgB,KAAMD,EAAAA,EAAAA,IAAiB,OAAHP,QAAG,IAAHA,OAAG,EAAHA,EAAKxE,UAAW,IAEpF,CAAC8E,IAEE3J,GAAWC,EAAAA,EAAAA,SAAQ,KACrB,MAAMY,EAASH,OAAO6B,KAAKmG,GAASoB,OAAS,EAAGC,IAAW9B,EAErD+B,EAAWnJ,EAASgI,EAAelJ,EACnCsK,EAAgBF,GAAWG,EAAAA,EAAAA,IAAUF,EAAU/B,GAAW,GAE1DkC,EAAUjC,EAAcrH,OAAOuJ,GACC,YAAlCC,EAAAA,EAAAA,IAAeD,EAAItF,YACpB5E,IAAImJ,GAAOA,EAAIzE,YAEZ0F,EAAoBL,EAAc/J,IAAIqK,IACxC9I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO8I,GACA7J,OAAOC,YACNwJ,EAAQjK,IAAIa,IAAG,IAAAyJ,EAAAC,EAAA,MAAI,CACf1J,EACQ,cAARA,EAAyB,OAAHwJ,QAAG,IAAHA,GAAgB,QAAbC,EAAHD,EAAKpD,mBAAW,IAAAqD,OAAb,EAAHA,EAAkBlJ,OACpC,CAACoJ,EAAKC,KAAUC,EAAAA,EAAAA,IAASF,GAAKG,EAAAA,EAAAA,IAASF,EAAM5J,KAAS,GACtD,IACAkC,EAAAA,EAAAA,IACG,OAAHsH,QAAG,IAAHA,GAAgB,QAAbE,EAAHF,EAAKpD,mBAAW,IAAAsD,OAAb,EAAHA,EAAkBnJ,OACd,CAACoJ,EAAKC,KAAUC,EAAAA,EAAAA,IAASF,GAAKG,EAAAA,EAAAA,IAASF,EAAM5J,KAAS,GACtD,GAEJwJ,EAAIpD,YAAY2C,cAOpC,OAAOC,EAAWO,EAAoBN,GACvC,CAACtB,EAAS/I,EAAWkJ,EAAcZ,EAASC,KAE/CpC,EAAAA,EAAAA,WAAU,KACNgF,KACD,CAACpC,IAEJ,MAAMqC,EAAqBA,CAACC,EAAQC,KAChCtC,EAAWuC,IAAWzJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfyJ,GAAW,IACd,CAACF,GAASC,MAIZH,EAAeA,KACjB,IAAId,EAAW,IAAIrK,GACnB,IAAK,MAAMqL,KAAUrB,EACjB,GAAIjB,EAAQsC,EAAOpG,YACf,GAAwC,UAApC8D,EAAQsC,EAAOpG,YAAYuG,KAAkB,CAC7C,MAAM,IAAEC,EAAG,IAAEC,GAAQ3C,EAAQsC,EAAOpG,YACpCoF,EAAWA,EAASnJ,OAAOW,IACvB,MAAMyJ,EAAQzJ,EAAKwJ,EAAOpG,YAC1B,YAAgB0G,IAARF,GAAqBH,GAASG,UAAiBE,IAARD,GAAqBJ,GAASI,IAErF,MAAO,GAAwC,SAApC3C,EAAQsC,EAAOpG,YAAYuG,KAAiB,CACnD,MAAM,MAAEI,EAAK,IAAEC,GAAQ9C,EAAQsC,EAAOpG,YAAYqG,MAClDjB,EAAWA,EAASnJ,OAAOW,IACvB,MAAMiK,EAAY,IAAIC,KAAKlK,EAAKwJ,EAAOpG,aACvC,YAAkB0G,IAAVC,GAAuBE,GAAa,IAAIC,KAAKH,WAAoBD,IAARE,GAAqBC,GAAa,IAAIC,KAAKF,KAEpH,MAAO,GAAInL,MAAMC,QAAQoI,EAAQsC,EAAOpG,aAAc,CAAC,IAAD+G,EAClD3B,GAAqC,QAA1B2B,EAAAjD,EAAQsC,EAAOpG,mBAAW,IAAA+G,OAAA,EAA1BA,EAA4B7B,QAAS,EAAIE,EAASnJ,OAAOW,IAAI,IAAAoK,EAAA,OAAIlD,EAAQsC,EAAOpG,YAAY5D,SAAgC,QAAxB4K,EAACpK,EAAKwJ,EAAOpG,mBAAW,IAAAgH,OAAA,EAAvBA,EAAyBC,cAAcC,UAAW9B,CACtK,CAGRlB,EAAgBkB,IAGd+B,EAAgBf,IAClB,MAAM,WAAEpG,EAAU,UAAEE,GAAckG,EACL,IAADgB,EAAAC,EAAAC,EAAAC,EAmBKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAnBjC,GAAkB,WAAd3H,EACA,OACI4H,EAAAA,EAAAA,MAAA,OAAK5F,UAAU,sCAAqClF,SAAA,EAChDF,EAAAA,EAAAA,KAAA,SACIiL,YAAY,MACZxB,KAAK,SACLrE,UAAU,iCACVmE,MAA+B,QAA1Be,EAAqB,QAArBC,EAAEvD,EAAQ9D,UAAW,IAAAqH,OAAA,EAAnBA,EAAqBb,WAAG,IAAAY,EAAAA,EAAI,GACnCY,SAAWlG,GAAMqE,EAAmBnG,GAAUnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAI0J,KAAM,SAAYzC,EAAQ9D,IAAW,IAAEwG,IAAK1E,EAAEmG,OAAO5B,MAAQ6B,WAAWpG,EAAEmG,OAAO5B,YAASK,QAEhJ5J,EAAAA,EAAAA,KAAA,SACIiL,YAAY,MACZxB,KAAK,SACLrE,UAAU,iCACVmE,MAA+B,QAA1BiB,EAAqB,QAArBC,EAAEzD,EAAQ9D,UAAW,IAAAuH,OAAA,EAAnBA,EAAqBd,WAAG,IAAAa,EAAAA,EAAI,GACnCU,SAAWlG,GAAMqE,EAAmBnG,GAAUnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAI0J,KAAM,SAAYzC,EAAQ9D,IAAW,IAAEyG,IAAK3E,EAAEmG,OAAO5B,MAAQ6B,WAAWpG,EAAEmG,OAAO5B,YAASK,UAIrJ,GAAkB,SAAdxG,EACP,OACI4H,EAAAA,EAAAA,MAAA,OAAK5F,UAAU,sCAAqClF,SAAA,EAChDF,EAAAA,EAAAA,KAAA,SACIiL,YAAY,aACZxB,KAAK,OACLrE,UAAU,iCACVmE,MAAwC,QAAnCmB,EAAqB,QAArBC,EAAE3D,EAAQ9D,UAAW,IAAAyH,GAAO,QAAPC,EAAnBD,EAAqBpB,aAAK,IAAAqB,OAAP,EAAnBA,EAA4Bf,aAAK,IAAAa,EAAAA,EAAI,GAC5CQ,SAAWlG,IAAC,IAAAqG,EAAA,OAAKhC,EAAmBnG,EAAY,CAAEuG,KAAM,OAAQF,OAAKxJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA0B,QAA1BsL,EAAOrE,EAAQ9D,UAAW,IAAAmI,OAAA,EAAnBA,EAAqB9B,OAAK,IAAEM,MAAO7E,EAAEmG,OAAO5B,YAASK,UAErI5J,EAAAA,EAAAA,KAAA,SACIiL,YAAY,WACZxB,KAAK,OACLrE,UAAU,iCACVmE,MAAsC,QAAjCsB,EAAqB,QAArBC,EAAE9D,EAAQ9D,UAAW,IAAA4H,GAAO,QAAPC,EAAnBD,EAAqBvB,aAAK,IAAAwB,OAAP,EAAnBA,EAA4BjB,WAAG,IAAAe,EAAAA,EAAI,GAC1CK,SAAWlG,IAAC,IAAAsG,EAAA,OAAKjC,EAAmBnG,EAAY,CAAEuG,KAAM,OAAQF,OAAKxJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA0B,QAA1BuL,EAAOtE,EAAQ9D,UAAW,IAAAoI,OAAA,EAAnBA,EAAqB/B,OAAK,IAAEO,IAAK9E,EAAEmG,OAAO5B,YAASK,YAIxI,GAAkB,WAAdxG,EAAwB,CAC/B,MAAMmI,EAAiB,IAAI,IAAIC,IAAIvN,EAAUO,IAAIsB,IAAI,IAAA2L,EAAAC,EAAA,OAAoB,QAApBD,EAAI3L,EAAKoD,UAAW,IAAAuI,GAAe,QAAfC,EAAhBD,EAAkBtB,qBAAa,IAAAuB,OAAf,EAAhBA,EAAiCtB,WAC1F,OACIpK,EAAAA,EAAAA,KAAC2L,EAAAA,EAAY,CACTC,UAAQ,EACRC,GAAE,GAAArL,OAAK0C,EAAU,WACjB4I,QAASP,EACTQ,sBAAoB,EACpBC,eAAgBC,GAAUA,EAC1B1C,MAAOvC,EAAQ9D,IAAe,GAC9BgI,SAAUA,CAACgB,EAAOC,IAAa9C,EAAmBnG,EAAYiJ,GAC9DC,aAAcA,CAACC,EAAOJ,EAAMK,KAAA,IAAE,SAAEC,GAAUD,EAAA,OACtCtB,EAAAA,EAAAA,MAAA,MAAAjL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQsM,GAAK,IAAAnM,SAAA,EACTF,EAAAA,EAAAA,KAACwM,EAAAA,EAAQ,CACLnJ,KAAMA,EACNG,YAAaA,EACbiJ,MAAO,CAAEC,YAAa,GACtBC,QAASJ,IAEZN,OAGTW,qBAAsBA,CAACC,EAAKC,IAAQD,IAAQC,EAC5CC,YAAcC,IACVhN,EAAAA,EAAAA,KAACiN,EAAAA,GAASlN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFiN,GAAM,IACVE,MAAOhK,EACP+H,YAAW,UAAAzK,OAAsB,OAAV0C,QAAU,IAAVA,OAAU,EAAVA,EAAYiK,QAAQ,KAAM,UAKrE,GAGEC,EAAcA,KAChB9F,GAAU,GACVE,GAAgB,IAGpB,OACIwD,EAAAA,EAAAA,MAAC/K,EAAAA,SAAQ,CAAAC,SAAA,EAELF,EAAAA,EAAAA,KAACG,EAAAA,GAAe,CACZwG,MAAM,sBACN0G,iBAAkB,GAClBC,eAAgB,GAChBC,YACIvC,EAAAA,EAAAA,MAAAwC,EAAAA,SAAA,CAAAtN,SAAA,EACIF,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,mBAAkBzG,UAC7BF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMtG,GAAU,GAAMpH,UAE/BF,EAAAA,EAAAA,KAAC6N,EAAAA,EAAQ,SAGjB7N,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,gBAAezG,UAC1BF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAM3G,EAAW,CAAC,GAAG/G,UAE9BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAY,SAGrB9N,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,UAASzG,UACpBF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPE,QAASA,IAAMpG,GAAgB,GAC/BmG,KAAK,QACTzN,UAEIF,EAAAA,EAAAA,KAAC+N,EAAAA,EAAS,SAGlB/C,EAAAA,EAAAA,MAAA,UACI5F,UAAU,0BACVmE,MAAOhD,EACP2E,SAAUlG,GAAKkC,EAAWlC,EAAEmG,OAAO5B,OAAOrJ,SAAA,EAE1CF,EAAAA,EAAAA,KAAA,UAAQuJ,MAAM,GAAErJ,SAAC,aAChBsG,EAAcrH,OAAOuJ,GACgB,YAAlCC,EAAAA,EAAAA,IAAeD,EAAItF,YACI,iBAAjB,OAAHsF,QAAG,IAAHA,OAAG,EAAHA,EAAKxF,aACT1E,IAAI,CAACmJ,EAAKC,KAAM,IAAAoG,EAAA,OACfhO,EAAAA,EAAAA,KAAA,UAAQuJ,MAAU,OAAH5B,QAAG,IAAHA,OAAG,EAAHA,EAAKzE,WAAWhD,SAAkB,OAAHyH,QAAG,IAAHA,GAAe,QAAZqG,EAAHrG,EAAKzE,kBAAU,IAAA8K,OAAZ,EAAHA,EAAiBb,QAAQ,KAAM,MAAxCvF,WAKrDqG,YAAa,CACT,CACIC,KAAM,qBACN7K,KAAMoD,GAAwBzG,EAAAA,EAAAA,KAACmO,EAAAA,EAAQ,CAACC,MAAM,aAAepO,EAAAA,EAAAA,KAACqO,EAAAA,EAAS,IACvEC,QAASA,IAAM7G,EAAyB/H,IAAQA,KAGxDkH,kBAAgB,EAChBvG,QACIkG,EACMC,EAAcrH,OAAOuJ,GACnBpK,EAAS8J,OAAS,GAAKpJ,OAAO6B,KAAKvC,EAAS,IAAIgB,SAASoJ,EAAIxF,aAC/D1E,IAAImJ,IAAG5H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF4H,GAAG,IACN4G,aAAc5G,EAAIzE,aAAeqD,EAAUA,EAAUoB,EAAI4G,gBAE3D/H,EAEVvI,UAAWK,EACX8B,cAAc,EACdK,eAAgB+N,IAAA,IAAC,IAAE7N,GAAK6N,EAAA,OACpBxO,EAAAA,EAAAA,KAACqG,EAAoB,CACjB1F,IAAKA,EACLkD,GAAIA,EACJF,SAAUA,EACVC,OAAQA,EACR2C,QAASA,EACTC,cAAeA,EACfC,sBAAuBA,KAG/BgI,iBAAe,KAGnBzD,EAAAA,EAAAA,MAAC0D,EAAAA,EAAM,CACHC,KAAMpH,EACNqH,QAASxB,EACTyB,SAAS,KAAKC,WAAS,EAAA5O,SAAA,EAEvB8K,EAAAA,EAAAA,MAAC+D,EAAAA,EAAa,CAAA7O,SAAA,EACV8K,EAAAA,EAAAA,MAAA,MAAI5F,UAAU,sCAAqClF,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,aACN8K,EAAAA,EAAAA,MAAA,QAAA9K,SAAA,EACIF,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,mBAAkBzG,UAC7BF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAMtG,GAAU,GAAMpH,UAE/BF,EAAAA,EAAAA,KAAC6N,EAAAA,EAAQ,SAGjB7N,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,gBAAezG,UAC1BF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPC,KAAK,QACLC,QAASA,IAAM3G,EAAW,CAAC,GAAG/G,UAE9BF,EAAAA,EAAAA,KAAC8N,EAAAA,EAAY,eAK7B9C,EAAAA,EAAAA,MAAA,OAAK5F,UAAU,oBAAmBlF,SAAA,CAC7BsG,EAAchI,IAAI,CAAC8K,EAAQ0F,KAAE,IAAAC,EAAA,OAC1BjE,EAAAA,EAAAA,MAAA,OAAc5F,UAAU,iCAAgClF,SAAA,EACpDF,EAAAA,EAAAA,KAAA,SAAOoF,UAAU,YAAWlF,SAAQ,OAANoJ,QAAM,IAANA,GAAkB,QAAZ2F,EAAN3F,EAAQpG,kBAAU,IAAA+L,OAAZ,EAANA,EAAoB9B,QAAQ,KAAM,OAC/D9C,EAAaf,KAFR0F,MAKdhP,EAAAA,EAAAA,KAAA,gBAGRA,EAAAA,EAAAA,KAACkP,EAAAA,EAAa,CAAAhP,UACVF,EAAAA,EAAAA,KAACmP,EAAAA,EAAM,CAACvB,QAASR,EAAagB,MAAM,QAAOlO,SAAC,gBAIpD8K,EAAAA,EAAAA,MAAC0D,EAAAA,EAAM,CACHC,KAAMtH,EACNuH,QAASA,IAAMtH,GAAU,GACzBuH,SAAS,KAAKC,WAAS,EAAA5O,SAAA,EAEvBF,EAAAA,EAAAA,KAACoP,EAAAA,EAAW,CAAAlP,SAAC,qBACbF,EAAAA,EAAAA,KAAC+O,EAAAA,EAAa,CAAA7O,UACVF,EAAAA,EAAAA,KAAA,OAAKoF,UAAU,MAAKlF,SACfG,EAAQ7B,IAAI,CAACC,EAAG4Q,KACbrP,EAAAA,EAAAA,KAAA,OAAKoF,UAAU,wBAAuBlF,UAClC8K,EAAAA,EAAAA,MAACsE,EAAAA,EAAI,CACDC,UAAWC,EAAAA,EACXpK,UAAS,mEAAA5E,OAAqE6O,EAAI,IAAM,EAAI,WAAa,IAAKnP,SAAA,EAE9G8K,EAAAA,EAAAA,MAAA,OAAK5F,UAAU,8DAA6DlF,SAAA,EACxEF,EAAAA,EAAAA,KAACyP,EAAAA,EAAM,CACH9C,QAAShH,QAAS,OAADlH,QAAC,IAADA,OAAC,EAADA,EAAGiR,YAAc/J,QAAS,OAADlH,QAAC,IAADA,OAAC,EAADA,EAAG0E,WAC7CwM,SAAUhK,QAAS,OAADlH,QAAC,IAADA,OAAC,EAADA,EAAGiR,WACrBxE,SAAUlG,GACNgD,EAAW4H,GACPA,EAAYpR,IAAIqR,GACZA,EAAG3M,cAAgB,OAADzE,QAAC,IAADA,OAAC,EAADA,EAAGyE,aAAUnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpB8P,GAAE,IAAE1M,UAAW6B,EAAEmG,OAAOwB,QAAU,EAAI,IAC3CkD,OAKtB7P,EAAAA,EAAAA,KAAA,MAAIoF,UAAU,sBAAqBlF,SAAG,OAADzB,QAAC,IAADA,OAAC,EAADA,EAAGyE,iBAE5ClD,EAAAA,EAAAA,KAAA,SACIyJ,KAAK,SACLF,OAAOuG,EAAAA,EAAAA,IAAe,OAADrR,QAAC,IAADA,OAAC,EAADA,EAAGsJ,SAAY,OAADtJ,QAAC,IAADA,OAAC,EAADA,EAAGsJ,QAAU,GAChDmD,SAAUlG,GACNgD,EAAW4H,GACPA,EAAYpR,IAAIqR,GACZA,EAAG3M,cAAgB,OAADzE,QAAC,IAADA,OAAC,EAADA,EAAGyE,aAAUnD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpB8P,GAAE,IAAE9H,QAAS/C,EAAEmG,OAAO5B,QAC3BsG,IAIlB3C,MAAO,cACP9H,UAAU,6BACVqH,MAAO,CAAEsD,MAAO,QAChB9E,YAAY,cApCoBoE,SA2CxDrE,EAAAA,EAAAA,MAACkE,EAAAA,EAAa,CAAAhP,SAAA,EACVF,EAAAA,EAAAA,KAACmP,EAAAA,EAAM,CAACvB,QAASA,IAAM5F,EAAWN,GAAesI,QAAQ,WAAU9P,SAAC,WACpEF,EAAAA,EAAAA,KAACmP,EAAAA,EAAM,CAACvB,QAASA,IAAMtG,GAAU,GAAQ8G,MAAM,QAAOlO,SAAC,oBCvS3E,EAjLoBlC,IAAgC,IAA/B,UAAEiS,EAAS,WAAEC,GAAYlS,EAC1C,MAAMmS,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,UACzCzM,EAAWC,IAAgB1F,EAAAA,EAAAA,UAAS,OACpC2F,EAAWC,IAAgB5F,EAAAA,EAAAA,UAAS,CACvCyG,UAAW,GACX0L,cAAe,MAEZC,EAAoBC,IAAyBrS,EAAAA,EAAAA,UAAS,OACtD2I,EAASC,IAAc5I,EAAAA,EAAAA,UAAS,CACnCsF,UAAUgN,EAAAA,EAAAA,IAAgB,GAC1B/M,QAAQgN,EAAAA,EAAAA,MACRC,WAAY,cACZtJ,cAAc,EACduJ,QAAQ,KA0CZ1M,EAAAA,EAAAA,WAAU,KACNL,EAAa,MACb2M,EAAsB,MACtBzM,EAAa,CACTa,UAAW,GACX0L,cAAe,MA3CnBnM,EAAAA,EAAAA,GAAU,CACNC,QAAQ,uCAAD9D,OAAgD,OAAPwG,QAAO,IAAPA,OAAO,EAAPA,EAASrD,SAAQ,YAAAnD,OAAkB,OAAPwG,QAAO,IAAPA,OAAO,EAAPA,EAASpD,QACrFY,QAAS,CACL,GAAa,OAAP2L,QAAO,IAAPA,OAAO,EAAPA,EAASY,cAEpBtM,KAAKrF,IAAgC,IAA/B,QAAEsF,EAAO,KAAEC,EAAI,OAAEC,GAAQxF,EAC9B,GAAIsF,EAAS,CACT,MAAM,aAAEG,GAAiBD,EACzBb,EAAaY,GACbV,EAAavE,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEoF,UAAWnG,MAAMC,QAAQiG,GAAgBA,EAAe,KAC3F,MACId,EAAa,MAGhBgB,MAAME,QAAQC,QAEnBb,EAAAA,EAAAA,GAAU,CACNC,QAAQ,yCAAD9D,OAAkD,OAAPwG,QAAO,IAAPA,OAAO,EAAPA,EAASrD,SAAQ,YAAAnD,OAAkB,OAAPwG,QAAO,IAAPA,OAAO,EAAPA,EAASpD,QACvFY,QAAS,CACL,GAAa,OAAP2L,QAAO,IAAPA,OAAO,EAAPA,EAASY,cAEpBtM,KAAKE,IACJ,GAAIA,EAAKD,QAAS,CAAC,IAADsM,EACd,MAAM,aAAEnM,GAAqB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,OAEzBqM,EAAetS,MAAMC,QAAY,OAAJ+F,QAAI,IAAJA,GAAY,QAARqM,EAAJrM,EAAMC,cAAM,IAAAoM,OAAR,EAAJA,EAAcE,aAAevM,EAAKC,OAAOsM,YAAY1S,IAAI2S,IAAGpR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxFoR,GAAG,IACNtS,iBAAkBF,MAAMC,QAAQ+F,EAAKA,MAAQ,IAAIA,EAAKA,MAAMxF,OAAOiS,GAAcA,EAAWC,cAAgBF,EAAIE,aAAe,MAC7H,GAENpN,EAAavE,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAE8Q,cAAe7R,MAAMC,QAAQiG,GAAgBA,EAAe,MAC3F6L,EAAsBO,EAC1B,MACIP,EAAsB,MAE3B3L,MAAMC,GAAKC,QAAQC,MAAMF,KAW7B,CAACgC,EAAQ8J,SAEZ,MAAM1D,EAAcA,KAChBnG,EAAWvH,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAE6H,cAAc,MAGzC+J,GAAgBC,EAAAA,EAAAA,IAAY,IAAIvH,KAAKhD,EAAQrD,UAAW,IAAIqG,KAAKhD,EAAQpD,SAE/E,OACI5D,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACL8K,EAAAA,EAAAA,MAACsE,EAAAA,EAAI,CAAClK,UAAU,OAAMlF,SAAA,EAClB8K,EAAAA,EAAAA,MAAA,OAAK5F,UAAU,gFAAgFqH,MAAO,CAAE+E,gBAAiB,WAAYtR,SAAA,EACjIF,EAAAA,EAAAA,KAAA,QAAAE,SACY,OAAPiQ,QAAO,IAAPA,OAAO,EAAPA,EAASsB,gBAEdzR,EAAAA,EAAAA,KAAA,QAAAE,UACI8K,EAAAA,EAAAA,MAAA,UACIzB,MAAOvC,EAAQ6J,WACfzL,UAAU,yCACV8F,SAAUlG,GAAKiC,EAAWvH,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEmR,WAAY7L,EAAEmG,OAAO5B,SAAUrJ,SAAA,EAE3EF,EAAAA,EAAAA,KAAA,UAAQuJ,MAAO,cAAcrJ,SAAC,kBAC9BF,EAAAA,EAAAA,KAAA,UAAQuJ,MAAO,eAAerJ,SAAC,2BAM3C8K,EAAAA,EAAAA,MAAC0G,EAAAA,EAAW,CAAAxR,SAAA,EAERF,EAAAA,EAAAA,KAAA,OAAKoF,UAAU,OAAMlF,UACjB8K,EAAAA,EAAAA,MAAA,QAAM2G,SAAU3M,IACZA,EAAE4M,iBACF3K,EAAWvH,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEoR,QAASpR,EAAIoR,WAC5C5Q,SAAA,EACEF,EAAAA,EAAAA,KAAA,SACIyJ,KAAM,OACNrE,UAAU,6CAEVmE,MAAOvC,EAAQrD,SACfuH,SAAUlG,GAAKiC,EAAWvH,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEiE,SAAUqB,EAAEmG,OAAO5B,YAGnEvJ,EAAAA,EAAAA,KAAA,SACIyJ,KAAM,OACNrE,UAAU,wCACVmE,MAAOvC,EAAQpD,OACfsH,SAAUlG,GAAKiC,EAAWvH,IAAGK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUL,GAAG,IAAEkE,OAAQoB,EAAEmG,OAAO5B,YAGjEvJ,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC9G,MAAM,cAAazG,UACxBF,EAAAA,EAAAA,KAAC0N,EAAAA,EAAU,CACPC,KAAK,QACLvI,UAAU,OACVqE,KAAK,SAAQvJ,UAEbF,EAAAA,EAAAA,KAAC6R,EAAAA,EAAO,aAgBT,OAAd/N,GAA6C,gBAAvBkD,EAAQ6J,aAC3B7Q,EAAAA,EAAAA,KAAA,MAAIoF,UAAU,wBAAuBlF,SAAC,kCAGjB,OAAvBuQ,IAAuD,iBAAvBzJ,EAAQ6J,YAAwD,sBAAvB7J,EAAQ6J,cAC/E7Q,EAAAA,EAAAA,KAAA,MAAIoF,UAAU,wBAAuBlF,SAAC,mCAGjB,gBAAvB8G,EAAQ6J,YAAgClS,MAAMC,QAAQkF,KACpD9D,EAAAA,EAAAA,KAAC8R,EAAsB,CACnBvK,aAAcP,EAAQO,aACtB6F,YAAaA,EACbnP,UAAW6F,EACXiD,SAAU/C,EAAUc,UACpBjB,GAAW,OAAPsM,QAAO,IAAPA,OAAO,EAAPA,EAASY,WACbpN,SAAiB,OAAPqD,QAAO,IAAPA,OAAO,EAAPA,EAASrD,SACnBC,OAAe,OAAPoD,QAAO,IAAPA,OAAO,EAAPA,EAASpD,OACjBqM,UAAWA,EACXC,WAAYA,IAIK,iBAAvBlJ,EAAQ6J,YAAiClS,MAAMC,QAAQ6R,KACrDzQ,EAAAA,EAAAA,KAAC+R,EAAuB,CACpBxK,aAAcP,EAAQO,aACtB6F,YAAaA,EACbnP,UAAWwS,EACXuB,SAAUhL,EAAQrD,SAClBsO,OAAQjL,EAAQpD,SAIC,sBAAvBoD,EAAQ6J,YAAsClS,MAAMC,QAAQ6R,KAC1DzQ,EAAAA,EAAAA,KAACkS,EAA0B,CAAC3K,aAAcP,EAAQO,aAAc6F,YAAaA,EAAanP,UAAWwS,EAAoBzP,KAAMsQ,Y","sources":["Pages/Sales/SalesReportComponent/ProductBasedTable.jsx","Pages/Sales/SalesReportComponent/ProductDayBasedTable.jsx","Pages/Sales/SalesReportComponent/LedgerBasedTable.jsx","Pages/Sales/salesReports.jsx"],"sourcesContent":["import { Fragment, useMemo, useState } from \"react\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\n\r\nconst ProductBasedSalesReport = ({ dataArray }) => {\r\n    const productColumns = ['Stock_Group', 'Item_Name_Modified', 'Y1', 'M6', 'M2', 'LM', 'Total_Qty'];\r\n    const [daysCol, setDaysCol] = useState([])\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => {\r\n            const transaction = Array.isArray(o?.StockTransaction) ? o?.StockTransaction : [];\r\n            const stkObj = transaction[0] || {}; \r\n            const DaySum = Object.fromEntries(\r\n                Object.entries(stkObj).filter(([key]) => \r\n                    !productColumns.includes(key) && !isNaN(Number(key)) \r\n                ).map(([key]) => {\r\n                    setDaysCol(pre => pre.includes(key) ? pre : [...pre, key])\r\n                    const total = transaction.reduce((sum, item) => sum + (Number(item[key]) || 0), 0);\r\n                    return [key, total];\r\n                })\r\n            );\r\n\r\n            return {\r\n                ...o,\r\n                ...DaySum\r\n            };\r\n        });\r\n    }, [dataArray]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    createCol('Stock_Group', 'string'),\r\n                    createCol('Y1', 'number'),\r\n                    createCol('M6', 'number'),\r\n                    createCol('M2', 'number'),\r\n                    createCol('LM', 'number'),\r\n                    createCol('Total_Qty', 'number'),\r\n                    ...daysCol.map(day => createCol(day, 'number', `Day ${day}`))\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    const transaction = Array.isArray(row?.StockTransaction) ? row?.StockTransaction : [];\r\n                    const preDefinedCol = [\r\n                        createCol('Item_Name_Modified', 'string', 'Item'),\r\n                        createCol('Y1', 'number'),\r\n                        createCol('M6', 'number'),\r\n                        createCol('M2', 'number'),\r\n                        createCol('LM', 'number'),\r\n                        createCol('Total_Qty', 'number')\r\n                    ];\r\n                    \r\n                    const columns = Object.keys(transaction[0] || {}).filter(\r\n                        key => !productColumns.includes(key) && key !== 'Stock_Group'\r\n                    ).map(key => createCol(key, 'number'));\r\n\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={transaction}\r\n                            columns={[...preDefinedCol, ...columns]}\r\n                        />\r\n                    );\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProductBasedSalesReport;\r\n","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { calcTotal, getDaysInPreviousMonths, Division } from \"../../../Components/functions\";\r\n\r\nconst ProductDayBasedSalesReport = ({ dataArray, days }) => {\r\n\r\n    const showData = useMemo(() => {\r\n        return dataArray.map(o => ({\r\n            ...o,\r\n            M2_Avg: Division(o.ALL_Avg_M2, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n            M3_Avg: Division(o.ALL_Avg_M3, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n            M6_Avg: Division(o.ALL_Avg_M6, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n            M9_Avg: Division(o.ALL_Avg_M9, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n            M12_Avg: Division(o.ALL_Avg_One_Year, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty'),\r\n            Billed_Avg: calcTotal(o.StockTransaction, 'bill_qty') / days,\r\n            StockTransaction: o.StockTransaction.map(st => ({\r\n                ...st,\r\n                Grade_Item_Group: st.Item_Name_Modified,\r\n                M2_Avg: Division(st.M2_AVG_Qty, (getDaysInPreviousMonths(2) / 2)) ?? 0,\r\n                M3_Avg: Division(st.M3_AVG_Qty, (getDaysInPreviousMonths(3) / 3)) ?? 0,\r\n                M6_Avg: Division(st.M6_AVG_Qty, (getDaysInPreviousMonths(6) / 6)) ?? 0,\r\n                M9_Avg: Division(st.M9_AVG_Qty, (getDaysInPreviousMonths(9) / 9)) ?? 0,\r\n                M12_Avg: Division(st.One_Year_AVG_Qty, (getDaysInPreviousMonths(12) / 12)) ?? 0,\r\n            }))\r\n        })).map(o => ({\r\n            ...o,\r\n            Billed_Qty: calcTotal(o.StockTransaction, 'bill_qty')\r\n        }));\r\n\r\n    }, [dataArray])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FilterableTable\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                columns={[\r\n                    {\r\n                        Field_Name: 'Stock_Group',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'string',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Qty',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'Billed_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M2_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M3_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M6_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M9_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                    {\r\n                        Field_Name: 'M12_Avg',\r\n                        isVisible: 1,\r\n                        Fied_Data: 'number',\r\n                    },\r\n                ]}\r\n                expandableComp={({ row }) => {\r\n                    return (\r\n                        <FilterableTable\r\n                            initialPageCount={10}\r\n                            dataArray={Array.isArray(row.StockTransaction) ? row.StockTransaction : []}\r\n                            columns={[\r\n                                {\r\n                                    Field_Name: 'Grade_Item_Group',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'string',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'bill_qty',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M2_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M3_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M6_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M9_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                                {\r\n                                    Field_Name: 'M12_Avg',\r\n                                    isVisible: 1,\r\n                                    Fied_Data: 'number',\r\n                                },\r\n                            ]}\r\n\r\n                        />\r\n                    )\r\n                }}\r\n                tableMaxHeight={540}\r\n            />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default ProductDayBasedSalesReport;","import { Fragment, useEffect, useMemo, useState } from \"react\";\r\nimport FilterableTable from \"../../../Components/filterableTable2\";\r\nimport { isEqualNumber, checkIsNumber, filterableText, groupData, Addition, toNumber, Division, toArray } from '../../../Components/functions'\r\nimport { Autocomplete, Button, Card, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Paper, Switch, TextField, Tooltip } from \"@mui/material\";\r\nimport { CheckBoxOutlineBlank, CheckBox, FilterAltOff, Settings, FilterAlt, ToggleOn, ToggleOff } from '@mui/icons-material'\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport DisplayArrayData from \"./DataSetDisplay\";\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst LedgerDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/itemDetails?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${row?.Ledger_Tally_Id}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, [row?.Ledger_Tally_Id, Fromdate, Todate])\r\n\r\n    return (\r\n        loading\r\n            ? <h5 className=\"text-center text-primary \">Loading...</h5>\r\n            : <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\nconst GroupSalesDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const ledgerIds = useMemo(() => {\r\n        const ids = toArray(row?.groupedData).map(it => it?.Ledger_Tally_Id);\r\n        return ids.filter(Boolean).sort((a, b) => String(a).localeCompare(String(b))).join(',');\r\n    }, [row?.groupedData]);\r\n\r\n    useEffect(() => {\r\n        if (!ledgerIds) { setSalesData([]); return; }\r\n\r\n        let cancelled = false;\r\n        setLoading(true);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger/groupSales?Fromdate=${Fromdate}&Todate=${Todate}&Ledger_Id=${ledgerIds}`,\r\n            headers: { Db: DB }\r\n        })\r\n            .then(({ success, data, others }) => {\r\n                if (cancelled) return;\r\n                if (success) {\r\n                    const { dataTypeInfo } = others || {};\r\n                    setSalesData(data || []);\r\n                    setDataTypes(prev => ({ ...prev, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }));\r\n                } else {\r\n                    setSalesData([]);\r\n                }\r\n            })\r\n            .catch(console.error)\r\n            .finally(() => { if (!cancelled) setLoading(false); });\r\n\r\n        return () => { cancelled = true; };\r\n    }, [ledgerIds, Fromdate, Todate, DB]); \r\n\r\n    return (\r\n        loading\r\n            ? <h5 className=\"text-center text-primary \">Loading...</h5>\r\n            : <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\nconst GroupedExpandDetails = ({ row, groupBy, DB, Fromdate, Todate, DisplayColumn, showGroupSalesDetails }) => {\r\n\r\n    console.log({ row, showGroupSalesDetails, groupBy });\r\n\r\n    return groupBy ? (\r\n        showGroupSalesDetails ? (\r\n            <GroupSalesDetails\r\n                row={row}\r\n                DB={DB}\r\n                Fromdate={Fromdate}\r\n                Todate={Todate}\r\n            />\r\n        ) : (\r\n            <FilterableTable\r\n                title={row[groupBy] + ' - Ledgers'}\r\n                dataArray={Array.isArray(row?.groupedData) ? row?.groupedData : []}\r\n                columns={DisplayColumn}\r\n                ExcelPrintOption\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <LedgerDetails\r\n                        row={row}\r\n                        DB={DB}\r\n                        Fromdate={Fromdate}\r\n                        Todate={Todate}\r\n                    />\r\n                )}\r\n            />\r\n        )\r\n    ) : (\r\n        <LedgerDetails\r\n            row={row}\r\n            DB={DB}\r\n            Fromdate={Fromdate}\r\n            Todate={Todate}\r\n        />\r\n    )\r\n}\r\n\r\nconst LedgerBasedSalesReport = ({ dataArray, colTypes, DB, Fromdate, Todate }) => {\r\n    const [filters, setFilters] = useState({});\r\n    const [groupBy, setGroupBy] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [filterDialog, setFilterDialog] = useState(false);\r\n    const [showGroupSalesDetails, setShowGroupSalesDetails] = useState(false);\r\n\r\n    const propsColumns = colTypes.map((col, colInd) => ({\r\n        isVisible: colInd < 10 ? 1 : 0,\r\n        Field_Name: col?.Column_Name,\r\n        Fied_Data: col?.Data_Type,\r\n        OrderBy: colInd + 1\r\n    }));\r\n\r\n    const [columns, setColumns] = useState(propsColumns);\r\n\r\n    const sortedCoulumns = useMemo(() => {\r\n        return [...columns].sort(\r\n            (a, b) => (\r\n                a?.OrderBy && b?.OrderBy\r\n            ) ? a?.OrderBy - b?.OrderBy : b?.OrderBy - a?.OrderBy\r\n        )\r\n    }, [columns])\r\n\r\n    const DisplayColumn = useMemo(() => {\r\n        return sortedCoulumns.filter(\r\n            col => (isEqualNumber(col?.Defult_Display, 1) || isEqualNumber(col?.isVisible, 1))\r\n        )\r\n    }, [sortedCoulumns])\r\n\r\n    const showData = useMemo(() => {\r\n        const filter = Object.keys(filters).length > 0, grouping = groupBy ? true : false;\r\n\r\n        const filtered = filter ? filteredData : dataArray;\r\n        const groupFiltered = grouping ? groupData(filtered, groupBy) : [];\r\n\r\n        const aggKeys = DisplayColumn.filter(fil => (\r\n            filterableText(fil.Fied_Data) === \"number\"\r\n        )).map(col => col.Field_Name);\r\n\r\n        const groupAggregations = groupFiltered.map(grp => {\r\n            return {\r\n                ...grp,\r\n                ...Object.fromEntries(\r\n                    aggKeys.map(key => [\r\n                        key,\r\n                        key === 'Total_Qty' ? grp?.groupedData?.reduce(\r\n                            (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                            0\r\n                        ) : Division(\r\n                            grp?.groupedData?.reduce(\r\n                                (acc, colmn) => Addition(acc, toNumber(colmn[key]) || 0),\r\n                                0\r\n                            ),\r\n                            grp.groupedData.length\r\n                        )\r\n                    ])\r\n                )\r\n            }\r\n        });\r\n\r\n        return grouping ? groupAggregations : filtered\r\n    }, [filters, dataArray, filteredData, groupBy, DisplayColumn])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of sortedCoulumns) {\r\n            if (filters[column.Field_Name]) {\r\n                if (filters[column.Field_Name].type === 'range') {\r\n                    const { min, max } = filters[column.Field_Name];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.Field_Name];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.Field_Name].type === 'date') {\r\n                    const { start, end } = filters[column.Field_Name].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.Field_Name]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.Field_Name])) {\r\n                    filtered = filters[column.Field_Name]?.length > 0 ? filtered.filter(item => filters[column.Field_Name].includes(item[column.Field_Name]?.toLowerCase().trim())) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { Field_Name, Fied_Data } = column;\r\n        if (Fied_Data === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'range', ...filters[Field_Name], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[Field_Name]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(Field_Name, { type: 'date', value: { ...filters[Field_Name]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Fied_Data === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[Field_Name]?.toLowerCase()?.trim()))];\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${Field_Name}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[Field_Name] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(Field_Name, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Field_Name}\r\n                            placeholder={`Select ${Field_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        setFilterDialog(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <FilterableTable\r\n                title=\"LOL - Sales Reports\"\r\n                headerFontSizePx={12}\r\n                bodyFontSizePx={12}\r\n                ButtonArea={\r\n                    <>\r\n                        <Tooltip title='Column Visiblity'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setDialog(true)}\r\n                            >\r\n                                <Settings />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilterDialog(true)}\r\n                                size=\"small\"\r\n                            // className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <select\r\n                            className=\"cus-inpt p-2 w-auto m-1\"\r\n                            value={groupBy}\r\n                            onChange={e => setGroupBy(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Group By</option>\r\n                            {DisplayColumn.filter(fil => (\r\n                                filterableText(fil.Fied_Data) === \"string\"\r\n                                && fil?.Field_Name !== 'Ledger_Name'\r\n                            )).map((col, colInd) => (\r\n                                <option value={col?.Field_Name} key={colInd}>{col?.Field_Name?.replace(/_/g, ' ')}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                }\r\n                MenuButtons={[\r\n                    {\r\n                        name: 'Show Grouped Sales',\r\n                        icon: showGroupSalesDetails ? <ToggleOn color=\"primary\" /> : <ToggleOff />,\r\n                        onclick: () => setShowGroupSalesDetails(pre => !pre)\r\n                    }\r\n                ]}\r\n                ExcelPrintOption\r\n                columns={\r\n                    groupBy\r\n                        ? DisplayColumn.filter(fil =>\r\n                            showData.length > 0 && Object.keys(showData[0]).includes(fil.Field_Name)\r\n                        ).map(col => ({\r\n                            ...col,\r\n                            ColumnHeader: col.Field_Name === groupBy ? groupBy : col.ColumnHeader\r\n                        }))\r\n                        : DisplayColumn\r\n                }\r\n                dataArray={showData}\r\n                isExpendable={true}\r\n                expandableComp={({ row }) => (\r\n                    <GroupedExpandDetails\r\n                        row={row}\r\n                        DB={DB}\r\n                        Fromdate={Fromdate}\r\n                        Todate={Todate}\r\n                        groupBy={groupBy}\r\n                        DisplayColumn={DisplayColumn}\r\n                        showGroupSalesDetails={showGroupSalesDetails}\r\n                    />\r\n                )}\r\n                maxHeightOption\r\n            />\r\n\r\n            <Dialog\r\n                open={filterDialog}\r\n                onClose={closeDialog}\r\n                maxWidth='sm' fullWidth\r\n            >\r\n                <DialogContent>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        <span>Filters</span>\r\n                        <span>\r\n                            <Tooltip title='Column Visiblity'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <Settings />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Clear Filters'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => setFilters({})}\r\n                                >\r\n                                    <FilterAltOff />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </span>\r\n                    </h5>\r\n                    <div className=\"border rounded-3 \" >\r\n                        {DisplayColumn.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Field_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                maxWidth='lg' fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columns.map((o, i) => (\r\n                            <div className=\"col-lg-4 col-md-6 p-2\" key={i}>\r\n                                <Card\r\n                                    component={Paper}\r\n                                    className={`p-2 d-flex justify-content-between align-items-center flex-wrap ${i % 2 !== 0 ? 'bg-light' : ''}`}\r\n                                >\r\n                                    <div className='d-flex justify-content-between align-items-center flex-wrap'>\r\n                                        <Switch\r\n                                            checked={Boolean(o?.isDefault) || Boolean(o?.isVisible)}\r\n                                            disabled={Boolean(o?.isDefault)}\r\n                                            onChange={e =>\r\n                                                setColumns(prevColumns =>\r\n                                                    prevColumns.map(oo =>\r\n                                                        oo.Field_Name === o?.Field_Name\r\n                                                            ? { ...oo, isVisible: e.target.checked ? 1 : 0 }\r\n                                                            : oo\r\n                                                    )\r\n                                                )}\r\n                                        />\r\n\r\n                                        <h6 className='fa-13 mb-0 fw-bold '>{o?.Field_Name}</h6>\r\n                                    </div>\r\n                                    <input\r\n                                        type='number'\r\n                                        value={checkIsNumber(o?.OrderBy) ? o?.OrderBy : ''}\r\n                                        onChange={e =>\r\n                                            setColumns(prevColumns =>\r\n                                                prevColumns.map(oo =>\r\n                                                    oo.Field_Name === o?.Field_Name\r\n                                                        ? { ...oo, OrderBy: e.target.value }\r\n                                                        : oo\r\n                                                )\r\n                                            )\r\n                                        }\r\n                                        label={'Order Value'}\r\n                                        className='mt-2 p-1 border-0 cus-inpt'\r\n                                        style={{ width: '80px' }}\r\n                                        placeholder='Order'\r\n                                    />\r\n                                </Card>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setColumns(propsColumns)} variant=\"outlined\">Reset</Button>\r\n                    <Button onClick={() => setDialog(false)} color='error'>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default LedgerBasedSalesReport;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const ledgerAndTransactionExport = (excludeDetails, transactions) => {\r\n//     const wb = XLSX.utils.book_new();\r\n\r\n//     const excludeDetailsSheet = XLSX.utils.json_to_sheet(excludeDetails);\r\n//     XLSX.utils.book_append_sheet(wb, excludeDetailsSheet, 'Sheet1');\r\n\r\n//     const transactionsSheet = XLSX.utils.json_to_sheet(transactions);\r\n//     XLSX.utils.book_append_sheet(wb, transactionsSheet, 'Sheet2');\r\n\r\n//     XLSX.writeFile(wb, 'exported_data.xlsx');\r\n// };\r\n\r\n\r\n// {\r\n//     Field_Name: \"Excel_Export\",\r\n//     Fied_Data: \"string\",\r\n//     isVisible: 1,\r\n//     OrderBy: 1,\r\n//     isCustomCell: true,\r\n//     Cell: ({ row }) => {\r\n//         const excludeDetails = Object.fromEntries(\r\n//             Object.entries(row).filter(([key]) => key !== 'LedgerSales' && DisplayColumn.find(colKey => colKey === key))\r\n//         );\r\n//         return (\r\n//             <>\r\n//                 <IconButton\r\n//                     size=\"small\"\r\n//                     onClick={() => {\r\n//                         ledgerAndTransactionExport([excludeDetails], row.LedgerSales);\r\n//                     }}\r\n//                 >\r\n//                     <Download />\r\n//                 </IconButton>\r\n//             </>\r\n//         )\r\n//     }\r\n// },\r\n\r\n\r\n\r\n\r\n\r\n// const columnsInitialValue = [\r\n//     { Field_Name: \"Ledger_Name\", Fied_Data: \"string\", isVisible: 1, isDefault: 1, OrderBy: 4 },\r\n//     { Field_Name: \"Total_Qty\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 5 },\r\n//     { Field_Name: \"ALL_Avg_M2\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 3, ColumnHeader: 'M2' },\r\n//     { Field_Name: \"ALL_Avg_M3\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 6, ColumnHeader: 'M3' },\r\n//     { Field_Name: \"ALL_Avg_M6\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 2, ColumnHeader: 'M6' },\r\n//     { Field_Name: \"ALL_Avg_M9\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: 7, ColumnHeader: 'M9' },\r\n//     { Field_Name: \"ALL_Avg_One_Year\", Fied_Data: \"number\", isVisible: 1, isDefault: 0, OrderBy: 1, ColumnHeader: 'Y1' },\r\n//     { Field_Name: \"Q_Pay_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Freq_Days\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Alias\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Actual_Party_Name_with_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Name\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Location\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Nature\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Brokers\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ref_Owners\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_1\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_Mobile_2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Party_District\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"File_No\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Payment_Mode\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A2\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A3\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"A4\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M2_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M3_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M6_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"M9_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Y_Avg_Amo\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Q_Pay_Group\", Fied_Data: \"string\", isVisible: 0, isDefault: 0, OrderBy: null },\r\n//     { Field_Name: \"Ledger_Tally_Id\", Fied_Data: \"number\", isVisible: 0, isDefault: 0, OrderBy: null }\r\n// ].sort((a, b) => a.OrderBy - b.OrderBy);","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { DaysBetween, firstDayOfMonth, getPreviousDate, ISOString } from \"../../Components/functions\";\r\n// import LedgerBasedSalesReport from './SalesReportComponent/LedgerBasedTable';\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport ProductBasedSalesReport from \"./SalesReportComponent/ProductBasedTable\";\r\nimport ProductDayBasedSalesReport from \"./SalesReportComponent/ProductDayBasedTable\";\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport LedgerBasedSalesReport from \"./SalesReportComponent/LedgerBasedTable\";\r\n\r\nconst SalesReport = ({ loadingOn, loadingOff }) => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState({\r\n        salesInfo: [],\r\n        salesItemInfo: [],\r\n    })\r\n    const [salesDataOFProduct, setSalesDataOfProduct] = useState(null);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        ReportType: 'LedgerBased',\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `reports/salesReport/ledger?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({ ...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n            .catch(console.error);\r\n\r\n        fetchLink({\r\n            address: `reports/salesReport/products?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(data => {\r\n            if (data.success) {\r\n                const { dataTypeInfo } = data?.others;\r\n\r\n                const combinedData = Array.isArray(data?.others?.LOSAbstract) ? data.others.LOSAbstract.map(los => ({\r\n                    ...los,\r\n                    StockTransaction: Array.isArray(data.data) ? [...data.data].filter(losDetails => losDetails.Stock_Group === los.Stock_Group) : []\r\n                })) : [];\r\n\r\n                setDataTypes(pre => ({ ...pre, salesItemInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : [] }))\r\n                setSalesDataOfProduct(combinedData);\r\n            } else {\r\n                setSalesDataOfProduct([])\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setSalesDataOfProduct(null);\r\n        setDataTypes({\r\n            salesInfo: [],\r\n            salesItemInfo: [],\r\n        })\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    const closeDialog = () => {\r\n        setFilters(pre => ({ ...pre, filterDialog: false }))\r\n    }\r\n\r\n    const daysDifferent = DaysBetween(new Date(filters.Fromdate), new Date(filters.Todate));\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        {storage?.Company_Name}\r\n                    </span>\r\n                    <span>\r\n                        <select\r\n                            value={filters.ReportType}\r\n                            className=\"cus-inpt ps-3 w-100 rounded-5 border-0\"\r\n                            onChange={e => setFilters(pre => ({ ...pre, ReportType: e.target.value }))}\r\n                        >\r\n                            <option value={'LedgerBased'}>Ledger Based</option>\r\n                            <option value={'ProductBased'}>Product Based</option>\r\n                            {/* <option value={'ProductDayAverage'}>Product/Day Based</option> */}\r\n                        </select>\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <form onSubmit={e => { \r\n                            e.preventDefault();\r\n                            setFilters(pre => ({ ...pre, reload: !pre.reload }))\r\n                        }}>\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                                // min={firstDayOfMonth()}\r\n                                value={filters.Fromdate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            />\r\n\r\n                            <input\r\n                                type={'date'}\r\n                                className='cus-inpt w-auto ps-3 border rounded-5'\r\n                                value={filters.Todate}\r\n                                onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            />\r\n\r\n                            <Tooltip title='Reload Data'>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    className=\"ms-2\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <Refresh />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </form>\r\n\r\n                        {/* <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip> */}\r\n                    </div>\r\n\r\n                    {salesData === null && filters.ReportType === \"LedgerBased\" && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Ledger Based data...</h6>\r\n                    )}\r\n\r\n                    {(salesDataOFProduct === null && (filters.ReportType === \"ProductBased\" || filters.ReportType === 'ProductDayAverage')) && (\r\n                        <h6 className=\"blue-text text-center\">Fetching Product Based data...</h6>\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"LedgerBased\" && Array.isArray(salesData)) && (\r\n                        <LedgerBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesData}\r\n                            colTypes={dataTypes.salesInfo}\r\n                            DB={storage?.Company_id}\r\n                            Fromdate={filters?.Fromdate}\r\n                            Todate={filters?.Todate}\r\n                            loadingOn={loadingOn}\r\n                            loadingOff={loadingOff}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductBased\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductBasedSalesReport\r\n                            filterDialog={filters.filterDialog}\r\n                            closeDialog={closeDialog}\r\n                            dataArray={salesDataOFProduct}\r\n                            fromDate={filters.Fromdate}\r\n                            toDate={filters.Todate}\r\n                        />\r\n                    )}\r\n\r\n                    {(filters.ReportType === \"ProductDayAverage\" && Array.isArray(salesDataOFProduct)) && (\r\n                        <ProductDayBasedSalesReport filterDialog={filters.filterDialog} closeDialog={closeDialog} dataArray={salesDataOFProduct} days={daysDifferent} />\r\n                    )}\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default SalesReport;"],"names":["_ref","dataArray","productColumns","daysCol","setDaysCol","useState","showData","useMemo","map","o","transaction","Array","isArray","StockTransaction","stkObj","DaySum","Object","fromEntries","entries","filter","_ref2","key","includes","isNaN","Number","_ref3","pre","total","reduce","sum","item","_objectSpread","_jsx","Fragment","children","FilterableTable","isExpendable","columns","createCol","day","concat","expandableComp","_ref4","row","preDefinedCol","keys","initialPageCount","tableMaxHeight","days","_Division","_Division2","_Division3","_Division4","_Division5","M2_Avg","Division","ALL_Avg_M2","getDaysInPreviousMonths","M3_Avg","ALL_Avg_M3","M6_Avg","ALL_Avg_M6","M9_Avg","ALL_Avg_M9","M12_Avg","ALL_Avg_One_Year","Billed_Qty","calcTotal","Billed_Avg","st","_Division6","_Division7","_Division8","_Division9","_Division10","Grade_Item_Group","Item_Name_Modified","M2_AVG_Qty","M3_AVG_Qty","M6_AVG_Qty","M9_AVG_Qty","One_Year_AVG_Qty","Field_Name","isVisible","Fied_Data","icon","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","LedgerDetails","Fromdate","Todate","DB","salesData","setSalesData","dataTypes","setDataTypes","loading","setLoading","useEffect","fetchLink","address","Ledger_Tally_Id","headers","then","success","data","others","dataTypeInfo","salesInfo","catch","e","console","error","finally","className","DisplayArrayData","GroupSalesDetails","ledgerIds","toArray","groupedData","it","Boolean","sort","a","b","String","localeCompare","join","cancelled","Db","prev","GroupedExpandDetails","_ref5","groupBy","DisplayColumn","showGroupSalesDetails","log","title","ExcelPrintOption","_ref6","_ref7","colTypes","filters","setFilters","setGroupBy","filteredData","setFilteredData","dialog","setDialog","filterDialog","setFilterDialog","setShowGroupSalesDetails","propsColumns","col","colInd","Column_Name","Data_Type","OrderBy","setColumns","sortedCoulumns","isEqualNumber","Defult_Display","length","grouping","filtered","groupFiltered","groupData","aggKeys","fil","filterableText","groupAggregations","grp","_grp$groupedData","_grp$groupedData2","acc","colmn","Addition","toNumber","applyFilters","handleFilterChange","column","value","prevFilters","type","min","max","undefined","start","end","dateValue","Date","_filters$column$Field","_item$column$Field_Na","toLowerCase","trim","renderFilter","_filters$Field_Name$m","_filters$Field_Name","_filters$Field_Name$m2","_filters$Field_Name2","_filters$Field_Name$v","_filters$Field_Name3","_filters$Field_Name3$","_filters$Field_Name$v2","_filters$Field_Name5","_filters$Field_Name5$","_jsxs","placeholder","onChange","target","parseFloat","_filters$Field_Name4","_filters$Field_Name6","distinctValues","Set","_item$Field_Name","_item$Field_Name$toLo","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref8","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","val","renderInput","params","TextField","label","replace","closeDialog","headerFontSizePx","bodyFontSizePx","ButtonArea","_Fragment","Tooltip","IconButton","size","onClick","Settings","FilterAltOff","FilterAlt","_col$Field_Name","MenuButtons","name","ToggleOn","color","ToggleOff","onclick","ColumnHeader","_ref9","maxHeightOption","Dialog","open","onClose","maxWidth","fullWidth","DialogContent","ke","_column$Field_Name","DialogActions","Button","DialogTitle","i","Card","component","Paper","Switch","isDefault","disabled","prevColumns","oo","checkIsNumber","width","variant","loadingOn","loadingOff","storage","JSON","parse","localStorage","getItem","salesItemInfo","salesDataOFProduct","setSalesDataOfProduct","getPreviousDate","ISOString","ReportType","reload","Company_id","_data$others","combinedData","LOSAbstract","los","losDetails","Stock_Group","daysDifferent","DaysBetween","backgroundColor","Company_Name","CardContent","onSubmit","preventDefault","Refresh","LedgerBasedSalesReport","ProductBasedSalesReport","fromDate","toDate","ProductDayBasedSalesReport"],"sourceRoot":""}