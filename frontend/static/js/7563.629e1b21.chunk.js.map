{"version":3,"file":"static/js/7563.629e1b21.chunk.js","mappings":"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","sources":["Pages/Masters/loslist.jsx"],"sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n    Table, TableBody, TableCell, tableCellClasses, TableContainer, TableHead, TableRow,\r\n    Paper, TablePagination, Select, MenuItem, FormControl, InputLabel, Box, Typography, IconButton, Tooltip,\r\n    Switch, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, Card, CircularProgress, InputAdornment, Chip\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport {\r\n    Settings as SettingsIcon,\r\n    Search as SearchIcon,\r\n    Clear as ClearIcon,\r\n    ArrowUpward as AscIcon,\r\n    ArrowDownward as DescIcon,\r\n    FilterList as FilterIcon,\r\n    Cancel as CancelIcon,\r\n    Save as SaveIcon,\r\n    Edit as EditIcon,\r\n    Download as DownloadIcon,\r\n    Upload as FileUploadIcon\r\n} from \"@mui/icons-material\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport { getSessionUser } from \"../../Components/functions\";\r\nimport api from '../../API';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: \"#EDF0F7\",\r\n        color: \"#000000\",\r\n        fontWeight: \"bold\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        padding: \"12px 16px\",\r\n        borderRight: \"1px solid #e0e0e0\",\r\n        \"&:last-child\": {\r\n            borderRight: \"none\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ highlight }) => ({\r\n    backgroundColor: highlight ? \"#84EAB3\" : \"#fff\",\r\n    ...(highlight && {\r\n        borderLeft: \"4px solid #1976d2\",\r\n    }),\r\n    \"&:hover\": {\r\n        backgroundColor: highlight ? \"#84EAB5\" : \"#f5f5f5\",\r\n    },\r\n}));\r\n\r\n\r\nconst PaginationContainer = styled(\"div\")({\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    gap: \"16px\",\r\n    padding: \"16px\",\r\n    backgroundColor: \"#f5f5f5\",\r\n    borderTop: \"1px solid #e0e0e0\",\r\n});\r\n\r\nconst PROTECTED_COLUMNS = [\r\n    // 'Auto_Id',\r\n    //  'Stock_Tally_Id',\r\n    'Stock_Item',\r\n    // 'Grade_Item_Group',\r\n    //  'Item_Name_Modified'\r\n];\r\n\r\nfunction Loslist() {\r\n    const [lolData, setLolData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [columnSettings, setColumnSettings] = useState([]);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [originalColumnSettings, setOriginalColumnSettings] = useState([]);\r\n    const [columnDropDown, setColumnDropDown] = useState([]);\r\n    const [allData, setAllData] = useState([]);\r\n    const [isApplying, setIsApplying] = useState(false);\r\n    const [searchValues, setSearchValues] = useState({});\r\n    const [appliedFilters, setAppliedFilters] = useState({});\r\n    const [globalSearch, setGlobalSearch] = useState(\"\");\r\n    const [sortConfig, setSortConfig] = useState({ key: null, direction: \"asc\" });\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    // const [currentRowData, setCurrentRowData] = useState(null);\r\n    const [editedData, setEditedData] = useState({});\r\n    const [open, setOpen] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [data, setData] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const user = getSessionUser().user;\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const fetchColumnData = async () => {\r\n        try {\r\n            const dropData = await fetchLink({\r\n                address: `masters/columns/dropDownLos?company_id=${parseData?.companyId}`,\r\n            });\r\n\r\n            if (dropData.success) {\r\n                setColumnDropDown(dropData.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching columns:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchColumnData();\r\n    }, [parseData?.companyId]);\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n\r\n    {\r\n        isLoading && (\r\n            <Box sx={{ mt: 2, textAlign: 'center' }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Processing your file, please wait...\r\n                </Typography>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleCheckboxChange = (row) => {\r\n        setSelectedRows(prevSelected => {\r\n            const isSelected = prevSelected.some(selectedRow => selectedRow.Stock_Tally_Id === row.Stock_Tally_Id);\r\n            return isSelected\r\n                ? prevSelected.filter(selectedRow => selectedRow.Stock_Tally_Id !== row.Stock_Tally_Id)\r\n                : [...prevSelected, row];\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const columnRes = await fetchLink({\r\n                    address: `masters/displayLosColumn?company_id=${parseData?.companyId}`,\r\n                });\r\n\r\n                if (!columnRes.success || !Array.isArray(columnRes.data)) {\r\n                    console.error(\"No display columns found\");\r\n                    return;\r\n                }\r\n\r\n                const sortedColumns = [...columnRes.data].sort(\r\n                    (a, b) => a.Position - b.Position\r\n                );\r\n                setColumnSettings(sortedColumns);\r\n                setOriginalColumnSettings([...sortedColumns]);\r\n\r\n\r\n\r\n                const visibleColumns = sortedColumns\r\n                    .filter((col) => col.status === 1 &&\r\n                        !['Auto_Id', 'Stock_Tally_Id'].includes(col.ColumnName))\r\n                    .sort((a, b) => a.Position - b.Position)\r\n                    .map((col) => ({\r\n                        header: col.Alias_Name || col.ColumnName,\r\n                        accessor: col.ColumnName,\r\n                        position: col.Position,\r\n                    }));\r\n\r\n                setColumns(visibleColumns);\r\n\r\n                const dataRes = await fetchLink({ address: `masters/getlosDetails` });\r\n\r\n                if (dataRes.success && Array.isArray(dataRes.data)) {\r\n                    setAllData(dataRes.data);\r\n\r\n                    const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                    const filteredData = dataRes.data.map((row) => {\r\n                        const filteredRow = {};\r\n                        allowedKeys.forEach((key) => {\r\n                            filteredRow[key] = row[key] || \"\";\r\n                        });\r\n                        return filteredRow;\r\n                    });\r\n\r\n                    setLolData(filteredData);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading data:\", error);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [data, isApplying]);\r\n\r\n    const handlePositionChange = (columnId, newPosition) => {\r\n        const positionValue = parseInt(newPosition);\r\n\r\n        if (!isNaN(positionValue)) {\r\n            setColumnDropDown(prev =>\r\n                prev.map(col =>\r\n                    col.Id === columnId ? { ...col, Position: positionValue } : col\r\n                )\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleAliasChange = (columnId, newAlias) => {\r\n        setColumnDropDown((prev) =>\r\n            prev.map((col) =>\r\n                col.Id === columnId ? { ...col, Alias_Name: newAlias } : col\r\n            )\r\n        );\r\n    };\r\n\r\n    const getColumnStatus = (columnId) => {\r\n        const column = columnSettings.find((col) => col.Id === columnId);\r\n        return column ? column.status === 1 : false;\r\n    };\r\n\r\n    const handleColumnToggle = (columnId, isChecked) => {\r\n        const column = columnDropDown.find((col) => col.Id === columnId);\r\n\r\n        if (column?.Position <= 5) {\r\n            toast.error(\"First 5 columns cannot be disabled\");\r\n            return;\r\n        }\r\n\r\n        let updatedSettings;\r\n\r\n        if (columnSettings.some((col) => col.Id === columnId)) {\r\n            updatedSettings = columnSettings.map((col) =>\r\n                col.Id === columnId ? { ...col, status: isChecked ? 1 : 0 } : col\r\n            );\r\n        } else {\r\n            const newColumn = columnDropDown.find((col) => col.Id === columnId);\r\n            if (newColumn) {\r\n                updatedSettings = [\r\n                    ...columnSettings,\r\n                    {\r\n                        ...newColumn,\r\n                        status: isChecked ? 1 : 0,\r\n                    },\r\n                ];\r\n            } else {\r\n                updatedSettings = [...columnSettings];\r\n            }\r\n        }\r\n\r\n        updatedSettings.sort((a, b) => a.Position - b.Position);\r\n        setColumnSettings(updatedSettings);\r\n    };\r\n\r\n    const handleEditClick = (rowData) => {\r\n        // setCurrentRowData(rowData);\r\n        setEditedData({ ...rowData });\r\n        setEditDialogOpen(true);\r\n    };\r\n\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateLosDetails\",\r\n                method: \"PUT\",\r\n                bodyData: editedData,\r\n                headers: {\r\n                    Db: user?.Company_id,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(updateResponse.message || \"Failed to update row\");\r\n            }\r\n\r\n            setAllData(prevData =>\r\n                prevData.map(row =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setLolData(prevData =>\r\n                prevData.map(row =>\r\n                    row.Auto_Id === editedData.Auto_Id ? editedData : row\r\n                )\r\n            );\r\n\r\n            setEditDialogOpen(false);\r\n            // setIsUpdated(true)\r\n\r\n\r\n            toast.success(\"Row updated successfully\");\r\n        } catch (error) {\r\n\r\n            toast.error(\"Failed to update row\");\r\n        }\r\n    }\r\n\r\n    const applyColumnChanges = async () => {\r\n        setIsApplying(true);\r\n        try {\r\n\r\n            const updatedSettings = columnSettings.map((col) => {\r\n                const dropdownCol = columnDropDown.find((dc) => dc.Id === col.Id);\r\n                return dropdownCol ? {\r\n                    ...col,\r\n                    Position: dropdownCol.Position,\r\n                    Alias_Name: dropdownCol.Alias_Name,\r\n                } : col;\r\n            });\r\n\r\n\r\n            const positionMap = {};\r\n            const duplicatePositions = new Set();\r\n\r\n            updatedSettings.forEach((col) => {\r\n                if (positionMap[col.Position]) {\r\n                    duplicatePositions.add(col.Position);\r\n                }\r\n                positionMap[col.Position] = true;\r\n            });\r\n\r\n            if (duplicatePositions.size > 0) {\r\n                const positionsList = Array.from(duplicatePositions).join(', ');\r\n                toast.error(`Duplicate positions found: ${positionsList}`);\r\n                return;\r\n            }\r\n\r\n            setColumnSettings(updatedSettings);\r\n            setOriginalColumnSettings(updatedSettings);\r\n\r\n            const updateResponse = await fetchLink({\r\n                address: \"masters/updateLosColumnChanges\",\r\n                method: \"PUT\",\r\n                bodyData: {\r\n                    columns: updatedSettings.map((col) => ({\r\n                        id: col.Id,\r\n                        status: col.status,\r\n                        position: col.Position,\r\n                        alias_name: col.Alias_Name,\r\n                        column_name: col.ColumnName,\r\n                    })),\r\n                    company_id: parseData?.companyId,\r\n                },\r\n            });\r\n\r\n            if (!updateResponse.success) {\r\n                throw new Error(updateResponse.message || \"Failed to update column statuses\");\r\n            }\r\n\r\n            const visibleColumns = updatedSettings\r\n                .filter((col) => col.status === 1)\r\n                .sort((a, b) => a.Position - b.Position)\r\n                .map((col) => ({\r\n                    header: col.Alias_Name || col.ColumnName,\r\n                    accessor: col.ColumnName,\r\n                    position: col.Position,\r\n                }));\r\n\r\n            setColumns(visibleColumns);\r\n\r\n            if (allData.length > 0) {\r\n                const allowedKeys = visibleColumns.map((col) => col.accessor);\r\n                const filteredData = allData.map((row) => {\r\n                    const filteredRow = {};\r\n                    allowedKeys.forEach((key) => {\r\n                        filteredRow[key] = row[key] || \"\";\r\n                    });\r\n                    return filteredRow;\r\n                });\r\n                setLolData(filteredData);\r\n            }\r\n\r\n            setDialogOpen(false);\r\n            toast.success(\"Changes Saved\");\r\n        } catch (error) {\r\n            console.error(\"Error updating column statuses:\", error);\r\n            toast.error(error.message || \"Failed to update columns. Please try again.\");\r\n        } finally {\r\n            setIsApplying(false);\r\n        }\r\n    };\r\n\r\n    const resetToDefaults = () => {\r\n        setColumnSettings([...originalColumnSettings]);\r\n        setColumnDropDown([...originalColumnSettings]);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const getPageSizeOptions = () => {\r\n        const baseOptions = [5, 10, 15, 30, 60, 120, 240];\r\n        const maxOption = Math.max(...baseOptions);\r\n\r\n        if (lolData.length > maxOption) {\r\n            return [...baseOptions];\r\n        }\r\n        return baseOptions;\r\n    };\r\n\r\n    const handleSearchChange = (columnName, value) => {\r\n        setSearchValues((prev) => ({\r\n            ...prev,\r\n            [columnName]: value,\r\n        }));\r\n    };\r\n\r\n    const applySearch = () => {\r\n        setAppliedFilters({ ...searchValues });\r\n        setPage(0);\r\n    };\r\n\r\n    const clearSearch = () => {\r\n        setSearchValues({});\r\n        setAppliedFilters({});\r\n        setGlobalSearch(\"\");\r\n        setPage(0);\r\n    };\r\n\r\n    const requestSort = (key) => {\r\n        let direction = \"asc\";\r\n        if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n            direction = \"desc\";\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    const filteredData = useMemo(() => {\r\n        let filterableData = [...allData];\r\n\r\n        if (globalSearch) {\r\n            const searchTerms = globalSearch\r\n                .split(\",\")\r\n                .map((term) => term.trim().toLowerCase())\r\n                .filter(Boolean);\r\n\r\n            filterableData = filterableData.filter((row) =>\r\n                searchTerms.some((term) =>\r\n                    Object.values(row).some((val) =>\r\n                        String(val).toLowerCase().includes(term)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        filterableData = filterableData.filter((row) =>\r\n            Object.keys(appliedFilters).every((key) => {\r\n                if (!appliedFilters[key]) return true;\r\n                return String(row[key])\r\n                    .toLowerCase()\r\n                    .includes(String(appliedFilters[key]).toLowerCase());\r\n            })\r\n        );\r\n\r\n        if (sortConfig.key) {\r\n            filterableData.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === \"asc\" ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return filterableData;\r\n    }, [allData, globalSearch, appliedFilters, sortConfig]);\r\n\r\n    const renderTableHeader = () => (\r\n        <TableHead>\r\n            <TableRow>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    S.No\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    CheckBox\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\" sx={{ width: \"80px\" }}>\r\n                    Actions\r\n                </StyledTableCell>\r\n                {columns.map((col) => (\r\n                    <StyledTableCell key={col.accessor} align=\"center\">\r\n                        <Box\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            {col.header}\r\n                            <Tooltip\r\n                                title={`Sort ${sortConfig.key === col.accessor\r\n                                    ? sortConfig.direction === \"asc\"\r\n                                        ? \"Descending\"\r\n                                        : \"Ascending\"\r\n                                    : \"Ascending\"\r\n                                    }`}\r\n                            >\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => requestSort(col.accessor)}\r\n                                    color={\r\n                                        sortConfig.key === col.accessor ? \"primary\" : \"default\"\r\n                                    }\r\n                                >\r\n                                    {sortConfig.key === col.accessor ? (\r\n                                        sortConfig.direction === \"asc\" ? (\r\n                                            <AscIcon />\r\n                                        ) : (\r\n                                            <DescIcon />\r\n                                        )\r\n                                    ) : (\r\n                                        <FilterIcon />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Filter...\"\r\n                            value={searchValues[col.accessor] || \"\"}\r\n                            onChange={(e) => handleSearchChange(col.accessor, e.target.value)}\r\n                            sx={{ width: \"100%\", mt: 1 }}\r\n                            InputProps={{\r\n                                endAdornment: searchValues[col.accessor] && (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            onClick={() => handleSearchChange(col.accessor, \"\")}\r\n                                        >\r\n                                            <ClearIcon fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </StyledTableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n\r\n    const exportSelectedRowsToExcel = (columns, selectedRows) => {\r\n\r\n        try {\r\n            if (!Array.isArray(columns) || !Array.isArray(selectedRows)) {\r\n                throw new Error(\"Invalid data: columns and selectedRows must be arrays\");\r\n            }\r\n\r\n            const filteredColumns = columns.filter(\r\n                (col) => col.accessor !== \"Auto_Id\" && col.accessor !== \"Stock_Tally_Id\"\r\n            );\r\n\r\n            const headers = filteredColumns.map((col) => {\r\n                if (typeof col.header !== \"string\") {\r\n                    console.warn(\"Missing or invalid header for column:\", col);\r\n                    return \"UNNAMED_COLUMN\";\r\n                }\r\n                return col.header;\r\n            });\r\n\r\n            const rowData = selectedRows.map((row) =>\r\n                filteredColumns.map((col) => row[col.accessor] ?? \"\")\r\n            );\r\n\r\n            const excelData = [headers, ...rowData];\r\n\r\n            const ws = XLSX.utils.aoa_to_sheet(excelData);\r\n            const wb = XLSX.utils.book_new();\r\n            XLSX.utils.book_append_sheet(wb, ws, \"SelectedData\");\r\n\r\n            const timestamp = new Date().toISOString().slice(0, 10);\r\n            XLSX.writeFile(wb, `selected_data_${timestamp}.xlsx`);\r\n        } catch (error) {\r\n            console.error(\"Excel export failed:\", error);\r\n            alert(`Export failed: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!selectedFile) return;\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            await uploadExcelFile(selectedFile);\r\n            handleClose();\r\n\r\n            setData(prev => !prev);\r\n            toast.success(\"File uploaded successfully\");\r\n        } catch (error) {\r\n            toast.error(`Upload failed: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setSelectedFile(null);\r\n        setIsLoading(false)\r\n    };\r\n\r\n    const uploadExcelFile = async (file) => {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            formData.append('company_id', parseData?.Company_id);\r\n            formData.append('Created_By', parseData?.UserId);\r\n            formData.append('isRetailer', '1');\r\n\r\n\r\n            const response = await fetch(`${api}masters/uploadLosExcel`, {\r\n                method: 'POST',\r\n                body: formData,\r\n                headers: {\r\n                    Db: user?.Company_id,\r\n                },\r\n            })\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json().catch(() => ({}));\r\n                throw new Error(errorData.message || 'Upload failed');\r\n            }\r\n\r\n            const result = await response.json();\r\n            setIsLoading(false);\r\n            return result;\r\n\r\n        } catch (error) {\r\n            setIsLoading(false)\r\n            console.error('Upload Error:', {\r\n                message: error.message,\r\n                stack: error.stack,\r\n                time: new Date().toISOString()\r\n            });\r\n            throw new Error(`Upload failed: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file.size > 5 * 1024 * 1024) {\r\n            alert(\"File size exceeds 5MB\");\r\n            return;\r\n        }\r\n        setSelectedFile(file);\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 3,\r\n                backgroundColor: \"white\",\r\n                borderRadius: \"8px\",\r\n                boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    mb: 3,\r\n                }}\r\n            >\r\n                <Typography variant=\"h5\">LOS LIST</Typography>\r\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    {selectedRows.length > 0 && (\r\n                        <Chip\r\n                            label={`SELECTED ROWS : ${selectedRows.length} `}\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            sx={{ mr: 2 }}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        placeholder=\"Search...\"\r\n                        value={globalSearch}\r\n                        onChange={(e) => setGlobalSearch(e.target.value)}\r\n                        sx={{\r\n                            width: 250,\r\n                            mr: 2,\r\n                            \"& .MuiInputBase-root\": {\r\n                                height: 32,\r\n                            },\r\n                        }}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                            endAdornment: globalSearch && (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton size=\"small\" onClick={() => setGlobalSearch(\"\")}>\r\n                                        <ClearIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Tooltip title=\"Column Settings\">\r\n                        <IconButton onClick={() => setDialogOpen(true)}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        startIcon={<SearchIcon />}\r\n                        onClick={applySearch}\r\n                        disabled={Object.keys(searchValues).length === 0}\r\n                        sx={{ ml: 2 }}\r\n                    >\r\n                        Apply Filters\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<ClearIcon />}\r\n                        onClick={clearSearch}\r\n                        disabled={Object.keys(appliedFilters).length === 0 && !globalSearch}\r\n                        sx={{ ml: 1 }}\r\n                    >\r\n                        Clear All\r\n                    </Button>\r\n                    <MenuItem onClick={() => exportSelectedRowsToExcel(columns, selectedRows)}>\r\n                        <DownloadIcon fontSize=\"small\" sx={{ mr: 1 }} /> Download{\" \"}\r\n                    </MenuItem>\r\n                    <MenuItem onClick={handleClickOpen}>\r\n                        <FileUploadIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                        Upload\r\n                    </MenuItem>\r\n\r\n                </Box>\r\n            </Box>\r\n\r\n            <Dialog\r\n                open={dialogOpen}\r\n                onClose={() => setDialogOpen(false)}\r\n                maxWidth=\"lg\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Column Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\">\r\n                        {columnDropDown\r\n                            .sort((a, b) => a.Position - b.Position)\r\n                            .map((column) => (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\" key={column.Id}>\r\n                                    <Card className=\"p-2\">\r\n                                        <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                                            <Switch\r\n                                                checked={getColumnStatus(column.Id)}\r\n                                                onChange={(e) =>\r\n                                                    handleColumnToggle(column.Id, e.target.checked)\r\n                                                }\r\n                                                disabled={column.Position <= 5}\r\n                                                color={column.Position <= 5 ? \"default\" : \"primary\"}\r\n                                            />\r\n                                            <div>{column?.ColumnName}</div>\r\n\r\n                                            <div className=\"d-flex align-items-center gap-2\">\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Position ?? 0}\r\n                                                    onChange={(e) =>\r\n                                                        handlePositionChange(column.Id, e.target.value)\r\n                                                    }\r\n                                                    sx={{ width: \"70px\" }}\r\n                                                    inputProps={{\r\n                                                        min: 1,\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(\r\n                                                            column.ColumnName\r\n                                                        ),\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(\r\n                                                        column.ColumnName\r\n                                                    )}\r\n                                                />\r\n\r\n                                                <TextField\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={column.Alias_Name ?? \"\"}\r\n                                                    onChange={(e) =>\r\n                                                        !PROTECTED_COLUMNS.includes(column.ColumnName) &&\r\n                                                        handleAliasChange(column.Id, e.target.value)\r\n                                                    }\r\n                                                    sx={{\r\n                                                        '& .MuiInputBase-input': {\r\n                                                            cursor: PROTECTED_COLUMNS.includes(column.ColumnName) ? 'default' : 'text',\r\n                                                            backgroundColor: PROTECTED_COLUMNS.includes(column.ColumnName) ? '#f5f5f5' : 'inherit'\r\n                                                        }\r\n                                                    }}\r\n                                                    inputProps={{\r\n                                                        readOnly: PROTECTED_COLUMNS.includes(column.ColumnName)\r\n                                                    }}\r\n                                                    disabled={PROTECTED_COLUMNS.includes(column.ColumnName)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={resetToDefaults} variant=\"outlined\">\r\n                        Reset\r\n                    </Button>\r\n                    <Button onClick={() => setDialogOpen(false)} color=\"error\">\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        onClick={applyColumnChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={isApplying}\r\n                    >\r\n                        {isApplying ? \"Applying...\" : \"Apply\"}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={open} fullWidth >\r\n                <DialogTitle>Upload Excel File</DialogTitle>\r\n                <DialogContent>\r\n                    <Box\r\n                        sx={{ display: \"flex\", alignItems: \"center\", gap: 2, mt: 2 }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            component=\"label\"\r\n                        //   startIcon={<CloudUploadIcon />}\r\n                        >\r\n                            Browse\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\".xls,.xlsx\"\r\n                                hidden\r\n                                onChange={handleFileChange}\r\n                            />\r\n                        </Button>\r\n                        <Typography>\r\n                            {selectedFile ? selectedFile.name : \"No file selected\"}\r\n                        </Typography>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button\r\n                        onClick={handleUpload}\r\n                        variant=\"contained\"\r\n                        disabled={!selectedFile || isLoading}\r\n                        startIcon={isLoading ? <CircularProgress size={20} color=\"inherit\" /> : null}  >\r\n                        {isLoading ? 'Uploading...' : 'Upload'}\r\n\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editDialogOpen}\r\n                onClose={() => setEditDialogOpen(false)}\r\n                maxWidth=\"md\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Edit Row</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"container-fluid\" style={{ maxHeight: '80vh', overflow: 'auto' }}>\r\n                        <div className=\"row g-3\">\r\n                            {columns.map((col) => (\r\n                                <div key={col.accessor} className=\"col-12 col-sm-6 col-md-4\">\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"form-label\">{col.header}</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            value={editedData[col.accessor] || \"\"}\r\n                                            onChange={(e) => setEditedData({\r\n                                                ...editedData,\r\n                                                [col.accessor]: e.target.value\r\n                                            })}\r\n                                            disabled={\r\n                                                col.accessor === \"Auto_Id\" ||\r\n                                                col.accessor === \"Stock_Tally_Id\" ||\r\n                                                col.accessor === \"Stock_Item\"\r\n                                            }\r\n                                            style={{\r\n                                                padding: '1rem 1rem',\r\n                                                fontSize: '1rem'\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setEditDialogOpen(false)}\r\n                        variant=\"outlined\"\r\n                        startIcon={<CancelIcon />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleSaveChanges}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<SaveIcon />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {columns.length > 0 && allData.length > 0 ? (\r\n                <Paper elevation={0} sx={{ border: \"1px solid #e0e0e0\" }}>\r\n                    <TableContainer>\r\n                        <Table\r\n                            stickyHeader\r\n                            aria-label=\"ledger table\"\r\n                            sx={{ minWidth: 650 }}\r\n                        >\r\n                            {renderTableHeader()}\r\n                            <TableBody>\r\n                                {filteredData\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, idx) => (\r\n                                        <StyledTableRow\r\n                                            key={idx}\r\n                                            highlight={row.Is_Tally_Updated === 1 || row.Is_Tally_Updated === \"1\"}\r\n                                        >\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {page * rowsPerPage + idx + 1}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell>\r\n\r\n                                                <IconButton>\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        checked={selectedRows.some(selectedRow => selectedRow.Stock_Tally_Id === row.Stock_Tally_Id)}\r\n                                                        onChange={() => handleCheckboxChange(row)}\r\n\r\n                                                        onFocus={(e) => e.target.blur()}\r\n                                                        style={{\r\n                                                            transform: \"scale(1.5)\",\r\n                                                            width: \"14px\",\r\n                                                            height: \"20px\"\r\n                                                        }}\r\n                                                    />\r\n                                                </IconButton>\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                <Tooltip title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        onClick={() => handleEditClick(row)}\r\n                                                        color=\"primary\"\r\n                                                        size=\"small\"\r\n                                                        sx={{\r\n                                                            \"&:hover\": {\r\n                                                                backgroundColor: \"rgba(25, 118, 210, 0.08)\",\r\n                                                                transform: \"scale(1.1)\",\r\n                                                            },\r\n                                                            transition: \"transform 0.2s\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </StyledTableCell>\r\n                                            {columns.map((col) => (\r\n                                                <StyledTableCell\r\n                                                    key={`${idx}-${col.accessor}`}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {row[col.accessor]}\r\n                                                </StyledTableCell>\r\n                                            ))}\r\n                                        </StyledTableRow>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <PaginationContainer>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={filteredData.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            rowsPerPageOptions={[]}\r\n                            sx={{\r\n                                \"& .MuiTablePagination-toolbar\": {\r\n                                    padding: 0,\r\n                                    minHeight: \"auto\",\r\n                                },\r\n                                \"& .MuiTablePagination-spacer\": {\r\n                                    display: \"none\",\r\n                                },\r\n                                \"& .MuiTablePagination-actions\": {\r\n                                    marginLeft: \"16px\",\r\n                                },\r\n                            }}\r\n                        />\r\n                        <FormControl variant=\"outlined\" size=\"small\" sx={{ minWidth: 120 }}>\r\n                            <InputLabel>Rows per page</InputLabel>\r\n                            <Select\r\n                                value={rowsPerPage}\r\n                                onChange={handleChangeRowsPerPage}\r\n                                label=\"Rows per page\"\r\n                            >\r\n                                {getPageSizeOptions().map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </PaginationContainer>\r\n                </Paper>\r\n            ) : (\r\n                <Typography>Loading...</Typography>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Loslist;"],"names":["StyledTableCell","styled","TableCell","_ref","theme","concat","tableCellClasses","head","backgroundColor","color","fontWeight","borderRight","body","fontSize","padding","StyledTableRow","TableRow","_ref2","highlight","_objectSpread","borderLeft","PaginationContainer","display","justifyContent","alignItems","gap","borderTop","PROTECTED_COLUMNS","lolData","setLolData","useState","columns","setColumns","page","setPage","rowsPerPage","setRowsPerPage","columnSettings","setColumnSettings","dialogOpen","setDialogOpen","originalColumnSettings","setOriginalColumnSettings","columnDropDown","setColumnDropDown","allData","setAllData","isApplying","setIsApplying","searchValues","setSearchValues","appliedFilters","setAppliedFilters","globalSearch","setGlobalSearch","sortConfig","setSortConfig","key","direction","selectedRows","setSelectedRows","editDialogOpen","setEditDialogOpen","editedData","setEditedData","open","setOpen","isLoading","setIsLoading","data","setData","selectedFile","setSelectedFile","user","getSessionUser","parseData","JSON","parse","localStorage","getItem","useEffect","async","dropData","fetchLink","address","companyId","success","error","console","fetchColumnData","Box","Typography","columnRes","Array","isArray","sortedColumns","sort","a","b","Position","visibleColumns","filter","col","status","includes","ColumnName","map","header","Alias_Name","accessor","position","dataRes","allowedKeys","filteredData","row","filteredRow","forEach","fetchData","getColumnStatus","columnId","column","find","Id","handleSearchChange","columnName","value","prev","useMemo","filterableData","searchTerms","split","term","trim","toLowerCase","Boolean","some","Object","values","val","String","keys","every","handleClose","uploadExcelFile","formData","FormData","append","file","Company_id","UserId","response","fetch","api","method","headers","Db","ok","errorData","json","catch","Error","message","result","stack","time","Date","toISOString","_jsxs","sx","p","borderRadius","boxShadow","children","mb","_jsx","variant","length","Chip","label","size","mr","TextField","placeholder","onChange","e","target","width","height","InputProps","startAdornment","InputAdornment","SearchIcon","endAdornment","IconButton","onClick","ClearIcon","Tooltip","title","SettingsIcon","Button","startIcon","applySearch","disabled","ml","clearSearch","MenuItem","exportSelectedRowsToExcel","filteredColumns","excelData","warn","_row$col$accessor","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","timestamp","slice","alert","DownloadIcon","handleClickOpen","FileUploadIcon","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","className","_column$Position","_column$Alias_Name","Card","Switch","checked","handleColumnToggle","isChecked","toast","updatedSettings","newColumn","type","handlePositionChange","newPosition","positionValue","parseInt","isNaN","inputProps","min","readOnly","newAlias","handleAliasChange","cursor","DialogActions","resetToDefaults","dropdownCol","dc","positionMap","duplicatePositions","Set","add","positionsList","from","join","updateResponse","bodyData","id","alias_name","column_name","company_id","mt","component","accept","hidden","event","files","name","CircularProgress","style","maxHeight","overflow","CancelIcon","prevData","Auto_Id","SaveIcon","Paper","elevation","border","TableContainer","Table","stickyHeader","minWidth","TableHead","align","requestSort","AscIcon","DescIcon","FilterIcon","TableBody","idx","Is_Tally_Updated","selectedRow","Stock_Tally_Id","prevSelected","handleCheckboxChange","onFocus","blur","transform","handleEditClick","rowData","transition","EditIcon","TablePagination","count","onPageChange","handleChangePage","newPage","rowsPerPageOptions","minHeight","marginLeft","FormControl","InputLabel","Select","getPageSizeOptions","baseOptions","maxOption","Math","max","option"],"sourceRoot":""}