{"version":3,"file":"static/js/7611.eb3fe16a.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ArrowLeft.js","Pages/Sales/SaleOrder/column.js","Pages/Sales/SaleOrder/importFromPos.jsx","Pages/Sales/SaleOrder/creationStaffInfo.jsx","Pages/Sales/SaleOrder/saleOrderCreation.jsx","../node_modules/@mui/icons-material/esm/Clear.js","../node_modules/@mui/icons-material/esm/Save.js","Pages/Sales/SaleOrder/addItemToCart.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m14 7-5 5 5 5z\"\n}), 'ArrowLeft');","import { getSessionUser, ISOString } from \"../../../Components/functions\"\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nexport const saleOrderGeneralInfo = {\r\n    So_Id: '',\r\n    So_Inv_No: '',\r\n    So_Year: '',\r\n    So_Branch_Inv_Id: '',\r\n\r\n    So_Date: ISOString(),\r\n    Retailer_Id: '',\r\n    Retailer_Name: '',\r\n    Sales_Person_Id: '',\r\n    Branch_Id: '',\r\n    VoucherType: '',\r\n    GST_Inclusive: 2,\r\n    IS_IGST: 0,\r\n    Narration: '',\r\n    isConverted: '',\r\n    Cancel_status: '',\r\n    \r\n    CSGT_Total: 0,\r\n    SGST_Total: 0,\r\n    IGST_Total: 0,\r\n    Round_off: 0,\r\n    Total_Before_Tax: 0,\r\n    Total_Tax: 0,\r\n    Total_Invoice_value: 0,\r\n\r\n    Created_by: storage?.UserId,\r\n    Altered_by: storage?.UserId,\r\n    Approved_By: '',\r\n    Approve_Status: '',\r\n\r\n    Created_on: '',\r\n    Alterd_on: '',\r\n    Trans_Type: '',\r\n    Alter_Id: '',\r\n}\r\n\r\nexport const saleOrderStockInfo = {\r\n    // front-end purpose\r\n    BrandID: '',\r\n    Brand: '',\r\n    GroupID: '',\r\n    Group: '',\r\n\r\n    // backend generated\r\n    SO_St_Id: '',\r\n    So_Date: '',\r\n    Sales_Order_Id: '',\r\n    S_No: '',\r\n\r\n    // from entry\r\n    Pre_Id: '',\r\n    Item_Id: '',\r\n    Item_Rate: 0,\r\n    Bill_Qty: 0,\r\n    Amount: 0,\r\n    HSN_Code: '',\r\n    Unit_Id: '',\r\n    Unit_Name: '',\r\n\r\n    // others\r\n    Free_Qty: 0,\r\n    Total_Qty: 0,\r\n\r\n    // from product master  \r\n    Taxble: 0, // 0 means tax not applicable\r\n    Taxable_Rate: 0,\r\n    Taxable_Amount: 0,\r\n    Tax_Rate: 0,\r\n    Cgst: 0,\r\n    Cgst_Amo: 0,\r\n    Sgst: 0,\r\n    Sgst_Amo: 0,\r\n    Igst: 0,\r\n    Igst_Amo: 0,\r\n    Final_Amo: 0,\r\n\r\n    // generated from server\r\n    Created_on: '',\r\n}\r\n\r\nexport const saleOrderStaffInfo = {\r\n    Id: '', \r\n    So_Id: '', \r\n    Involved_Emp_Id: '', \r\n    EmpName: '',\r\n    Cost_Center_Type_Id: '',\r\n    EmpType: ''\r\n}","import { useEffect, useState } from \"react\";\r\nimport { checkIsNumber, Division, isEqualNumber, ISOString, LocalDate, Multiplication, toNumber } from \"../../../Components/functions\";\r\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { Done } from \"@mui/icons-material\";\r\nimport { saleOrderStockInfo } from \"./column\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\n\r\n\r\nconst ImportFromPOS = ({\r\n    loadingOn,\r\n    loadingOff,\r\n    open,\r\n    onClose,\r\n    retailer,\r\n    children,\r\n    selectedItems,\r\n    setSelectedItems,\r\n    products = [],\r\n    GST_Inclusive,\r\n    IS_IGST\r\n}) => {\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const [saleOrders, setSaleOrders] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (checkIsNumber(retailer) && open) {\r\n            const { Fromdate, Todate } = filters;\r\n            if (loadingOn) loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder/importPosOrders?Fromdate=${Fromdate}&Todate=${Todate}&Retailer_Id=${retailer}`\r\n            }).then(data => {\r\n                if (data.success) setSaleOrders(data.data);\r\n                else setSaleOrders([]);\r\n            }).catch(e => console.error(e)).finally(() => {\r\n                if (loadingOff) loadingOff();\r\n            })\r\n        }\r\n    }, [filters.search])\r\n\r\n    const changeSelectedItems = (itemDetail, deleteRow = false) => {\r\n        setSelectedItems(prev => {\r\n            const preItems = prev.filter(o => !isEqualNumber(o?.Pre_Id, itemDetail.Pre_Id));\r\n\r\n            let tempArray;\r\n            if (deleteRow) {\r\n                tempArray = preItems;\r\n            } else {\r\n                const currentOrder = saleOrders.filter(sale => isEqualNumber(sale.Pre_Id, itemDetail.Pre_Id))\r\n                const reStruc = currentOrder.map(cur => (\r\n                    Object.fromEntries(\r\n                        Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n\r\n                            const productMaster = findProductDetails(cur.Item_Id);\r\n                            const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                            const isTaxable = gstPercentage > 0;\r\n\r\n                            const { Item_Rate, Bill_Qty, Tonnage, PackValue } = cur;\r\n                            const Amount = Multiplication(Item_Rate, Multiplication(Bill_Qty, PackValue))\r\n\r\n                            const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                            const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                            const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                            const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                            const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                            const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                            const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                            switch (key) {\r\n                                case 'Pre_Id': return [key, cur['Pre_Id'] ?? value];\r\n                                case 'Item_Id': return [key, cur['Item_Id'] ?? value];\r\n                                case 'Item_Rate': return [key, toNumber(Item_Rate)];\r\n                                case 'Bill_Qty': return [key, toNumber(Tonnage)];\r\n                                case 'Amount': return [key, Amount];\r\n                                case 'Unit_Id': return [key, cur['Unit_Id'] ?? value];\r\n                                case 'Unit_Name': return [key, cur['Units'] ?? value];\r\n                                case 'HSN_Code': return [key, productMaster.HSN_Code ?? value];\r\n\r\n                                case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                                case 'Total_Qty': return [key, toNumber(Tonnage)]\r\n                                case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                                case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                                case 'Tax_Rate': return [key, gstPercentage]\r\n                                case 'Cgst':\r\n                                case 'Sgst': return [key, cgstPer ?? 0]\r\n                                case 'Cgst_Amo':\r\n                                case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                                case 'Igst': return [key, igstPer ?? 0]\r\n                                case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                                case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                                default: return [key, value]\r\n                            }\r\n                        })\r\n                    )\r\n                ))\r\n                tempArray = [...preItems, ...reStruc];\r\n            }\r\n            return tempArray;\r\n        });\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        if (onClose) onClose();\r\n        setSaleOrders([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle>\r\n                    <div className=\"d-flex flex-wrap align-items-center \">\r\n                        <span className=\"flex-grow-1\">Import from POS</span>\r\n                        <IconButton\r\n                            onClick={closeDialog}\r\n                            color='success'\r\n                        >\r\n                            <Done className=\"fa-20\" />\r\n                        </IconButton>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <form onSubmit={e => {\r\n                        e.preventDefault();\r\n                        setFilters(pre => ({ ...pre, search: !pre.search }))\r\n                    }}>\r\n                        <div className=\"d-flex flex-wrap align-items-end\">\r\n                            <div>\r\n                                <label className='d-block ms-2'>From Date</label>\r\n                                <input\r\n                                    className=\"cus-inpt p-2 w-auto\"\r\n                                    type=\"date\"\r\n                                    value={filters?.Fromdate}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label className='d-block ms-2'>To Date</label>\r\n                                <input\r\n                                    className=\"cus-inpt p-2 w-auto ms-2\"\r\n                                    type=\"date\"\r\n                                    min={filters.Fromdate}\r\n                                    value={filters?.Todate}\r\n                                    onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                className=\"ms-2\"\r\n                                type=\"submit\"\r\n                            >search</Button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    <div className=\"table-responsive mt-3\">\r\n                        <table className=\"table table-bordered fa-13\">\r\n                            <thead>\r\n                                <tr>\r\n                                    {['Sno', '#', 'Item', 'Qty', 'Pack', 'Rate', 'Amount', 'Order ID', 'Date', 'Invoice Value'].map((col, ind) => (\r\n                                        <th key={ind} >{col}</th>\r\n                                    ))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {saleOrders.filter(\r\n                                    sale => isEqualNumber(sale.Custome_Id, retailer)\r\n                                ).map((sale, saleInd) => (\r\n                                    <tr key={saleInd}>\r\n                                        <td>{saleInd + 1}</td>\r\n                                        <td>\r\n                                            {(() => {\r\n                                                const isChecked = selectedItems.findIndex(o =>\r\n                                                    isEqualNumber(o?.Pre_Id, sale.Pre_Id)\r\n                                                ) !== -1;\r\n\r\n                                                return (\r\n                                                    <div>\r\n                                                        <input\r\n                                                            className=\"form-check-input shadow-none pointer\"\r\n                                                            style={{ padding: '0.7em' }}\r\n                                                            type=\"checkbox\"\r\n                                                            checked={isChecked}\r\n                                                            onChange={() => {\r\n                                                                if (isChecked) changeSelectedItems(sale, true)\r\n                                                                else changeSelectedItems(sale)\r\n                                                            }}\r\n                                                        />\r\n                                                    </div>\r\n                                                )\r\n                                            })()}\r\n                                        </td>\r\n                                        <td>{sale?.Product_Name}</td>\r\n                                        <td>{sale?.Bill_Qty}</td>\r\n                                        <td>{sale?.Tonnage}</td>\r\n                                        <td>{sale?.Item_Rate}</td>\r\n                                        <td>{sale?.Amount}</td>\r\n                                        <td>{sale?.Pre_Id}</td>\r\n                                        <td>{LocalDate(sale?.Pre_Date)}</td>\r\n                                        <td>{sale?.Total_Invoice_value}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImportFromPOS;","import { Button, IconButton } from \"@mui/material\";\r\nimport { saleOrderStaffInfo } from \"./column\";\r\nimport { checkIsNumber, isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\n\r\nconst InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [], }) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => setStaffArray(pre => [...pre, { ...saleOrderStaffInfo }])}\r\n                >Add</Button>\r\n            </div>\r\n\r\n            <table className=\"table table-bordered\">\r\n\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"fa-13\">Sno</th>\r\n                        <th className=\"fa-13\">Staff Name</th>\r\n                        <th className=\"fa-13\">Category</th>\r\n                        <th className=\"fa-13\">#</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {toArray(StaffArray).map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                            <td className='fa-13 w-100 p-0'>\r\n                                <Select\r\n                                    value={{\r\n                                        value: row?.Involved_Emp_Id,\r\n                                        label: row?.EmpName,\r\n                                    }}\r\n                                    onChange={e => setStaffArray(prev => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                const staff = toArray(costCenter).find(c => isEqualNumber(c?.Cost_Center_Id, e.value))\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Cost_Center_Type_Id:\r\n                                                        checkIsNumber(staffRow?.Cost_Center_Type_Id)\r\n                                                            ? Number(staffRow?.Cost_Center_Type_Id)\r\n                                                            : checkIsNumber(staff.User_Type)\r\n                                                                ? Number(staff.User_Type)\r\n                                                                : 0,\r\n                                                    Involved_Emp_Id: Number(e.value),\r\n                                                    EmpName: e.label\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    options={\r\n                                        [...toArray(costCenter).filter(fil => (\r\n                                            !StaffArray.some(st => (\r\n                                                isEqualNumber(st.Emp_Id, fil.Cost_Center_Id)\r\n                                            ))\r\n                                        ))].map(st => ({\r\n                                            value: st.Cost_Center_Id,\r\n                                            label: st.Cost_Center_Name\r\n                                        }))\r\n                                    }\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Staff\"}\r\n                                />\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                <select\r\n                                    value={row?.Cost_Center_Type_Id}\r\n                                    onChange={e => setStaffArray((prev) => {\r\n                                        return prev.map((staffRow, ind) => {\r\n                                            if (isEqualNumber(ind, index)) {\r\n                                                return {\r\n                                                    ...staffRow,\r\n                                                    Cost_Center_Type_Id: e.target.value\r\n                                                }\r\n                                            }\r\n                                            return staffRow;\r\n                                        });\r\n                                    })}\r\n                                    className=\"cus-inpt p-2 border-0\"\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    {toArray(costCategory).map((st, sti) =>\r\n                                        <option value={st?.Cost_Category_Id} key={sti}>{st?.Cost_Category}</option>\r\n                                    )}\r\n                                </select>\r\n                            </td>\r\n                            <td className='fa-13 vctr p-0'>\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        setStaffArray(prev => {\r\n                                            return prev.filter((_, filIndex) => index !== filIndex);\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                >\r\n                                    <Delete color='error' />\r\n                                </IconButton>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvolvedStaffs;","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, IconButton, CardContent, Card } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    NumberFormat, numberToWords,\r\n    RoundNumber, Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber,\r\n    reactSelectFilterLogic\r\n} from \"../../../Components/functions\";\r\nimport { Add, ArrowLeft, Clear, Delete, Download, Edit, Save } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { saleOrderGeneralInfo, saleOrderStockInfo, saleOrderStaffInfo } from \"./column\";\r\nimport ImportFromPOS from \"./importFromPos\";\r\nimport AddItemToSaleOrderCart from \"./addItemToCart\";\r\nimport InvolvedStaffs from \"./creationStaffInfo\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SaleOrderCreation = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const editValues = location.state;\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        salesPerson: [],\r\n        brand: [],\r\n    });\r\n\r\n    const [orderDetails, setOrderDetails] = useState(saleOrderGeneralInfo)\r\n    const [orderProducts, setOrderProducts] = useState([]);\r\n    const [staffInvolved, setStaffInvolved] = useState([]);\r\n\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n    const [addProductDialog, setAddProductDialog] = useState(false);\r\n    const [importPosDialog, setImportPosDialog] = useState(false);\r\n\r\n    const isInclusive = isEqualNumber(orderDetails.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(orderDetails.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(orderDetails.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n\r\n    useEffect(() => {\r\n        if (\r\n            isValidObject(editValues) &&\r\n            Array.isArray(editValues?.Products_List) &&\r\n            Array.isArray(editValues?.Staff_Involved_List)\r\n        ) {\r\n            const { Products_List, Staff_Involved_List } = editValues;\r\n            setOrderDetails(\r\n                Object.fromEntries(\r\n                    Object.entries(saleOrderGeneralInfo).map(([key, value]) => {\r\n                        if (key === 'So_Date') return [key, editValues[key] ? ISOString(editValues[key]) : value]\r\n                        return [key, editValues[key] ?? value]\r\n                    })\r\n                )\r\n            );\r\n            setOrderProducts(\r\n                Products_List.map(item => Object.fromEntries(\r\n                    Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n            setStaffInvolved(\r\n                Staff_Involved_List.map(item => Object.fromEntries(\r\n                    Object.entries(saleOrderStaffInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        }\r\n    }, [editValues])\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                if (loadingOn) loadingOn();\r\n\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    salesPersonResponse,\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `masters/users/salesPerson/dropDown` }),\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const salesPersonData = (salesPersonResponse.success ? salesPersonResponse.data : []).sort(\r\n                    (a, b) => String(a?.Name).localeCompare(b?.Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    salesPerson: salesPersonData,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name'])\r\n                }));\r\n\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            } finally {\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id])\r\n\r\n    const clearValues = () => {\r\n        setOrderDetails(saleOrderGeneralInfo);\r\n        setOrderProducts([]);\r\n        setStaffInvolved([]);\r\n    }\r\n\r\n    const postSaleOrder = () => {\r\n        if (orderProducts?.length > 0 && orderDetails?.Retailer_Id) {\r\n            loadingOn();\r\n            fetchLink({\r\n                address: `sales/saleOrder`,\r\n                method: checkIsNumber(orderDetails?.So_Id) ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...orderDetails,\r\n                    Product_Array: orderProducts.filter(o => isGraterNumber(o?.Bill_Qty, 0)),\r\n                    Staff_Involved_List: staffInvolved\r\n                }\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    toast.success(data?.message);\r\n                    clearValues()\r\n                } else {\r\n                    toast.error(data?.message)\r\n                }\r\n            }).catch(e => console.error(e)).finally(() => loadingOff())\r\n\r\n        } else {\r\n            if (orderProducts.length <= 0) {\r\n                return toast.error('Enter any one product quantity')\r\n            }\r\n            if (!orderDetails?.Retailer_Id) {\r\n                return toast.error('Select Retailer')\r\n            }\r\n        }\r\n    }\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0)\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    const totalValueBeforeTax = useMemo(() => {\r\n        return orderProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return {\r\n                TotalValue: Addition(acc.TotalValue, Amount),\r\n                TotalTax: 0\r\n            }\r\n\r\n            const product = findProductDetails(baseData.products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n            const TotalValue = Addition(acc.TotalValue, taxInfo.without_tax);\r\n            const TotalTax = Addition(acc.TotalTax, taxInfo.tax_amount);\r\n\r\n            return {\r\n                TotalValue, TotalTax\r\n            };\r\n        }, {\r\n            TotalValue: 0,\r\n            TotalTax: 0\r\n        });\r\n    }, [orderProducts, isNotTaxableBill, baseData.products, IS_IGST, isInclusive])\r\n\r\n    useEffect(() => {\r\n        setOrderProducts(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(saleOrderStockInfo).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        saleOrderStockInfo,\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ])\r\n\r\n    return (\r\n        <>\r\n            <AddItemToSaleOrderCart\r\n                orderProducts={orderProducts}\r\n                setOrderProducts={setOrderProducts}\r\n                open={addProductDialog}\r\n                onClose={() => {\r\n                    setAddProductDialog(false);\r\n                    setSelectedProductToEdit(null);\r\n                }}\r\n                products={baseData.products}\r\n                brands={baseData.brand}\r\n                uom={baseData.uom}\r\n                GST_Inclusive={orderDetails.GST_Inclusive}\r\n                IS_IGST={IS_IGST}\r\n                editValues={selectedProductToEdit}\r\n                initialValue={saleOrderStockInfo}\r\n            />\r\n\r\n            <Card>\r\n\r\n                <div className=\"d-flex align-items-center flex-wrap p-2\">\r\n                    <h5 className=\"flex-grow-1 ps-2\">Sale Order Creation</h5>\r\n                    <Button\r\n                        variant='outlined' sx={{ ml: 1 }}\r\n                        startIcon={<ArrowLeft />}\r\n                        onClick={() => navigate('/erp/sales/saleOrder')}\r\n                    >\r\n                        {'Back'}\r\n                    </Button>\r\n                    <Button\r\n                        variant='outlined' sx={{ ml: 1 }}\r\n                        startIcon={<Clear />}\r\n                        onClick={clearValues}\r\n                    >\r\n                        {'Clear'}\r\n                    </Button>\r\n                </div>\r\n\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n\r\n                        {/* CompnayInfo  */}\r\n                        <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                            <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <InvolvedStaffs\r\n                                    StaffArray={staffInvolved}\r\n                                    setStaffArray={setStaffInvolved}\r\n                                    costCenter={baseData.staff}\r\n                                    costCategory={baseData.staffType}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* General Info  */}\r\n                        <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                            <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                <div className=\"row\">\r\n\r\n                                    <div className=\"col-sm-8 p-2\">\r\n                                        <label className='fa-13'>Retailer Name <RequiredStar /></label>\r\n                                        <Select\r\n                                            value={{ value: orderDetails?.Retailer_Id, label: orderDetails?.Retailer_Name }}\r\n                                            onChange={(e) => {\r\n                                                setOrderDetails({ ...orderDetails, Retailer_Id: e.value, Retailer_Name: e.label });\r\n                                                // setOrderProducts([]);\r\n                                            }}\r\n                                            options={[\r\n                                                { value: '', label: 'select', isDisabled: true },\r\n                                                ...baseData.retailers.map(obj => ({ value: obj?.Retailer_Id, label: obj?.Retailer_Name }))\r\n                                            ]}\r\n                                            styles={customSelectStyles}\r\n                                            isSearchable={true}\r\n                                            placeholder={\"Retailer Name\"}\r\n                                            maxMenuHeight={200}\r\n                                            filterOption={reactSelectFilterLogic}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-sm-4 p-2\">\r\n                                        <label className='fa-13'>Voucher Type <RequiredStar /></label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2\"\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, VoucherType: Number(e.target.value) })}\r\n                                            value={orderDetails.VoucherType}\r\n                                        >\r\n                                            <option value='' disabled>select voucher</option>\r\n                                            {baseData.voucherType?.filter(vou => vou.Type === 'SALES').map((vou, ind) => (\r\n                                                <option value={vou.Vocher_Type_Id} key={ind}>{vou.Voucher_Type}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label className='fa-13'>Date <RequiredStar /></label>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            value={orderDetails?.So_Date ? ISOString(orderDetails?.So_Date) : ''}\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, So_Date: e.target.value })}\r\n                                            className=\"cus-inpt p-2\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label className='fa-13'>Invoice Type <RequiredStar /></label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2\"\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, GST_Inclusive: Number(e.target.value) })}\r\n                                            value={orderDetails.GST_Inclusive}\r\n                                        >\r\n                                            <option value={1}>Inclusive Tax</option>\r\n                                            <option value={0}>Exclusive Tax</option>\r\n                                            <option value={2}>Not Taxable</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label className='fa-13'>Tax Type <RequiredStar /></label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2\"\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, IS_IGST: Number(e.target.value) })}\r\n                                            value={orderDetails.IS_IGST}\r\n                                        >\r\n                                            <option value='0'>GST</option>\r\n                                            <option value='1'>IGST</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label className='fa-13'>Sales Person <RequiredStar /></label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2\"\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, Sales_Person_Id: Number(e.target.value) })}\r\n                                            value={orderDetails.Sales_Person_Id}\r\n                                        >\r\n                                            <option value='' disabled>select sales person</option>\r\n                                            <option value={storage?.UserId}>{storage?.Name}</option>\r\n                                            {baseData.salesPerson?.map((vou, ind) => (\r\n                                                <option value={vou.UserId} key={ind}>{vou.Name}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                                        <label className='fa-13'>Branch <RequiredStar /></label>\r\n                                        <select\r\n                                            className=\"cus-inpt p-2\"\r\n                                            onChange={e => setOrderDetails({ ...orderDetails, Branch_Id: Number(e.target.value) })}\r\n                                            value={orderDetails.Branch_Id}\r\n                                        >\r\n                                            <option value='' disabled>select Branch</option>\r\n                                            {baseData.branch.map((branch, ind) => (\r\n                                                <option value={branch.BranchId} key={ind}>{branch.BranchName}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-12 p-2\">\r\n                                        <label className='fa-13'>Narration</label>\r\n                                        <textarea\r\n                                            className=\"cus-inpt \"\r\n                                            value={orderDetails.Narration}\r\n                                            onChange={e => setOrderDetails(pre => ({ ...pre, Narration: e.target.value }))}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <FilterableTable\r\n                        title=\"Products\"\r\n                        ButtonArea={\r\n                            <>\r\n                                {/* <AddItemToSaleOrderCart\r\n                                        orderProducts={orderProducts}\r\n                                        setOrderProducts={setOrderProducts}\r\n                                        open={addProductDialog}\r\n                                        onClose={() => setAddProductDialog(false)}\r\n                                        products={baseData.products}\r\n                                        brands={baseData.brand}\r\n                                        uom={baseData.uom}\r\n                                        GST_Inclusive={orderDetails.GST_Inclusive}\r\n                                        IS_IGST={IS_IGST}\r\n                                    >\r\n                                        <Button\r\n                                            onClick={() => setAddProductDialog(true)}\r\n                                            sx={{ ml: 1 }}\r\n                                            variant='outlined'\r\n                                            startIcon={<Add />}\r\n                                            disabled={\r\n                                                !checkIsNumber(orderDetails.Retailer_Id)\r\n                                                || (orderProducts.length > 0\r\n                                                    && orderProducts.some(pro => checkIsNumber(pro.Pre_Id)))\r\n                                            }\r\n                                        >Add Product</Button>\r\n                                    </AddItemToSaleOrderCart> */}\r\n\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setSelectedProductToEdit(null);\r\n                                        setAddProductDialog(true);\r\n                                    }}\r\n                                    sx={{ ml: 1 }}\r\n                                    variant='outlined'\r\n                                    startIcon={<Add />}\r\n                                    disabled={\r\n                                        !checkIsNumber(orderDetails.Retailer_Id)\r\n                                        || (orderProducts.length > 0\r\n                                            && orderProducts.some(pro => checkIsNumber(pro.Pre_Id)))\r\n                                    }\r\n                                >Add Product</Button>\r\n\r\n                                <ImportFromPOS\r\n                                    loadingOn={loadingOn} loadingOff={loadingOff}\r\n                                    open={importPosDialog} onClose={() => setImportPosDialog(false)}\r\n                                    retailer={orderDetails?.Retailer_Id}\r\n                                    selectedItems={orderProducts} setSelectedItems={setOrderProducts}\r\n                                    products={baseData.products}\r\n                                    GST_Inclusive={orderDetails.GST_Inclusive}\r\n                                    IS_IGST={IS_IGST}\r\n                                >\r\n                                    <Button\r\n                                        onClick={() => setImportPosDialog(true)}\r\n                                        disabled={\r\n                                            !checkIsNumber(orderDetails.Retailer_Id)\r\n                                            || (orderProducts.length > 0\r\n                                                && orderProducts.some(pro => !checkIsNumber(pro.Pre_Id)))\r\n                                        }\r\n                                        sx={{ ml: 1 }}\r\n                                        variant='outlined'\r\n                                        startIcon={<Download />}\r\n                                    >Import pos</Button>\r\n                                </ImportFromPOS>\r\n\r\n                            </>\r\n                        }\r\n                        dataArray={orderProducts}\r\n                        columns={[\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => findProductDetails(baseData.products, row?.Item_Id).Product_Name,\r\n                                ColumnHeader: 'Product',\r\n                                isVisible: 1,\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => findProductDetails(baseData.products, row?.Item_Id).Product_Name?.HSN_Code,\r\n                                ColumnHeader: 'HSN Code',\r\n                                isVisible: 1,\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => row?.Bill_Qty + ' ' + (row?.Units ?? ''),\r\n                                ColumnHeader: 'Quantity',\r\n                                isVisible: 1,\r\n                                align: 'center'\r\n                            },\r\n                            createCol('Item_Rate', 'number', 'Rate', 'right'),\r\n                            createCol('Taxable_Amount', 'number', 'Taxable Amount', 'right'),\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const percentage = findProductDetails(baseData.products, row?.Item_Id)?.Gst_P\r\n                                    const amount = toNumber(row?.Amount);\r\n                                    const taxDetails = calculateGSTDetails(amount, percentage, taxType);\r\n                                    // console.log({ percentage, amount, taxDetails, taxType })\r\n                                    return NumberFormat(taxDetails.tax_amount) + ' (' + taxDetails.tax_per + '%)'\r\n                                },\r\n                                ColumnHeader: 'Tax',\r\n                                isVisible: 1,\r\n                                align: 'right'\r\n                            },\r\n                            // createCol('Amount', 'number', 'Amount', 'right'),\r\n                            {\r\n                                ColumnHeader: 'Amount',\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    const percentage = findProductDetails(baseData.products, row?.Item_Id)?.Gst_P\r\n                                    const amount = row.Amount ?? 0;\r\n                                    const tax = calculateGSTDetails(amount, percentage, taxType).tax_amount;\r\n                                    return NumberFormat(\r\n                                        isEqualNumber(orderDetails.GST_Inclusive, 1) ? amount : Addition(amount, tax)\r\n                                    )\r\n                                },\r\n                                isVisible: 1,\r\n                                align: 'right'\r\n                            },\r\n                            {\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <IconButton\r\n                                                onClick={() => {\r\n                                                    setSelectedProductToEdit(row);\r\n                                                    setAddProductDialog(true);\r\n                                                }}\r\n                                                size=\"small\"\r\n                                            >\r\n                                                <Edit />\r\n                                            </IconButton>\r\n                                            <IconButton\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    if (checkIsNumber(row?.Pre_Id)) {\r\n                                                        setOrderProducts(pre => pre.filter(o => !isEqualNumber(o?.Pre_Id, row?.Pre_Id)))\r\n                                                    } else {\r\n                                                        setOrderProducts(pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id)))\r\n                                                    }\r\n                                                }}\r\n                                                color='error'\r\n                                            >\r\n                                                <Delete />\r\n                                            </IconButton>\r\n                                        </>\r\n                                    )\r\n                                },\r\n                                ColumnHeader: 'Action',\r\n                                isVisible: 1,\r\n                            },\r\n                        ]}\r\n                        EnableSerialNumber\r\n                        CellSize=\"small\"\r\n                        disablePagination={true}\r\n                    />\r\n\r\n                    {/* invoice Gst and total  */}\r\n                    {orderProducts.length > 0 && (\r\n                        <div className=\"d-flex justify-content-end py-2\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\" rowSpan={isEqualNumber(orderDetails.IS_IGST, 1) ? 4 : 5}>\r\n                                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                                        </td>\r\n                                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(totalValueBeforeTax.TotalValue)}\r\n                                        </td>\r\n                                    </tr>\r\n                                    {!isEqualNumber(orderDetails.IS_IGST, 1) ? (\r\n                                        <>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">CGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td className=\"border p-2\">SGST</td>\r\n                                                <td className=\"border p-2\">\r\n                                                    {NumberFormat(totalValueBeforeTax.TotalTax / 2)}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td className=\"border p-2\">IGST</td>\r\n                                            <td className=\"border p-2\">\r\n                                                {NumberFormat(totalValueBeforeTax.TotalTax)}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )}\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Round Off</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {RoundNumber(Math.round(Total_Invoice_value) - Total_Invoice_value)}\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td className=\"border p-2\">Total</td>\r\n                                        <td className=\"border p-2\">\r\n                                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Button\r\n                            onClick={postSaleOrder}\r\n                            sx={{ ml: 1 }}\r\n                            variant='outlined'\r\n                            color='success'\r\n                            startIcon={<Save />}\r\n                            disabled={orderProducts?.length === 0 || !orderDetails?.Retailer_Id}\r\n                        >Save</Button>\r\n                    </div>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SaleOrderCreation;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');","import { useEffect, useState } from \"react\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport { checkIsNumber, Division, isEqualNumber, isValidObject, Multiplication, onlynum, reactSelectFilterLogic, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { ClearAll } from \"@mui/icons-material\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport { validStockValue } from \"../SalesInvoice/importFromSaleOrder\";\r\n\r\nconst AddItemToSaleOrderCart = ({\r\n    children,\r\n    orderProducts = [],\r\n    setOrderProducts,\r\n    open = false,\r\n    onClose,\r\n    products = [],\r\n    brands = [],\r\n    uom = [],\r\n    godowns = [],\r\n    GST_Inclusive,\r\n    IS_IGST,\r\n    editValues = null,\r\n    initialValue = {},\r\n    stockInGodown = [],\r\n}) => {\r\n\r\n    const [productDetails, setProductDetails] = useState(initialValue);\r\n\r\n    const isInclusive = isEqualNumber(GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(GST_Inclusive, 2);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(editValues) && open) {\r\n            setProductDetails(pre => (\r\n                Object.fromEntries(\r\n                    Object.entries(pre).map(([key, value]) => [key, editValues[key] ? editValues[key] : value])\r\n                )\r\n            ))\r\n        }\r\n    }, [editValues])\r\n\r\n    const findProductDetails = (productid) => products?.find(obj => isEqualNumber(obj?.Product_Id, productid)) ?? {};\r\n\r\n    const closeDialog = () => {\r\n        setProductDetails(initialValue);\r\n        onClose();\r\n    }\r\n\r\n    const handleProductInputChange = () => {\r\n\r\n        setOrderProducts(pre => {\r\n            const existingProducts = pre.filter(ordered => !isEqualNumber(ordered.Item_Id, productDetails.Item_Id));\r\n\r\n            const currentProductDetails = Object.fromEntries(\r\n                Object.entries(initialValue).map(([key, value]) => {\r\n                    const productMaster = findProductDetails(productDetails.Item_Id);\r\n                    const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                    const isTaxable = gstPercentage > 0;\r\n\r\n                    const { Bill_Qty, Item_Rate, Amount } = productDetails;\r\n\r\n                    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n                    const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                    const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                    const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                    const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                    const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                    const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                    switch (key) {\r\n                        case 'Item_Name': return [key, productMaster.Product_Name]\r\n                        case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                        case 'Total_Qty': return [key, Bill_Qty]\r\n                        case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                        case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                        case 'Tax_Rate': return [key, gstPercentage]\r\n                        case 'Cgst':\r\n                        case 'Sgst': return [key, cgstPer ?? 0]\r\n                        case 'Cgst_Amo':\r\n                        case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                        case 'Igst': return [key, igstPer ?? 0]\r\n                        case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                        case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                        default: return [key, productDetails[key] || value]\r\n                    }\r\n                })\r\n            );\r\n\r\n            return [...existingProducts, currentProductDetails];\r\n        });\r\n\r\n        closeDialog();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {children}\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={closeDialog}\r\n                maxWidth='md' fullWidth\r\n            >\r\n                <DialogTitle className=\"border-bottom\">\r\n                    <span>Add Products Details</span>\r\n                </DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    if (productDetails.Item_Id) {\r\n                        handleProductInputChange();\r\n                    } else {\r\n                        toast.warn('Select Product');\r\n                    }\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row pb-5\">\r\n\r\n                            {/* brand */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Brand</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.BrandID, label: productDetails.Brand }}\r\n                                    onChange={(e) => setProductDetails(pre => ({ ...pre, BrandID: e.value, Brand: e.label }))}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...brands.map(obj => ({ value: obj?.Brand, label: obj?.Brand_Name }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Brand\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* group */}\r\n                            <div className=\"col-6 p-2\">\r\n                                <label>Group</label>\r\n                                <Select\r\n                                    value={{ value: productDetails.GroupID, label: productDetails.Group }}\r\n                                    onChange={(e) =>\r\n                                        setProductDetails((pre) => ({ ...pre, GroupID: e.value, Group: e.label }))\r\n                                    }\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...products\r\n                                            .filter(\r\n                                                (pro) =>\r\n                                                    productDetails.BrandID\r\n                                                        ? isEqualNumber(pro.Brand, productDetails.BrandID)\r\n                                                        : true\r\n                                            )\r\n                                            .reduce((acc, pro) => {\r\n                                                if (\r\n                                                    !acc.some((grp) => grp.value === pro.Product_Group)\r\n                                                ) {\r\n                                                    acc.push({\r\n                                                        value: pro.Product_Group,\r\n                                                        label: pro.Pro_Group,\r\n                                                    });\r\n                                                }\r\n                                                return acc;\r\n                                            }, []),\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    menuPortalTarget={document.body}\r\n                                    isSearchable={true}\r\n                                    placeholder={\"Select Group\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* item name */}\r\n                            <div className={\r\n                                Object.hasOwn(productDetails, 'GoDown_Id') ? 'col-md-8 p-2' : \"col-12 p-2\"\r\n                            }>\r\n                                <label>Item Name <RequiredStar /></label>\r\n                                <Select\r\n                                    value={{\r\n                                        value: productDetails.Item_Id,\r\n                                        label: (\r\n                                            findProductDetails(productDetails.Item_Id)?.Product_Name\r\n                                        )\r\n                                    }}\r\n                                    isDisabled={checkIsNumber(productDetails.Pre_Id)}\r\n                                    menuPortalTarget={document.body}\r\n                                    onChange={e => {\r\n                                        const productInfo = findProductDetails(e.value);\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n\r\n                                            Group: productInfo.Pro_Group ?? pre.Group,\r\n                                            GroupID: productInfo.Product_Group ?? pre.GroupID,\r\n                                            Brand: productInfo.Brand_Name ?? pre.Brand,\r\n                                            BrandID: productInfo.Brand ?? pre.BrandID,\r\n\r\n                                            Item_Id: e.value,\r\n                                            Item_Rate: productInfo.Item_Rate ?? 0,\r\n                                            Bill_Qty: 0,\r\n                                            Amount: 0,\r\n                                            Unit_Id: productInfo.UOM_Id ?? pre.Unit_Id,\r\n                                            Unit_Name: productInfo.Units ?? pre.Unit_Name,\r\n                                            HSN_Code: productInfo?.HSN_Code\r\n                                        }));\r\n                                    }}\r\n                                    options={[\r\n                                        { value: '', label: 'select', isDisabled: true },\r\n                                        ...[\r\n                                            ...products\r\n                                                .filter(pro => productDetails.BrandID ? isEqualNumber(pro.Brand, productDetails.BrandID) : true)\r\n                                                .filter(pro => productDetails.GroupID ? isEqualNumber(pro.Product_Group, productDetails.GroupID) : true)\r\n                                        ].map(obj => ({\r\n                                            value: obj?.Product_Id,\r\n                                            label: obj?.Product_Name,\r\n                                            isDisabled: (\r\n                                                orderProducts.findIndex(ind => isEqualNumber(\r\n                                                    ind?.Item_Id, obj?.Product_Id\r\n                                                ))\r\n                                            ) === -1 ? false : true\r\n                                        }))\r\n                                    ]}\r\n                                    styles={customSelectStyles}\r\n                                    isSearchable={true}\r\n                                    required\r\n                                    placeholder={\"Select Product\"}\r\n                                    maxMenuHeight={200}\r\n                                    filterOption={reactSelectFilterLogic}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* godown  */}\r\n                            {Object.hasOwn(productDetails, 'GoDown_Id') && (\r\n                                <div className=\"col-md-4 p-2\">\r\n                                    <label>Godown</label>\r\n                                    <Select\r\n                                        value={{\r\n                                            value: productDetails?.GoDown_Id,\r\n                                            label: godowns.find(g => isEqualNumber(g.Godown_Id, productDetails?.GoDown_Id))?.Godown_Name || ''\r\n                                        }}\r\n                                        onChange={(e) => setProductDetails(pre => ({ ...pre, GoDown_Id: e.value }))}\r\n                                        options={[\r\n                                            { value: '', label: 'select', isDisabled: true },\r\n                                            {\r\n                                                label: 'Stock-Available-Godowns',\r\n                                                options: toArray(godowns).filter(fil => {\r\n                                                    const stockList = toArray(stockInGodown);\r\n\r\n                                                    if (stockList.length === 0) return false;\r\n\r\n                                                    return stockList.some(\r\n                                                        fnd => (\r\n                                                            isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id)\r\n                                                            && isEqualNumber(productDetails?.Item_Id, fnd?.Product_Id)\r\n                                                        )\r\n                                                    )\r\n                                                }).map(obj => ({\r\n                                                    value: obj?.Godown_Id,\r\n                                                    label: obj?.Godown_Name\r\n                                                        + \" (Bal: \"\r\n                                                        + validStockValue(productDetails?.Item_Id, obj?.Godown_Id, stockInGodown)\r\n                                                        + \")\"\r\n                                                }))\r\n                                            },\r\n                                            {\r\n                                                label: 'Other Godowns',\r\n                                                options: toArray(godowns).filter(fil => {\r\n                                                    const stockList = toArray(stockInGodown);\r\n\r\n                                                    if (stockList.length === 0) return true;\r\n\r\n                                                    return !stockList.some(fnd =>\r\n                                                        isEqualNumber(fnd?.Godown_Id, fil?.Godown_Id) &&\r\n                                                        isEqualNumber(productDetails?.Item_Id, fnd?.Product_Id)\r\n                                                    );\r\n                                                }).map(obj => ({\r\n                                                    value: obj?.Godown_Id,\r\n                                                    label: obj?.Godown_Name\r\n                                                }))\r\n                                            }\r\n                                        ]}\r\n                                        styles={customSelectStyles}\r\n                                        isDisabled={!checkIsNumber(productDetails?.Item_Id)}\r\n                                        menuPortalTarget={document.body}\r\n                                        isSearchable={true}\r\n                                        placeholder={\"Select Godown\"}\r\n                                        filterOption={reactSelectFilterLogic}\r\n                                    // maxMenuHeight={200}  \r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* quantity */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Quantity <RequiredStar /></label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Bill_Qty ? productDetails.Bill_Qty : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => {\r\n                                        if (productDetails.Item_Rate) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Amount: Multiplication(productDetails.Item_Rate, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else if (productDetails.Amount) {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Item_Rate: Division(pre.Amount, e.target.value),\r\n                                                Bill_Qty: e.target.value,\r\n                                            }))\r\n                                        } else {\r\n                                            setProductDetails(pre => ({\r\n                                                ...pre,\r\n                                                Bill_Qty: e.target.value,\r\n                                            }));\r\n                                        }\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n                            {Object.hasOwn(productDetails, 'Act_Qty') && (\r\n                                <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                    <label>Actual Quantity </label>\r\n                                    <input\r\n                                        value={productDetails.Act_Qty ? productDetails.Act_Qty : ''}\r\n                                        onInput={onlynum}\r\n                                        disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                        onChange={e => setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            Act_Qty: e.target.value,\r\n                                        }))}\r\n                                        required\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Rate */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>Rate </label>\r\n                                <input\r\n                                    value={productDetails.Item_Rate ? productDetails.Item_Rate : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Item_Rate: e.target.value,\r\n                                        Amount: pre.Bill_Qty ? Multiplication(e.target.value, pre.Bill_Qty) : pre.Amount\r\n                                    }))}\r\n                                    required\r\n                                    className=\"cus-inpt\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* UOM */}\r\n                            <div className=\"col-lg-4 col-md-6 p-2\">\r\n                                <label>UOM</label>\r\n                                <select\r\n                                    value={\r\n                                        Object.hasOwn(productDetails, 'UOM') ? productDetails.UOM :\r\n                                            Object.hasOwn(productDetails, 'Unit_Id') ? productDetails.Unit_Id : ''\r\n                                    }\r\n                                    onChange={e => {\r\n                                        const selectedIndex = e.target.selectedIndex;\r\n                                        const label = e.target.options[selectedIndex].text;\r\n                                        const value = e.target.value;\r\n                                        setProductDetails(pre => ({\r\n                                            ...pre,\r\n                                            UOM: value,\r\n                                            Unit_Id: value,\r\n                                            Units: label,\r\n                                            Unit_Name: label,\r\n                                        }));\r\n                                    }}\r\n                                    className=\"cus-inpt\"\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                >\r\n                                    <option value=\"\" disabled>select</option>\r\n                                    {uom.map((o, i) => (\r\n                                        <option value={o.Unit_Id} key={i} >{o.Units}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                            {/* Amount */}\r\n                            <div className=\"col-md-6 p-2\">\r\n                                <label>Amount</label>\r\n                                <input\r\n                                    required\r\n                                    value={productDetails.Amount ? productDetails.Amount : ''}\r\n                                    onInput={onlynum}\r\n                                    disabled={!checkIsNumber(productDetails.Item_Id)}\r\n                                    onChange={e => setProductDetails(pre => ({\r\n                                        ...pre,\r\n                                        Amount: e.target.value,\r\n                                        Item_Rate: pre.Bill_Qty ? Division(e.target.value, pre.Bill_Qty) : pre.Item_Rate\r\n                                    }))}\r\n                                    className=\"cus-inpt\"\r\n                                    min={1}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions className=\"d-flex justify-content-between align-items-center\">\r\n                        <Button onClick={() => setProductDetails(initialValue)} type='button' startIcon={<ClearAll />}>Clear</Button>\r\n                        <span>\r\n                            <Button type=\"button\" onClick={closeDialog}>cancel</Button>\r\n                            <Button type='submit' variant=\"outlined\">Add</Button>\r\n                        </span>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddItemToSaleOrderCart;"],"names":["createSvgIcon","_jsx","d","storage","getSessionUser","user","saleOrderGeneralInfo","So_Id","So_Inv_No","So_Year","So_Branch_Inv_Id","So_Date","ISOString","Retailer_Id","Retailer_Name","Sales_Person_Id","Branch_Id","VoucherType","GST_Inclusive","IS_IGST","Narration","isConverted","Cancel_status","CSGT_Total","SGST_Total","IGST_Total","Round_off","Total_Before_Tax","Total_Tax","Total_Invoice_value","Created_by","UserId","Altered_by","Approved_By","Approve_Status","Created_on","Alterd_on","Trans_Type","Alter_Id","saleOrderStockInfo","BrandID","Brand","GroupID","Group","SO_St_Id","Sales_Order_Id","S_No","Pre_Id","Item_Id","Item_Rate","Bill_Qty","Amount","HSN_Code","Unit_Id","Unit_Name","Free_Qty","Total_Qty","Taxble","Taxable_Rate","Taxable_Amount","Tax_Rate","Cgst","Cgst_Amo","Sgst","Sgst_Amo","Igst","Igst_Amo","Final_Amo","saleOrderStaffInfo","Id","Involved_Emp_Id","EmpName","Cost_Center_Type_Id","EmpType","_ref","loadingOn","loadingOff","open","onClose","retailer","children","selectedItems","setSelectedItems","products","isInclusive","isEqualNumber","isNotTaxableBill","saleOrders","setSaleOrders","useState","filters","setFilters","Fromdate","Todate","search","useEffect","checkIsNumber","fetchLink","address","concat","then","data","success","catch","e","console","error","finally","changeSelectedItems","itemDetail","deleteRow","arguments","length","undefined","prev","preItems","filter","o","tempArray","reStruc","sale","map","cur","Object","fromEntries","entries","_ref2","_cur$Pre_Id","_cur$Item_Id","_cur$Unit_Id","_cur$Units","_productMaster$HSN_Co","key","value","productMaster","productid","_products$find","find","obj","Product_Id","findProductDetails","gstPercentage","Igst_P","Gst_P","isTaxable","Tonnage","PackValue","Multiplication","taxType","itemRateGst","calculateGSTDetails","gstInfo","cgstPer","cgst_per","igstPer","igst_per","cgst_amount","igst_amount","toNumber","base_amount","with_tax","closeDialog","_jsxs","_Fragment","Dialog","fullScreen","DialogTitle","className","IconButton","onClick","color","Done","DialogContent","onSubmit","preventDefault","pre","_objectSpread","type","onChange","target","required","min","Button","variant","col","ind","Custome_Id","saleInd","isChecked","findIndex","style","padding","checked","Product_Name","LocalDate","Pre_Date","StaffArray","setStaffArray","costCenter","costCategory","toArray","row","index","Select","label","staffRow","staff","c","Cost_Center_Id","Number","User_Type","options","fil","some","st","Emp_Id","Cost_Center_Name","styles","customSelectStyles","isSearchable","placeholder","maxWidth","minWidth","sti","Cost_Category_Id","Cost_Category","_","filIndex","size","Delete","_arr$find","_baseData$voucherType","_baseData$salesPerson","navigate","useNavigate","editValues","useLocation","state","baseData","setBaseData","branch","retailers","voucherType","uom","staffType","salesPerson","brand","orderDetails","setOrderDetails","orderProducts","setOrderProducts","staffInvolved","setStaffInvolved","selectedProductToEdit","setSelectedProductToEdit","addProductDialog","setAddProductDialog","importPosDialog","setImportPosDialog","isValidObject","Array","isArray","Products_List","Staff_Involved_List","_editValues$key","item","_ref3","_item$key","_ref4","_item$key2","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","salesPersonResponse","Promise","all","Company_id","branchData","sort","a","b","String","BranchName","localeCompare","productsData","retailersData","Voucher_Type","uomData","Units","staffData","staffCategoryData","salesPersonData","Name","getUniqueData","fetchData","clearValues","useMemo","reduce","acc","RoundNumber","Addition","product","totalValueBeforeTax","TotalValue","TotalTax","taxInfo","without_tax","tax_amount","_ref5","AddItemToSaleOrderCart","brands","initialValue","Card","sx","ml","startIcon","ArrowLeft","Clear","CardContent","minHeight","height","InvolvedStaffs","RequiredStar","isDisabled","maxMenuHeight","filterOption","reactSelectFilterLogic","disabled","vou","Type","Vocher_Type_Id","BranchId","FilterableTable","title","ButtonArea","Add","pro","ImportFromPOS","Download","dataArray","columns","isCustomCell","Cell","_ref6","ColumnHeader","isVisible","_ref7","_findProductDetails$P","_ref8","_row$Units","align","createCol","_ref9","_findProductDetails","percentage","amount","taxDetails","NumberFormat","tax_per","_ref10","_findProductDetails2","_row$Amount","tax","_ref11","Edit","EnableSerialNumber","CellSize","disablePagination","rowSpan","numberToWords","parseInt","Math","round","postSaleOrder","method","bodyData","Product_Array","isGraterNumber","toast","message","Save","_godowns$find","godowns","stockInGodown","productDetails","setProductDetails","fullWidth","ordered","warn","Brand_Name","menuPortalTarget","document","body","grp","Product_Group","push","Pro_Group","hasOwn","productInfo","_productInfo$Pro_Grou","_productInfo$Product_","_productInfo$Brand_Na","_productInfo$Brand","_productInfo$Item_Rat","_productInfo$UOM_Id","_productInfo$Units","UOM_Id","GoDown_Id","g","Godown_Id","Godown_Name","stockList","fnd","validStockValue","onInput","onlynum","Division","Act_Qty","UOM","selectedIndex","text","i","DialogActions","ClearAll"],"sourceRoot":""}