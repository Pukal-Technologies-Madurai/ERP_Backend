{"version":3,"file":"static/js/8034.a95b065a.chunk.js","mappings":"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","sources":["Pages/Sales/partyWiseReport.jsx"],"sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Card, CardContent, IconButton, Tooltip } from \"@mui/material\";\r\nimport { getPreviousDate, ISOString } from \"../../Components/functions\";\r\nimport DisplayArrayData from './SalesReportComponent/DataSetDisplay'\r\nimport { FilterAlt, Refresh } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\n\r\n\r\nconst PartyDetails = ({ row, Fromdate, Todate, DB }) => {\r\n    const [salesData, setSalesData] = useState([]);\r\n    const [dataTypes, setDataTypes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `sales/partyWiseReport/details?Fromdate=${Fromdate}&Todate=${Todate}&Party_Name=${row?.Actual_Party_Name}`,\r\n            headers: {\r\n                'Db': DB\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(pre => ({...pre, salesInfo: Array.isArray(dataTypeInfo) ? dataTypeInfo : []}))\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n        .catch(console.error);\r\n    }, [row?.Party_Name, Fromdate, Todate])\r\n\r\n    return (\r\n        <DisplayArrayData dataArray={salesData} columns={dataTypes.salesInfo} />\r\n    )\r\n}\r\n\r\n\r\nconst PartySalesReport = () => {\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n    const [salesData, setSalesData] = useState(null);\r\n    const [dataTypes, setDataTypes] = useState([])\r\n    const [filters, setFilters] = useState({\r\n        Fromdate: getPreviousDate(1),\r\n        Todate: ISOString(),\r\n        filterDialog: false,\r\n        reload: true\r\n    });\r\n\r\n    const fetchData = () => {\r\n        fetchLink({\r\n            address: `sales/partyWiseReport?Fromdate=${filters?.Fromdate}&Todate=${filters?.Todate}`,\r\n            headers: {\r\n                'Db': storage?.Company_id\r\n            }\r\n        }).then(({ success, data, others }) => {\r\n            if (success) {\r\n                const { dataTypeInfo } = others;\r\n                setSalesData(data);\r\n                setDataTypes(Array.isArray(dataTypeInfo) ? dataTypeInfo : [])\r\n            } else {\r\n                setSalesData([]);\r\n            }\r\n        })\r\n        .catch(console.error);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSalesData(null);\r\n        setDataTypes([])\r\n        fetchData();\r\n    }, [filters.reload])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card className=\"mt-3\">\r\n                <div className=\"px-3 py-2 d-flex justify-content-between align-items-center fw-bold text-dark\" style={{ backgroundColor: '#eae0cc' }}>\r\n                    <span>\r\n                        PARTY BASED SALES\r\n                    </span>\r\n                </div>\r\n\r\n                <CardContent>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <input\r\n                            type={'date'}\r\n                            className='cus-inpt w-auto ps-3 border rounded-5 me-1'\r\n                            value={filters.Fromdate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                        />\r\n\r\n                        <input\r\n                            type={'date'}\r\n                            className='cus-inpt w-auto ps-3 border rounded-5'\r\n                            value={filters.Todate}\r\n                            onChange={e => setFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                        />\r\n\r\n                        <Tooltip title='Reload Data'>\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, reload: !pre.reload }))}\r\n                                size=\"small\"\r\n                                className=\"ms-2\"\r\n                            >\r\n                                <Refresh />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Filters\">\r\n                            <IconButton\r\n                                onClick={() => setFilters(pre => ({ ...pre, filterDialog: true }))}\r\n                                size=\"small\"\r\n                                className=\"d-md-none d-inline\"\r\n                            >\r\n                                <FilterAlt />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n\r\n                    {salesData === null && (\r\n                        <h6 className=\"blue-text text-center\">Fetching data...</h6>\r\n                    )}\r\n\r\n                    {Array.isArray(salesData) && (\r\n                        <DisplayArrayData \r\n                            dataArray={salesData} \r\n                            columns={dataTypes} \r\n                            ExpandableComp={({ row }) => (\r\n                                <PartyDetails \r\n                                    row={row} \r\n                                    DB={storage?.Company_id} \r\n                                    Fromdate={filters?.Fromdate} \r\n                                    Todate={filters?.Todate} \r\n                                />\r\n                            )}\r\n                            enableFilters={true} \r\n                        />\r\n                    )}\r\n\r\n                </CardContent>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default PartySalesReport;"],"names":["PartyDetails","_ref","row","Fromdate","Todate","DB","salesData","setSalesData","useState","dataTypes","setDataTypes","useEffect","fetchLink","address","concat","Actual_Party_Name","headers","then","_ref2","success","data","others","dataTypeInfo","pre","_objectSpread","salesInfo","Array","isArray","catch","console","error","Party_Name","_jsx","DisplayArrayData","dataArray","columns","PartySalesReport","storage","JSON","parse","localStorage","getItem","filters","setFilters","getPreviousDate","ISOString","filterDialog","reload","Company_id","_ref3","Fragment","children","_jsxs","Card","className","style","backgroundColor","CardContent","type","value","onChange","e","target","Tooltip","title","IconButton","onClick","size","Refresh","FilterAlt","ExpandableComp","_ref4","enableFilters"],"sourceRoot":""}