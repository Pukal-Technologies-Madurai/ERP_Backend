{"version":3,"file":"static/js/967.fb905470.chunk.js","mappings":"oeAUO,SAASA,EAAkBC,GAC9B,OAAOA,EAAMC,uBACjB,CAGO,SAASC,EAAQF,EAAOG,GAAQ,IAADC,EAClC,MAAMC,EAAe,gBAAVF,EAA0BH,EAAMM,cAAgBN,EAAMO,2BAMjE,OAHyB,QAAZH,EAACC,EAAGG,gBAAQ,IAAAJ,EAAAA,EAAIC,EAAGI,MAAMC,OACjCC,IAAC,IAAAC,EAAAC,EAAAC,EAAA,QAAqB,QAAdF,EAAAD,EAAEI,oBAAY,IAAAH,GAAdA,EAAAI,KAAAL,IAAuC,QAArBE,EAAIF,EAAEM,uBAAe,IAAAJ,GAAjBA,EAAAG,KAAAL,IAA2C,QAAtBG,EAAIH,EAAEO,wBAAgB,IAAAJ,GAAlBA,EAAAE,KAAAL,KAGhE,CAGO,SAASQ,EAAUV,EAAMW,GAsB5B,MAAO,CArBQA,EAAQC,IAAKC,IAAS,IAADC,EAAAC,EAAAC,EAChC,MAAMC,EAAmC,QAAlCH,EAAwB,QAAxBC,EAAgB,QAAhBC,EAAGH,EAAIK,iBAAS,IAAAF,OAAA,EAAbA,EAAeG,cAAM,IAAAJ,EAAAA,EAAIF,EAAIO,UAAE,IAAAN,EAAAA,EAAI,GAC7C,MAAoB,kBAANG,EAAiBA,EAAII,OAAOJ,QAGjCjB,EAAKY,IAAKU,GACnBX,EAAQC,IAAKC,IAAS,IAADU,EAAAC,EAAAC,EAAAC,EAEjB,MAAMC,EAA0B,QAAtBJ,EAAGD,EAAIM,uBAAe,IAAAL,OAAA,EAAnBA,EAAAhB,KAAAe,GAAwBO,KAAMC,GAAMA,EAAEC,OAAOX,KAAOP,EAAIO,IACrE,GAAIO,GAAiC,oBAAlBA,EAAKK,SACpB,OAAOL,EAAKK,WAGhB,GAA4B,oBAAjBV,EAAIU,SACX,OAAOV,EAAIU,SAASnB,EAAIO,IAE5B,MAAMa,EAAmB,QAAhBT,EAAGX,EAAIK,iBAAS,IAAAM,OAAA,EAAbA,EAAeU,WAC3B,OAAOD,EAAMA,EAAIX,EAAIa,UAA2C,QAAlCV,EAAe,QAAfC,EAAGJ,EAAIa,gBAAQ,IAAAT,OAAA,EAAZA,EAAeb,EAAIuB,oBAAY,IAAAX,EAAAA,EAAI,MAKhF,CAEO,SAASY,EAAkB9C,GAAmB,IAAD+C,EAAAC,EAAA,IAAXC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7C,MAAMG,GAAyB,QAAdN,EAACE,EAAKI,gBAAQ,IAAAN,EAAAA,EAAI,gBAAkB,QAC/C5C,EAAkB,QAAb6C,EAAGC,EAAK9C,aAAK,IAAA6C,EAAAA,EAAI,MAEtB5B,EAAUrB,EAAkBC,GAE5BsD,EAAMnC,EADCjB,EAAQF,EAAOG,GACAiB,GAEtBmC,EAAKC,EAAAA,GAAWC,aAAaH,GAC7BI,EAAKF,EAAAA,GAAWG,WACtBH,EAAAA,GAAWI,kBAAkBF,EAAIH,EAAI,QAGrC,MAAMM,EAAYP,EAAI,GAAGjC,IAAI,CAACyC,EAAGC,IAC7BC,KAAKC,OAAOX,EAAIjC,IAAKU,IAAG,IAAAmC,EAAA,OAAKpC,OAAgB,QAAVoC,EAAI,OAAHnC,QAAG,IAAHA,OAAG,EAAHA,EAAMgC,UAAG,IAAAG,EAAAA,EAAI,IAAIf,UAAW,GAEpEI,EAAG,SAAWM,EAAUxC,IAAK8C,IAAG,CAAQA,SAExCX,EAAAA,GAAeE,EAAIL,EACvB,CAEA,MAAMe,EAAeA,CAACC,EAAKC,KACvB,OAAQA,GACJ,IAAK,SACD,OAAOC,EAAAA,EAAAA,IAASF,GAAO,GAAIG,EAAAA,EAAAA,IAAaH,GAAO,EACnD,IAAK,OACD,OAAOA,GAAMI,EAAAA,EAAAA,IAAUJ,GAAO,GAClC,IAAK,SACD,OAAOA,EACX,QACI,MAAO,KA8BbK,EAAe,CACjB,CACIC,YAAa,WACbC,iBAAkB,gBAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,UACbC,iBAAkB,YAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,QACbC,iBAAkB,mBAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,cACbC,iBAAkB,UAClBC,iBAAkB,OAClBC,SAAU,GAEd,CACIH,YAAa,aACbC,iBAAkB,SAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,aACbC,iBAAkB,UAClBC,iBAAkB,OAClBC,SAAU,GAEd,CACIH,YAAa,YACbC,iBAAkB,WAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,aACbC,iBAAkB,YAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,WACbC,iBAAkB,eAClBC,iBAAkB,SAClBC,SAAU,GAEd,CACIH,YAAa,aACbC,iBAAkB,iBAClBC,iBAAkB,SAClBC,SAAU,KAWZC,GAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAACC,SAAS,UACtCC,GAAcH,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,CAACF,SAAS,UA2avC,EAza8BG,IAAgC,IAA/B,UAAEC,EAAS,WAAEC,GAAYF,EAEpD,MAAOG,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCtE,EAASuE,IAAcD,EAAAA,EAAAA,UAAShB,IAChCkB,EAASC,IAAcH,EAAAA,EAAAA,UAAS,CAAC,IACjCI,EAAcC,IAAmBL,EAAAA,EAAAA,UAASF,GAE3CQ,EADcC,OAAOC,KAAKN,GAASzC,OACT,EAAK2C,EAAeN,GAC7CW,EAAmBC,IAAwBV,EAAAA,EAAAA,UAAS,CAAC,IACrDW,EAASC,IAAcZ,EAAAA,EAAAA,UAAS,CACnCE,SAAS,EACTW,cAAc,KAEXC,EAAYC,IAAiBf,EAAAA,EAAAA,UAAS,CACzCgB,UAAUC,EAAAA,EAAAA,MACVC,QAAQD,EAAAA,EAAAA,MACRE,QAAQ,KAGZC,EAAAA,EAAAA,WAAU,KACNrB,EAAa,KAEbsB,EAAAA,EAAAA,GAAU,CACNC,QAAQ,sFAADC,OAEIT,EAAWE,SAAQ,0BAAAO,OACrBT,EAAWI,QACpBtB,YAAWC,eACZ2B,KAAKC,IACJ,GAAQ,OAAJA,QAAI,IAAJA,GAAAA,EAAMC,QAAS,CACf,MAAMC,GAAgBC,EAAAA,EAAAA,IAAY,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMA,MAAM9F,IAAIU,IAC1C,MAAMwF,EAAa,OAAHxF,QAAG,IAAHA,GAAAA,EAAKwF,SAAUZ,EAAAA,EAAAA,IAAa,OAAH5E,QAAG,IAAHA,OAAG,EAAHA,EAAKwF,SAAW,GACnDC,EAAa,OAAHzF,QAAG,IAAHA,GAAAA,EAAKyF,SAAUb,EAAAA,EAAAA,IAAa,OAAH5E,QAAG,IAAHA,OAAG,EAAHA,EAAKyF,SAAW,GAEzD,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO1F,GAAG,IACNwF,UAASC,UACTE,UAAYH,GAAWC,GACjBG,EAAAA,EAAAA,IAAiBJ,EAASC,GAC1B,GACNI,cAAcrD,EAAAA,EAAAA,KAASsD,EAAAA,EAAAA,IAAc,OAAH9F,QAAG,IAAHA,OAAG,EAAHA,EAAK+F,SAAa,OAAH/F,QAAG,IAAHA,OAAG,EAAHA,EAAKgG,aAG9DtC,EAAa4B,EACjB,MACI5B,EAAa,MAElBuC,MAAMC,GAAKC,QAAQC,IAAIF,KAE3B,CAACzB,EAAWK,SAEf,MAAMuB,GAAYC,EAAAA,EAAAA,SAAQ,IACC,IAAIjH,GAGLC,IAAImB,IAAM,IAAA8F,EAAA,OAAAb,EAAAA,EAAAA,GAAA,CAC5B7F,OAAc,OAANY,QAAM,IAANA,GAAmB,QAAb8F,EAAN9F,EAAQmC,mBAAW,IAAA2D,OAAb,EAANA,EAAqBC,QAAQ,KAAM,KAC3C1F,YAAmB,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQoC,iBACrB4D,UAAU,EACVC,MAAMC,EAAAA,EAAAA,IAAoB,OAANlG,QAAM,IAANA,OAAM,EAANA,EAAQoC,iBAAkB,mBAAoB8D,EAAAA,EAAAA,IAAoB,OAANlG,QAAM,IAANA,OAAM,EAANA,EAAQoC,iBAAkB,aAAe,IAAM,IAE/H+D,cAAexC,EAAwB,OAAN3D,QAAM,IAANA,OAAM,EAANA,EAAQmC,aAAewB,EAAwB,OAAN3D,QAAM,IAANA,OAAM,EAANA,EAAQmC,aAAe,GACjGiE,eAAgBC,IAAA,IAAC,KAAEzG,GAAMyG,EAAA,OACrB7D,EAAAA,EAAAA,KAAA,OAAK8D,UAAU,4BAA2BC,SACrC3G,EAAKK,YAAa+B,EAAAA,EAAAA,IAAapC,EAAKK,YAAc,MAG3DuG,KAAMC,IAAA,IAAC,KAAE7G,GAAM6G,EAAA,OACXjE,EAAAA,EAAAA,KAAA,KAAG8D,UAAS,kBAAoBC,SAC3B3E,EAAahC,EAAKK,WAAkB,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQqC,sBAxK3CP,KACZ,OAAQA,GACJ,IAAK,SACD,MAAO,CACH4E,cAAe,QACfC,SAAU,WAElB,IAAK,OAIL,IAAK,SAMD,MAAO,CACHD,cAAe,QAGvB,QACI,MAAO,CAAC,IAqJLE,CAAa,OAAN5G,QAAM,IAANA,OAAM,EAANA,EAAQqC,qBAIvB,CAACzD,EAAS+E,KAEbW,EAAAA,EAAAA,WAAU,KACNuC,KACD,CAACzD,IAEJ,MAAM5F,GAAQsJ,EAAAA,EAAAA,IAAsB,CAChClI,QAASgH,EACTjB,KAAMnB,GAAY,GAClBuD,sBAAsB,EACtBC,gBAAgB,EAChBC,oBAAoB,EACpBC,oBAAoB,EACpBC,sBAAsB,EACtBC,yBAAyB,EACzBC,qBAAqB,EACrBC,qBAAqB,EACrBC,kBAAkB,EAClBC,oBAAoB,EACpBC,aAAc,CACVC,QAAS,UACTC,WAAY,CAAEC,UAAW,EAAGC,SAAU,MAE1CC,+BAAgC,CAAEC,MAAO,WACzCC,uBAAwB,CAAEC,GAAI,CAAEC,UAAW,QAASC,UAAW,SAC/DC,cAAe,CACXH,GAAI,CACAI,QAAS,CACLC,YAAa,SAIzBC,sBAAuB,CACnBN,GAAI,CACAO,WAAY,UAEhBlC,UAAW,WAEfmC,sBAAuB,CACnBnC,UAAW,eAEfoC,8BAA+BC,IAAA,IAAC,MAAEnL,GAAOmL,EAAA,OACrCC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAZ,GAAI,CACAa,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,MAAO,QACT1C,SAAA,EAEFqC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAZ,GAAI,CACAa,QAAS,OACTI,IAAK,MACLC,QAAS,MACTJ,SAAU,QACZxC,SAAA,EAEFqC,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,qBAAoBC,SAAA,EAC/B/D,EAAAA,EAAAA,KAAA,SAAA+D,SAAO,cACP/D,EAAAA,EAAAA,KAAA,SACI4G,KAAK,OACLC,MAAOrF,EAAWE,SAClBoF,SAAU7D,GAAKxB,EAAcsF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAErF,SAAUuB,EAAE+D,OAAOH,SAClE/C,UAAU,4BAGlBsC,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,qBAAoBC,SAAA,EAC/B/D,EAAAA,EAAAA,KAAA,SAAA+D,SAAO,YACP/D,EAAAA,EAAAA,KAAA,SACI4G,KAAK,OACLC,MAAOrF,EAAWI,OAClBkF,SAAU7D,GAAKxB,EAAcsF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAEnF,OAAQqB,EAAE+D,OAAOH,SAChE/C,UAAU,+BAItBsC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAZ,GAAI,CACAa,QAAS,OACTI,IAAK,MACLO,WAAY,QACZN,QAAS,MACTJ,SAAU,QACZxC,SAAA,EAEF/D,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,CAACC,MAAM,SAAQpD,UACnB/D,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CACPC,QAASA,IAAM5F,EAAcsF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAElF,QAASkF,EAAIlF,UAC5D4B,KAAK,QAAOM,UAEZ/D,EAAAA,EAAAA,KAACsH,EAAAA,EAAM,CAAC/B,MAAM,iBAgBtBvF,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,CAACC,MAAM,qCAAoCpD,UAC/C/D,EAAAA,EAAAA,KAAA,QAAA+D,UACI/D,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CACP3D,KAAK,QACL8D,SAA8C,IAApCvM,EAAMM,cAAcG,KAAK0C,OACnCkJ,QAASA,IAAMvJ,EAAkB9C,EAAO,CAAEG,MAAO,cAAekD,SAAU,iBAAkB0F,UAE5F/D,EAAAA,EAAAA,KAACwH,EAAAA,EAAY,CAACjC,MAAM,mBAIhCvF,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,CAACC,MAAM,cAAapD,UACxB/D,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CACPC,QAASA,IAAM/F,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAExF,cAAc,KAC1DkC,KAAK,QAAOM,UAEZ/D,EAAAA,EAAAA,KAACyH,EAAAA,EAAgB,CAAClC,MAAM,iBAGhCvF,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,CAACC,MAAM,UAASpD,UACpB/D,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CACPC,QAASA,IAAM/F,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAEnG,SAAS,KACrD6C,KAAK,QAAOM,UAEZ/D,EAAAA,EAAAA,KAAC0H,EAAAA,EAAS,CAACnC,MAAM,yBAQnCoC,GAAsBtE,EAAAA,EAAAA,SAAQ,IAAMrI,EAAO,CAACA,EAAOmG,EAAmBH,IAEtE4G,EAAqBA,CAACpK,EAAQqJ,KAChChG,EAAWgH,IAAWpF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfoF,GAAW,IACd,CAACrK,GAASqJ,MAIZxC,EAAeA,KACjB,IAAIyD,EAAW,IAAItH,GACnB,IAAK,MAAMhD,KAAUpB,EACjB,GAAIwE,EAAQpD,EAAOoC,kBACf,GAA8C,UAA1CgB,EAAQpD,EAAOoC,kBAAkBgH,KAAkB,CACnD,MAAM,IAAEmB,EAAG,IAAE9I,GAAQ2B,EAAQpD,EAAOoC,kBACpCkI,EAAWA,EAASpM,OAAOsM,IACvB,MAAMnB,EAAQmB,EAAKxK,EAAOoC,kBAC1B,YAAgBxB,IAAR2J,GAAqBlB,GAASkB,UAAiB3J,IAARa,GAAqB4H,GAAS5H,IAErF,MAAO,GAA8C,SAA1C2B,EAAQpD,EAAOoC,kBAAkBgH,KAAiB,CACzD,MAAM,MAAEqB,EAAK,IAAEC,GAAQtH,EAAQpD,EAAOoC,kBAAkBiH,MACxDiB,EAAWA,EAASpM,OAAOsM,IACvB,MAAMG,EAAY,IAAIC,KAAKJ,EAAKxK,EAAOoC,mBACvC,YAAkBxB,IAAV6J,GAAuBE,GAAa,IAAIC,KAAKH,WAAoB7J,IAAR8J,GAAqBC,GAAa,IAAIC,KAAKF,KAEpH,MAAO,GAAIG,MAAMC,QAAQ1H,EAAQpD,EAAOoC,mBAAoB,CAAC,IAAD2I,EACxDT,GAA2C,QAAhCS,EAAA3H,EAAQpD,EAAOoC,yBAAiB,IAAA2I,OAAA,EAAhCA,EAAkCpK,QAAS,EAChD2J,EAASpM,OAAOsM,GACdpH,EAAQpD,EAAOoC,kBAAkB4I,UAC7BC,EAAAA,EAAAA,IAAeT,EAAKxK,EAAOoC,qBAE/BkI,CACZ,CAGR/G,EAAgB+G,IAGdY,EAAgBlL,IAClB,MAAM,iBAAEoC,EAAgB,YAAED,EAAW,iBAAEE,GAAqBrC,EACxB,IAADmL,EAAAC,EAAAC,EAAAC,EAmBKC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAnBxC,GAAyB,WAArBvJ,EACA,OACIuG,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,sCAAqCC,SAAA,EAChD/D,EAAAA,EAAAA,KAAA,SACIqJ,YAAY,MACZzC,KAAK,SACL9C,UAAU,iCACV+C,MAAqC,QAAhC8B,EAA2B,QAA3BC,EAAEhI,EAAQhB,UAAiB,IAAAgJ,OAAA,EAAzBA,EAA2Bb,WAAG,IAAAY,EAAAA,EAAI,GACzC7B,SAAW7D,GAAM2E,EAAmBhI,GAAgB6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAImE,KAAM,SAAYhG,EAAQhB,IAAiB,IAAEmI,IAAK9E,EAAE+D,OAAOH,MAAQyC,WAAWrG,EAAE+D,OAAOH,YAASzI,QAE5J4B,EAAAA,EAAAA,KAAA,SACIqJ,YAAY,MACZzC,KAAK,SACL9C,UAAU,iCACV+C,MAAqC,QAAhCgC,EAA2B,QAA3BC,EAAElI,EAAQhB,UAAiB,IAAAkJ,OAAA,EAAzBA,EAA2B7J,WAAG,IAAA4J,EAAAA,EAAI,GACzC/B,SAAW7D,GAAM2E,EAAmBhI,GAAgB6C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAImE,KAAM,SAAYhG,EAAQhB,IAAiB,IAAEX,IAAKgE,EAAE+D,OAAOH,MAAQyC,WAAWrG,EAAE+D,OAAOH,YAASzI,UAIjK,GAAyB,SAArByB,EACP,OACIuG,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,sCAAqCC,SAAA,EAChD/D,EAAAA,EAAAA,KAAA,SACIqJ,YAAY,aACZzC,KAAK,OACL9C,UAAU,iCACV+C,MAA8C,QAAzCkC,EAA2B,QAA3BC,EAAEpI,EAAQhB,UAAiB,IAAAoJ,GAAO,QAAPC,EAAzBD,EAA2BnC,aAAK,IAAAoC,OAAP,EAAzBA,EAAkChB,aAAK,IAAAc,EAAAA,EAAI,GAClDjC,SAAW7D,IAAC,IAAAsG,EAAA,OAAK3B,EAAmBhI,EAAkB,CAAEgH,KAAM,OAAQC,OAAKpE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAgC,QAAhC8G,EAAO3I,EAAQhB,UAAiB,IAAA2J,OAAA,EAAzBA,EAA2B1C,OAAK,IAAEoB,MAAOhF,EAAE+D,OAAOH,YAASzI,UAEjJ4B,EAAAA,EAAAA,KAAA,SACIqJ,YAAY,WACZzC,KAAK,OACL9C,UAAU,iCACV+C,MAA4C,QAAvCqC,EAA2B,QAA3BC,EAAEvI,EAAQhB,UAAiB,IAAAuJ,GAAO,QAAPC,EAAzBD,EAA2BtC,aAAK,IAAAuC,OAAP,EAAzBA,EAAkClB,WAAG,IAAAgB,EAAAA,EAAI,GAChDpC,SAAW7D,IAAC,IAAAuG,EAAA,OAAK5B,EAAmBhI,EAAkB,CAAEgH,KAAM,OAAQC,OAAKpE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAgC,QAAhC+G,EAAO5I,EAAQhB,UAAiB,IAAA4J,OAAA,EAAzBA,EAA2B3C,OAAK,IAAEqB,IAAKjF,EAAE+D,OAAOH,YAASzI,YAIpJ,GAAyB,WAArByB,EAA+B,CACtC,MAAM4J,EAAiB,IAAI,IAAIC,IAAIlJ,EAAUnE,IAAI2L,IAAI,IAAA2B,EAAAC,EAAA,OAA0B,QAA1BD,EAAI3B,EAAKpI,UAAiB,IAAA+J,GAAe,QAAfC,EAAtBD,EAAwBE,qBAAa,IAAAD,OAAf,EAAtBA,EAAuCE,WAAUC,OAC1G,OACI/J,EAAAA,EAAAA,KAACgK,EAAAA,EAAY,CACTC,UAAQ,EACRpN,GAAE,GAAAoF,OAAKrC,EAAgB,WACvBsK,QAAST,EACTU,sBAAoB,EACpBC,eAAgBC,GAAUA,EAC1BxD,MAAOjG,EAAQhB,IAAqB,GACpCkH,SAAUA,CAACwD,EAAOC,IAAa3C,EAAmBhI,EAAkB2K,GACpEC,aAAcA,CAACC,EAAOJ,EAAMK,KAAA,IAAE,SAAEC,GAAUD,EAAA,OACtCtE,EAAAA,EAAAA,MAAA,MAAA3D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQgI,GAAK,IAAA1G,SAAA,EACT/D,EAAAA,EAAAA,KAAC4K,EAAAA,EAAQ,CACL7K,KAAMA,EACNI,YAAaA,EACb0K,MAAO,CAAEC,YAAa,GACtBC,QAASJ,IAEZN,OAGTW,qBAAsBA,CAACC,EAAK5L,IAAQ4L,IAAQ5L,EAC5C6L,YAAcC,IACVnL,EAAAA,EAAAA,KAACoL,EAAAA,GAAS3I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF0I,GAAM,IACVE,MAAkB,OAAX1L,QAAW,IAAXA,OAAW,EAAXA,EAAa4D,QAAQ,KAAM,KAClC8F,YAAW,UAAApH,OAAuB,OAAXtC,QAAW,IAAXA,OAAW,EAAXA,EAAa4D,QAAQ,KAAM,UAKtE,GAGJ,OACI6C,EAAAA,EAAAA,MAAAkF,EAAAA,SAAA,CAAAvH,SAAA,EACI/D,EAAAA,EAAAA,KAACuL,EAAAA,GAAkB,CAACvQ,MAAO2M,KAE3BvB,EAAAA,EAAAA,MAACoF,EAAAA,EAAM,CACHC,KAAMpK,EAAQT,QACd8K,QAASA,IAAMpK,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAEnG,SAAS,KACrD+K,WAAS,EAACC,SAAS,KAAI7H,SAAA,EAEvB/D,EAAAA,EAAAA,KAAC6L,EAAAA,EAAW,CAAA9H,UACRqC,EAAAA,EAAAA,MAAA,MAAItC,UAAU,sCAAqCC,SAAA,CAAC,WAEhD/D,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,CAACC,MAAM,gBAAepD,UAC1B/D,EAAAA,EAAAA,KAACoH,EAAAA,EAAU,CACP3D,KAAK,QACL4D,QAASA,IAAMxG,EAAW,CAAC,GAAGkD,UAE9B/D,EAAAA,EAAAA,KAAC8L,EAAAA,EAAY,cAK7B9L,EAAAA,EAAAA,KAAC+L,EAAAA,EAAa,CAAAhI,UAEVqC,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,oBAAoB+G,MAAO,CAAEnF,UAAW,OAAQsG,SAAU,QAASjI,SAAA,CAC7E3H,EAAQC,IAAI,CAACmB,EAAQyO,KAAE,IAAAC,EAAA,OACpB9F,EAAAA,EAAAA,MAAA,OAActC,UAAU,iCAAgCC,SAAA,EACpD/D,EAAAA,EAAAA,KAAA,SAAO8D,UAAU,YAAWC,SAAQ,OAANvG,QAAM,IAANA,GAAmB,QAAb0O,EAAN1O,EAAQmC,mBAAW,IAAAuM,OAAb,EAANA,EAAqB3I,QAAQ,KAAM,OAChEmF,EAAalL,KAFRyO,MAKdjM,EAAAA,EAAAA,KAAA,eAIRA,EAAAA,EAAAA,KAACmM,EAAAA,EAAa,CAAApI,UACV/D,EAAAA,EAAAA,KAACoM,EAAAA,EAAM,CACH/E,QAASA,IAAM/F,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAEnG,SAAS,KAAUmD,SAClE,gBAMTqC,EAAAA,EAAAA,MAACoF,EAAAA,EAAM,CACHC,KAAMpK,EAAQE,aACdmK,QAASA,IAAMpK,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAExF,cAAc,KAC1DoK,WAAS,EAACC,SAAS,KAAI7H,SAAA,EAEvB/D,EAAAA,EAAAA,KAAC6L,EAAAA,EAAW,CAAA9H,SAAC,kBACb/D,EAAAA,EAAAA,KAAC+L,EAAAA,EAAa,CAAAhI,UACV/D,EAAAA,EAAAA,KAAA,OAAK8D,UAAU,MAAKC,SACf,IAAI3H,GAASV,OAAO8B,GACW,WAA5BA,EAAOqC,kBAERxD,IAAI,CAACgQ,EAAGC,KAAC,IAAAC,EAAAC,EAAA,OACRpG,EAAAA,EAAAA,MAAA,OAAKtC,UAAU,eAAcC,SAAA,EACzB/D,EAAAA,EAAAA,KAAA,SAAA+D,SAAS,OAADsI,QAAC,IAADA,GAAc,QAAbE,EAADF,EAAG1M,mBAAW,IAAA4M,OAAb,EAADA,EAAgBhJ,QAAQ,KAAM,QACtCvD,EAAAA,EAAAA,KAAA,UACI8D,UAAU,WACV+C,MAAwC,QAAnC2F,EAAErL,EAAmB,OAADkL,QAAC,IAADA,OAAC,EAADA,EAAG1M,oBAAY,IAAA6M,EAAAA,EAAI,GAC5C1F,SAAU7D,GAAK7B,EAAqB2F,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAE,CAACsF,EAAE1M,aAAcsD,EAAE+D,OAAOH,SAAU9C,SAGtF,CACI,CAAEsH,MAAO,qBAAsBxE,MAAO,IAKtC,CAAEwE,MAAO,OAAQxE,MAAO,QAGxB,CAAEwE,MAAO,MAAOxE,MAAO,QAEzBxK,IAAI,CAACgQ,EAAGC,KACNtM,EAAAA,EAAAA,KAAA,UAAQ6G,MAAOwF,EAAExF,MAAM9C,SAAUsI,EAAEhB,OAANiB,QApBVA,UA4B/CtM,EAAAA,EAAAA,KAACmM,EAAAA,EAAa,CAAApI,UACV/D,EAAAA,EAAAA,KAACoM,EAAAA,EAAM,CACH/E,QAASA,IAAM/F,EAAWyF,IAAGtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAG,IAAExF,cAAc,KAAUwC,SACvE,kB","sources":["Pages/Reports/CRM/closingStockReport2.jsx"],"sourcesContent":["import { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\r\nimport { DaysBetweenCount, filterableText, ISOString, LocalDate, NumberFormat, stringCompare, Subraction, toArray, toNumber } from '../../../Components/functions';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Autocomplete, IconButton, Tooltip, TextField, Checkbox, Dialog, DialogContent, DialogTitle, DialogActions, Button, Box } from '@mui/material';\r\nimport { CheckBox, CheckBoxOutlineBlank, FilterAlt, FilterAltOff, FileDownload, SettingsOutlined, Search } from '@mui/icons-material';\r\nimport { mkConfig, generateCsv, download } from 'export-to-csv';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Gets only the columns currently visible in the table, in the shown order\r\nexport function getVisibleColumns(table) {\r\n    return table.getVisibleLeafColumns();\r\n}\r\n\r\n// Choose which rows to export: 'currentPage' (after pagination) or 'all' (before pagination)\r\nexport function getRows(table, scope) {\r\n    const rm = scope === 'currentPage' ? table.getRowModel() : table.getPrePaginationRowModel();\r\n\r\n    // If grouping is enabled, skip grouped/aggregated/placeholder rows to keep leaf rows only\r\n    const rows = (rm.flatRows ?? rm.rows).filter(\r\n        (r) => !(r.getIsGrouped?.() || r.getIsAggregated?.() || r.getIsPlaceholder?.())\r\n    );\r\n    return rows;\r\n}\r\n\r\n// Convert rows/columns to a 2D array (headers + data)\r\nexport function rowsToAoA(rows, columns) {\r\n    const header = columns.map((col) => {\r\n        const h = col.columnDef?.header ?? col.id ?? '';\r\n        return typeof h === 'string' ? h : String(h);\r\n    });\r\n\r\n    const data = rows.map((row) =>\r\n        columns.map((col) => {\r\n            // Try visible cell value first (respects accessor & computed values)\r\n            const cell = row.getVisibleCells?.().find((c) => c.column.id === col.id);\r\n            if (cell && typeof cell.getValue === 'function') {\r\n                return cell.getValue();\r\n            }\r\n            // Fallbacks\r\n            if (typeof row.getValue === 'function') {\r\n                return row.getValue(col.id);\r\n            }\r\n            const acc = col.columnDef?.accessorFn;\r\n            return acc ? acc(row.original) : row.original?.[col.accessorKey] ?? '';\r\n        })\r\n    );\r\n\r\n    return [header, ...data];\r\n}\r\n\r\nexport function exportTableToXlsx(table, opts = {}) {\r\n    const filename = (opts.filename ?? 'table_export') + '.xlsx';\r\n    const scope = opts.scope ?? 'all';\r\n\r\n    const columns = getVisibleColumns(table);\r\n    const rows = getRows(table, scope);\r\n    const aoa = rowsToAoA(rows, columns);\r\n\r\n    const ws = XLSX.utils.aoa_to_sheet(aoa);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Data');\r\n\r\n    // Simple auto-width for columns\r\n    const colWidths = aoa[0].map((_, ci) =>\r\n        Math.max(...aoa.map((row) => String(row?.[ci] ?? '').length)) + 2\r\n    );\r\n    ws['!cols'] = colWidths.map((wch) => ({ wch }));\r\n\r\n    XLSX.writeFile(wb, filename);\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return toNumber(val) > 0 ? NumberFormat(val) : 0;\r\n        case 'date':\r\n            return val ? LocalDate(val) : '';\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst getFun = (dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return {\r\n                filterVariant: 'range',\r\n                filterFn: 'between',\r\n            }\r\n        case 'date':\r\n            return {\r\n                filterVariant: 'text',\r\n            };\r\n        case 'string':\r\n            // const distinctValues = [];\r\n            // dataArray?.forEach(item => (item[key] && (distinctValues.findIndex(o => o?.value === item[key]?.toLocaleLowerCase()) === -1))\r\n            //     ? distinctValues.push({ label: String(item[key]), value: String(item[key]).toLocaleLowerCase() })\r\n            //     : null\r\n            // )\r\n            return {\r\n                filterVariant: 'text',\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst reportColumn = [\r\n    {\r\n        Column_Name: 'Retailer',\r\n        accessColumnName: 'Retailer_Name',\r\n        Column_Data_Type: 'string',\r\n        Order_By: 1,\r\n    },\r\n    {\r\n        Column_Name: 'Product',\r\n        accessColumnName: 'Item_Name',\r\n        Column_Data_Type: 'string',\r\n        Order_By: 2,\r\n    },\r\n    {\r\n        Column_Name: 'Worth',\r\n        accessColumnName: 'StockValueOfItem',\r\n        Column_Data_Type: 'number',\r\n        Order_By: 3,\r\n    },\r\n    {\r\n        Column_Name: 'Update Date',\r\n        accessColumnName: 'ST_Date',\r\n        Column_Data_Type: 'date',\r\n        Order_By: 4,\r\n    },\r\n    {\r\n        Column_Name: 'Update Qty',\r\n        accessColumnName: 'ST_Qty',\r\n        Column_Data_Type: 'number',\r\n        Order_By: 6,\r\n    },\r\n    {\r\n        Column_Name: 'Entry Date',\r\n        accessColumnName: 'Do_Date',\r\n        Column_Data_Type: 'date',\r\n        Order_By: 5,\r\n    },\r\n    {\r\n        Column_Name: 'Entry Qty',\r\n        accessColumnName: 'Bill_Qty',\r\n        Column_Data_Type: 'number',\r\n        Order_By: 7,\r\n    },\r\n    {\r\n        Column_Name: 'Stock Days',\r\n        accessColumnName: 'stockDays',\r\n        Column_Data_Type: 'number',\r\n        Order_By: 8,\r\n    },\r\n    {\r\n        Column_Name: 'Sold Qty',\r\n        accessColumnName: 'soldQuantity',\r\n        Column_Data_Type: 'number',\r\n        Order_By: 9,\r\n    },\r\n    {\r\n        Column_Name: 'Closing By',\r\n        accessColumnName: 'ClosingStockBy',\r\n        Column_Data_Type: 'string',\r\n        Order_By: 10,\r\n    },\r\n    // {\r\n    //     Column_Name: 'Delivered By',\r\n    //     accessColumnName: 'DeliveredBy',\r\n    //     Column_Data_Type: 'string',\r\n    //     Order_By: 9,\r\n    //     isVisible: false\r\n    // },\r\n]\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst ClosingStockReportTwo = ({ loadingOn, loadingOff }) => {\r\n    // const [dispColmn, setDispColmn] = useState([]);\r\n    const [dataArray, setDataArray] = useState([]);\r\n    const [columns, setColumns] = useState(reportColumn);\r\n    const [filters, setFilters] = useState({});\r\n    const [filteredData, setFilteredData] = useState(dataArray);\r\n    const filterCount = Object.keys(filters).length;\r\n    const showData = (filterCount > 0) ? filteredData : dataArray;\r\n    const [aggregationValues, setAggregationValues] = useState({});\r\n    const [dialogs, setDialogs] = useState({\r\n        filters: false,\r\n        aggregations: false\r\n    });\r\n    const [apiFilters, setApiFilters] = useState({\r\n        Fromdate: ISOString(),\r\n        Todate: ISOString(),\r\n        search: false,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setDataArray([]);\r\n\r\n        fetchLink({\r\n            address: `\r\n            reports/customerClosingStock/itemWithRetailer?\r\n            Fromdate=${apiFilters.Fromdate}&\r\n            Todate=${apiFilters.Todate}`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data?.success) {\r\n                const calcStockDays = toArray(data?.data).map(row => {\r\n                    const Do_Date = row?.Do_Date ? ISOString(row?.Do_Date) : '';\r\n                    const ST_Date = row?.ST_Date ? ISOString(row?.ST_Date) : ''; \r\n\r\n                    return {\r\n                        ...row,\r\n                        Do_Date, ST_Date,\r\n                        stockDays: (Do_Date && ST_Date)\r\n                            ? DaysBetweenCount(Do_Date, ST_Date)\r\n                            : '',\r\n                        soldQuantity: toNumber(Subraction(row?.Bill_Qty, row?.ST_Qty)),\r\n                    }\r\n                });\r\n                setDataArray(calcStockDays)\r\n            } else {\r\n                setDataArray([]);\r\n            }\r\n        }).catch(e => console.log(e));\r\n\r\n    }, [apiFilters.search])\r\n\r\n    const dispColmn = useMemo(() => {\r\n        const displayColumns = [...columns]\r\n        // .sort((a, b) => (a.Order_By && b.Order_By) ? a.Order_By - b.Order_By : b.Order_By - a.Order_By)\r\n\r\n        return displayColumns.map(column => ({\r\n            header: column?.Column_Name?.replace(/_/g, ' '),\r\n            accessorKey: column?.accessColumnName,\r\n            sortable: true,\r\n            size: stringCompare(column?.accessColumnName, 'Retailer_Name') || stringCompare(column?.accessColumnName, 'Item_Name') ? 190 : 110,\r\n            // ...aggregations(column?.Column_Data_Type, column?.Column_Name),\r\n            aggregationFn: aggregationValues[column?.Column_Name] ? aggregationValues[column?.Column_Name] : '',\r\n            AggregatedCell: ({ cell }) => (\r\n                <div className='blue-text float-end w-100'>\r\n                    {cell.getValue() ? NumberFormat(cell.getValue()) : ''}\r\n                </div>\r\n            ),\r\n            Cell: ({ cell }) => (\r\n                <p className={`m-0 fa-11 w-100`}>\r\n                    {formatString(cell.getValue(), column?.Column_Data_Type)}\r\n                </p>\r\n            ),\r\n            ...getFun(column?.Column_Data_Type),\r\n        }))\r\n\r\n        // setDispColmn(muiColumns)\r\n    }, [columns, aggregationValues])\r\n\r\n    useEffect(() => {\r\n        applyFilters();\r\n    }, [filters]);\r\n\r\n    const table = useMaterialReactTable({\r\n        columns: dispColmn,\r\n        data: showData || [],\r\n        enableColumnResizing: true,\r\n        enableGrouping: true,\r\n        enableStickyHeader: true,\r\n        enableStickyFooter: true,\r\n        enableColumnOrdering: true,\r\n        enableKeyboardShortcuts: false,\r\n        enableColumnActions: false,\r\n        enableColumnFilters: false,\r\n        enableRowNumbers: false,\r\n        enableGlobalFilter: false,\r\n        initialState: {\r\n            density: 'compact',\r\n            pagination: { pageIndex: 0, pageSize: 100 },\r\n        },\r\n        muiToolbarAlertBannerChipProps: { color: 'primary' },\r\n        muiTableContainerProps: { sx: { maxHeight: '68dvh', minHeight: '46vh' } },\r\n        muiTableProps: {\r\n            sx: {\r\n                caption: {\r\n                    captionSide: 'top',\r\n                },\r\n            },\r\n        },\r\n        muiTableHeadCellProps: {\r\n            sx: {\r\n                fontWeight: 'normal',\r\n            },\r\n            className: ' border'\r\n        },\r\n        muiTableBodyCellProps: {\r\n            className: ' border-end'\r\n        },\r\n        renderTopToolbarCustomActions: ({ table }) => (\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    justifyContent: 'space-between',\r\n                    width: '100%',\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        gap: '8px',\r\n                        padding: '8px',\r\n                        flexWrap: 'wrap',\r\n                    }}\r\n                >\r\n                    <div className='d-flex flex-column'>\r\n                        <label>Fromdate</label>\r\n                        <input\r\n                            type='date'\r\n                            value={apiFilters.Fromdate}\r\n                            onChange={e => setApiFilters(pre => ({ ...pre, Fromdate: e.target.value }))}\r\n                            className='cus-inpt w-auto p-2'\r\n                        />\r\n                    </div>\r\n                    <div className='d-flex flex-column'>\r\n                        <label>Todate</label>\r\n                        <input\r\n                            type='date'\r\n                            value={apiFilters.Todate}\r\n                            onChange={e => setApiFilters(pre => ({ ...pre, Todate: e.target.value }))}\r\n                            className='cus-inpt w-auto p-2'\r\n                        />\r\n                    </div>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        gap: '8px',\r\n                        alignItems: 'start',\r\n                        padding: '8px',\r\n                        flexWrap: 'wrap',\r\n                    }}\r\n                >\r\n                    <Tooltip title='Search'>\r\n                        <IconButton\r\n                            onClick={() => setApiFilters(pre => ({ ...pre, search: !pre.search }))}\r\n                            size='small'\r\n                        >\r\n                            <Search color='primary' />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    {/* <Tooltip title='Excel Download'>\r\n                        <span>\r\n                            <IconButton\r\n                                disabled={table.getPrePaginationRowModel().rows.length === 0}\r\n                                onClick={() =>\r\n                                    handleExportRows(table.getPrePaginationRowModel().rows)\r\n                                }\r\n                                size='small'\r\n                            >\r\n                                <FileDownload color='primary' />\r\n                            </IconButton>\r\n                        </span>\r\n                    </Tooltip> */}\r\n                    <Tooltip title=\"Excel Download (Current page only)\">\r\n                        <span>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                disabled={table.getRowModel().rows.length === 0}\r\n                                onClick={() => exportTableToXlsx(table, { scope: 'currentPage', filename: 'my_data_page' })}\r\n                            >\r\n                                <FileDownload color=\"primary\" />\r\n                            </IconButton>\r\n                        </span>\r\n                    </Tooltip>\r\n                    <Tooltip title='Aggregation'>\r\n                        <IconButton\r\n                            onClick={() => setDialogs(pre => ({ ...pre, aggregations: true }))}\r\n                            size='small'\r\n                        >\r\n                            <SettingsOutlined color='primary' />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title='Filters'>\r\n                        <IconButton\r\n                            onClick={() => setDialogs(pre => ({ ...pre, filters: true }))}\r\n                            size='small'\r\n                        >\r\n                            <FilterAlt color='primary' />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n            </Box>\r\n        ),\r\n    })\r\n\r\n    const memoizedTableConfig = useMemo(() => table, [table, aggregationValues, showData]);\r\n\r\n    const handleFilterChange = (column, value) => {\r\n        setFilters(prevFilters => ({\r\n            ...prevFilters,\r\n            [column]: value,\r\n        }));\r\n    };\r\n\r\n    const applyFilters = () => {\r\n        let filtered = [...dataArray];\r\n        for (const column of columns) {\r\n            if (filters[column.accessColumnName]) {\r\n                if (filters[column.accessColumnName].type === 'range') {\r\n                    const { min, max } = filters[column.accessColumnName];\r\n                    filtered = filtered.filter(item => {\r\n                        const value = item[column.accessColumnName];\r\n                        return (min === undefined || value >= min) && (max === undefined || value <= max);\r\n                    });\r\n                } else if (filters[column.accessColumnName].type === 'date') {\r\n                    const { start, end } = filters[column.accessColumnName].value;\r\n                    filtered = filtered.filter(item => {\r\n                        const dateValue = new Date(item[column.accessColumnName]);\r\n                        return (start === undefined || dateValue >= new Date(start)) && (end === undefined || dateValue <= new Date(end));\r\n                    });\r\n                } else if (Array.isArray(filters[column.accessColumnName])) {\r\n                    filtered = filters[column.accessColumnName]?.length > 0\r\n                        ? filtered.filter(item =>\r\n                            filters[column.accessColumnName].includes(\r\n                                filterableText(item[column.accessColumnName])\r\n                            )\r\n                        ) : filtered\r\n                }\r\n            }\r\n        }\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const renderFilter = (column) => {\r\n        const { accessColumnName, Column_Name, Column_Data_Type } = column;\r\n        if (Column_Data_Type === 'number') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Min\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.min ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], min: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"Max\"\r\n                        type=\"number\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.max ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'range', ...filters[accessColumnName], max: e.target.value ? parseFloat(e.target.value) : undefined })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'date') {\r\n            return (\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <input\r\n                        placeholder=\"Start Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.start ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, start: e.target.value || undefined } })}\r\n                    />\r\n                    <input\r\n                        placeholder=\"End Date\"\r\n                        type=\"date\"\r\n                        className=\"bg-light border-0 m-1 p-1 w-50\"\r\n                        value={filters[accessColumnName]?.value?.end ?? ''}\r\n                        onChange={(e) => handleFilterChange(accessColumnName, { type: 'date', value: { ...filters[accessColumnName]?.value, end: e.target.value || undefined } })}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (Column_Data_Type === 'string') {\r\n            const distinctValues = [...new Set(dataArray.map(item => item[accessColumnName]?.toLowerCase()?.trim()))].sort();\r\n            return (\r\n                <Autocomplete\r\n                    multiple\r\n                    id={`${accessColumnName}-filter`}\r\n                    options={distinctValues}\r\n                    disableCloseOnSelect\r\n                    getOptionLabel={option => option}\r\n                    value={filters[accessColumnName] || []}\r\n                    onChange={(event, newValue) => handleFilterChange(accessColumnName, newValue)}\r\n                    renderOption={(props, option, { selected }) => (\r\n                        <li {...props}>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                        </li>\r\n                    )}\r\n                    isOptionEqualToValue={(opt, val) => opt === val}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label={Column_Name?.replace(/_/g, ' ')}\r\n                            placeholder={`Select ${Column_Name?.replace(/_/g, ' ')}`}\r\n                        />\r\n                    )}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MaterialReactTable table={memoizedTableConfig} />\r\n\r\n            <Dialog\r\n                open={dialogs.filters}\r\n                onClose={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    <h5 className=\"d-flex justify-content-between px-2\">\r\n                        Filters\r\n                        <Tooltip title='Clear Filters'>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={() => setFilters({})}\r\n                            >\r\n                                <FilterAltOff />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </h5>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div className=\"border rounded-3 \" style={{ maxHeight: '70vh', overflow: 'auto' }}>\r\n                        {columns.map((column, ke) => (\r\n                            <div key={ke} className=\"py-3 px-3 hov-bg border-bottom\">\r\n                                <label className='mt-2 mb-1'>{column?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                {renderFilter(column)}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, filters: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={dialogs.aggregations}\r\n                onClose={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Aggregations</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"row\" >\r\n                        {[...columns].filter(column => (\r\n                            column.Column_Data_Type === 'number'\r\n                            // || column.Column_Data_Type === 'string'\r\n                        )).map((o, i) => (\r\n                            <div className=\"col-md-6 p-2\" key={i}>\r\n                                <label>{o?.Column_Name?.replace(/_/g, ' ')}</label>\r\n                                <select\r\n                                    className='cus-inpt'\r\n                                    value={aggregationValues[o?.Column_Name] ?? ''}\r\n                                    onChange={e => setAggregationValues(pre => ({ ...pre, [o.Column_Name]: e.target.value }))}\r\n                                >\r\n                                    {\r\n                                        [\r\n                                            { label: 'Select Aggregation', value: '' },\r\n                                            // { label: 'count', value: 'count' },\r\n                                            // { label: 'extent', value: 'extent' },\r\n                                            // { label: 'max', value: 'max' },\r\n                                            // { label: 'min', value: 'min' },\r\n                                            { label: 'mean', value: 'mean' },\r\n                                            // { label: 'median', value: 'median' },\r\n                                            // { label: 'uniqueCount', value: 'uniqueCount' },\r\n                                            { label: 'sum', value: 'sum' },\r\n                                            // { label: 'unique', value: 'unique' },\r\n                                        ].map((o, i) => (\r\n                                            <option value={o.value} key={i}>{o.label}</option>\r\n                                        ))\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setDialogs(pre => ({ ...pre, aggregations: false }))}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ClosingStockReportTwo;"],"names":["getVisibleColumns","table","getVisibleLeafColumns","getRows","scope","_rm$flatRows","rm","getRowModel","getPrePaginationRowModel","flatRows","rows","filter","r","_r$getIsGrouped","_r$getIsAggregated","_r$getIsPlaceholder","getIsGrouped","call","getIsAggregated","getIsPlaceholder","rowsToAoA","columns","map","col","_ref","_col$columnDef$header","_col$columnDef","h","columnDef","header","id","String","row","_row$getVisibleCells","_col$columnDef2","_row$original$col$acc","_row$original","cell","getVisibleCells","find","c","column","getValue","acc","accessorFn","original","accessorKey","exportTableToXlsx","_opts$filename","_opts$scope","opts","arguments","length","undefined","filename","aoa","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","colWidths","_","ci","Math","max","_row$ci","wch","formatString","val","dataType","toNumber","NumberFormat","LocalDate","reportColumn","Column_Name","accessColumnName","Column_Data_Type","Order_By","icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref2","loadingOn","loadingOff","dataArray","setDataArray","useState","setColumns","filters","setFilters","filteredData","setFilteredData","showData","Object","keys","aggregationValues","setAggregationValues","dialogs","setDialogs","aggregations","apiFilters","setApiFilters","Fromdate","ISOString","Todate","search","useEffect","fetchLink","address","concat","then","data","success","calcStockDays","toArray","Do_Date","ST_Date","_objectSpread","stockDays","DaysBetweenCount","soldQuantity","Subraction","Bill_Qty","ST_Qty","catch","e","console","log","dispColmn","useMemo","_column$Column_Name","replace","sortable","size","stringCompare","aggregationFn","AggregatedCell","_ref3","className","children","Cell","_ref4","filterVariant","filterFn","getFun","applyFilters","useMaterialReactTable","enableColumnResizing","enableGrouping","enableStickyHeader","enableStickyFooter","enableColumnOrdering","enableKeyboardShortcuts","enableColumnActions","enableColumnFilters","enableRowNumbers","enableGlobalFilter","initialState","density","pagination","pageIndex","pageSize","muiToolbarAlertBannerChipProps","color","muiTableContainerProps","sx","maxHeight","minHeight","muiTableProps","caption","captionSide","muiTableHeadCellProps","fontWeight","muiTableBodyCellProps","renderTopToolbarCustomActions","_ref5","_jsxs","Box","display","flexWrap","justifyContent","width","gap","padding","type","value","onChange","pre","target","alignItems","Tooltip","title","IconButton","onClick","Search","disabled","FileDownload","SettingsOutlined","FilterAlt","memoizedTableConfig","handleFilterChange","prevFilters","filtered","min","item","start","end","dateValue","Date","Array","isArray","_filters$column$acces","includes","filterableText","renderFilter","_filters$accessColumn","_filters$accessColumn2","_filters$accessColumn3","_filters$accessColumn4","_filters$accessColumn5","_filters$accessColumn6","_filters$accessColumn7","_filters$accessColumn9","_filters$accessColumn10","_filters$accessColumn11","placeholder","parseFloat","_filters$accessColumn8","_filters$accessColumn12","distinctValues","Set","_item$accessColumnNam","_item$accessColumnNam2","toLowerCase","trim","sort","Autocomplete","multiple","options","disableCloseOnSelect","getOptionLabel","option","event","newValue","renderOption","props","_ref6","selected","Checkbox","style","marginRight","checked","isOptionEqualToValue","opt","renderInput","params","TextField","label","_Fragment","MaterialReactTable","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","FilterAltOff","DialogContent","overflow","ke","_column$Column_Name2","DialogActions","Button","o","i","_o$Column_Name","_aggregationValues$o$"],"sourceRoot":""}