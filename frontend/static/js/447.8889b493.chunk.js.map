{"version":3,"file":"static/js/447.8889b493.chunk.js","mappings":"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","sources":["Pages/Reports/barChartComp.jsx","Pages/Reports/chartReports.jsx","Components/tablecolumn.js","Pages/Dashboard/chartComp.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nconst TaskActivityChart = ({ startDate, endDate, taskActivity }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const labels = taskActivity.map(task => new Date(task.Work_Dt));\r\n      const data = taskActivity.map(task => task.Worked_Minutes);\r\n\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n\r\n      chartInstance.current = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            label: 'Worked Minutes',\r\n            data: data,\r\n            borderColor: 'blue',\r\n            backgroundColor: 'transparent',\r\n            pointBackgroundColor: 'blue',\r\n            pointRadius: 5,\r\n            pointHoverRadius: 7,\r\n          }]\r\n        },\r\n        options: {\r\n          scales: {\r\n            x: {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'day',\r\n                min: startDate,\r\n                max: endDate,\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: 'Date'\r\n              }\r\n            },\r\n            y: {\r\n              title: {\r\n                display: true,\r\n                text: 'Worked Minutes'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  let label = context.dataset.label || '';\r\n                  if (label) {\r\n                    label += ': ';\r\n                  }\r\n                  if (context.parsed.y !== null) {\r\n                    label += context.parsed.y + ' minutes';\r\n                  }\r\n                  const task = taskActivity[context.dataIndex];\r\n                  if (task) {\r\n                    label += ` (${task.Employee_Name}, Time: ${task.Start_Time}-${task.End_Time})`;\r\n                  }\r\n                  return label;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, [startDate, endDate, taskActivity]);\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default TaskActivityChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport PieChartComp from \"../Dashboard/chartComp\";\r\nimport LineChartComp from \"./barChartComp\";\r\nimport { Card, CardContent } from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent'\r\n\r\nconst ChartsReport = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const [empData, setEmpData] = useState([]);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [usersDropDown, setUsersDropdown] = useState([]);\r\n    const [filteredUser, setFilteredUser] = useState([]);\r\n    const [taskDropDown, setTaskDropDown] = useState([]);\r\n\r\n    const initialValueFilter = {\r\n        Emp_Id: parseData?.UserId,\r\n        date: new Date().toISOString().split('T')[0],\r\n        EmpGet: parseData?.Name,\r\n    }\r\n\r\n    const initialValueBarChart = {\r\n        Emp_Id: parseData?.UserId,\r\n        From: new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().split('T')[0],\r\n        To: new Date().toISOString().split('T')[0],\r\n        EmpGet: parseData?.Name,\r\n        Task_Id: '',\r\n        TaskGet: ''\r\n    }\r\n\r\n    const [filters, setFileters] = useState(initialValueFilter);\r\n    const [barChartFilter, setBarChartFilter] = useState(initialValueBarChart)\r\n\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work?Emp_Id=${filters.Emp_Id}&from=${filters.date}&to=${filters.date}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setEmpData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [filters?.Emp_Id, filters?.date])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/assignEmployee/user/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsersDropdown(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `taskManagement/task/assignEmployee/task/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskDropDown(data.data)\r\n            }\r\n            if (data?.data?.length > 0) {\r\n                setBarChartFilter(pre => ({ ...pre, Task_Id: data.data[0].Task_Id, TaskGet: data.data[0].Task_Name }))\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/task/work/barChart?Emp_Id=${barChartFilter?.Emp_Id}&From=${barChartFilter?.From}&To=${barChartFilter?.To}&Task_Id=${barChartFilter?.Task_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTaskData(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [barChartFilter.Emp_Id, barChartFilter.From, barChartFilter.To, barChartFilter.Task_Id]);\r\n\r\n    useEffect(() => {\r\n        setFilteredUser([])\r\n        fetchLink({\r\n            address: `taskManagement/task/workedUsers/dropDown?Task_Id=${barChartFilter.Task_Id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setFilteredUser(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [barChartFilter?.Task_Id])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <h5>User Work Report</h5>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\r\n                                onChange={(e) => setFileters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\r\n                                options={[\r\n                                    { value: '', label: 'All Employee' }, \r\n                                    ...usersDropDown.map(obj => ({ value: obj.UserId, label: obj.Name }))\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Employee Name\"} />\r\n                        </div>\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.date}\r\n                                onChange={e => setFileters({ ...filters, date: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {/* <PieChartEmpData TasksArray={empData} /> */}\r\n                    {/* <MuiPieChart TasksArray={empData} /> */}\r\n                    <PieChartComp TasksArray={empData} />\r\n                    {/* <ReChartPieChart data={empData} /> */}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"mt-3\">\r\n                <CardContent style={{ minHeight: 500 }}>\r\n                    <h5>Task Activity Report</h5>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: barChartFilter?.Task_Id, label: barChartFilter?.TaskGet }}\r\n                                onChange={(e) => setBarChartFilter({ ...barChartFilter, Task_Id: e.value, TaskGet: e.label })}\r\n                                options={[...taskDropDown.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Task Name\"} \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <Select\r\n                                value={{ value: barChartFilter?.Emp_Id, label: barChartFilter?.EmpGet }}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, Emp_Id: e.value, EmpGet: e.label })}\r\n                                options={[{ value: '', label: 'All Employee' }, ...filteredUser.map(obj => ({ value: obj?.Emp_Id, label: obj?.Name }))]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder={\"Employee Name\"} \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={barChartFilter.From}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, From: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                            <input\r\n                                type=\"date\"\r\n                                value={barChartFilter.To}\r\n                                onChange={e => setBarChartFilter({ ...barChartFilter, To: e.target.value })}\r\n                                className=\"cus-inpt bg-test\" style={{ backgroundColor: 'rgba(255, 255, 255, 0.322)' }}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <LineChartComp taskActivity={taskData} startDate={barChartFilter.From} endDate={barChartFilter.To} />\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChartsReport;\r\n","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import React, { useEffect, useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst PieChartComp = ({ TasksArray }) => {\r\n    const [chartData, setChartData] = useState(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n    const [totalTime, setTotalTime] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (TasksArray.length > 0) {\r\n            const totalDuration = TasksArray.reduce((acc, task) => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                return acc + (end - start);\r\n            }, 0);\r\n\r\n            const firstTaskStart = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[0].Start_Time);\r\n            const lastTaskEnd = new Date(new Date().toISOString().split('T')[0] + 'T' + TasksArray[TasksArray.length - 1].End_Time);\r\n            const totalTime = lastTaskEnd - firstTaskStart;\r\n            const freeTime = totalTime - totalDuration;\r\n\r\n            const totalSeconds = Math.floor(totalTime / 1000);\r\n            const hours = Math.floor(totalSeconds / 3600);\r\n            const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n            const seconds = totalSeconds % 60;\r\n            setTotalTime(`${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);\r\n\r\n            const taskData = TasksArray.map(task => {\r\n                const start = new Date(new Date().toISOString().split('T')[0] + 'T' + task.Start_Time);\r\n                const end = new Date(new Date().toISOString().split('T')[0] + 'T' + task.End_Time);\r\n                const duration = end - start;\r\n                return {\r\n                    label: `${task.Task_Name} (${task.Start_Time} - ${task.End_Time})`,\r\n                    duration,\r\n                    backgroundColor: getRandomColor()\r\n                };\r\n            });\r\n\r\n            const chartData = {\r\n                labels: taskData.map(task => task.label),\r\n                datasets: [{\r\n                    data: taskData.map(task => task.duration),\r\n                    backgroundColor: taskData.map(task => task.backgroundColor),\r\n                    borderColor: 'rgba(255, 255, 255, 1)',\r\n                    borderWidth: 1\r\n                }]\r\n            };\r\n\r\n            chartData.labels.push('Free Time');\r\n            chartData.datasets[0].data.push(freeTime);\r\n            chartData.datasets[0].backgroundColor.push('#ADD8E6');\r\n\r\n            setChartData(chartData);\r\n        }\r\n    }, [TasksArray]);\r\n\r\n    useEffect(() => {\r\n        if (chartData) {\r\n            if (chartInstance) {\r\n                chartInstance.destroy();\r\n            }\r\n\r\n            const ctx = document.getElementById('empWokHours');\r\n            const newChartInstance = new Chart(ctx, {\r\n                type: 'pie',\r\n                data: chartData,\r\n                options: {\r\n                    responsive: true,\r\n                    plugins: {\r\n                        tooltip: {\r\n                            callbacks: {\r\n                                label: function (context) {\r\n                                    // const label = context.label || '';\r\n                                    const value = context.parsed || 0;\r\n                                    const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                    const percentage = Math.round((value / total) * 100);\r\n                                    const minutes = Math.round(value / (1000 * 60));\r\n                                    return `${minutes} minutes (${percentage}%)`;\r\n                                }\r\n                            }\r\n                        },\r\n                        datalabels: {\r\n                            color: '#fff',\r\n                            formatter: (value, context) => {\r\n                                const label = context.chart.data.labels[context.dataIndex];\r\n                                const value1 = context.parsed || 0;\r\n                                const total = context.dataset.data.reduce((acc, curr) => acc + curr, 0);\r\n                                const percentage = Math.round((value1 / total) * 100);\r\n                                return `${label}: ${value} (${percentage}%)`;\r\n                            }\r\n                        }                        \r\n                    }\r\n                }\r\n            });\r\n\r\n            setChartInstance(newChartInstance);\r\n        }\r\n    }, [chartData]);\r\n\r\n    // for Dynamic background colors\r\n    const getRandomColor = () => {\r\n        const letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    return TasksArray.length > 0 ? (\r\n        <div className='d-flex flex-column align-items-center my-3' style={{ maxHeight: '500px' }}>\r\n            {totalTime && <p className='my-2'>Total Time: {totalTime}</p>}\r\n            <canvas id=\"empWokHours\" width=\"400\" height=\"100\"></canvas>\r\n        </div>\r\n    ) : (\r\n        <h5 className=\"text-center my-5\">No Data For PieChart!</h5>\r\n    )\r\n};\r\n\r\nexport default PieChartComp;\r\n"],"names":["_ref","startDate","endDate","taskActivity","chartRef","useRef","chartInstance","useEffect","current","ctx","getContext","labels","map","task","Date","Work_Dt","data","Worked_Minutes","destroy","Chart","type","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointRadius","pointHoverRadius","options","scales","x","time","unit","min","max","title","display","text","y","plugins","tooltip","callbacks","context","dataset","parsed","dataIndex","concat","Employee_Name","Start_Time","End_Time","_jsx","ref","ChartsReport","localData","localStorage","getItem","parseData","JSON","parse","empData","setEmpData","useState","taskData","setTaskData","usersDropDown","setUsersDropdown","filteredUser","setFilteredUser","taskDropDown","setTaskDropDown","initialValueFilter","Emp_Id","UserId","date","toISOString","split","EmpGet","Name","initialValueBarChart","From","setDate","getDate","To","Task_Id","TaskGet","filters","setFileters","barChartFilter","setBarChartFilter","fetchLink","address","then","success","catch","e","console","error","Company_id","_data$data","length","pre","_objectSpread","Task_Name","_jsxs","_Fragment","children","Card","CardContent","style","minHeight","className","Select","value","onChange","obj","styles","customSelectStyles","isSearchable","placeholder","target","PieChartComp","TasksArray","LineChartComp","customTableStyles","table","width","rows","headCells","color","fontSize","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","chartData","setChartData","setChartInstance","totalTime","setTotalTime","totalDuration","reduce","acc","start","firstTaskStart","freeTime","totalSeconds","Math","floor","hours","minutes","seconds","String","padStart","duration","getRandomColor","borderWidth","push","document","getElementById","newChartInstance","responsive","total","curr","percentage","round","datalabels","formatter","chart","value1","i","random","maxHeight","height"],"sourceRoot":""}