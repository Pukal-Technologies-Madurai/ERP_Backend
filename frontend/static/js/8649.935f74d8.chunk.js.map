{"version":3,"file":"static/js/8649.935f74d8.chunk.js","mappings":"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","sources":["Pages/Masters/AccountingGroup.jsx","Components/filterableTable2.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContentText,\r\n    MenuItem,\r\n    Select,\r\n    FormControl,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport { Button as MuiButton } from \"@mui/material/\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Delete, Edit, Search } from \"@mui/icons-material\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\n\r\nconst initialState = {\r\n    Group_Id: \"\",\r\n    Group_Name: \"\",\r\n    Alias_Name: \"\",\r\n    Parent_AC_id: \"\"\r\n};\r\n\r\nfunction AccountingGroup() {\r\n    const [reload, setReload] = useState(false);\r\n    // const [isLoading, setIsLoading] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [accountList, setAccountList] = useState([]);\r\n    const [filteredAccountList, setFilteredAccountList] = useState([]);\r\n    const [groupList, setGroupList] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n    const userId = user?.UserId;\r\n\r\n    useEffect(() => {\r\n        const fetchAccountGroups = async () => {\r\n            // setIsLoading(true);\r\n            try {\r\n                const data = await fetchLink({ address: `masters/accountGroup` });\r\n                if (data.success) {\r\n                    setAccountList(data.data);\r\n                    setFilteredAccountList(data.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load account groups\");\r\n            }\r\n        };\r\n\r\n        fetchAccountGroups();\r\n    }, [reload]);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchGroupDropdown = async () => {\r\n            try {\r\n                const data = await fetchLink({ address: `masters/accountGroup/dropdown` });\r\n                if (data.success) setGroupList(data.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n                toast.error(\"Failed to load group dropdown\");\r\n            }\r\n        };\r\n\r\n        fetchGroupDropdown();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm.trim() === \"\") {\r\n            setFilteredAccountList(accountList);\r\n        } else {\r\n            const filtered = accountList.filter(\r\n                (account) =>\r\n                (account.Group_Name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                    account.Alias_Name?.toLowerCase().includes(searchTerm.toLowerCase()))\r\n            );\r\n            setFilteredAccountList(filtered);\r\n        }\r\n    }, [searchTerm, accountList]);\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setIsSubmitting(true);\r\n        const deletedItemId = inputValue.Group_Id;\r\n\r\n        try {\r\n            setAccountList(prev => prev.filter(item => item.Group_Id !== deletedItemId));\r\n            setFilteredAccountList(prev => prev.filter(item => item.Group_Id !== deletedItemId));\r\n\r\n            const data = await fetchLink({\r\n                address: `masters/accountGroup`,\r\n                method: \"DELETE\",\r\n                bodyData: { Group_Id: deletedItemId },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"Account group deleted successfully!\");\r\n            } else {\r\n                setReload(prev => !prev);\r\n                toast.error(data.message || \"Failed to delete account group\");\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setReload(prev => !prev);\r\n            toast.error(\"Failed to delete account group\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleCreate = async () => {\r\n        const { Group_Name, Alias_Name } = inputValue;\r\n        if (!Group_Name || !Alias_Name) {\r\n            toast.error(\"Please fill all required fields.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/accountGroup`,\r\n                method: \"POST\",\r\n                bodyData: {\r\n                    ...inputValue,\r\n                    Created_By: userId,\r\n                },\r\n            });\r\n\r\n            if (data.success) {\r\n                toast.success(\"Account group created successfully!\");\r\n                setIsCreateDialogOpen(false);\r\n                setInputValue(initialState);\r\n                setReload(prev => !prev);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to create account group\");\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const editRow = (row) => {\r\n        console.log(\"row\", row)\r\n        setInputValue({\r\n            Group_Id: row.Group_Id,\r\n            Group_Name: row.Group_Name,\r\n            Alias_Name: row.Alias_name,\r\n            Parent_AC_id: row.Parent_AC_id\r\n        });\r\n        setEditMode(true);\r\n    };\r\n\r\n    const handleEdit = () => {\r\n        const { Group_Id, Group_Name } = inputValue;\r\n        if (!Group_Id || !Group_Name) {\r\n            toast.error(\"All required fields must be filled.\");\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        fetchLink({\r\n            address: `masters/accountGroup`,\r\n            method: \"PUT\",\r\n            bodyData: {\r\n                ...inputValue,\r\n                Alter_By: userId,\r\n            },\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(\"Account group updated successfully!\");\r\n                    setEditMode(false);\r\n                    setInputValue(initialState);\r\n                    setReload(!reload);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n                toast.error(\"Failed to update account group\");\r\n            })\r\n            .finally(() => setIsSubmitting(false));\r\n    };\r\n\r\n    const handleCloseCreateDialog = () => {\r\n        if (!isSubmitting) {\r\n            setIsCreateDialogOpen(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseEditDialog = () => {\r\n        if (!isSubmitting) {\r\n            setEditMode(false);\r\n            setInputValue(initialState);\r\n        }\r\n    };\r\n\r\n    const handleCloseDeleteDialog = () => {\r\n        if (!isSubmitting) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header bg-white fw-bold d-flex align-items-center justify-content-between\">\r\n                    Account Group Master\r\n                    <div className=\"d-flex align-items-center gap-3\">\r\n                        <div style={{ width: \"300px\" }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                placeholder=\"Search Group...\"\r\n                                value={searchTerm}\r\n                                onChange={(e) => setSearchTerm(e.target.value)}\r\n                                InputProps={{\r\n                                    startAdornment: <Search fontSize=\"small\" sx={{ mr: 1 }} />,\r\n                                    style: { height: \"40px\" },\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className=\"rounded-1 btn-primary\"\r\n                            onClick={() => {\r\n                                setIsCreateDialogOpen(true);\r\n                                setInputValue(initialState);\r\n                            }}\r\n                            sx={{\r\n                                textTransform: 'none',\r\n                                fontWeight: 500,\r\n                                px: 2,\r\n                                height: '40px'\r\n                            }}\r\n                        >\r\n                            Create Account Master\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <FilterableTable\r\n                    dataArray={filteredAccountList}\r\n                    EnableSerialNumber={true}\r\n                    maxHeightOption\r\n                    columns={[\r\n                        createCol(\"Group_Name\", \"string\", \"Group\"),\r\n                        createCol(\"Alias_name\", \"string\", \"Alias Name\"),\r\n                        createCol(\"Parent_Group_Name\", \"string\", \"Parent AC\"),\r\n                        {\r\n                            ColumnHeader: \"Actions\",\r\n                            isVisible: 1,\r\n                            isCustomCell: true,\r\n                            Cell: ({ row }) => (\r\n                                <td style={{ minWidth: \"80px\" }}>\r\n                                    <IconButton onClick={() => editRow(row)} size=\"small\">\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            setOpen(true);\r\n                                            setInputValue({ Group_Id: row.Group_Id, Group_Name: row.Group_Name });\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"error\"\r\n                                    >\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </td>\r\n                            ),\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Dialog\r\n                open={isCreateDialogOpen}\r\n                onClose={handleCloseCreateDialog}\r\n            >\r\n                <DialogTitle>Create Account Group</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>Group Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Group_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({ ...inputValue, Group_Name: e.target.value })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                            placeholder=\"Enter Group Name\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Alias Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Alias Name\"\r\n                            value={inputValue.Alias_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Alias_Name: e.target.value,\r\n                                })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Parent Account Group</label>\r\n                        <FormControl fullWidth>\r\n                            <Select\r\n                                labelId=\"parent-group-select-label\"\r\n                                value={inputValue.Parent_AC_id}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, Parent_AC_id: e.target.value })\r\n                                }\r\n                                displayEmpty\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {groupList.map((group) => (\r\n                                    <MenuItem key={group.value} value={group.value}>\r\n                                        {group.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton\r\n                        onClick={handleCloseCreateDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton\r\n                        onClick={handleCreate}\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting || !inputValue.Group_Name}\r\n                    >\r\n                        {isSubmitting ? \"Creating...\" : \"Create\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={editMode}\r\n                onClose={handleCloseEditDialog}\r\n            >\r\n                <DialogTitle>Edit Account Group</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"p-2\">\r\n                        <label>Group Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Group_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({ ...inputValue, Group_Name: e.target.value })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Alias Name*</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={inputValue.Alias_Name}\r\n                            onChange={(e) =>\r\n                                setInputValue({\r\n                                    ...inputValue,\r\n                                    Alias_Name: e.target.value,\r\n                                })\r\n                            }\r\n                            className=\"cus-inpt\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"p-2\">\r\n                        <label>Parent Account Group</label>\r\n                        <FormControl fullWidth>\r\n                            <Select\r\n                                labelId=\"parent-group-edit-select-label\"\r\n                                value={inputValue.Parent_AC_id}\r\n                                onChange={(e) =>\r\n                                    setInputValue({ ...inputValue, Parent_AC_id: e.target.value })\r\n                                }\r\n                                displayEmpty\r\n                            >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                {groupList.map((group) => (\r\n                                    <MenuItem key={group.value} value={group.value}>\r\n                                        {group.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton\r\n                        onClick={handleCloseEditDialog}\r\n                        disabled={isSubmitting}\r\n                    >\r\n                        Cancel\r\n                    </MuiButton>\r\n                    <MuiButton\r\n                        onClick={handleEdit}\r\n                        color=\"primary\"\r\n                        disabled={isSubmitting || !inputValue.Group_Name}\r\n                    >\r\n                        {isSubmitting ? \"Updating...\" : \"Update\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleCloseDeleteDialog}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Confirmation\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <b  >{`Do you want to delete the ${inputValue.Group_Name} Group?`}</b>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <MuiButton onClick={handleCloseDeleteDialog}>Cancel</MuiButton>\r\n                    <MuiButton onClick={handleDelete} autoFocus sx={{ color: 'red' }}>\r\n                        {isSubmitting ? \"Deleting...\" : \"Delete\"}\r\n                    </MuiButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AccountingGroup;","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}"],"names":["initialState","Group_Id","Group_Name","Alias_Name","Parent_AC_id","reload","setReload","useState","open","setOpen","isCreateDialogOpen","setIsCreateDialogOpen","inputValue","setInputValue","editMode","setEditMode","accountList","setAccountList","filteredAccountList","setFilteredAccountList","groupList","setGroupList","searchTerm","setSearchTerm","isSubmitting","setIsSubmitting","user","JSON","parse","localStorage","getItem","userId","UserId","useEffect","async","data","fetchLink","address","success","e","console","error","toast","fetchAccountGroups","fetchGroupDropdown","trim","filtered","filter","account","_account$Group_Name","_account$Alias_Name","toLowerCase","includes","handleCloseCreateDialog","handleCloseEditDialog","handleCloseDeleteDialog","_jsxs","_Fragment","children","className","_jsx","style","width","TextField","fullWidth","size","variant","placeholder","value","onChange","target","InputProps","startAdornment","Search","fontSize","sx","mr","height","Button","onClick","textTransform","fontWeight","px","FilterableTable","dataArray","EnableSerialNumber","maxHeightOption","columns","createCol","ColumnHeader","isVisible","isCustomCell","Cell","_ref","row","minWidth","IconButton","log","Alias_name","editRow","Edit","color","Delete","Dialog","onClose","DialogTitle","DialogContent","type","_objectSpread","FormControl","Select","labelId","displayEmpty","MenuItem","map","group","label","DialogActions","MuiButton","disabled","method","bodyData","Created_By","prev","message","handleEdit","Alter_By","then","catch","finally","id","DialogContentText","concat","deletedItemId","item","autoFocus","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","String","replace","key","Field_Name","field","arguments","length","undefined","align","verticalAlign","Fied_Data","ButtonActions","buttonsData","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","title","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","onclick","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","_ref2","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","Fragment","TableRow","TableCell","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","colSpan","Number","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","i","Sno","autoTable","head","body","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps"],"sourceRoot":""}