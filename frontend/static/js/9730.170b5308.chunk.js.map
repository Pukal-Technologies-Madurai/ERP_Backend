{"version":3,"file":"static/js/9730.170b5308.chunk.js","mappings":"ukBAUA,MAAMA,GAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAACC,SAAS,UACtCC,GAAcH,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,CAACF,SAAS,UA2UvC,EAzUsBG,IAA4F,IAA3F,IAAEC,EAAG,SAAEC,EAAQ,WAAEC,EAAU,OAAEC,EAAM,WAAEC,EAAU,UAAEC,EAAS,WAAEC,EAAU,YAAEC,GAAaR,EACxG,MAAMS,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,GAEvBM,EAAe,CACjBC,QAAS,GACTC,UAAW,GACXC,UAAW,GACXC,cAAe,GACfC,SAAmB,OAATR,QAAS,IAATA,OAAS,EAATA,EAAWS,OACrBC,WAAqB,OAATV,QAAS,IAATA,OAAS,EAATA,EAAWU,WACvBC,WAAY,GACZC,UAAW,GACXC,YAAa,GACbC,gBAAiB,KAGdC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,IAC9BG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,KACpCO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAYC,IAAiBV,EAAAA,EAAAA,UAASd,IACtCyB,EAAYC,IAAiBZ,EAAAA,EAAAA,WAAS,IACtCa,EAAgBC,IAAqBd,EAAAA,EAAAA,UAASd,IAErD6B,EAAAA,EAAAA,WAAU,KACYC,WACd,IACI,MAAMC,QAAqBC,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,kCAC3CF,EAAaG,SAAShB,EAAYa,EAAaI,MAEnD,MAAMC,QAA0BJ,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,8BAChDG,EAAkBF,SAASd,EAAagB,EAAkBD,MAE9D,MAAME,QAA+BL,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,8BACrDI,EAAuBH,SAASZ,EAAkBe,EAAuBF,KACjF,CAAE,MAAOG,GACLC,QAAQC,MAAMF,EAClB,GAGJG,IACD,KAEHZ,EAAAA,EAAAA,WAAU,KACNhB,EAAUzB,IACX,CAACA,KAEJyC,EAAAA,EAAAA,WAAU,MACFa,EAAAA,EAAAA,IAAcxD,IACdqD,QAAQI,IAAIzD,GACZsC,EAAcoB,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GACA1D,GAAG,IACNkB,cAAelB,EAAIkB,eAAiB,MAExCY,GAAU,KAEVQ,EAAcxB,GACdgB,GAAU,KAEf,CAAC9B,IAEJ,MAAM4D,EAAcA,KAChBjC,GAAU,GACNvB,GAAYA,KAGdyD,EAAkBA,KACpBrB,GAAc,GACdE,EAAkB5B,IAuFtB,OACIgD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,EACIP,EAAAA,EAAAA,KAAA,QAAMsE,QAASA,IAAMrC,GAAU,GAAOsC,MAAO,CAAEC,OAAQ,WAAYjE,SAAEA,KAErE6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAM1C,EAAOzB,SAAA,EACjBP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAACC,UAAU,uCAAsCrE,SACxD4B,EAAS,YAAc,cAG5BiC,EAAAA,EAAAA,MAAA,QAAMS,SAAUnB,IACZA,EAAEoB,iBA9FK5B,WACnB,MAAM6B,EAAWpC,EAAWZ,gBAAgBiD,IAAIC,IAAKhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC9CgB,GAAK,IACRC,SAAUD,EAAME,eACb,GAEDC,GAAOnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNtB,GAAU,IACbZ,gBAAiBgD,IAGjBpE,GAAWA,IAEf,IACI,MAAM0E,QAAiBjC,EAAAA,EAAAA,GAAU,CAC7BC,QAAQ,uBACRiC,OAAQnD,EAAS,MAAQ,OACzBoD,SAAUH,IAGVC,EAAS/B,SACTkC,EAAAA,GAAMlC,QAAQ+B,EAASI,SACvB7C,EAAcxB,GACd8C,IACIzD,GAAQA,IACRI,GAAaA,KAEjB2E,EAAAA,GAAM5B,MAAMyB,EAASI,QAE7B,CAAE,MAAO7B,GACLD,QAAQC,MAAMA,GACd4B,EAAAA,GAAM5B,MAAM,mDAChB,CAAC,QACOhD,GAAYA,GACpB,GA6DY8E,IACFnF,SAAA,EACEP,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,UACV6D,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,MAAKrE,SAAA,EAChB6D,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,eAAcrE,SAAA,EACzB6D,EAAAA,EAAAA,MAAA,SAAA7D,SAAA,CAAO,cAAUP,EAAAA,EAAAA,KAAC4F,EAAAA,EAAY,QAC9B5F,EAAAA,EAAAA,KAAA,SACI6F,UAAW,IACXC,SAAUpC,GAAKd,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAErB,UAAWoC,EAAEqC,OAAOC,SAClEC,UAAQ,EACRD,MAAOrD,EAAWrB,UAClB4E,YAAY,oBACZtB,UAAU,iBAElBR,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,eAAcrE,SAAA,EACzB6D,EAAAA,EAAAA,MAAA,SAAA7D,SAAA,CAAO,eAAWP,EAAAA,EAAAA,KAAC4F,EAAAA,EAAY,QAC/BxB,EAAAA,EAAAA,MAAA,UACI4B,MAAOrD,EAAWnB,cAClBoD,UAAU,WACVqB,UAAQ,EACRH,SAAUpC,GAAKd,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAEnB,cAAekC,EAAEqC,OAAOC,SAASzF,SAAA,EAC/EP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAGG,UAAQ,EAAA5F,SAAC,eACzBgC,EAAUyC,IAAI,CAACoB,EAAGC,KACfrG,EAAAA,EAAAA,KAAA,UAAgBgG,MAAOI,EAAEE,aAAa/F,SACjC6F,EAAEG,WADMF,WAMzBjC,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,eAAcrE,SAAA,EACzBP,EAAAA,EAAAA,KAAA,SAAAO,SAAO,eACP6D,EAAAA,EAAAA,MAAA,UACI4B,MAAOrD,EAAW6D,cAClB5B,UAAU,WACVkB,SAAUpC,GAAKd,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAE6D,cAAe9C,EAAEqC,OAAOC,SAASzF,SAAA,EAC/EP,EAAAA,EAAAA,KAAA,UAAQgG,MAAO,EAAEzF,SAAC,YACjB8B,EAAS2C,IAAI,CAACoB,EAAGC,KACdrG,EAAAA,EAAAA,KAAA,UAAgBgG,MAAOI,EAAE/E,QAAQd,SAC5B6F,EAAE9E,WADM+E,WAMzBjC,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,SAAQrE,SAAA,EACnB6D,EAAAA,EAAAA,MAAA,SAAA7D,SAAA,CAAO,qBAAiBP,EAAAA,EAAAA,KAAC4F,EAAAA,EAAY,QACrC5F,EAAAA,EAAAA,KAAA,YACI4E,UAAU,WACVoB,MAAOrD,EAAWpB,UAClBkF,KAAK,IACLX,SAAUpC,GAAKd,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAEpB,UAAWmC,EAAEqC,OAAOC,eAE1EhG,EAAAA,EAAAA,KAAA,OAAK4E,UAAU,gBAAerE,UAC1BP,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CACTC,UAAQ,EACRC,GAAG,uBACHC,QAASpE,EACTqE,sBAAoB,EACpBC,eAAiBC,GAAM,GAAAC,OAAQD,EAAOE,aAAY,OAAAD,OAAMD,EAAOG,mBAC/DnB,MAAOrD,EAAWZ,iBAAmB,GACrC+D,SAAUA,CAACsB,EAAOC,IAAazE,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAEZ,gBAAiBsF,KAC/EC,aAAcA,CAACC,EAAOP,EAAMQ,KAAA,IAAE,SAAEC,GAAUD,EAAA,OACtCpD,EAAAA,EAAAA,MAAA,MAAAH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQsD,GAAK,IAAAhH,SAAA,EACTP,EAAAA,EAAAA,KAAC0H,EAAAA,EAAQ,CACL3H,KAAMA,EACNI,YAAaA,EACboE,MAAO,CAAEoD,YAAa,GACtBC,QAASH,IACX,GAAAR,OACED,EAAOE,aAAY,OAAAD,OAAMD,EAAOG,wBAG5CvC,UAAU,OACViD,qBAAsBA,CAACC,EAAKC,IAAQC,OAAOF,EAAI3C,cAAgB6C,OAAOD,EAAI5C,YAC1E8C,YAAcC,IACVlI,EAAAA,EAAAA,KAACmI,EAAAA,GAASlE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKiE,GAAM,IAAEE,MAAM,kBAAkBlC,YAAY,gCAKtEvD,EAAWZ,gBAAgBiD,IAAI,CAACC,EAAOoD,KACpCjE,EAAAA,EAAAA,MAAA,OAAiBQ,UAAU,eAAcrE,SAAA,EACrCP,EAAAA,EAAAA,KAAA,SAAO4E,UAAU,OAAMrE,SAAE0E,EAAMiC,gBAC/BlH,EAAAA,EAAAA,KAAA,SACIsI,KAAMrD,EAAMkC,mBAAqB,OACjCvC,UAAU,WACVkB,SAAWpC,IACP,MAAM6E,EAAgB,IAAI5F,EAAWZ,iBACrCwG,EAAcF,IAAMpE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbsE,EAAcF,IAAM,IACvBG,cAAe9E,EAAEqC,OAAOC,QAE5BpD,GAAaqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAItB,GAAU,IAAEZ,gBAAiBwG,MAEpDvC,MAAOf,EAAMuD,cACbtC,YAAY,oBAdVmC,UAqBtBjE,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAAA,UACI4E,UAAU,+BACV0D,KAAK,SACLhE,QAASJ,EAAY3D,SAAC,YAG1BP,EAAAA,EAAAA,KAAA,UACI4E,UAAU,iCACV0D,KAAK,SAAQ/H,SAAC,qBAQ9B6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAM7B,EAAY6F,QAASvE,EAAgB5D,SAAA,EAC/CP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAACC,UAAU,uCAAsCrE,SAAC,eAC9D6D,EAAAA,EAAAA,MAAA,QAAMS,SAAUnB,IACZA,EAAEoB,iBA1KO5B,WACrB,MAAM6B,EAAWhC,EAAehB,gBAAgBiD,IAAIC,IAAKhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClDgB,GAAK,IACRC,SAAUD,EAAME,eACb,GAEDC,GAAOnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNlB,GAAc,IACjBhB,gBAAiBgD,IAKjBpE,GAAWA,IAEf,IACI,MAAM0E,QAAiBjC,EAAAA,EAAAA,GAAU,CAC7BC,QAAQ,uBACRiC,OAAQ,MACRC,SAAUH,IAGVC,EAAS/B,SACTkC,EAAAA,GAAMlC,QAAQ+B,EAASI,SACvBtB,IACI1D,GAAQA,IACRI,GAAaA,KAEjB2E,EAAAA,GAAM5B,MAAMyB,EAASI,QAE7B,CAAE,MAAO7B,GACLD,QAAQC,MAAMA,GACd4B,EAAAA,GAAM5B,MAAM,mDAChB,CAAC,QACOhD,GAAYA,GACpB,GAwIY+H,IACFpI,SAAA,EACE6D,EAAAA,EAAAA,MAACuB,EAAAA,EAAa,CAAApF,SAAA,EACVP,EAAAA,EAAAA,KAACmI,EAAAA,EAAS,CACNC,MAAM,YACNpC,MAAOjD,EAAezB,UACtBwE,SAAUpC,GAAKV,GAAiBiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIlB,GAAc,IAAEzB,UAAWoC,EAAEqC,OAAOC,SAC1E4C,WAAS,KAEbxE,EAAAA,EAAAA,MAAC+D,EAAAA,EAAS,CACNC,MAAM,aACNS,QAAM,EACN7C,MAAOjD,EAAevB,cACtBsE,SAAUpC,GAAKV,GAAiBiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIlB,GAAc,IAAEvB,cAAekC,EAAEqC,OAAOC,SAC9E4C,WAAS,EAAArI,SAAA,EAETP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAGG,UAAQ,EAAA5F,SAAC,eACzBgC,EAAUyC,IAAI,CAACoB,EAAGC,KACfrG,EAAAA,EAAAA,KAAA,UAAgBgG,MAAOI,EAAEE,aAAa/F,SACjC6F,EAAEG,WADMF,WAMzBjC,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAAA,UAAQ4E,UAAU,+BAA+B0D,KAAK,SAAShE,QAASH,EAAgB5D,SAAC,YAGzFP,EAAAA,EAAAA,KAAA,UAAQ4E,UAAU,iCAAiC0D,KAAK,SAAQ/H,SAAC,sB,qCCpUzF,MA+bA,EA/bmBF,IAAsE,IAArE,KAAEqE,EAAI,QAAEgE,EAAO,UAAEI,EAAS,OAAEC,EAAM,OAAEtI,EAAM,SAACuI,EAAQ,SAAEC,GAAU5I,EAC/E,MAAMS,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,IAEtBoI,EAAeC,IAAoBjH,EAAAA,EAAAA,UAAS,KAC5CkH,EAASC,IAAcnH,EAAAA,EAAAA,WAAS,IAEhCoH,EAAaC,IAAkBrH,EAAAA,EAAAA,UAAS,IACzCsH,EAAa,CACfC,MAAO,GACPC,WAAYZ,EACZa,OAAQZ,EACRa,gBAA0B,OAAT3I,QAAS,IAATA,OAAS,EAATA,EAAWS,OAC5BmI,OAAQ,GACRC,gBAAgB,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GACpDC,WAAY,GACZC,SAAU,GACVC,QAAS,GACTC,aAAc,GACdC,WAAY,GACZC,OAAQ,EACRC,aAAa,EACbC,SAAU,GACVC,eAAe,EACfC,OAAQ,aACRC,eAAe,EACfC,WAAY,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,KAGxFC,EAAeC,IAAoBpJ,EAAAA,EAAAA,UAASsH,IAEnDvG,EAAAA,EAAAA,WAAU,KAGFyB,GAAMb,KACX,CAACiF,EAAWpE,EAAMjE,IAErB,MAAMoD,EAAYX,UACdmG,GAAW,GACX,IACI,MAAMkC,QAAsBnI,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,sDAAD4D,OAAwD6B,KACjG0C,QAAyBpI,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,oDAG/CkI,EAAajI,SAAS6F,EAAiBoC,EAAahI,MAAQ,IAC5DiI,EAAgBlI,OAIxB,CAAE,MAAOM,GACL4B,EAAAA,GAAM5B,MAAM,wBAChB,CAAC,QACGyF,GAAW,EACf,IAEJpG,EAAAA,EAAAA,WAAU,KAyCFyB,GAvCsBxB,WACtBmG,GAAW,GACX,IACI,GAAIJ,EAAU,CAAC,IAADwC,EAAAC,EACV,MAAMC,QAAyBvI,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yDAAD4D,OAA2D6B,EAAS,YAAA7B,OAAW8B,EAAOY,OAAM,aAAA1C,OAAY8B,EAAO1H,WAE3JuK,EAAuC,QAA1BH,EAAGE,EAAgBpI,KAAK,UAAE,IAAAkI,OAAA,EAAvBA,EAAyBI,YACzCC,EAAyC,QAA1BJ,EAAGC,EAAgBpI,KAAK,UAAE,IAAAmI,OAAA,EAAvBA,EAAyBK,SAG7CxC,EADAqC,GAAiBE,EACF,CAAE9F,MAAO4F,EAAexD,MAAO0D,GAE/B,CAAE9F,MAAO,GAAIoC,MAAO,IAI3C,KAAO,CAAC,IAAD4D,EAAAC,EACH,MAAMN,QAAwBvI,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yDAAD4D,OAA2D6B,EAAS,YAAA7B,OAAW8B,EAAOmD,UAAS,aAAAjF,OAAY8B,EAAO1H,WAG7JuK,EAAuC,QAA1BI,EAAGL,EAAgBpI,KAAK,UAAE,IAAAyI,OAAA,EAAvBA,EAAyBH,YACzCC,EAAyC,QAA1BG,EAAGN,EAAgBpI,KAAK,UAAE,IAAA0I,OAAA,EAAvBA,EAAyBF,SAG7CxC,EADAqC,GAAiBE,EACF,CAAE9F,MAAO4F,EAAexD,MAAO0D,GAE/B,CAAE9F,MAAO,GAAIoC,MAAO,IAG3C,CACJ,CAAE,MAAOxE,GAEL4B,EAAAA,GAAM5B,MAAM,wBAChB,CAAC,QACGyF,GAAW,EACf,GAIM8C,IACX,CAACzH,EAAMuE,EAAUxI,EAAOqI,KAE3B7F,EAAAA,EAAAA,WAAU,KACFgG,GAEAqC,EAAiBtH,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAI,IACPyF,MAAOR,EAASQ,MAChBI,OAAQZ,EAASY,OACjBM,SAAUlB,EAASkB,SACnBC,QAASnB,EAASmB,QAClBC,aAAcpB,EAASoB,aAAaJ,MAAM,KAAK,GAC/CK,WAAYrB,EAASqB,WAAWL,MAAM,KAAK,GAC3CM,OAAQtB,EAASsB,OACjBC,YAAavB,EAASuB,YACtBE,cAAezB,EAASyB,cACxBmB,YAAa5C,EAASwB,SACtBA,SAAUxB,EAASmD,cACnBzB,OAAQ1B,EAASoD,aACjBzB,cAAe3B,EAAS2B,cACxBC,WAAY,CACRC,MAAO7B,EAASqD,cAChBvB,MAAO9B,EAASsD,eAChBvB,MAAO/B,EAASuD,iBAChBvB,MAAOhC,EAASwD,gBAChBvB,MAAOjC,EAASyD,cAChBvB,MAAOlC,EAAS0D,gBAChBvB,MAAOnC,EAAS2D,mBAI7B,CAAC3D,IA6FJ,OACIjJ,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAA9D,UAII6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMA,EAAMmI,SAAS,KAAItM,SAAA,EAC7BP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,SAAE0I,EAAW,YAAc,qBACvC7E,EAAAA,EAAAA,MAAA,QAAMS,SAlEG3B,UACjBQ,EAAEoB,iBACF,MAAMgI,EAhCiBC,MACvB,MAAOC,EAAQC,GAAY5B,EAAclB,SAASF,MAAM,KAAKjF,IAAIgD,SAC1DkF,EAAQC,GAAY9B,EAAcjB,QAAQH,MAAM,KAAKjF,IAAIgD,QAE1DoF,EAAQ,IAAIrD,KAAK,EAAG,EAAG,EAAGiD,EAAQC,GAClCI,EAAQ,IAAItD,KAAK,EAAG,EAAG,EAAGmD,EAAQC,GAExC,GAAIE,EAAQD,EAAO,CACf,IAAIE,EAAaC,KAAKC,IAAIH,EAAQD,GAClC,MAAMK,EAAQF,KAAKG,MAAMJ,EAAU,MAC7BK,EAAUJ,KAAKG,MAAMJ,EAAU,KACrC,MAAM,GAANrG,OAAU2G,OAAOH,GAAOI,SAAS,EAAG,KAAI,KAAA5G,OAAI2G,OAAOD,GAASE,SAAS,EAAG,KAC5E,CACA,MAAO,IAmBWd,GAElB,GAAI1B,EAAcf,WAAae,EAAchB,aACzC7E,EAAAA,GAAM5B,MAAM,kDAIhB,IAEI,MAAMP,EAAU4F,EAAW,qCAAuC,qCAC5D6E,EAxBH,CACHxB,cAAejB,EAAcR,WAAWC,IAAM,EAAI,KAClDyB,eAAgBlB,EAAcR,WAAWE,IAAM,EAAI,KACnDyB,iBAAkBnB,EAAcR,WAAWG,IAAM,EAAI,KACrDyB,gBAAiBpB,EAAcR,WAAWI,IAAM,EAAI,KACpDyB,cAAerB,EAAcR,WAAWK,IAAM,EAAI,KAClDyB,gBAAiBtB,EAAcR,WAAWM,IAAM,EAAI,KACpDyB,cAAevB,EAAcR,WAAWO,IAAM,EAAI,aAkB3BhI,EAAAA,EAAAA,GAAU,CAC7BC,UACAiC,OAAQ2D,EAAW,MAAQ,OAC3B1D,UAAQtB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDoH,GAAa,IAChB3B,WAAYZ,EACZa,OAAQV,EAAWF,EAAOY,OAASZ,EAAOmD,UAC1C6B,aAAchF,EAAOgF,aACrB1M,QAAS2G,OAAOe,EAAO1H,SACvBuI,gBAAiByB,EAAczB,gBAC/BC,OAAQwB,EAAcxB,OACtBK,WAAY4C,EACZ3C,SAAUkB,EAAclB,SACxBC,QAASiB,EAAcjB,QACvBC,aAAcgB,EAAchB,aAC5BC,WAAYe,EAAcf,WAC1BC,OAAQc,EAAcd,OACtBE,SAAUnB,EAAYtD,MACtBwE,YAAaa,EAAcb,YAAc,EAAI,EAC7CE,cAAeW,EAAcX,cAAgB,EAAI,EACjDE,cAAeS,EAAcT,cAAgB,EAAI,EACjDC,WAAYQ,EAAcT,cAAgBS,EAAcR,WAAa,IAClEiD,MAKExK,SACTkC,EAAAA,GAAMlC,QAAQ,QAAD2D,OAASgC,EAAW,UAAY,WAAU,mBACvDqC,EAAiB,CAAC,GACdtC,GACAA,IAEJN,KAKAlD,EAAAA,GAAM5B,MAAM,mCAEpB,CAAE,MAAOA,GACL4B,EAAAA,GAAM5B,MAAM,wCAA0CA,EAAM6B,QAChE,GAWqClF,SAAA,EACzB6D,EAAAA,EAAAA,MAACuB,EAAAA,EAAa,CAACf,UAAU,mBAAkBrE,SAAA,CACnC6I,IAAWpJ,EAAAA,EAAAA,KAAA,OAAAO,SAAK,gBACpBP,EAAAA,EAAAA,KAAA,SAAO4E,UAAU,QAAQL,MAAO,CAAEyJ,YAAa,SAAUzN,UACrD6D,EAAAA,EAAAA,MAAA,SAAA7D,SAAA,EACI6D,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,cAG/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAACoO,EAAAA,GAAM,CACHpI,MAAO,CAAEA,MAAOqF,EAAcxB,OAAQzB,MAAOiD,EAAcV,QAC3D7E,SAAWpC,GAAM4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAExB,OAAQnG,EAAEsC,MAAO2E,OAAQjH,EAAE0E,SACjFvB,QAAS,CAAC,CAAEb,MAAO,GAAIoC,MAAO,iBAAmBc,EAAclE,IAAIqJ,IAAG,CAAOrI,MAAOqI,EAAI3M,OAAQ0G,MAAOiG,EAAIC,SAC3GC,OAAQC,EAAAA,GACRvI,UAAQ,EACRwI,cAAc,EACdvI,YAAY,sBAIxB9B,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,cAI/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAACoO,EAAAA,GAAM,CACHpI,MAAOsD,EAAc,CAAEtD,MAAOsD,EAAYtD,MAAOoC,MAAM,GAADnB,OAAKqC,EAAYlB,QAAY,KACnFmG,OAAQ,CAAEG,QAAS,SACnBC,YAAU,EACVzI,YAAY,0BAQxB9B,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,gBAG/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,OACL1D,UAAU,WACVoB,MAAOqF,EAAclB,SACrBlE,UAAQ,EACRH,SAAUpC,GAAK4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAElB,SAAUzG,EAAEqC,OAAOC,SACvEzB,MAAO,CAAEmK,QAAS,iBAK9BtK,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,cAG/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,OACL1D,UAAU,WACVoB,MAAOqF,EAAcjB,QACrBnE,UAAQ,EACR2I,IAAKvD,EAAclB,SACnBrE,SAAUpC,GAAK4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAEjB,QAAS1G,EAAEqC,OAAOC,SACtEzB,MAAO,CAAEmK,QAAS,iBAK9BtK,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,qBAG/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,OACL1D,UAAU,WACVoB,MAAOqF,EAAchB,aACrBpE,UAAQ,EACRH,SAAUpC,GAAK4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAEhB,aAAc3G,EAAEqC,OAAOC,SAC3EzB,MAAO,CAAEmK,QAAS,iBAK9BtK,EAAAA,EAAAA,MAAA,MAAA7D,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE0J,cAAe,SAAUC,aAAc,OAAQ3N,SAAC,mBAG/FP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE4J,YAAa,OAAQ5N,UAChEP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,OACL1D,UAAU,WACVoB,MAAOqF,EAAcf,WACrBrE,UAAQ,EACR2I,IAAKvD,EAAchB,aACnBvE,SAAUpC,GAAK4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAEf,WAAY5G,EAAEqC,OAAOC,SACzEzB,MAAO,CAAEmK,QAAS,iBAM9B1O,EAAAA,EAAAA,KAAA,MAAAO,UACI6D,EAAAA,EAAAA,MAAA,MAAIQ,UAAU,mCAAmCL,MAAO,CAAE2J,aAAc,OAAQ3N,SAAA,EAC5E6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,cAAelH,YAAa,OAAQpH,SAAA,EACvDP,EAAAA,EAAAA,KAAA,SACI4E,UAAU,+BACV0D,KAAK,WACL1B,GAAG,aACHgB,QAASkH,QAAQ9G,OAAoB,OAAbqD,QAAa,IAAbA,OAAa,EAAbA,EAAeb,cACvC1E,SAAWpC,GACP4H,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAEb,YAAa9G,EAAEqC,OAAO6B,WAE/DrD,MAAO,CAAEoD,YAAa,YAE1B3H,EAAAA,EAAAA,KAAA,SAAO4E,UAAU,4BAA4BmK,QAAQ,aAAYxO,SAAC,yBAKrE0I,IACG7E,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,cAAelH,YAAa,OAAQpH,SAAA,EACvDP,EAAAA,EAAAA,KAAA,SACI4E,UAAU,+BACV0D,KAAK,WACLV,QAASkH,QAAQ9G,OAAoB,OAAbqD,QAAa,IAAbA,OAAa,EAAbA,EAAeX,gBACvC5E,SAAUA,IACNwF,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoH,GAAa,IAAEX,eAAgBW,EAAcX,iBAEvEnG,MAAO,CAAEoD,YAAa,YAE1B3H,EAAAA,EAAAA,KAAA,SAAO4E,UAAU,4BAA2BrE,SAAC,6BAK7DP,EAAAA,EAAAA,KAAA,MAAAO,UACIP,EAAAA,EAAAA,KAAA,MAAI4E,UAAU,wBAAwBL,MAAO,CAAE2J,aAAc,OAAQ3N,UACjE6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,OAAQG,WAAY,SAAUC,SAAU,QAAS1O,SAAA,EACpE6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,OAAQG,WAAY,SAAUrH,YAAa,OAAQpH,SAAA,EACtEP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,WACLV,QAAyC,IAAhCyD,EAAcT,cACvB9E,SAAWpC,IACP4H,EAAkB4D,IAASjL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpBiL,GAAS,IACZtE,cAAelH,EAAEqC,OAAO6B,QAAU,EAAI,MAG9CrD,MAAO,CAAEoD,YAAa,UAE1B3H,EAAAA,EAAAA,KAAA,SAAOuE,MAAO,CAAE4K,aAAc,KAAM5O,SAAC,sBAER,IAAhC8K,EAAcT,gBACX5K,EAAAA,EAAAA,KAAA,OAAKuE,MAAO,CAAEsK,QAAS,cAAeO,IAAK,SAAU7O,SAChD,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAOyE,IAAKqK,IACpDjL,EAAAA,EAAAA,MAAA,SAEIG,MAAO,CACHsK,QAAS,OACTG,WAAY,SACZrH,YAAa,MACb2H,MAAO,QACT/O,SAAA,EAEFP,EAAAA,EAAAA,KAAA,SACIsI,KAAK,WACLV,QAASyD,EAAcR,WAAWwE,GAClCvJ,SAAUA,IACNwF,GAAgBrH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACXoH,GAAa,IAChBR,YAAU5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHoH,EAAcR,YAAU,IAC3B,CAACwE,IAAOhE,EAAcR,WAAWwE,QAI7C9K,MAAO,CAAEoD,YAAa,WAEzB0H,IAtBIA,sBAmC7CjL,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CACHjL,QAASA,KACLoE,IACA4C,EAAiB9B,IAErBgG,QAAQ,WAAUjP,SACrB,WAGDP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjH,KAAK,SAASkH,QAAQ,YAAWjP,SAAC,6B,gDCxRlE,SAhJA,SAAuBF,GAAmD,IAAlD,KAAEqE,EAAI,QAAEgE,EAAO,YAAE+G,EAAW,gBAAEC,GAAiBrP,EACnE,MAAOsP,EAAcC,IAAmB1N,EAAAA,EAAAA,UAAS,OAC1C2N,EAAkBC,IAAuB5N,EAAAA,EAAAA,WAAS,IAClDkH,EAASC,IAAcnH,EAAAA,EAAAA,WAAS,IAEjC,WAAE6N,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAElChN,EAAAA,EAAAA,WAAU,KACFyB,IACAkL,EAAgB,MAChBvG,GAAW,GAGX6G,WAAW,KACP7G,GAAW,IACZ,OAER,CAAC3E,IAEJ,MAKMyL,EAAcC,IAChB,IAAKA,EAAY,MAAO,MAExB,MAAMC,EAAO,IAAItG,KAAKqG,GACtB,GAAIE,MAAMD,EAAKE,WACX,MAAO,eAGX,MAAMlB,EAAMzB,OAAOyC,EAAKG,WAAW3C,SAAS,EAAG,KACzC4C,EAAQ7C,OAAOyC,EAAKK,WAAa,GAAG7C,SAAS,EAAG,KAChD8C,EAAON,EAAKO,cAElB,MAAM,GAAN3J,OAAUoI,EAAG,KAAApI,OAAIwJ,EAAK,KAAAxJ,OAAI0J,IAG9B,OACIvM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,EACI6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMA,EAAMmI,SAAS,KAAItM,SAAA,EAC7BP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,UACR6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,OAAQgC,eAAgB,gBAAiB7B,WAAY,UAAWzO,SAAA,EACnFP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,aACNP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAAWxM,QAASoE,EAAQnI,SAAC,gBAIvEP,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,SACT6I,GACGpJ,EAAAA,EAAAA,KAAA,OAAKuE,MAAO,CAAEsK,QAAS,OAAQgC,eAAgB,SAAU7B,WAAY,SAAU+B,OAAQ,QAASzB,MAAO,SAAU/O,UAC7GP,EAAAA,EAAAA,KAACgR,EAAAA,EAAgB,OAGrBhR,EAAAA,EAAAA,KAACiR,EAAAA,EAAc,CAAA1Q,UACX6D,EAAAA,EAAAA,MAAC8M,EAAAA,EAAK,CAAA3Q,SAAA,EACFP,EAAAA,EAAAA,KAACmR,EAAAA,EAAS,CAAA5Q,UACN6D,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAA7Q,SAAA,EACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,cACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,iBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,oBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,oBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,iBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,iBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,qBACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,cACzCP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAC,iBAIjDP,EAAAA,EAAAA,KAACsR,EAAAA,EAAS,CAAA/Q,SACkB,IAAvBkP,EAAY8B,QAETvR,EAAAA,EAAAA,KAACoR,EAAAA,EAAQ,CAAA7Q,UACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACG,QAAS,EAAG5M,UAAU,oBAAoBL,MAAO,CAAEkN,UAAW,UAAWlR,SAAC,oBAMzFkP,EAAYzK,IAAI,CAAC0M,EAAQrJ,KACrBjE,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAA7Q,SAAA,EACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAEmR,EAAOrF,cAAgB,SACjErM,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAEmR,EAAOC,cAAgB,SACjE3R,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,UACpC6D,EAAAA,EAAAA,MAAA,QAAMQ,UAAU,6CAA4CrE,SAAA,EACxDP,EAAAA,EAAAA,KAAC4R,EAAAA,EAAa,CAAChN,UAAU,eACxBuL,EAAWuB,EAAOrH,cAAc,MAAI8F,EAAWuB,EAAOpH,kBAG/DtK,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,UACpC6D,EAAAA,EAAAA,MAAA,QAAMQ,UAAU,6CAA4CrE,SAAA,EACxDP,EAAAA,EAAAA,KAAC6R,EAAAA,EAAY,CAACjN,UAAU,eACvB8M,EAAOvH,UAAY,MAAM,MAAIuH,EAAOtH,SAAW,YAGxDpK,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAEmR,EAAOxH,YAAc,SAC/DlK,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,UACpCP,EAAAA,EAAAA,KAAA,QAAM4E,UAAS,2CAAAqC,OAA6Ce,OAAO0J,EAAOlH,aAAe,aAAe,cAAejK,SAClHyH,OAAO0J,EAAOlH,aAAe,MAAQ,UAG9CxK,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,UACpCP,EAAAA,EAAAA,KAAA,QAAM4E,UAAS,2CAAAqC,OAA6Ce,OAAO0J,EAAOhH,eAAiB,aAAe,aAAcnK,SACnHyH,OAAO0J,EAAOhH,eAAiB,KAAO,WAG/C1K,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,SAAEmR,EAAOnH,QAAU,QACtB,IAApCvC,OAAiB,OAAV+H,QAAU,IAAVA,OAAU,EAAVA,EAAY+B,eACpB9R,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACzM,UAAU,oBAAmBrE,UAEpC6D,EAAAA,EAAAA,MAAC2N,EAAAA,EAAU,CAACC,KAAK,QAAQ1N,QAASA,KA5F9EsL,EA4FoG8B,QA3FpG5B,GAAoB,IA2FwFvP,SAAA,EAC5DP,EAAAA,EAAAA,KAACiS,EAAAA,EAAI,CAACrN,UAAU,UAAU,cA/BvByD,gBA8C9CwH,IACG7P,EAAAA,EAAAA,KAACkS,EAAU,CACPxN,KAAMmL,EACN/G,UAAuB,OAAZ6G,QAAY,IAAZA,OAAY,EAAZA,EAAcjG,WACzBX,OAAQ4G,EACR1G,SAAU0G,EACVjH,QAASA,KACLoH,GAAoB,GACpBpH,SAMxB,E,wCCigBA,SA9nBA,SAAoBrI,GAA+E,IAA9E,WAAE8R,EAAU,cAAEC,EAAa,UAAEC,EAAS,OAAE5R,EAAM,SAAEuI,EAAQ,gBAAEsJ,GAAiBjS,EAC/F,MAAOkS,EAAcC,IAAmBtQ,EAAAA,EAAAA,WAAS,IAC1C2N,EAAkBC,IAAuB5N,EAAAA,EAAAA,WAAS,IAClDuQ,EAAgBC,IAAqBxQ,EAAAA,EAAAA,WAAS,IAC9CyN,EAAcC,IAAmB1N,EAAAA,EAAAA,UAAS,OAC1CyQ,EAAOC,IAAY1Q,EAAAA,EAAAA,UAAS,KAC5BuN,EAAaoD,IAAkB3Q,EAAAA,EAAAA,UAAS,KACxC4Q,EAAkBC,IAAwB7Q,EAAAA,EAAAA,WAAS,IACnD8Q,EAAmBC,IAAwB/Q,EAAAA,EAAAA,UAAS,CAC1D2J,YAAa,GACbpB,SAAU,MAIJpI,EAAUC,KAAeJ,EAAAA,EAAAA,UAAS,KAClCgR,GAAkBC,KAAuBjR,EAAAA,EAAAA,WAAS,GACnDkR,GAAWlS,KAAKC,MAAMJ,aAAaC,QAAQ,SAC3CqS,GAAkB,OAARD,SAAQ,IAARA,QAAQ,EAARA,GAAU1R,OACpB4R,GAAoB,OAARF,SAAQ,IAARA,QAAQ,EAARA,GAAUzR,YACrB4R,GAAgBC,KAAqBtR,EAAAA,EAAAA,WAAS,IAC9CuR,GAAmBC,KAAwBxR,EAAAA,EAAAA,UAAS,OAIpDyR,GAAuBC,KAA4B1R,EAAAA,EAAAA,UAAS,OAE7D,WAAE6N,KAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAE3B9N,GAAQ0R,KAAa3R,EAAAA,EAAAA,WAAS,IAC9B4R,GAAkBC,KAAuB7R,EAAAA,EAAAA,WAAS,IAMlD8R,GAAaC,KAAkB/R,EAAAA,EAAAA,UAAS,MACxCgS,GAAeC,KAAoBjS,EAAAA,EAAAA,UAAS,IAI7CkS,GAAkBA,CAAChN,EAAOC,KAC/B4M,GAAe5M,IA6BVgN,IAAaC,EAAAA,EAAAA,aAAYpR,UAC9B,IACC,MAAMK,QAAaH,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,4CAAD4D,OAA8CqM,MAChF/P,EAAKD,QACRsP,EAASrP,EAAKA,MAEdiC,EAAAA,GAAM5B,MAAML,EAAKkC,QAEnB,CAAE,MAAO/B,GACRC,QAAQC,MAAMF,EACf,GACE,CAAC4P,KAEEzP,IAAYyQ,EAAAA,EAAAA,aAAYpR,UAC7B,IACC,MAAMK,QAAaH,EAAAA,EAAAA,GAAU,CAC5BC,QAAQ,6DAAD4D,OAA+DoL,KAEnE9O,EAAKD,QACRhB,GAAYiB,EAAKA,MAEjBI,QAAQC,MAAM,gCAAiCL,EAAKkC,QAEtD,CAAE,MAAO/B,GACRC,QAAQC,MAAM,+BAAgCF,EAC/C,GACE,CAAC2O,KAEJpP,EAAAA,EAAAA,WAAU,KACToR,KACAxQ,KA1CeX,YACfE,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,oDAAsDkR,KAAMhR,IAC3EA,EAAKD,SACRK,QAAQI,IAAI,YAAaR,EAAKA,MAC9B4Q,GAAiB5Q,EAAKA,OAGtBiC,EAAAA,GAAM5B,MAAML,EAAKkC,YAoCnB+O,IACE,CAAC/T,EAAQ4R,EAAWrJ,IAIvB,MAAMyL,GAAc9B,EAAM3N,IAAIqJ,IAAG,CAAOrI,MAAOqI,EAAIhN,QAAS+G,MAAOiG,EAAI/M,aAqKjEoT,GAAuBhR,IAE5B,MAAMiR,EAAiBT,GAAcU,KAAK5N,GAAUA,EAAO6E,cAAgBgJ,SAASnR,EAAEqC,OAAOC,QACzF2O,GACH1B,GAAoBhP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAClB+O,GAAiB,IACpBnH,YAAa8I,EAAe9I,YAC5BpB,SAAUkK,EAAelK,aAM5B,OACCrG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,CACEuT,KACA1P,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACNC,KAAMoP,GACNlL,WAAS,EACTiE,SAAS,KACTiI,WAAY,CAAEvQ,MAAO,CAAEwQ,aAAc,QACrCrM,QAASA,IAAMqL,IAAoB,GAAOxT,SAAA,EAE1CP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,SAAE4B,GAAS,YAAc,iBACrCnC,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,UACbP,EAAAA,EAAAA,KAAA,OAAKuE,MAAO,CAAEmK,QAAS,MAAOG,QAAS,QAAStO,UAC/C6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEyQ,KAAM,EAAGnG,QAAS,OAAQG,WAAY,UAAWzO,SAAA,EAC9DP,EAAAA,EAAAA,KAAA,SAAOuE,MAAO,CAAEoD,YAAa,OAAQpH,SAAC,cACtC6D,EAAAA,EAAAA,MAAA,UACC4B,MAAOgN,EAAkBnH,aAAe,GACxC/F,SAAU4O,GACV9P,UAAU,WACVqB,UAAQ,EACR1B,MAAO,CAAE0Q,WAAY,QAAS1U,SAAA,EAE9BP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAGG,UAAQ,EAAA5F,SAAC,iBACzB2T,GAAclP,IAAI,CAACgC,EAAQqB,KAC3BrI,EAAAA,EAAAA,KAAA,UAAoBgG,MAAOgB,EAAO6E,YAAYtL,SAC5CyG,EAAOyD,UADIpC,eAQlBjE,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACbP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjL,QAASA,IAAMyP,IAAoB,GAAOxT,SAAC,YACnDP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CACNC,QAAQ,YACRsB,MAAM,UACNxM,QAASA,IA7IYpB,WAE1B,MAAMgS,EAAc,CACnBC,eAAgBC,EAAKD,eACrBxL,OAAQyL,EAAKlJ,UACbmJ,UAAWrC,EAAkBnH,YAC7BxK,QAAS+T,EAAK/T,SAKf,IACC,MAAMgE,QAAiBjC,EAAAA,EAAAA,GAAU,CAChCC,QAAS,2DACTiC,OAAQ,MACRC,SAAU2P,IAGP7P,EAAS/B,SACZkC,EAAAA,GAAMlC,QAAQ+B,EAASI,SAEvBsO,IAAoB,GACpBF,IAAU,GACV7K,MAEQ3D,EAASiQ,OACjB9P,EAAAA,GAAM+P,KAAKlQ,EAASI,SAAW,yCAMjC,CAAE,MAAO7B,GACR4B,EAAAA,GAAM5B,MAAMA,EACb,GA2GoB4R,CAAmBxC,GAAmBzS,SACrD,gBAQJ6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMyN,EAAYvJ,WAAS,EAACiE,SAAS,KAAKiI,WAAY,CAAEvQ,MAAO,CAAEwM,OAAQ,SAAWxQ,SAAA,EAC3FP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,UACX6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEsK,QAAS,OAAQgC,eAAgB,gBAAiB7B,WAAY,UAAWzO,SAAA,EACtFP,EAAAA,EAAAA,KAAA,QAAAO,SAAsB,OAAf+R,QAAe,IAAfA,OAAe,EAAfA,EAAiBmD,gBACxBzV,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAAUxM,QAASA,IAAMwL,GAAoB,GAAMvP,SAAC,sBAIxFP,EAAAA,EAAAA,KAAC0V,EAAAA,EAAG,CAACC,GAAI,CAAErG,MAAO,OAAQsG,WAAY,SAAUrV,SAC9C8B,EAAS2C,IAAI,CAAC6Q,EAAUxN,KACxB,MAAM6L,EAAgBhT,KAAKC,MAAM0U,EAASC,UAI1C,OACC1R,EAAAA,EAAAA,MAAC2R,GAAAA,GAAU,CAAC/P,MAAOgO,GAAYzT,SAAA,EAC9BP,EAAAA,EAAAA,KAAC0V,EAAAA,EAAG,CAACC,GAAI,CAAEK,aAAc,EAAGC,YAAa,WAAY1V,UACpDP,EAAAA,EAAAA,KAACkW,GAAAA,EAAO,CAACpQ,SAAUsO,GAAiB,aAAW,iBAAgB7T,SAE7D4V,MAAMC,QAAQlC,IAAkBA,EAAc3C,OAAS,EACvD2C,EAAclP,IAAI,CAACqR,EAAKhO,KACvBrI,EAAAA,EAAAA,KAACsW,EAAAA,EAAG,CAEHlO,MAAOiO,EAAIE,SAAW,aACtBvQ,OAAQqQ,EAAIG,WAAanO,GAAOoO,WAChC7P,GAAE,OAAAK,OAASoP,EAAIG,WAAanO,GAC5B,4BAAApB,OAA2BoP,EAAIG,WAAanO,IAAQ,GAAApB,OAJ5CoP,EAAIG,WAAa,QAAO,KAAAvP,OAAIoB,MAQtCjE,EAAAA,EAAAA,MAACsS,EAAAA,EAAU,CAAClH,QAAQ,QAAQsB,MAAM,gBAAgB6E,GAAI,CAAEjH,QAAS,GAAInO,SAAA,CAAC,4BAC3C2T,SAS7BiC,MAAMC,QAAQlC,IAAkBA,EAAclP,IAAI,CAACqR,EAAKhO,KACxDjE,EAAAA,EAAAA,MAACuS,GAAAA,EAAQ,CAER3Q,OAAQqQ,EAAIG,WAAanO,GAAOoO,WAChC7P,GAAE,YAAAK,OAAcoP,EAAIG,WAAanO,GACjC,yBAAApB,OAAwBoP,EAAIG,WAAanO,GAAQ9H,SAAA,EAEjDP,EAAAA,EAAAA,KAAC0V,EAAAA,EAAG,CAACC,GAAI,CAAExG,aAAc,EAAGT,QAAS,EAAGkI,gBAAiB,UAAW7B,aAAc,OAAQxU,SACxF4V,MAAMC,QAAQC,EAAIQ,sBAAwBR,EAAIQ,oBAAoBtF,OAAS,EAC3E8E,EAAIQ,oBAAoB7R,IAAI,CAAC8R,EAAOzO,KACnCjE,EAAAA,EAAAA,MAACsS,EAAAA,EAAU,CAAalH,QAAQ,QAAQX,QAAQ,OAAOgC,eAAe,gBAAgB7B,WAAW,SAAQzO,SAAA,EACxG6D,EAAAA,EAAAA,MAACsR,EAAAA,EAAG,CAAAnV,SAAA,CAAC,mBACWP,EAAAA,EAAAA,KAAA,UAAAO,SAAS8V,EAAIE,cAE7BnS,EAAAA,EAAAA,MAACsR,EAAAA,EAAG,CAACjE,UAAU,QAAOlR,SAAA,CAAC,iBACTP,EAAAA,EAAAA,KAAA,UAAAO,SAASuW,EAAMC,aAAoB,wBAAoB/W,EAAAA,EAAAA,KAAA,UAAAO,SAASuW,EAAME,sBALpE3O,KAUlBrI,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAAClH,QAAQ,QAAQsB,MAAM,gBAAevQ,SAAC,+CAMnD4V,MAAMC,QAAQC,EAAIY,iBAAmBZ,EAAIY,eAAe1F,OAAS,EACjE8E,EAAIY,eAAejS,IAAKkS,IACvB9S,EAAAA,EAAAA,MAAC+S,EAAAA,EAAS,CAETC,SAAU3D,KAAsByD,EAAS5Q,aACzCR,SAAUA,KAAMuR,OApWGtO,EAoWmBmO,EAAS5Q,kBAnW1DoN,GAAsB1P,GAAUA,IAAS+E,EAAS,KAAOA,GAD3BA,OAqWnB4M,GAAI,CACHiB,gBAAiB,UACjBU,UAAW,SACV/W,SAAA,EAEF6D,EAAAA,EAAAA,MAACmT,EAAAA,EAAgB,CAACC,YAAYxX,EAAAA,EAAAA,KAACyX,EAAAA,EAAc,IAAIlX,SAAA,EAChDP,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAACgB,WAAW,OAAMnX,SAC3B2W,EAAS3Q,WAAa,uBAExBvG,EAAAA,EAAAA,KAAC0V,EAAAA,EAAG,CAACC,GAAI,CAAElE,UAAW,QAASkG,SAAU,GAAIpX,UAC5C6D,EAAAA,EAAAA,MAACsS,EAAAA,EAAU,CAAClH,QAAQ,KAAIjP,SAAA,EACvBP,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAACgB,WAAW,OAAMnX,SAAC,gCAG7B4V,MAAMC,QAAQc,EAASU,cAAgBV,EAASU,YAAYrG,OAAS,EACrE2F,EAASU,YAAY5S,IAAI,CAAC2N,EAAOtK,KAChCjE,EAAAA,EAAAA,MAACsS,EAAAA,EAAU,CAACf,GAAI,CAAElE,UAAW,QAASkG,SAAU,GAAIpX,SAAA,CAClDoS,EAAMqE,eAAe,MAAS,OAALrE,QAAK,IAALA,OAAK,EAALA,EAAOoE,aADwB1O,KAK3DrI,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAAClH,QAAQ,QAAQsB,MAAM,gBAAevQ,SAAC,2DAOtDP,EAAAA,EAAAA,KAAC6X,EAAAA,EAAgB,CAAAtX,SACf4V,MAAMC,QAAQc,EAASY,QAAUZ,EAASY,MAAMvG,OAAS,EACzD2F,EAASY,MAAM9S,IAAK+S,IACnB3T,EAAAA,EAAAA,MAAC+S,EAAAA,EAAS,CAETC,SAAUzD,KAA0BoE,EAAS1W,QAC7CyE,SAAUA,KAAMkS,OAnYGjP,EAmYuBgP,EAAS1W,aAlYlEuS,GAA0B5P,GAAUA,IAAS+E,EAAS,KAAOA,GAD3BA,OAoYnB4M,GAAI,CACHxG,aAAc,GACb5O,SAAA,EAEFP,EAAAA,EAAAA,KAACuX,EAAAA,EAAgB,CAACC,YAAYxX,EAAAA,EAAAA,KAACyX,EAAAA,EAAc,IAAIlX,UAChDP,EAAAA,EAAAA,KAAC0V,EAAAA,EAAG,CAACC,GAAI,CAAElE,UAAW,OAAQkG,SAAU,GAAIpX,UAC3CP,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAACgB,WAAW,OAAMnX,UACnB,OAARwX,QAAQ,IAARA,OAAQ,EAARA,EAAUzW,YAAa,sBAI3BtB,EAAAA,EAAAA,KAAC6X,EAAAA,EAAgB,CAAAtX,UAChBP,EAAAA,EAAAA,KAACiR,EAAAA,EAAc,CAAC1M,MAAO,CAAE0T,UAAW,QAAS1X,UAC5C6D,EAAAA,EAAAA,MAAC8M,EAAAA,EAAK,CAACgH,cAAY,EAAA3X,SAAA,EAClBP,EAAAA,EAAAA,KAACmR,EAAAA,EAAS,CAAC5M,MAAO,CAAEqS,gBAAiB,WAAYrW,UAChD6D,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAC7M,MAAO,CAAEqS,gBAAiB,WAAYrW,SAAA,EAC/CP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,UAClEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,eAClEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,eAClEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,qBAClEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,aAClEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC9M,MAAO,CAAEqS,gBAAiB,UAAW9F,MAAO,SAAUvQ,SAAC,kBAIpE6D,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAwBuE,GAAI,CAAEiB,gBAAiB,WAAYrW,SAAA,EACnEP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAEwX,EAASzW,aACrB8C,EAAAA,EAAAA,MAACiN,EAAAA,EAAS,CAAA9Q,SAAA,CACR8V,EAAIE,SACLvW,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,KAAM6T,OArPxB/C,EAqPuC2C,EAnP9DlE,IAAU,GACVZ,EAAqBmC,QACrBrB,IAAoB,GAJGqB,OAqPiD7U,UACnDP,EAAAA,EAAAA,KAACiS,EAAAA,EAAI,UAIPjS,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SACR4V,MAAMC,QAAQ2B,EAASK,oBAAsBL,EAASK,kBAAkB7G,OAAS,EACjFwG,EAASK,kBAAkBpT,IAAI,CAACqT,EAAUC,KACzCtY,EAAAA,EAAAA,KAACuY,EAAAA,EAAI,CAEJnQ,MAAOiQ,EAAS/J,KAChBkB,QAAQ,WACRwC,KAAK,QACL2D,GAAI,CAAE6C,OAAQ,MAAO1H,MAAO,UAJvBwH,KAQPtY,EAAAA,EAAAA,KAAA,QAAAO,SAAM,6BAGRP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,UACTP,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IAlbfpB,WAC1B0M,EAAgBwF,GAChB1C,GAAkB,IAgb6B+F,CAAmBV,GAAUxX,UACvDP,EAAAA,EAAAA,KAAC0Y,EAAAA,EAAc,QAIoB,IAApC1Q,OAAiB,OAAV+H,SAAU,IAAVA,QAAU,EAAVA,GAAY+B,eACnB9R,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,UACTP,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,KA/T1CsL,EA+T+DmI,QA9T/DvE,IAAkB,IA8TuDjT,UACnDP,EAAAA,EAAAA,KAACiS,EAAAA,EAAI,SAKRjS,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,UACTP,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IA1YbpB,WAG5B,GAFA6P,GAAqB,GAEhBqC,EAAK/T,SAAYgR,EAKtB,IACC,MAAM9O,QAAaH,EAAAA,EAAAA,GAAU,CAC5BC,QAAQ,uDAAD4D,OAAyDmO,EAAK/T,QAAO,eAAA4F,OAAcoL,EAAS,aAAApL,OAAYmO,EAAKrH,gBAGjHxK,EAAKD,QACRuP,EAAetP,EAAKA,MAEpBI,QAAQC,MAAML,EAAKkC,QAErB,CAAE,MAAO/B,GACRC,QAAQC,MAAM,+BAAgCF,EAC/C,MAhBC8B,EAAAA,GAAM5B,MAAM,wCAsYkC+U,CAAqBZ,GAAUxX,UACzDP,EAAAA,EAAAA,KAAC4Y,EAAAA,EAAqB,UAxCVb,EAAS1W,kBA5BtB0W,EAAS1W,WA8EhBrB,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAAClH,QAAQ,QAAQsB,MAAM,gBAAevQ,SAAC,+CAjH/C2W,EAAS5Q,gBAyHhBtG,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CAAClH,QAAQ,QAAQsB,MAAM,gBAAevQ,SAAC,wDAGlD,GAAA0G,OAvJOoP,EAAIG,WAAa,QAAO,KAAAvP,OAAIoB,OA3BFA,QA8LxCrI,EAAAA,EAAAA,KAACyI,EAAAA,EAAa,CAACkN,GAAI,CAAEkD,UAAW,QAASC,SAAU,SAAUC,OAAQ,GAAIxY,UACxEP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAAUxM,QAjR3BpB,UACpBkP,GAAc,GACda,EAAqB,CAAC,IA+Q+C1S,SAAC,gBAMrE6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMmL,EAAkBjH,WAAS,EAACiE,SAAS,KAAKiI,WAAY,CAAEvQ,MAAO,CAAEwQ,aAAc,QAAUxU,SAAA,EACtGP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,SAAC,iBACb6D,EAAAA,EAAAA,MAACuB,EAAAA,EAAa,CAAApF,SAAA,EACbP,EAAAA,EAAAA,KAAA,OAAKuE,MAAO,CAAEmK,QAAS,MAAOG,QAAS,QAAStO,UAC/C6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEyQ,KAAM,EAAGnG,QAAS,OAAQG,WAAY,UAAWzO,SAAA,EAC9DP,EAAAA,EAAAA,KAAA,SAAO+O,QAAQ,cAAcxK,MAAO,CAAEoD,YAAa,OAAQpH,SAAC,iBAC5D6D,EAAAA,EAAAA,MAAA,UACCwC,GAAG,cACHZ,MAAOgN,EAAkB3R,SAAW,GACpCuD,UAAU,WACVqB,UAAQ,EACRH,SAAUpC,GArUQR,WACxB+P,EAAqBjP,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAI,IACP3C,QAASsT,EAAe3O,MACxBgT,SAAUrE,EAAevM,SAG1B,IACC,MAAM/C,QAAiBjC,EAAAA,EAAAA,GAAU,CAChCC,QAAQ,4CAAD4D,OAA8C0N,EAAe3O,SAErE,GAAIX,EAAS/B,QAAS,CACrB,MAAMmM,EAAcpK,EAAS9B,KAC7B0P,EAAqBjP,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBD,GAAI,IACP+J,aAAc0B,EAAY1B,aAC1BzM,UAAWmO,EAAYnO,UACvBC,UAAWkO,EAAYlO,UACvBC,cAAeiO,EAAYjO,cAE3BqK,YAAa4D,EAAY5D,YACzBoN,mBAAoBxJ,EAAYwJ,oBAAsB,GACtDC,gBAAiBzJ,EAAYyJ,kBAAmB,IAAInP,MAAOC,cAC3DmP,cAAe1J,EAAY0J,gBAAiB,IAAIpP,MAAOC,cACvDoP,oBAAqB3J,EAAY2J,sBAAuB,IAAIrP,MAAOC,cACnEqP,kBAAmB5J,EAAY4J,oBAAqB,IAAItP,MAAOC,gBAEjE,MACCxE,EAAAA,GAAM5B,MAAM,+BAEd,CAAE,MAAOA,GACR4B,EAAAA,GAAM5B,MAAMA,EACb,GAqSqB0V,CAAiB,CAAEtT,MAAOtC,EAAEqC,OAAOC,QAClDzB,MAAO,CAAEyQ,KAAM,EAAGrN,YAAa,OAAQpH,SAAA,EAEvCP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAGG,UAAQ,EAAA5F,SAAC,eACzBkU,GAAYzP,IAAI,CAACgC,EAAQqB,KACzBrI,EAAAA,EAAAA,KAAA,UAAoBgG,MAAOgB,EAAOhB,MAAMzF,SACtCyG,EAAOoB,OADIC,QAKfrI,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IAAMkO,GAAgB,GAAMjS,UAChDP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAASvQ,SAAC,uBAI/CP,EAAAA,EAAAA,KAAA,OAAKuE,MAAO,CAAEmK,QAAS,MAAOG,QAAS,QAAStO,UAC/C6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEyQ,KAAM,EAAGnG,QAAS,OAAQG,WAAY,UAAWzO,SAAA,EAC9DP,EAAAA,EAAAA,KAAA,SAAOuE,MAAO,CAAEoD,YAAa,OAAQpH,SAAC,cACtC6D,EAAAA,EAAAA,MAAA,UACC4B,MAAOgN,EAAkBnH,aAAe,GACxC/F,SAAU4O,GACV9P,UAAU,WACVqB,UAAQ,EACR1B,MAAO,CAAE0Q,WAAY,QAAS1U,SAAA,EAE9BP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAGG,UAAQ,EAAA5F,SAAC,iBACzB2T,GAAclP,IAAI,CAACgC,EAAQqB,KAC3BrI,EAAAA,EAAAA,KAAA,UAAoBgG,MAAOgB,EAAO6E,YAAYtL,SAC5CyG,EAAOyD,UADIpC,gBAQlBjE,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACbP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjL,QAASA,IAAMwL,GAAoB,GAAOvP,SAAC,YACnDP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAAUxM,QAzcvBpB,UACxB,IAAK8P,EAAkB3R,UAAY2R,EAAkBnH,YAEpD,YADArG,EAAAA,GAAM5B,MAAM,yDAIb,MAAMsR,EAAc,CACnB7B,QAASA,GACT3J,WAAY2I,EACZxG,YAAamH,EAAkBnH,YAC/B0N,mBAAoBvG,EAAkBoG,oBACtCI,iBAAkBxG,EAAkBqG,kBACpC1G,MAAO,CAACK,IAGT,IACC,MAAM3N,QAAiBjC,EAAAA,EAAAA,GAAU,CAChCC,QAAS,4DACTiC,OAAQ,OACRC,SAAU2P,IAGP7P,EAAS/B,SACZkC,EAAAA,GAAMlC,QAAQ+B,EAASI,SACvBqK,GAAoB,GACpBmD,EAAqB,CAAC,GACtBpP,KACAmF,MAEQ3D,EAASiQ,OACjB9P,EAAAA,GAAM+P,KAAKlQ,EAASI,SAAW,yCAMjC,CAAE,MAAO7B,GACR4B,EAAAA,GAAM5B,MAAMA,EACb,GAmayErD,SAAC,gBAIzEP,EAAAA,EAAAA,KAACkS,EAAU,CACVxN,KAAM+N,EACN/J,QAASA,IAAMgK,GAAkB,GACjC0C,KAAMzF,EACN7G,UAAWuJ,EACXgB,QAASA,GACTtK,OAAQ4G,EACRlP,OAAQA,EACRuI,SAAUA,KAGX5E,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMwO,GAAkBxK,QAASA,IAAMyK,IAAoB,GAAO5S,SAAA,EACzEP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,SAAC,iBACbP,EAAAA,EAAAA,KAACyI,EAAAA,EAAa,CAAAlI,UACbP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjL,QAASA,IAAM6O,IAAoB,GAAQrC,MAAM,UAASvQ,SAAC,iBAKrEP,EAAAA,EAAAA,KAACyZ,EAAa,CACbjZ,WAAY+R,EACZ7R,WAAYA,IAAM8R,GAAgB,GAClC3R,YAAawT,GACbqF,OAAQjZ,KAETT,EAAAA,EAAAA,KAACyZ,EAAa,CACbnZ,IAAKqP,EACLnP,WAAY+S,GACZ7S,WAAYA,IAAM8S,IAAkB,GACpC/S,OAAQoD,GACR6V,OAAQjZ,KAETT,EAAAA,EAAAA,KAAC2Z,GAAc,CACdjV,KAAMoO,EACNpK,QAASA,IAAMqK,GAAqB,GACpCtD,YAAaA,MAOjB,ECzUA,GA3UuBmK,KACnB,MAAOnZ,EAAQoZ,IAAa3X,EAAAA,EAAAA,WAAS,IAC9B4X,EAAUC,IAAe7X,EAAAA,EAAAA,UAAS,KAClC8X,EAAgBC,IAAqB/X,EAAAA,EAAAA,UAAS,KAC/C,WAAE6N,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC3BkC,EAAYC,IAAiBlQ,EAAAA,EAAAA,WAAS,IACtCoQ,EAAiB4H,IAAsBhY,EAAAA,EAAAA,UAAS,OAChDC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,IAC9B4G,EAAWqR,IAAgBjY,EAAAA,EAAAA,UAAS,IACpCkY,EAAcC,IAAmBnY,EAAAA,EAAAA,WAAS,IAC1CoY,EAAiBC,IAAsBrY,EAAAA,EAAAA,UAAS,OAChDsY,EAAoBC,IAAyBvY,EAAAA,EAAAA,WAAS,IACtDwY,EAAuBC,IAA4BzY,EAAAA,EAAAA,WAAS,IAC5D0Y,EAAaC,IAAkB3Y,EAAAA,EAAAA,UAAS,KACxC4Y,EAAYC,IAAiB7Y,EAAAA,EAAAA,WAAS,GAEvCjB,EAAYC,KAAKC,MAAMJ,aAAaC,QAAQ,UAElDiC,EAAAA,EAAAA,WAAU,KACN+X,IACAC,KACD,CAAU,OAATha,QAAS,IAATA,OAAS,EAATA,EAAWU,WAAYlB,IAE3B,MAAMya,EAAuBA,KACzBrB,EAAU7V,IAASA,GACnB+W,EAAc/W,IAASA,IAGrBgX,EAAgB9X,UAClB,IACI,MAAMK,QAAaH,EAAAA,EAAAA,GAAU,CACzBC,QAAQ,wDAAD4D,OAAmE,OAAThG,QAAS,IAATA,OAAS,EAATA,EAAWU,cAEhFoY,EAAYxW,EAAKD,QAAUC,EAAKA,KAAO,GAC3C,CAAE,MAAOG,GACLC,QAAQC,MAAMF,GACdqW,EAAY,GAChB,GAGEkB,EAAmB/X,UACrB,IACI,MAAMK,QAAaH,EAAAA,EAAAA,GAAU,CACzBC,QAAQ,qCAAD4D,OAAgD,OAAThG,QAAS,IAATA,OAAS,EAATA,EAAWU,cAE7DsY,EAAkB1W,EAAKD,QAAUC,EAAKA,KAAO,GACjD,CAAE,MAAOG,GACLC,QAAQC,MAAMF,GACduW,EAAkB,GACtB,GAGEkB,EAAYA,KACVb,IACAlX,EAAAA,EAAAA,GAAU,CACNC,QAAQ,yBACRiC,OAAQ,SACRC,SAAU,CAAEmE,WAA2B,OAAf4Q,QAAe,IAAfA,OAAe,EAAfA,EAAiB5Q,cAC1C6K,KAAKhR,IACAA,EAAKD,SACLuW,GAAWpZ,GACX+E,EAAAA,GAAMlC,QAAQC,EAAKkC,UAEnBD,EAAAA,GAAM5B,MAAML,EAAKkC,WAEtB2V,MAAM1X,GAAKC,QAAQC,MAAM,eAAgBF,IAEhD2W,GAAgB,IAKdgB,EAAU,CACZ,CAAEC,KAAM,UAAWC,SAAUjb,GAAOA,EAAImV,aAAc+F,UAAU,EAAMlM,MAAO,SAC7E,CAAEgM,KAAM,OAAQC,SAAUjb,IAAG,IAAAmb,EAAA,OAA6D,QAA7DA,EAAIzB,EAAepF,KAAK8G,GAAKA,EAAEhS,aAAepJ,EAAIoJ,mBAAW,IAAA+R,OAAA,EAAzDA,EAA2DE,mBAAmBH,UAAU,GACzH,CAAEF,KAAM,SAAUC,SAAUjb,IAAG,IAAAsb,EAAA,OAA6D,QAA7DA,EAAI5B,EAAepF,KAAK8G,GAAKA,EAAEhS,aAAepJ,EAAIoJ,mBAAW,IAAAkS,OAAA,EAAzDA,EAA2DC,QAAQL,UAAU,GAChH,CAAEF,KAAM,WAAYC,SAAUjb,GAAOA,EAAIgK,WAAa,IAAIP,KAAKzJ,EAAIgK,YAAYwR,mBAAmB,SAAW,MAAON,UAAU,GAC9H,CAAEF,KAAM,WAAYC,SAAUjb,IAAG,SAAA2G,QAPbmO,EAOmC9U,EAAIyb,gBAPjCC,EAOkD1b,EAAI0W,eAPtB,IAAjBhP,OAAOoN,GAAc,GAAMpN,OAAOgU,GAAahU,OAAOoN,GAAS,KAAK6G,QAAQ,IAOtB,KAP5EC,IAAC9G,EAAM4G,GAO0ER,UAAU,GAC9G,CACIF,KAAM,eAAgBa,KAAM7b,IACxB8D,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,EACIP,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IAAM8X,EAA4B9b,GAAKC,UACxDP,EAAAA,EAAAA,KAACqc,EAAAA,EAAM,MAEV/b,EAAI0W,eAAe,MAAI1W,EAAIyb,oBAKxC,CAAET,KAAM,aAAeC,SAAUjb,GAAU,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKyb,gBAAiBP,UAAU,EAAMA,UAAU,GAExF,CAAEF,KAAM,WAAYC,SAAUjb,GAAOA,EAAIgc,yBACzC,CACIhB,KAAM,YAAaa,KAAM7b,IACrB8D,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,CACwC,IAAnCyH,OAAiB,OAAV+H,QAAU,IAAVA,OAAU,EAAVA,EAAYwM,cAChBvc,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IAAMkY,GAAyBlc,EAAIoJ,YAAYnJ,UAChEP,EAAAA,EAAAA,KAACyc,EAAAA,EAAM,MAGdnc,EAAIoc,sBAIjB,CACIpB,KAAM,UAAWa,KAAM7b,IACnBN,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAA9D,SACyC,IAApCyH,OAAiB,OAAV+H,QAAU,IAAVA,OAAU,EAAVA,EAAY+B,eAChB9R,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,CAACzN,QAASA,IAAMqY,EAAqBrc,GAAKC,UAACP,EAAAA,EAAAA,KAACiS,EAAAA,EAAI,UAOzE2K,EAAmB9C,EAAS+C,OAAOC,IAAY,IAADC,EAAAC,EAChD,MAAMC,GAA2E,QAA7DF,EAAA/C,EAAepF,KAAK8G,GAAKA,EAAEhS,aAAeoT,EAAQpT,mBAAW,IAAAqT,OAAA,EAA7DA,EAA+DpB,oBAAqB,GAClGrG,GAAsE,QAA7D0H,EAAAhD,EAAepF,KAAK8G,GAAKA,EAAEhS,aAAeoT,EAAQpT,mBAAW,IAAAsT,OAAA,EAA7DA,EAA+DnB,SAAU,GACxF,OACIiB,EAAQrH,aAAayH,cAAcC,SAASvC,EAAYsC,gBACxDD,EAAYC,cAAcC,SAASvC,EAAYsC,gBAC/C5H,EAAO4H,cAAcC,SAASvC,EAAYsC,iBAU5CP,EAAuBG,IACzB5C,EAAmB4C,GACnB1a,GAAU,GACVgQ,GAAc,IAQZgK,EAA8BU,IAChC5C,EAAmB4C,GACnB3C,EAAa2C,EAAQpT,YACrBiR,GAAyB,IAGvByC,EAAqBA,KACvBhL,GAAc,GACduI,GAAyB,GACzBT,EAAmB,MACnBK,EAAmB,MACnBF,GAAgB,IAGdmC,GAA2B1T,IAC7BqR,EAAarR,GACb2R,GAAsB,IAG1B,OACIrW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,EACI6D,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,kEAAiErE,SAAA,EAC5EP,EAAAA,EAAAA,KAAA,QAAMuE,MAAO,CAAE0Q,WAAY,QAAS1U,SAAC,cACrC6D,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,OAAOL,MAAO,CAAEsK,QAAS,OAAQG,WAAY,UAAWzO,SAAA,EACnE6D,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEuU,SAAU,WAAYjK,QAAS,OAAQG,WAAY,UAAWzO,SAAA,EACxEP,EAAAA,EAAAA,KAACqd,EAAAA,EAAU,CAAC9Y,MAAO,CAAEuU,SAAU,WAAYwE,KAAM,GAAIxM,MAAO,WAC5D9Q,EAAAA,EAAAA,KAAA,SACIsI,KAAK,OACLpC,YAAY,SACZJ,SAAUpC,GAAKmX,EAAenX,EAAEqC,OAAOC,OACvCzB,MAAO,CACH4J,YAAa,GACbxG,YAAa,GACb6Q,OAAQ,GACRzD,aAAc,EACdwI,OAAQ,wBAIgB,IAAnCvV,OAAiB,OAAV+H,QAAU,IAAVA,OAAU,EAAVA,EAAYwM,cAChBvc,EAAAA,EAAAA,KAAA,UAAQsE,QAzDGkZ,KAC3BtD,EAAmB,MACnB9X,GAAU,GACVgQ,GAAc,IAsD2CxN,UAAU,+BAA8BrE,SAAC,0BAO9F6D,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,gCAA+BrE,SAAA,EAC1CP,EAAAA,EAAAA,KAACyd,EAAAA,GAAS,CACNpC,QAASA,EACT9X,KAAMqZ,EACNc,YAAU,EACVC,kBAAgB,EAChBC,aAAW,EACXC,kBAAmB,GACnBC,YAAU,EACVC,kBAAgB,EAChBC,aAAc,CACVC,UAAW,CACP1Z,MAAO,CACHrE,SAAU,OACVwX,WAAY,OACZhJ,QAAS,OACTkI,gBAAiB,UACjB9F,MAAO,UACPgI,SAAU,SACVoF,IAAK,EACLC,OAAQ,IAGhBC,MAAO,CACH7Z,MAAO,CACHmK,QAAS,MACTxO,SAAU,OACV0W,gBAAiB,UACjB9F,MAAO,YAGfrK,KAAM,CACFlC,MAAO,CACHyR,aAAc,oBAI1BzR,MAAO,CACH8Z,UAAW,OACXpG,UAAW,0BAMnB7T,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACHC,KAAM0V,EACN1R,QAAS0U,EACT,kBAAgB,sBAChB,mBAAiB,4BAA2B7c,SAAA,EAC5CP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAACC,UAAU,sCAAsCL,MAAO,CAAErE,SAAU,QAASK,SAAC,sBAG1F6D,EAAAA,EAAAA,MAACuB,EAAAA,EAAa,CAACf,UAAU,MAAML,MAAO,CAAErE,SAAU,QAASK,SAAA,CAAC,+CAExDP,EAAAA,EAAAA,KAAA,QAAM4E,UAAU,eAAcrE,SAAE,KAAqB,OAAf+Z,QAAe,IAAfA,OAAe,EAAfA,EAAiB7E,cAAe,MAAW,QAErFrR,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAAA,UACIsE,QAASA,IAAM+V,GAAgB,GAC/BzV,UAAU,iCACVL,MAAO,CACH+Z,WAAY,UACZxN,MAAO,QACPiE,aAAc,OACdrG,QAAS,WACTlK,OAAQ,WACVjE,SACL,YAGDP,EAAAA,EAAAA,KAAA,UACIsE,QAAS6W,EACTvW,UAAU,8BACVL,MAAO,CACH+Z,WAAY,UACZxN,MAAO,QACPiE,aAAc,OACdrG,QAAS,WACTlK,OAAQ,WACVjE,SACL,qBASbP,EAAAA,EAAAA,KAACue,GAAW,CACR7V,QAAS0U,EACTjL,WAAYuI,EACZtI,cAAeuI,EACfxY,QAAQ,EACRlB,UAAWA,EACXoR,UAAWvJ,EACXE,SAAUkS,EACV5I,gBAAiBA,EACjB7R,OAAQA,KAIZT,EAAAA,EAAAA,KAACwe,EAAAA,EAAW,CACR9Z,KAAMyN,EACNzJ,QAAS0U,EACTza,WAAY2P,EACZnQ,OAAQA,EACR0X,UAAWqB,EACXuD,YAAa3V,KAGjB9I,EAAAA,EAAAA,KAAC0e,EAAAA,EAAwB,CACrBha,KAAM8V,EACN9R,QAASA,IAAM+R,GAAsB,GACrC3R,UAAWA,EACXE,SAAUkS,KAGd9W,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACHC,KAAM0V,EACN1R,QAAS0U,EACT,kBAAgB,sBAChB,mBAAiB,4BAA2B7c,SAAA,EAC5CP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAACC,UAAU,uCAAsCrE,SAAC,kBAC9D6D,EAAAA,EAAAA,MAACuB,EAAAA,EAAa,CAACf,UAAU,MAAKrE,SAAA,CAAC,qCAE3BP,EAAAA,EAAAA,KAAA,QAAM4E,UAAU,eAAcrE,SAAE,KAAqB,OAAf+Z,QAAe,IAAfA,OAAe,EAAfA,EAAiB7E,cAAe,MAAW,QAErFrR,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAAA,UAAQsE,QAASA,IAAM+V,GAAgB,GAAQzV,UAAU,iCAAgCrE,SAAC,YAG1FP,EAAAA,EAAAA,KAAA,UAAQsE,QAAS6W,EAAWvW,UAAU,8BAA6BrE,SAAC,oB,6QCvTxF,MAkOA,EAlOiCF,IAA6C,IAA5C,KAAEqE,EAAI,QAAEgE,EAAO,UAAEI,EAAS,SAAEE,GAAU3I,EAEpE,MAAMe,EAAe,CACjBkN,KAAM,GACNqQ,iBAAkB,GAClBC,WAAY,KAGTC,EAAWC,IAAgB5c,EAAAA,EAAAA,UAASd,IACpCgI,EAASC,IAAcnH,EAAAA,EAAAA,WAAS,IAChC6c,EAAuBC,IAA4B9c,EAAAA,EAAAA,WAAS,IAC5D+c,EAAmBC,IAAwBhd,EAAAA,EAAAA,UAAS,KACpDid,EAAmBC,IAAwBld,EAAAA,EAAAA,UAAS,IACrDpB,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,IACvB,WAAEiP,IAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAElChN,EAAAA,EAAAA,WAAU,KACFyB,GAAQoE,IACRuW,IACAC,IACAC,MAEL,CAAC7a,EAAMoE,IAEV,MAIMuW,EAAuBnc,UACzBmG,GAAW,GACX,IACI,MAAM9F,QAAaH,EAAAA,EAAAA,GAAU,CACzBC,QAAQ,sCAAD4D,OAAwC6B,KAE/CvF,EAAKD,SACLwb,EAAavb,EAAKA,KAE1B,CAAE,MAAOG,GACLC,QAAQC,MAAMF,GACd8B,EAAAA,GAAM5B,MAAM,mCAChB,CAAC,QACGyF,GAAW,EACf,GAGEiW,EAAyBpc,UAC3BmG,GAAW,GACX,IACI,MAAM9F,QAAaH,EAAAA,EAAAA,GAAU,CACzBC,QAAQ,+CAAD4D,OAAiDhG,EAAUU,cAElE4B,EAAKD,SACL4b,EAAqB3b,EAAKA,KAElC,CAAE,MAAOG,GACLC,QAAQC,MAAMF,GACd8B,EAAAA,GAAM5B,MAAM,yCAChB,CAAC,QACGyF,GAAW,EACf,GAGEkW,EAAyBrc,UAC3BmG,GAAW,GACX,IACI,MAAM9F,QAAaH,EAAAA,EAAAA,GAAU,CACzBC,QAAQ,sCAAD4D,OAAwC6B,KAE/CvF,EAAKD,SACL8b,EAAqB7b,EAAKA,KAElC,CAAE,MAAOG,GACLC,QAAQC,MAAMF,GACd8B,EAAAA,GAAM5B,MAAM,qCAChB,CAAC,QACGyF,GAAW,EACf,GAwCEmW,EAAWA,KAEb9W,IACAoW,EAAa1d,IAEjB,OACIgD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA9D,SAAA,EACI6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMA,EAAMmI,SAAS,KAAKjE,WAAS,EAAArI,SAAA,EACvC6D,EAAAA,EAAAA,MAACsR,EAAAA,EAAG,CAAC7G,QAAQ,OAAOgC,eAAe,gBAAgB7B,WAAW,SAAS6J,UAAW,EAAG4G,kBAAmB,EAAElf,SAAA,EACtGP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,sBAG1BP,EAAAA,EAAAA,KAACyI,EAAAA,EAAa,CAAAlI,UACMP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CACHC,QAAQ,YACRsB,MAAM,UACNxM,QArDUob,KAC1BV,GAAyB,IAqDTrJ,GAAI,CAAEgK,GAAI,GAAIpf,SACjB,cAcLP,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,SACT6I,GACGpJ,EAAAA,EAAAA,KAAA,KAAAO,SAAG,gBAEHP,EAAAA,EAAAA,KAACiR,EAAAA,EAAc,CAAA1Q,UACX6D,EAAAA,EAAAA,MAAC8M,EAAAA,EAAK,CAAA3Q,SAAA,EACFP,EAAAA,EAAAA,KAACmR,EAAAA,EAAS,CAAA5Q,UACN6D,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAA7Q,SAAA,EACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAC,mBACXP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAC,cACXP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAC,qBAGnBP,EAAAA,EAAAA,KAACsR,EAAAA,EAAS,CAAA/Q,SACL4V,MAAMC,QAAQyI,IAAcA,EAAUtN,OAAS,EAC5CsN,EAAU7Z,IAAI4a,IACVxb,EAAAA,EAAAA,MAACgN,EAAAA,EAAQ,CAAA7Q,SAAA,EACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAEqf,EAAKtR,MAAQ,SACzBtO,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAEqf,EAAKjB,kBAAoB,OACrC3e,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAA9Q,SAAEqf,EAAKhB,YAAc,QAHpBgB,EAAKC,YAAcD,EAAKle,UAO3C1B,EAAAA,EAAAA,KAACoR,EAAAA,EAAQ,CAAA7Q,UACLP,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAACG,QAAS,EAAEjR,SAAC,kCASnDP,EAAAA,EAAAA,KAACyI,EAAAA,EAAa,CAACkN,GAAI,CAAEkD,UAAW,QAASC,SAAU,SAAUC,OAAQ,GAAIxY,UACrEP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACC,QAAQ,YAAYsB,MAAM,UAAUxM,QAASkb,EAASjf,SAAC,gBAKvE6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CACHC,KAAMqa,EAENlS,SAAS,KACTjE,WAAS,EAAArI,SAAA,EAETP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAAApE,SAAC,kBACbP,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,UACVP,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CACTC,UAAQ,EACRE,QAASoY,EACTlY,eAAiBC,GAAWA,EAAOsH,KACnCzG,qBAAsBA,CAACb,EAAQhB,IAAUgB,EAAOtF,SAAWsE,EAAMtE,OACjEoE,SAAUA,CAACsB,EAAOpB,KACd,MAAM8Z,EAAe9Z,EAAM6W,OAAO,CAAC9U,EAAKM,EAAO0X,IAC3C1X,IAAU0X,EAAKC,UAAWC,GACtBA,EAAEve,SAAWqG,EAAIrG,SAGzB0d,EAAqBU,IAEzBI,gBAxLE3Y,IACXvH,EAAAA,EAAAA,KAACmgB,EAAAA,GAAMlc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKsD,GAAK,IAAE6Y,UAAU,SAwLpBpa,MAAOmZ,EACPzW,QAAS2X,QACTpY,YAAcC,IACVlI,EAAAA,EAAAA,KAACmI,EAAAA,GAASlE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKiE,GAAM,IAAEhC,YAAY,oBAI/C9B,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjL,QAtIOgc,KAC3BtB,GAAyB,GACzBQ,IACAV,EAAa1d,IAmIuCb,SAAC,YACzCP,EAAAA,EAAAA,KAACuP,EAAAA,EAAM,CAACjL,QAjIGpB,UACvB,GAAuC,IAAnC8E,OAAiB,OAAV+H,QAAU,IAAVA,OAAU,EAAVA,EAAYwM,YACnB,WAC2BnZ,EAAAA,EAAAA,GAAU,CAC7BC,QAAS,sCACTiC,OAAQ,OACRC,SAAU,CACNmE,WAAYZ,EACZyX,QAASpB,EAAkBna,IAAIwb,GAAOA,EAAI9e,YAIrC4B,SACTkC,EAAAA,GAAMlC,QAAQ,gCACd0b,GAAyB,SACnBK,UACAE,IACNvW,KAEAxD,EAAAA,GAAM5B,MAAM,0BAEpB,CAAE,MAAOA,GACLD,QAAQC,MAAMA,GACd4B,EAAAA,GAAM5B,MAAM,yBAChB,GAyG6C4L,QAAQ,YAAYsB,MAAM,UAASvQ,SAAC,iB,kDCjP7F,MAIA,EAJqBqF,KACjB5F,EAAAA,EAAAA,KAAA,QAAMuE,MAAO,CAAEuM,MAAO,MAAO4G,WAAY,OAAQxX,SAAU,OAAQK,SAAC,M,2KCQxE,MA+PA,EA/PoBF,IAAuD,IAAtD,KAAEqE,EAAI,QAAEgE,EAAO,WAAE/F,EAAU,OAAER,EAAM,UAAE0X,GAAWxZ,EACjE,MAAMS,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,IAEtBmc,EAAawD,IAAkBve,EAAAA,EAAAA,UAAS,KACxCwe,EAAWC,IAAgBze,EAAAA,EAAAA,UAAS,KAGpC0e,EAAUC,IAAe3e,EAAAA,EAAAA,UAAS,CACrCwH,WAAY,GACZ+L,aAAc,GACdqL,aAAc,GACdC,aAAc,GACd1W,cAAc2W,EAAAA,EAAAA,MACd1W,YAAY0W,EAAAA,EAAAA,MACZC,eAAgB,GAChBxf,SAAmB,OAATR,QAAS,IAATA,OAAS,EAATA,EAAWS,OACrBC,WAAqB,OAATV,QAAS,IAATA,OAAS,EAATA,EAAWU,cAG3BsB,EAAAA,EAAAA,WAAU,MAENG,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8CAAD4D,OAAyD,OAAThG,QAAS,IAATA,OAAS,EAATA,EAAWU,cACnE4S,KAAKhR,IACJkd,EAAeld,EAAKD,QAAUC,EAAKA,KAAO,MAE3C6X,MAAM1X,GAAKC,QAAQC,MAAM,eAAgBF,KAC7C,CAAU,OAATzC,QAAS,IAATA,OAAS,EAATA,EAAWU,cAEfsB,EAAAA,EAAAA,WAAU,MAENG,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8BACTkR,KAAKhR,IACAA,EAAKD,SACLqd,EAAapd,EAAKA,QAEvB6X,MAAM1X,GAAKC,QAAQC,MAAM,eAAgBF,KAC7C,KAEHT,EAAAA,EAAAA,WAAU,KACFyB,IAEIvC,GAAUQ,EACVke,GAAW5c,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACNtB,GAAU,IACboe,aAAwB,OAAVpe,QAAU,IAAVA,OAAU,EAAVA,EAAYue,gBAC1B7W,aAAc1H,EAAW0H,cAAe2W,EAAAA,EAAAA,IAAUre,EAAW0H,cAAgB,GAC7EC,WAAY3H,EAAW2H,YAAa0W,EAAAA,EAAAA,IAAUre,EAAW2H,YAAc,GACvE2W,gBAA0B,OAAVte,QAAU,IAAVA,OAAU,EAAVA,EAAYse,iBAAkB,GAC9CH,cAAwB,OAAVne,QAAU,IAAVA,OAAU,EAAVA,EAAYme,eAAgB,OAEtC3e,GAER0e,EAAY,CACRpL,aAAc,GACdqL,aAAc,GACdC,aAAc,GACd1W,cAAc2W,EAAAA,EAAAA,MACd1W,YAAY0W,EAAAA,EAAAA,MACZC,eAAgB,GAChBxf,SAAmB,OAATR,QAAS,IAATA,OAAS,EAATA,EAAWS,OACrBC,WAAqB,OAATV,QAAS,IAATA,OAAS,EAATA,EAAWU,eAIpC,CAACgB,EAAY+B,EAAMvC,IAItB,MAAMgf,EAAgBzd,IAClBmd,GAAW5c,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI2c,GAAQ,IAAE,CAACld,EAAEqC,OAAOuV,MAAO5X,EAAEqC,OAAOC,UAGnDob,EAAiBA,KACnB,MAAMC,EAAiB,CACnB,eACA,eACA,eACA,aACA,kBAGJ,IAAK,MAAMC,KAASD,EAChB,IAAKT,EAASU,GAEV,OADA9b,EAAAA,GAAM5B,MAAM,GAADqD,OAAIqa,EAAMC,QAAQ,KAAM,KAAI,kBAChC,EAIf,OAAO,GAoDLC,EAAc,CAChB,CACIpZ,MAAO,eACPqZ,KAAM,QACNnZ,KAAM,OACNrC,UAAU,EACVqV,KAAM,eACNtV,MAAO4a,EAASnL,cAAgB,IAEpC,CACIrN,MAAO,eACPqZ,KAAM,SACN5a,QAASoW,EAAYjY,IAAIqJ,IAAG,CAAOrI,MAAU,OAAHqI,QAAG,IAAHA,OAAG,EAAHA,EAAK3M,OAAQ0G,MAAU,OAAHiG,QAAG,IAAHA,OAAG,EAAHA,EAAKC,QACnErI,UAAU,EACVqV,KAAM,eACNtV,MAAO4a,EAASG,cAAgB,IAEpC,CACI3Y,MAAO,uBACPqZ,KAAM,QACNnZ,KAAM,OACNrC,UAAU,EACVqV,KAAM,eACNtV,MAAO4a,EAASvW,cAAgB,IAEpC,CACIjC,MAAO,qBACPqZ,KAAM,QACNnZ,KAAM,OACNrC,UAAU,EACVqV,KAAM,aACNtV,MAAO4a,EAAStW,YAAc,IAElC,CACIlC,MAAO,iBACPqZ,KAAM,SACN5a,QAAS6Z,EAAU1b,IAAIqJ,IAAG,CAAOrI,MAAOqI,EAAIqT,UAAWtZ,MAAOiG,EAAIwN,UAClE5V,UAAU,EACVqV,KAAM,iBACNtV,MAAO4a,EAASK,gBAAkB,IAEtC,CACI7Y,MAAO,cACPqZ,KAAM,WACNnG,KAAM,eACNtV,MAAO4a,EAASE,cAAgB,MAIxC,OACI9gB,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAA9D,UACI6D,EAAAA,EAAAA,MAACK,EAAAA,EAAM,CAACC,KAAMA,EAAMgE,QAASA,EAAQnI,SAAA,EACjCP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAW,CAACC,UAAU,uCAAsCrE,SACxD4B,EAAS,eAAiB,oBAE/BnC,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAApF,UACV6D,EAAAA,EAAAA,MAAA,QAAMS,SA7DAnB,IAClBA,EAAEoB,iBACF3C,EAnBKif,MAELhe,EAAAA,EAAAA,GAAU,CACNC,QAAQ,yBACRiC,OAAQ,MACRC,SAAUqb,IACXrM,KAAKhR,IACAA,EAAKD,SACLoF,IACAmR,EAAU7V,IAASA,GACnBwB,EAAAA,GAAMlC,QAAQC,EAAKkC,UAEnBD,EAAAA,GAAM5B,MAAML,EAAKkC,WAEtB2V,MAAM1X,GAAKC,QAAQC,MAAM,eAAgBF,IAzC9Bie,MACd,IAAKP,IAAkB,OAEvB,MAAMQ,GAAO3d,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN2c,GAAQ,IACXjf,WAAYV,EAAUU,cAG1ByB,EAAAA,EAAAA,GAAU,CACNC,QAAQ,yBACRiC,OAAQ,OACRC,SAAUqc,IACXrN,KAAKhR,IACAA,EAAKD,SACLoF,IACAmR,EAAU7V,IAASA,GACnBwB,EAAAA,GAAMlC,QAAQC,EAAKkC,UAEnBD,EAAAA,GAAM5B,MAAML,EAAKkC,WAEtB2V,MAAM1X,IACLC,QAAQC,MAAM,eAAgBF,GAC9B8B,EAAAA,GAAM5B,MAAM,oDAwBK+d,IA2DoBphB,SAAA,EACzBP,EAAAA,EAAAA,KAAA,OAAK4E,UAAU,MAAKrE,SACfihB,EAAYxc,IAAI,CAACsc,EAAOjZ,KACrBjE,EAAAA,EAAAA,MAAA,OAAiBQ,UAAU,gBAAerE,SAAA,EACtC6D,EAAAA,EAAAA,MAAA,SAAA7D,SAAA,CAAQ+gB,EAAMlZ,MAAM,IAAEkZ,EAAMrb,WAAYjG,EAAAA,EAAAA,KAAC4F,EAAAA,EAAY,OACrC,aAAf0b,EAAMG,MACHzhB,EAAAA,EAAAA,KAAA,YACIsb,KAAMgG,EAAMhG,KACZ1W,UAAU,WACVoB,MAAOsb,EAAMtb,MACbF,SAAUqb,IAEC,WAAfG,EAAMG,MACNrd,EAAAA,EAAAA,MAAA,UACIkX,KAAMgG,EAAMhG,KACZ1W,UAAU,WACVoB,MAAOsb,EAAMtb,MACbF,SAAUqb,EAAa5gB,SAAA,EAEvBP,EAAAA,EAAAA,KAAA,UAAQgG,MAAM,GAAEzF,SAAC,WAChB+gB,EAAMza,SAAWya,EAAMza,QAAQ7B,IAAI,CAACgC,EAAQ6a,KACzC7hB,EAAAA,EAAAA,KAAA,UAAkBgG,MAAOgB,EAAOhB,MAAMzF,SAAEyG,EAAOoB,OAAlCyZ,QAIrB7hB,EAAAA,EAAAA,KAAA,SACIsI,KAAMgZ,EAAMhZ,KACZgT,KAAMgG,EAAMhG,KACZ1W,UAAU,WACVoB,MAAOsb,EAAMtb,MACbF,SAAUqb,MA3BZ9Y,OAiClBjE,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAlI,SAAA,EACVP,EAAAA,EAAAA,KAAA,UACI4E,UAAU,+BACV0D,KAAK,SACLhE,QAASoE,EAAQnI,SAAC,YAGtBP,EAAAA,EAAAA,KAAA,UACI4E,UAAU,iCACV0D,KAAK,SAAQ/H,SACZ4B,EAAS,SAAW,wB,+IC3PxC2f,EAAoB,CAC7BC,MAAO,CACHxd,MAAO,CACH+K,MAAO,OACPsH,gBAAiB,gBAIzBnQ,KAAM,CACFlC,MAAO,CACHqS,gBAAiB,gBAGzBqH,UAAW,CACP1Z,MAAO,CACHqS,gBAAiB,YACjB9F,MAAO,QACP5Q,SAAU,UAMTsO,EAAqB,CAM9BwT,KAAMA,CAACC,EAAUC,KAAKje,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfge,GAAQ,IACX9D,OAAQ,OAEZgE,WAAYC,IAAIne,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUme,GAAI,IAAEjE,OAAQ,OACxCkE,aAAeD,IAAIne,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZme,GAAI,IACPxL,gBAAiB,UACjB9F,MAAO,OACP4G,WAAY,OACZxX,SAAU,OACVwO,QAAS,WACTsH,aAAc,iBACdsM,cAAe,cAEnBtb,OAAQA,CAACob,EAAMF,KAAKje,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbme,GAAI,IACPxL,gBAAiBsL,EAAMK,WACjB,UACAL,EAAMM,UACF,UACA,QACV1R,MAAOoR,EAAMK,WAAa,QAAU,OACpC7T,QAAS,eAmBJ+T,EAAW,CACpB,CACI7b,GAAI,EACJ8b,SAAU,UACVlT,QAAS,OACTmT,MAAO,OACPrT,MAAO,KAEX,CACI1I,GAAI,EACJ8b,SAAU,YAEd,CACI9b,GAAI,EACJ8b,SAAU,eAEd,CACI9b,GAAI,EACJ8b,SAAU,cAEd,CACI9b,GAAI,EACJ8b,SAAU,eAEd,CACI9b,GAAI,EACJ8b,SAAU,iBAEd,CACI9b,GAAI,EACJ8b,SAAU,gBAEd,CACI9b,GAAI,EACJ8b,SAAU,WAILE,EAAiB,CAC1B,CACIC,SAAU,EACVvH,KAAM,kBACNwH,SAAU,8BACVzf,QAAS,iGACT0f,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIR,SAAU,EACVvH,KAAM,oBACNwH,SAAU,GACVzf,QAAS,4JACT0f,KAAMC,EACNC,MAAO,kBACPC,MAAO,eACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIR,SAAU,EACVvH,KAAM,kBACNwH,SAAU,GACVzf,QAAS,4HACT0f,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,gBAIDC,EAAa,CACtB,CAAEhI,KAAM,kBACR,CAAEA,KAAM,oBACR,CAAEA,KAAM,cACR,CAAEA,KAAM,gBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,iBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,U","sources":["Pages/Tasks/Components/newaddEditTask.jsx","Pages/Tasks/taskAssign/addEditTaskAssign.jsx","Pages/Tasks/taskDetails/taskIndividual.jsx","Pages/Tasks/taskDetails/listingTask.jsx","Pages/Masters/ProjectList.jsx","Pages/employeeManagement/employeeManagement.jsx","Components/requiredStar.jsx","Pages/ProjectList/addEditProject.jsx","Components/tablecolumn.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport '../../common.css';\r\nimport { CheckBoxOutlineBlank, CheckBox } from '@mui/icons-material';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Checkbox, TextField, Autocomplete } from '@mui/material';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject } from '../../../Components/functions';\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst icon = <CheckBoxOutlineBlank fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBox fontSize=\"small\" />;\r\n\r\nconst TaskMasterMgt = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff, onTaskAdded }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    \r\n    const initialValue = {\r\n        Task_Id: \"\",\r\n        Task_Name: \"\",\r\n        Task_Desc: \"\",\r\n        Task_Group_Id: \"\",\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id,\r\n        Entry_Date: \"\",\r\n        Update_By: '',\r\n        Update_Date: \"\",\r\n        Task_Parameters: [],\r\n    };\r\n\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [taskData, setTaskData] = useState([]);\r\n    const [taskGroup, setTaskGroup] = useState([]);\r\n    const [taskParameters, setTaskParameters] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [editDialog, setEditDialog] = useState(false);\r\n    const [editInputValue, setEditInputValue] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const taskResponse = await fetchLink({ address: `taskManagement/tasks/dropdown` });\r\n                if (taskResponse.success) setTaskData(taskResponse.data);\r\n\r\n                const taskGroupResponse = await fetchLink({ address: `masters/taskType/dropDown` });\r\n                if (taskGroupResponse.success) setTaskGroup(taskGroupResponse.data);\r\n\r\n                const taskParametersResponse = await fetchLink({ address: `taskManagement/parameters` });\r\n                if (taskParametersResponse.success) setTaskParameters(taskParametersResponse.data);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setDialog(openAction);\r\n    }, [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            console.log(row)\r\n            setInputValue(prev => ({\r\n                ...prev,\r\n                ...row,\r\n                Task_Group_Id: row.Task_Group_Id || \"\",\r\n            }));\r\n            setIsEdit(true);\r\n        } else {\r\n            setInputValue(initialValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row]);\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false);\r\n        if (onCloseFun) onCloseFun();\r\n    };\r\n\r\n    const closeEditDialog = () => {\r\n        setEditDialog(false); \r\n        setEditInputValue(initialValue); \r\n    };\r\n\r\n    const postAndPutTask = async () => {\r\n        const paramArr = inputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...inputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: isEdit ? 'PUT' : 'POST',\r\n                bodyData: PostObj,\r\n            });\r\n             \r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                setInputValue(initialValue)\r\n                closeDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded(); \r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    // const openEditDialog = () => {\r\n    //     setEditInputValue({\r\n    //         ...inputValue,\r\n    //         Task_Group_Id: inputValue.Type_Task_Id, \r\n    //     });\r\n\r\n    //     setEditDialog(true);\r\n    // };\r\n\r\n    const handleEditSubmit = async () => {\r\n        const paramArr = editInputValue.Task_Parameters.map(param => ({\r\n            ...param,\r\n            Param_Id: param.Paramet_Id,\r\n        })) || [];\r\n\r\n        const PostObj = {\r\n            ...editInputValue,\r\n            Task_Parameters: paramArr,\r\n        };\r\n\r\n\r\n\r\n        if (loadingOn) loadingOn();\r\n\r\n        try {\r\n            const response = await fetchLink({\r\n                address: `taskManagement/tasks`,\r\n                method: 'PUT',\r\n                bodyData: PostObj,\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                closeEditDialog();\r\n                if (reload) reload();\r\n                if (onTaskAdded) onTaskAdded();\r\n            } else {\r\n                toast.error(response.message);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error(\"An error occurred while processing your request.\");\r\n        } finally {\r\n            if (loadingOff) loadingOff();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog open={dialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? 'Edit Task' : 'Add Task'}\r\n                </DialogTitle>\r\n\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    postAndPutTask();\r\n                }}>\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Name <RequiredStar /></label>\r\n                                <input\r\n                                    maxLength={150}\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Name: e.target.value })}\r\n                                    required\r\n                                    value={inputValue.Task_Name}\r\n                                    placeholder=\"ex: File Checking\"\r\n                                    className=\"cus-inpt\" />\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Task Group <RequiredStar /></label>\r\n                                <select\r\n                                    value={inputValue.Task_Group_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    required\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Group_Id: e.target.value })}>\r\n                                    <option value=\"\" disabled>- select -</option>\r\n                                    {taskGroup.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Type_Id}>\r\n                                            {o.Task_Type}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-md-4 p-2\">\r\n                                <label>Base Task</label>\r\n                                <select\r\n                                    value={inputValue.Under_Task_Id}\r\n                                    className=\"cus-inpt\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Under_Task_Id: e.target.value })}>\r\n                                    <option value={0}>Primary</option>\r\n                                    {taskData.map((o, i) => (\r\n                                        <option key={i} value={o.Task_Id}>\r\n                                            {o.Task_Name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-12\">\r\n                                <label>Task Description <RequiredStar /></label>\r\n                                <textarea\r\n                                    className=\"cus-inpt\"\r\n                                    value={inputValue.Task_Desc}\r\n                                    rows=\"3\"\r\n                                    onChange={e => setInputValue({ ...inputValue, Task_Desc: e.target.value })} />\r\n                            </div>\r\n                            <div className=\"col-md-12 p-2\">\r\n                                <Autocomplete\r\n                                    multiple\r\n                                    id=\"checkboxes-tags-demo\"\r\n                                    options={taskParameters}\r\n                                    disableCloseOnSelect\r\n                                    getOptionLabel={(option) => `${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                    value={inputValue.Task_Parameters || []}\r\n                                    onChange={(event, newValue) => setInputValue({ ...inputValue, Task_Parameters: newValue })}\r\n                                    renderOption={(props, option, { selected }) => (\r\n                                        <li {...props}>\r\n                                            <Checkbox\r\n                                                icon={icon}\r\n                                                checkedIcon={checkedIcon}\r\n                                                style={{ marginRight: 8 }}\r\n                                                checked={selected}\r\n                                            />\r\n                                            {`${option.Paramet_Name} - ${option.Paramet_Data_Type}`}\r\n                                        </li>\r\n                                    )}\r\n                                    className=\"pt-2\"\r\n                                    isOptionEqualToValue={(opt, val) => Number(opt.Paramet_Id) === Number(val.Paramet_Id)}\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} label=\"Task Parameters\" placeholder=\"Choose Task Parameters\" />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n                            {inputValue.Task_Parameters.map((param, index) => (\r\n                                <div key={index} className=\"col-md-4 p-2\">\r\n                                    <label className=\"mb-2\">{param.Paramet_Name}</label>\r\n                                    <input\r\n                                        type={param.Paramet_Data_Type || 'text'}\r\n                                        className=\"cus-inpt\"\r\n                                        onChange={(e) => {\r\n                                            const updatedParams = [...inputValue.Task_Parameters];\r\n                                            updatedParams[index] = {\r\n                                                ...updatedParams[index],\r\n                                                Default_Value: e.target.value,\r\n                                            };\r\n                                            setInputValue({ ...inputValue, Task_Parameters: updatedParams });\r\n                                        }}\r\n                                        value={param.Default_Value}\r\n                                        placeholder=\"Default Value\"\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <button\r\n                            className=\"btn btn-light rounded-5 px-3\"\r\n                            type=\"button\"\r\n                            onClick={closeDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary rounded-5 px-3\"\r\n                            type='submit'>\r\n                            Submit\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {/* Edit Task Dialog */}\r\n            <Dialog open={editDialog} onClose={closeEditDialog}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Edit Task</DialogTitle>\r\n                <form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    handleEditSubmit();\r\n                }}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            label=\"Task Name\"\r\n                            value={editInputValue.Task_Name}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Name: e.target.value })}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Task Group\"\r\n                            select\r\n                            value={editInputValue.Task_Group_Id}\r\n                            onChange={e => setEditInputValue({ ...editInputValue, Task_Group_Id: e.target.value })}\r\n                            fullWidth\r\n                        >\r\n                            <option value=\"\" disabled>- select -</option>\r\n                            {taskGroup.map((o, i) => (\r\n                                <option key={i} value={o.Task_Type_Id}>\r\n                                    {o.Task_Type}\r\n                                </option>\r\n                            ))}\r\n                        </TextField>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button className=\"btn btn-light rounded-5 px-3\" type=\"button\" onClick={closeEditDialog}>\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary rounded-5 px-3\" type='submit'>\r\n                            Save\r\n                        </button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskMasterMgt;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TaskAssign = ({ open, onClose, projectId, taskId, reload,onReload, editData }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n \r\n    const [usersDropdown, setUsersDropdown] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    // const [schType, setSchType] = useState([]);\r\n    const [selectedSch, setSelectedSch] = useState([])\r\n    const intitalVlaue={\r\n        AN_No: '',\r\n        Project_Id: projectId,\r\n        Sch_Id: taskId,\r\n        Assigned_Emp_Id: parseData?.UserId,\r\n        Emp_Id: '',\r\n        Task_Assign_dt: new Date().toISOString().split('T')[0],\r\n        Sch_Period: '',\r\n        Sch_Time: '',\r\n        EN_Time: '',\r\n        Est_Start_Dt: '',\r\n        Est_End_Dt: '',\r\n        Ord_By: 1,\r\n        Timer_Based: false,\r\n        Sch_Type: '',\r\n        Invovled_Stat: true,\r\n        EmpGet: '- Select -',\r\n        Is_Repitative: false,\r\n        RepeatDays: { Mon: false, Tue: false, Wed: false, Thu: false, Fri: false, Sat: false, Sun: false }\r\n    }\r\n\r\n    const [assignEmpInpt, setAssignEmpInpt] = useState(intitalVlaue);\r\n    \r\n    useEffect(() => {\r\n \r\n\r\n        if (open) fetchData();\r\n    }, [projectId, open, reload]);\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const userResponse =  await fetchLink({ address: `masters/Employeedetails/getusersproject?Project_Id=${projectId}` });\r\n            const schTypeResponse =  await fetchLink({ address: `taskManagement/project/schedule/newscheduleType` });\r\n\r\n\r\n            if (userResponse.success) setUsersDropdown(userResponse.data || []);\r\n            if (schTypeResponse.success) {\r\n            \r\n   }\r\n            \r\n        } catch (error) {\r\n            toast.error(\"Failed to fetch data.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n \r\n        const fetchSelectedData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                if (editData) {\r\n                    const selectedSchType =  await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.Sch_Id}&Task_Id=${taskId.Task_Id}` });\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const selectedSchType = await fetchLink({ address: `masters/employeedetails/selectedTaskDetails?projectId=${projectId}&Sch_Id=${taskId.TaskSchId}&Task_Id=${taskId.Task_Id}` });\r\n\r\n\r\n                    const selectedSchId = selectedSchType.data[0]?.Sch_Type_Id;\r\n                    const selectedSchName = selectedSchType.data[0]?.Sch_Name;\r\n\r\n                    if (selectedSchId && selectedSchName) {\r\n                        setSelectedSch({ value: selectedSchId, label: selectedSchName });\r\n                    } else {\r\n                        setSelectedSch({ value: '', label: '' });\r\n                    }\r\n\r\n                }\r\n            } catch (error) {\r\n\r\n                toast.error(\"Failed to fetch data.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n\r\n        };\r\n\r\n        if (open) fetchSelectedData();\r\n    }, [open, editData, reload,projectId]);\r\n\r\n    useEffect(() => {\r\n        if (editData) {\r\n\r\n            setAssignEmpInpt(prev => ({\r\n                ...prev,\r\n                AN_No: editData.AN_No,\r\n                Emp_Id: editData.Emp_Id,\r\n                Sch_Time: editData.Sch_Time,\r\n                EN_Time: editData.EN_Time,\r\n                Est_Start_Dt: editData.Est_Start_Dt.split('T')[0],\r\n                Est_End_Dt: editData.Est_End_Dt.split('T')[0],\r\n                Ord_By: editData.Ord_By,\r\n                Timer_Based: editData.Timer_Based,\r\n                Invovled_Stat: editData.Invovled_Stat,\r\n                Sch_Type_Id: editData.Sch_Type,\r\n                Sch_Type: editData.Sch_Type_Name,\r\n                EmpGet: editData.EmployeeName,\r\n                Is_Repitative: editData.Is_Repitative,\r\n                RepeatDays: {\r\n                    Mon: !!editData.IS_Rep_Monday,\r\n                    Tue: !!editData.IS_Rep_Tuesday,\r\n                    Wed: !!editData.IS_Rep_Wednesday,\r\n                    Thu: !!editData.IS_Rep_Thursday,\r\n                    Fri: !!editData.Is_Rep_Friday,\r\n                    Sat: !!editData.Is_Rep_Saturday,\r\n                    Sun: !!editData.Is_Rep_Sunday,\r\n                },\r\n            }));\r\n        }\r\n    }, [editData]);\r\n\r\n\r\n\r\n    const calculateSchPeriod = () => {\r\n        const [hours1, minutes1] = assignEmpInpt.Sch_Time.split(':').map(Number);\r\n        const [hours2, minutes2] = assignEmpInpt.EN_Time.split(':').map(Number);\r\n\r\n        const date1 = new Date(0, 0, 0, hours1, minutes1);\r\n        const date2 = new Date(0, 0, 0, hours2, minutes2);\r\n\r\n        if (date2 > date1) {\r\n            let difference = Math.abs(date2 - date1);\r\n            const hours = Math.floor(difference / (1000 * 60 * 60));\r\n            const minutes = Math.floor(difference / (1000 * 60));\r\n            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n\r\n    const mapRepeatDaysToISRepFields = () => {\r\n        return {\r\n            IS_Rep_Monday: assignEmpInpt.RepeatDays.Mon ? 1 : null,\r\n            IS_Rep_Tuesday: assignEmpInpt.RepeatDays.Tue ? 1 : null,\r\n            IS_Rep_Wednesday: assignEmpInpt.RepeatDays.Wed ? 1 : null,\r\n            IS_Rep_Thursday: assignEmpInpt.RepeatDays.Thu ? 1 : null,\r\n            Is_Rep_Friday: assignEmpInpt.RepeatDays.Fri ? 1 : null,\r\n            Is_Rep_Saturday: assignEmpInpt.RepeatDays.Sat ? 1 : null,\r\n            Is_Rep_Sunday: assignEmpInpt.RepeatDays.Sun ? 1 : null,\r\n        };\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const schPeriod = calculateSchPeriod();\r\n\r\n        if (assignEmpInpt.Est_End_Dt < assignEmpInpt.Est_Start_Dt) {\r\n            toast.error(\"End date must be greater than start date.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n\r\n            const address = editData ? 'masters/employeedetails/updateTask' : 'masters/employeedetails/assignTask';\r\n            const repeatDaysMapped = mapRepeatDaysToISRepFields();\r\n            const response = await fetchLink({\r\n                address,\r\n                method: editData ? 'PUT' : 'POST',\r\n                bodyData: {\r\n                    ...assignEmpInpt,\r\n                    Project_Id: projectId,\r\n                    Sch_Id: editData ? taskId.Sch_Id : taskId.TaskSchId,\r\n                    Task_Levl_Id: taskId.Task_Levl_Id,\r\n                    Task_Id: Number(taskId.Task_Id),\r\n                    Assigned_Emp_Id: assignEmpInpt.Assigned_Emp_Id,\r\n                    Emp_Id: assignEmpInpt.Emp_Id,\r\n                    Sch_Period: schPeriod,\r\n                    Sch_Time: assignEmpInpt.Sch_Time,\r\n                    EN_Time: assignEmpInpt.EN_Time,\r\n                    Est_Start_Dt: assignEmpInpt.Est_Start_Dt,\r\n                    Est_End_Dt: assignEmpInpt.Est_End_Dt,\r\n                    Ord_By: assignEmpInpt.Ord_By,\r\n                    Sch_Type: selectedSch.value,\r\n                    Timer_Based: assignEmpInpt.Timer_Based ? 1 : 0,\r\n                    Invovled_Stat: assignEmpInpt.Invovled_Stat ? 1 : 0,\r\n                    Is_Repitative: assignEmpInpt.Is_Repitative ? 1 : 0,\r\n                    RepeatDays: assignEmpInpt.Is_Repitative ? assignEmpInpt.RepeatDays : '',\r\n                    ...repeatDaysMapped,\r\n                }\r\n\r\n            });\r\n\r\n            if (response.success) {\r\n                toast.success(`Task ${editData ? 'updated' : 'assigned'} successfully!`);\r\n                setAssignEmpInpt({});\r\n                if (onReload) {\r\n                    onReload();  \r\n                }\r\n                onClose();\r\n        \r\n\r\n            } else {\r\n\r\n                toast.error(\"Please fill the values correctly\");\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error during task assignment/update: \" + error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Dialog open={open} maxWidth=\"sm\">\r\n                <DialogTitle>{editData ? 'Edit Task' : 'Employee Assign'}</DialogTitle>\r\n                <form onSubmit={handleSubmit}>\r\n                    <DialogContent className=\"table-responsive\">\r\n                           {loading && <div>Loading...</div>}\r\n                        <table className=\"table\" style={{ tableLayout: 'fixed' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Employee\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={{ value: assignEmpInpt.Emp_Id, label: assignEmpInpt.EmpGet }}\r\n                                            onChange={(e) => setAssignEmpInpt({ ...assignEmpInpt, Emp_Id: e.value, EmpGet: e.label })}\r\n                                            options={[{ value: '', label: '- Select -' }, ...usersDropdown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                                            styles={customSelectStyles}\r\n                                            required\r\n                                            isSearchable={true}\r\n                                            placeholder=\"Select User\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Sch_Type\r\n                                    </td>\r\n                                    \r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <Select\r\n                                            value={selectedSch ? { value: selectedSch.value, label: `${selectedSch.label}` } : null}\r\n                                            styles={{ padding: '0.5em' }}\r\n                                            isDisabled\r\n                                            placeholder=\"Select Sch_Type\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n\r\n                                {/* Time and Date Inputs */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Start Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Sch_Time}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Sch_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        End Time\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"time\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.EN_Time}\r\n                                            required\r\n                                            min={assignEmpInpt.Sch_Time}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, EN_Time: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. Start Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_Start_Dt}\r\n                                            required\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_Start_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ verticalAlign: 'middle', paddingRight: '1em' }}>\r\n                                        Est. End Date\r\n                                    </td>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingLeft: '1em' }}>\r\n                                        <input\r\n                                            type=\"date\"\r\n                                            className=\"cus-inpt\"\r\n                                            value={assignEmpInpt.Est_End_Dt}\r\n                                            required\r\n                                            min={assignEmpInpt.Est_Start_Dt}\r\n                                            onChange={e => setAssignEmpInpt({ ...assignEmpInpt, Est_End_Dt: e.target.value })}\r\n                                            style={{ padding: '0.5em' }}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                {/* Timer Based & Involved Status */}\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15 text-start\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                            <input\r\n                                                className=\"form-check-input shadow-none\"\r\n                                                type=\"checkbox\"\r\n                                                id=\"timerbased\"\r\n                                                checked={Boolean(Number(assignEmpInpt?.Timer_Based))}\r\n                                                onChange={(e) =>\r\n                                                    setAssignEmpInpt({ ...assignEmpInpt, Timer_Based: e.target.checked })\r\n                                                }\r\n                                                style={{ marginRight: '0.5em' }}\r\n                                            />\r\n                                            <label className=\"form-check-label p-1 ps-2\" htmlFor=\"timerbased\">\r\n                                                Timer Based Task?\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                        {editData && (\r\n                                            <div style={{ display: 'inline-flex', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    className=\"form-check-input shadow-none\"\r\n                                                    type=\"checkbox\"\r\n                                                    checked={Boolean(Number(assignEmpInpt?.Invovled_Stat))}\r\n                                                    onChange={() =>\r\n                                                        setAssignEmpInpt({ ...assignEmpInpt, Invovled_Stat: !assignEmpInpt.Invovled_Stat })\r\n                                                    }\r\n                                                    style={{ marginRight: '0.5em' }}\r\n                                                />\r\n                                                <label className=\"form-check-label p-1 ps-2\">Involved Status</label>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-bottom-0 fa-15\" style={{ paddingRight: '1em' }}>\r\n                                        <div style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                                            <div style={{ display: 'flex', alignItems: 'center', marginRight: '1em' }}>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={assignEmpInpt.Is_Repitative === 1}\r\n                                                    onChange={(e) => {\r\n                                                        setAssignEmpInpt((prevState) => ({\r\n                                                            ...prevState,\r\n                                                            Is_Repitative: e.target.checked ? 1 : 0,\r\n                                                        }));\r\n                                                    }}\r\n                                                    style={{ marginRight: '1em' }}\r\n                                                />\r\n                                                <label style={{ marginBottom: '0' }}>Is Repetitive?</label>\r\n                                            </div>\r\n                                            {assignEmpInpt.Is_Repitative === 1 && (\r\n                                                <div style={{ display: 'inline-flex', gap: '0.5em' }}>\r\n                                                    {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\r\n                                                        <label\r\n                                                            key={day}\r\n                                                            style={{\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                marginRight: '1em',\r\n                                                                width: '30px',\r\n                                                            }}\r\n                                                        >\r\n                                                            <input\r\n                                                                type=\"checkbox\"\r\n                                                                checked={assignEmpInpt.RepeatDays[day]}\r\n                                                                onChange={() =>\r\n                                                                    setAssignEmpInpt({\r\n                                                                        ...assignEmpInpt,\r\n                                                                        RepeatDays: {\r\n                                                                            ...assignEmpInpt.RepeatDays,\r\n                                                                            [day]: !assignEmpInpt.RepeatDays[day],\r\n                                                                        },\r\n                                                                    })\r\n                                                                }\r\n                                                                style={{ marginRight: '0.5em' }}\r\n                                                            />\r\n                                                            {day}\r\n                                                        </label>\r\n                                                    ))}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={() => {\r\n                                onClose();\r\n                                setAssignEmpInpt(intitalVlaue);\r\n                            }}\r\n                            variant=\"outlined\"\r\n                        >\r\n                            Close\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"contained\">\r\n                            Save Changes\r\n                        </Button>\r\n\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskAssign;\r\n","import React, { useState, useEffect,useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Table,\r\n    TableBody,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    IconButton,\r\n    CircularProgress,\r\n    Button\r\n} from '@mui/material';\r\nimport { CalendarMonth, QueryBuilder, Edit } from \"@mui/icons-material\";\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\nimport { MyContext } from '../../../Components/context/contextProvider';\r\nfunction TaskIndividual({ open, onClose, taskDetails, closeDialogTask }) {\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            setSelectedTask(null);\r\n            setLoading(true); \r\n\r\n    \r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 500);\r\n        }\r\n    }, [open]);\r\n\r\n    const handleEditClick = (task) => {\r\n        setSelectedTask(task);\r\n        setAssignDialogOpen(true);\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        if (!dateString) return 'N/A';\r\n\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) {\r\n            return 'Invalid Date';\r\n        }\r\n\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"lg\">\r\n                <DialogTitle>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Details</span>\r\n                        <Button variant=\"contained\" color=\"primary\"  onClick={onClose}>Close</Button>\r\n                    </div>\r\n                </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px', width: '500px' }}>\r\n                            <CircularProgress /> \r\n                        </div>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"fa-14 text-center\">Employee</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Assigned By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Date</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Start-End Time</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Total Hours</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Timer Based</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Involved Status</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Order By</TableCell>\r\n                                        <TableCell className=\"fa-14 text-center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {taskDetails.length === 0 ? (\r\n                                       \r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} className=\"fa-14 text-center\" style={{ textAlign: 'center' }}>\r\n                                                No data found\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ) : (\r\n                                     \r\n                                        taskDetails.map((detail, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.EmployeeName || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.AssignedUser || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <CalendarMonth className=\"fa-18 me-2\" />\r\n                                                        {formatDate(detail.Est_Start_Dt)} - {formatDate(detail.Est_End_Dt)}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className=\"badge rounded-4 px-3 bg-light text-primary\">\r\n                                                        <QueryBuilder className=\"fa-18 me-2\" />\r\n                                                        {detail.Sch_Time || 'N/A'} - {detail.EN_Time || 'N/A'}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Sch_Period || 'N/A'}</TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Timer_Based) ? 'bg-success' : 'bg-warning'}`}>\r\n                                                        {Number(detail.Timer_Based) ? \"Yes\" : \"No\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-14 text-center\">\r\n                                                    <span className={`badge rounded-4 px-3 fw-bold text-white ${Number(detail.Invovled_Stat) ? 'bg-success' : 'bg-danger'}`}>\r\n                                                        {Number(detail.Invovled_Stat) ? \"IN\" : \"OUT\"}\r\n                                                    </span>\r\n                                                </TableCell>\r\n                                                <TableCell className=\"fa-13 text-center\">{detail.Ord_By || 'N/A'}</TableCell>\r\n                                                {Number(contextObj?.Edit_Rights) === 1 && (\r\n                                                <TableCell className=\"fa-13 text-center\">\r\n                                                    \r\n                                                    <IconButton size=\"small\" onClick={() => handleEditClick(detail)}>\r\n                                                        <Edit className=\"fa-18\" />\r\n                                                        Edit\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {assignDialogOpen &&\r\n                <TaskAssign\r\n                    open={assignDialogOpen}\r\n                    projectId={selectedTask?.Project_Id}\r\n                    taskId={selectedTask}\r\n                    editData={selectedTask}\r\n                    onClose={() => {\r\n                        setAssignDialogOpen(false);\r\n                        onClose();\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskIndividual;\r\n","import React, { useState, useCallback, useEffect, useContext } from 'react';\r\nimport {\r\n\tDialog,\r\n\tDialogTitle,\r\n\tDialogContent,\r\n\tDialogActions,\r\n\tButton,\r\n\tTab,\r\n\tTable,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tTableHead,\r\n\tTableRow,\r\n\tIconButton,\r\n\tChip,\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tTypography,\r\n\tBox\r\n} from '@mui/material';\r\nimport LibraryAddIcon from '@mui/icons-material/LibraryAdd';\r\nimport ViewHeadlineSharpIcon from '@mui/icons-material/ViewHeadlineSharp';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Edit } from \"@mui/icons-material\";\r\n\r\nimport TaskMasterMgt from '../Components/newaddEditTask';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport TaskAssign from '../taskAssign/addEditTaskAssign';\r\n\r\nimport TaskIndividual from './taskIndividual';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { MyContext } from \"../../../Components/context/contextProvider\";\r\nfunction ListingTask({ dialogOpen, setDialogOpen, projectid, reload, onReload, selectedProject }) {\r\n\tconst [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\tconst [assignDialogOpen, setAssignDialogOpen] = useState(false);\r\n\tconst [taskAssignOpen, setTaskAssignOpen] = useState(false);\r\n\tconst [selectedTask, setSelectedTask] = useState(null);\r\n\tconst [tasks, setTasks] = useState([]);\r\n\tconst [taskDetails, setTaskDetails] = useState([]);\r\n\tconst [taskDetailDialog, setTaskDetailsDialog] = useState(false);\r\n\tconst [taskScheduleInput, setTaskScheduleInput] = useState({\r\n\t\tSch_Type_Id: '',\r\n\t\tSch_Type: ''\r\n\t});\r\n\r\n\r\n\tconst [taskData, setTaskData] = useState([]);\r\n\tconst [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\tconst userData = JSON.parse(localStorage.getItem('user'));\r\n\tconst entryBy = userData?.UserId;\r\n\tconst companyId = userData?.Company_id;\r\n\tconst [editDialogOpen, setEditDialogOpen] = useState(false);\r\n\tconst [expandedAccordion, setExpandedAccordion] = useState(null);\r\n\t// const [expandedAccordionSubTask, setExpandedAccordionSubTask] = useState(null);\r\n\t// const [scheduleTypes, setScheduleTypes] = useState([]);\r\n\t// const [selectedTab, setSelectedTab] = useState(0);\r\n\tconst [expandedAccordionTask, setExpandedAccordionTask] = useState(null);\r\n\r\n\tconst { contextObj } = useContext(MyContext);\r\n\r\n\tconst [isEdit, setIsedit] = useState(false)\r\n\tconst [updateDialogOpen, setUpdateDialogOpen] = useState(false)\r\n\r\n\t// const [expandedItem, setExpandedItem] = useState({ schTypeId: null, taskId: null });\r\n\r\n\r\n\r\n\tconst [selectedTab, setSelectedTab] = useState('1');\r\n\tconst [scheduleTypes, setScheduleTypes] = useState([]);\r\n\r\n\r\n\r\n\tconst handleTabChange = (event, newValue) => {\r\n\t\tsetSelectedTab(newValue);\r\n\t};\r\n\r\n\r\n\tconst handleAccordionChange = (taskId) => {\r\n\t\tsetExpandedAccordion((prev) => (prev === taskId ? null : taskId));\r\n\t};\r\n\r\n\tconst handleAccordionChangeTask = (taskId) => {\r\n\t\tsetExpandedAccordionTask((prev) => (prev === taskId ? null : taskId));\r\n\t};\r\n\r\n\tconst handleSelectedTask = async (task) => {\r\n\t\tsetSelectedTask(task);\r\n\t\tsetTaskAssignOpen(true);\r\n\t}\r\n\r\n\tconst Schtype = async () => {\r\n\t\tfetchLink({ address: `taskManagement/project/schedule/newscheduleType` }).then((data) => {\r\n\t\t\tif (data.success) {\r\n\t\t\t\tconsole.log(\"data.data\", data.data)\r\n\t\t\t\tsetScheduleTypes(data.data);\r\n\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(data.message);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconst fetchTasks = useCallback(async () => {\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({ address: `taskManagement/tasks/dropdown?Company_id=${companyId}` });\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTasks(data.data);\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}, [companyId]);\r\n\r\n\tconst fetchData = useCallback(async () => {\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({\r\n\t\t\t\taddress: `taskManagement/project/schedule/ListingDetails?Project_Id=${projectid}`\r\n\t\t\t});\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTaskData(data.data);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error('Failed to fetch task details:', data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error('Error fetching task details:', e);\r\n\t\t}\r\n\t}, [projectid]);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchTasks();\r\n\t\tfetchData();\r\n\t\tSchtype();\r\n\t}, [reload, projectid, onReload]);\r\n\r\n\r\n\r\n\tconst taskOptions = tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }));\r\n\tconst handleviewTaskDetail = async (task) => {\r\n\t\tsetTaskDetailsDialog(true);\r\n\r\n\t\tif (!task.Task_Id || !projectid) {\r\n\t\t\ttoast.error('Task ID and Project ID are required');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = await fetchLink({\r\n\t\t\t\taddress: `masters/employeedetails/assignedTaskDetails?Task_Id=${task.Task_Id}&ProjectId=${projectid}&LevelId=${task.Task_Levl_Id}`\r\n\t\t\t});\r\n\r\n\t\t\tif (data.success) {\r\n\t\t\t\tsetTaskDetails(data.data);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(data.message);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error('Error fetching task details:', e);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\r\n\tconst handleAssignTask = async () => {\r\n\t\tif (!taskScheduleInput.Task_Id || !taskScheduleInput.Sch_Type_Id) {\r\n\t\t\ttoast.error(\"Please select a task and schedule type before saving.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst requestData = {\r\n\t\t\tentryBy: entryBy,\r\n\t\t\tProject_Id: projectid,\r\n\t\t\tSch_Type_Id: taskScheduleInput.Sch_Type_Id,\r\n\t\t\tSch_Est_Start_Date: taskScheduleInput.Task_Est_Start_Date,\r\n\t\t\tSch_Est_End_Date: taskScheduleInput.Task_Est_End_Date,\r\n\t\t\ttasks: [taskScheduleInput]\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: 'taskManagement/project/schedule/createNewTaskWithSchedule',\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbodyData: requestData,\r\n\t\t\t});\r\n\r\n\t\t\tif (response.success) {\r\n\t\t\t\ttoast.success(response.message);\r\n\t\t\t\tsetAssignDialogOpen(false);\r\n\t\t\t\tsetTaskScheduleInput({})\r\n\t\t\t\tfetchData();\r\n\t\t\t\tonReload();\r\n\t\t\t}\r\n\t\t\telse if (response.status === 'warning') {\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleEditTask = (task) => {\r\n\t\tsetSelectedTask(task);\r\n\t\tsetEditDialogOpen(true);\r\n\t};\r\n\r\n\r\n\tconst updatesTaskDetails = async (task) => {\r\n\r\n\t\tconst requestData = {\r\n\t\t\tSch_Project_Id: task.Sch_Project_Id,\r\n\t\t\tSch_Id: task.TaskSchId,\r\n\t\t\tschtypeid: taskScheduleInput.Sch_Type_Id,\r\n\t\t\tTask_Id: task.Task_Id\r\n\r\n\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: 'taskManagement/project/schedule/updateScheduleTaskUpdate',\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\tbodyData: requestData,\r\n\t\t\t});\r\n\r\n\t\t\tif (response.success) {\r\n\t\t\t\ttoast.success(response.message);\r\n\r\n\t\t\t\tsetUpdateDialogOpen(false)\r\n\t\t\t\tsetIsedit(false)\r\n\t\t\t\tonReload();\r\n\t\t\t}\r\n\t\t\telse if (response.status === 'warning') {\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\ttoast.warn(response.message || \"Task already exists for this project.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\r\n\r\n\r\n\tconst handleTaskEdit = (task) => {\r\n\r\n\t\tsetIsedit(true);\r\n\t\tsetTaskScheduleInput(task);\r\n\t\tsetUpdateDialogOpen(true);\r\n\t};\r\n\r\n\tconst handleTaskChange = async (selectedOption) => {\r\n\t\tsetTaskScheduleInput(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tTask_Id: selectedOption.value,\r\n\t\t\tTasksGet: selectedOption.label\r\n\t\t}));\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetchLink({\r\n\t\t\t\taddress: `taskManagement/tasks/tasklistsid?Task_Id=${selectedOption.value}`\r\n\t\t\t});\r\n\t\t\tif (response.success) {\r\n\t\t\t\tconst taskDetails = response.data;\r\n\t\t\t\tsetTaskScheduleInput(prev => ({\r\n\t\t\t\t\t...prev,\r\n\t\t\t\t\tTask_Levl_Id: taskDetails.Task_Levl_Id,\r\n\t\t\t\t\tTask_Name: taskDetails.Task_Name,\r\n\t\t\t\t\tTask_Desc: taskDetails.Task_Desc,\r\n\t\t\t\t\tTask_Group_Id: taskDetails.Task_Group_Id,\r\n\r\n\t\t\t\t\tSch_Type_Id: taskDetails.Sch_Type_Id,\r\n\t\t\t\t\tTask_Sch_Duaration: taskDetails.Task_Sch_Duaration || '',\r\n\t\t\t\t\tTask_Start_Time: taskDetails.Task_Start_Time || new Date().toISOString(),\r\n\t\t\t\t\tTask_End_Time: taskDetails.Task_End_Time || new Date().toISOString(),\r\n\t\t\t\t\tTask_Est_Start_Date: taskDetails.Task_Est_Start_Date || new Date().toISOString(),\r\n\t\t\t\t\tTask_Est_End_Date: taskDetails.Task_Est_End_Date || new Date().toISOString(),\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\ttoast.error(\"Failed to fetch task details\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst setCloseTask = async () => {\r\n\t\tsetDialogOpen(false);\r\n\t\tsetTaskScheduleInput({});\r\n\r\n\t}\r\n\r\n\r\n\r\n\tconst handleSchTypeChange = (e) => {\r\n\t\t\r\n\t\tconst selectedOption = scheduleTypes.find(option => option.Sch_Type_Id === parseInt(e.target.value));\r\n\t\tif (selectedOption) {\r\n\t\t\tsetTaskScheduleInput({\r\n\t\t\t\t...taskScheduleInput,\r\n\t\t\t\tSch_Type_Id: selectedOption.Sch_Type_Id,\r\n\t\t\t\tSch_Type: selectedOption.Sch_Type,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{updateDialogOpen && (\r\n\t\t\t\t<Dialog\r\n\t\t\t\t\topen={updateDialogOpen}\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tmaxWidth=\"sm\"\r\n\t\t\t\t\tPaperProps={{ style: { borderRadius: '8px' } }}\r\n\t\t\t\t\tonClose={() => setUpdateDialogOpen(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DialogTitle>{isEdit ? \"Edit Task\" : \"Assign Task\"}</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t\t<label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Sch_Type_Id || ''}\r\n\t\t\t\t\t\t\t\t\tonChange={handleSchTypeChange}\r\n\t\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: '10px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<option value=\"\" disabled>- Sch_Type -</option>\r\n\t\t\t\t\t\t\t\t\t{scheduleTypes.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<option key={index} value={option.Sch_Type_Id}>\r\n\t\t\t\t\t\t\t\t\t\t\t{option.Sch_Type}\r\n\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={() => setUpdateDialogOpen(false)}>Cancel</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tonClick={() => updatesTaskDetails(taskScheduleInput)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</Dialog>\r\n\t\t\t)}\r\n\r\n\r\n\t\t\t<Dialog open={dialogOpen} fullWidth maxWidth=\"lg\" PaperProps={{ style: { height: '75vh' } }}>\r\n\t\t\t\t<DialogTitle>\r\n\t\t\t\t\t<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n\t\t\t\t\t\t<span>{selectedProject?.Project_Name}</span>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => setAssignDialogOpen(true)}>Assign Task</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogTitle>\r\n\r\n\t\t\t\t<Box sx={{ width: '100%', typography: 'body1' }}>\r\n\t\t\t\t\t{taskData.map((schedule, index) => {\r\n\t\t\t\t\t\tconst scheduleTypes = JSON.parse(schedule.SchTypes);\r\n\t\t\t\t\t\t// const overallSchTypes = JSON.parse(schedule.OverallSchTypes)\r\n\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TabContext value={selectedTab} key={index}>\r\n\t\t\t\t\t\t\t\t<Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n\t\t\t\t\t\t\t\t\t<TabList onChange={handleTabChange} aria-label=\"Schedule Types\">\r\n\t\t\t\t\t\t\t\t\t\t{/* <Tab label=\"Overall\" value=\"overall\" id=\"tab-overall\" aria-controls=\"tabpanel-overall\" /> */}\r\n\t\t\t\t\t\t\t\t\t\t{Array.isArray(scheduleTypes) && scheduleTypes.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\tscheduleTypes.map((sch, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Tab\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`${sch.SchTypeId || 'index'}-${index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={sch.SchType || 'No SchType'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={(sch.SchTypeId || index).toString()}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={`tab-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-controls={`tabpanel-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" sx={{ padding: 2 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tNo Details Available for {scheduleTypes}\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</TabList>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t{Array.isArray(scheduleTypes) && scheduleTypes.map((sch, index) => (\r\n\t\t\t\t\t\t\t\t\t<TabPanel\r\n\t\t\t\t\t\t\t\t\t\tkey={`${sch.SchTypeId || 'index'}-${index}`}\r\n\t\t\t\t\t\t\t\t\t\tvalue={(sch.SchTypeId || index).toString()}\r\n\t\t\t\t\t\t\t\t\t\tid={`tabpanel-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t\taria-labelledby={`tab-${sch.SchTypeId || index}`}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f9f9f9', borderRadius: '8px' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(sch.TaskCountsInSchType) && sch.TaskCountsInSchType.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\tsch.TaskCountsInSchType.map((count, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography key={index} variant=\"body1\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSchedule Type: <strong>{sch.SchType}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box textAlign=\"right\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTotal Tasks: <strong>{count.TotalTasks}</strong> / Completed Tasks: <strong>{count.CompletedTasks}</strong>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNo tasks counted for this schedule type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t\t{Array.isArray(sch.TaskTypeGroups) && sch.TaskTypeGroups.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\tsch.TaskTypeGroups.map((taskType) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Accordion\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={taskType.Task_Type_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\texpanded={expandedAccordion === taskType.Task_Type_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleAccordionChange(taskType.Task_Type_Id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: '#f0f4ff',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tboxShadow: 'black',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{taskType.Task_Type || 'Default Task Type'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box sx={{ textAlign: 'right', flexGrow: 1 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompleted Task / Total Task\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskType.TaskMetrics) && taskType.TaskMetrics.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskType.TaskMetrics.map((tasks, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography sx={{ textAlign: 'right', flexGrow: 1 }} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tasks.CompletedTasks} / {tasks?.TotalTasks}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo task metrics available for this task type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionSummary>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskType.Tasks) && taskType.Tasks.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskType.Tasks.map((taskItem) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Accordion\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={taskItem.Task_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texpanded={expandedAccordionTask === taskItem.Task_Id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={() => handleAccordionChangeTask(taskItem.Task_Id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginBottom: 2,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box sx={{ textAlign: 'left', flexGrow: 1 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography fontWeight=\"bold\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{taskItem?.Task_Name || 'DEFAULT TASK'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionSummary>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableContainer style={{ maxHeight: '50vh' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Table stickyHeader>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableHead style={{ backgroundColor: '#2C3E50' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow style={{ backgroundColor: '#2C3E50' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Task Type</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employees</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Employee Assign</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Actions</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{ backgroundColor: '#2C3E50', color: 'white' }}>Details</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableHead>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={taskItem.Task_Id} sx={{ backgroundColor: '#BBE6F6' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>{taskItem.Task_Name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{sch.SchType}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleTaskEdit(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Edit />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Array.isArray(taskItem.AssignedEmployees) && taskItem.AssignedEmployees.length > 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskItem.AssignedEmployees.map((employee, empIndex) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={empIndex}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={employee.Name}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsx={{ margin: '2px', color: 'green' }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>No Employees Assigned</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleSelectedTask(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<LibraryAddIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Number(contextObj?.Edit_Rights) === 1 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleEditTask(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Edit />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton onClick={() => handleviewTaskDetail(taskItem)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ViewHeadlineSharpIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableContainer>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tNo tasks available for this task type.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</AccordionDetails>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Accordion>\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\tNo task type groups found for this schedule type.\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t\t\t</TabContext>\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Box>\r\n\r\n\r\n\r\n\t\t\t\t<DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={setCloseTask}>Close</Button>\r\n\t\t\t\t</DialogActions>\r\n\r\n\t\t\t</Dialog>\r\n\r\n\r\n\t\t\t<Dialog open={assignDialogOpen} fullWidth maxWidth=\"sm\" PaperProps={{ style: { borderRadius: '8px' } }}>\r\n\t\t\t\t<DialogTitle>Assign Task</DialogTitle>\r\n\t\t\t\t<DialogContent>\r\n\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t<label htmlFor=\"task-select\" style={{ marginRight: '8px' }}>Select Task</label>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tid=\"task-select\"\r\n\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Task_Id || ''}\r\n\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tonChange={e => handleTaskChange({ value: e.target.value })}\r\n\t\t\t\t\t\t\t\tstyle={{ flex: 1, marginRight: '8px' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<option value=\"\" disabled>- select -</option>\r\n\t\t\t\t\t\t\t\t{taskOptions.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t<option key={index} value={option.value}>\r\n\t\t\t\t\t\t\t\t\t\t{option.label}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<IconButton onClick={() => setIsDialogOpen(true)}>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\">Create New</Button>\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style={{ padding: '1px', display: 'flex' }}>\r\n\t\t\t\t\t\t<div style={{ flex: 1, display: 'flex', alignItems: 'center' }}>\r\n\t\t\t\t\t\t\t<label style={{ marginRight: '8px' }}>Sch_Type</label>\r\n\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\tvalue={taskScheduleInput.Sch_Type_Id || ''}\r\n\t\t\t\t\t\t\t\tonChange={handleSchTypeChange}\r\n\t\t\t\t\t\t\t\tclassName=\"cus-inpt\"\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tstyle={{ marginLeft: '10px' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<option value=\"\" disabled>- Sch_Type -</option>\r\n\t\t\t\t\t\t\t\t{scheduleTypes.map((option, index) => (\r\n\t\t\t\t\t\t\t\t\t<option key={index} value={option.Sch_Type_Id}>\r\n\t\t\t\t\t\t\t\t\t\t{option.Sch_Type}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={() => setAssignDialogOpen(false)}>Cancel</Button>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={handleAssignTask}>Save</Button>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\r\n\t\t\t<TaskAssign\r\n\t\t\t\topen={taskAssignOpen}\r\n\t\t\t\tonClose={() => setTaskAssignOpen(false)}\r\n\t\t\t\ttask={selectedTask}\r\n\t\t\t\tprojectId={projectid}\r\n\t\t\t\tentryBy={entryBy}\r\n\t\t\t\ttaskId={selectedTask}\r\n\t\t\t\treload={reload}\r\n\t\t\t\tonReload={onReload}\r\n\t\t\t/>\r\n\r\n\t\t\t<Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\r\n\t\t\t\t<DialogTitle>Delete Task</DialogTitle>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">Cancel</Button>\r\n\t\t\t\t\t{/* <Button onClick={deleteTaskFun} color=\"secondary\">Delete</Button> */}\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</Dialog>\r\n\r\n\t\t\t<TaskMasterMgt\r\n\t\t\t\topenAction={isDialogOpen}\r\n\t\t\t\tonCloseFun={() => setIsDialogOpen(false)}\r\n\t\t\t\tonTaskAdded={fetchTasks}\r\n\t\t\t\tReload={reload}\r\n\t\t\t/>\r\n\t\t\t<TaskMasterMgt\r\n\t\t\t\trow={selectedTask}\r\n\t\t\t\topenAction={editDialogOpen}\r\n\t\t\t\tonCloseFun={() => setEditDialogOpen(false)}\r\n\t\t\t\treload={fetchData}\r\n\t\t\t\tReload={reload}\r\n\t\t\t/>\r\n\t\t\t<TaskIndividual\r\n\t\t\t\topen={taskDetailDialog}\r\n\t\t\t\tonClose={() => setTaskDetailsDialog(false)}\r\n\t\t\t\ttaskDetails={taskDetails}\r\n\t\t\t/>\r\n\r\n\t\t</>\r\n\t);\r\n\r\n\r\n}\r\n\r\nexport default ListingTask;\r\n\r\n\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Edit, Delete, Launch, People, Search as SearchIcon } from '@mui/icons-material';\r\nimport { toast } from 'react-toastify';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport ProjectForm from \"../ProjectList/addEditProject\";\r\nimport EmployeeManagementDialog from \"../employeeManagement/employeeManagement\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport ListingTask from \"../Tasks/taskDetails/listingTask\";\r\n\r\nconst ActiveProjects = () => {\r\n    const [reload, setReload] = useState(false);\r\n    const [projects, setProjects] = useState([]);\r\n    const [projectAlldata, setProjectAlldata] = useState([]);\r\n    const { contextObj } = useContext(MyContext);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedProject, setSelectedProject] = useState(null);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [projectId, setProjectId] = useState(0);\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [projectToDelete, setProjectToDelete] = useState(null);\r\n    const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\r\n    const [listingTaskDialogOpen, setListingTaskDialogOpen] = useState(false);\r\n    const [filterInput, setFilterInput] = useState('');\r\n    const [reloadFlag, setReloadFlag] = useState(false);\r\n\r\n    const parseData = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n        fetchProjectData();\r\n    }, [parseData?.Company_id, reload]);\r\n\r\n    const handleReloadProjects = () => {\r\n        setReload(prev => !prev);  \r\n        setReloadFlag(prev => !prev); \r\n    };\r\n    \r\n    const fetchProjects = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project/newProjectAbstract?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjects(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjects([]);\r\n        }\r\n    };\r\n\r\n    const fetchProjectData = async () => {\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `taskManagement/project?Company_id=${parseData?.Company_id}`\r\n            });\r\n            setProjectAlldata(data.success ? data.data : []);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setProjectAlldata([]);\r\n        }\r\n    };\r\n\r\n    const deleteFun = () => {\r\n        if (projectToDelete) {\r\n            fetchLink({\r\n                address: `taskManagement/project`,\r\n                method: 'DELETE',\r\n                bodyData: { Project_Id: projectToDelete?.Project_Id },\r\n            }).then(data => {\r\n                if (data.success) {\r\n                    setReload(!reload);\r\n                    toast.success(data.message);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }).catch(e => console.error('Fetch Error:', e));\r\n        }\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const calcPercentage = (task, completed) => (Number(task) === 0 ? 0 : ((Number(completed) / Number(task)) * 100).toFixed(0));\r\n\r\n    const columns = [\r\n        { name: 'Project', selector: row => row.Project_Name, sortable: true, width: '250px' },\r\n        { name: 'Head', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Project_Head_Name, sortable: true },\r\n        { name: 'Status', selector: row => projectAlldata.find(p => p.Project_Id === row.Project_Id)?.Status, sortable: true },\r\n        { name: 'End Date', selector: row => row.Est_End_Dt ? new Date(row.Est_End_Dt).toLocaleDateString('en-IN') : \"N/A\", sortable: true },\r\n        { name: 'Progress', selector: row => `${calcPercentage(row.TodayTaskcounts, row.CompletedTasks)}%`, sortable: true },\r\n        {\r\n            name: 'Task Details', cell: row => (\r\n                <>\r\n                    <IconButton onClick={() => handleOpenListingTaskDialog(row)}>\r\n                        <Launch />\r\n                    </IconButton>\r\n                    {row.CompletedTasks} / {row.TodayTaskcounts}\r\n                </>\r\n            )\r\n        },\r\n      \r\n        { name: 'Task Count',  selector: row => row?.TodayTaskcounts, sortable: true, sortable: true },\r\n      \r\n        { name: 'Assigned', selector: row => row.TasksAssignedToEmployee },\r\n        {\r\n            name: 'Employees', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEmployeeDialog(row.Project_Id)}>\r\n                            <People />\r\n                        </IconButton>\r\n                    )}\r\n                    {row.EmployeesInvolved}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            name: 'Actions', cell: row => (\r\n                <>\r\n                    {Number(contextObj?.Edit_Rights) === 1 && (\r\n                        <IconButton onClick={() => handleOpenEditDialog(row)}><Edit /></IconButton>\r\n                    )}\r\n                </>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter(project => {\r\n        const projectHead = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Project_Head_Name || \"\";\r\n        const status = projectAlldata.find(p => p.Project_Id === project.Project_Id)?.Status || \"\";\r\n        return (\r\n            project.Project_Name.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            projectHead.toLowerCase().includes(filterInput.toLowerCase()) ||\r\n            status.toLowerCase().includes(filterInput.toLowerCase())\r\n        );\r\n    });\r\n\r\n    const handleOpenCreateDialog = () => {\r\n        setSelectedProject(null);\r\n        setIsEdit(false);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenEditDialog = project => {\r\n        setSelectedProject(project);\r\n        setIsEdit(true);\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleOpenDeleteDialog = project => {\r\n        setProjectToDelete(project);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    const handleOpenListingTaskDialog = project => {\r\n        setSelectedProject(project);\r\n        setProjectId(project.Project_Id);\r\n        setListingTaskDialogOpen(true);\r\n    };\r\n\r\n    const handleCloseDialogs = () => {\r\n        setDialogOpen(false);\r\n        setListingTaskDialogOpen(false);\r\n        setSelectedProject(null);\r\n        setProjectToDelete(null);\r\n        setDeleteDialog(false);\r\n    };\r\n\r\n    const handleOpenEmployeeDialog = projectId => {\r\n        setProjectId(projectId);\r\n        setEmployeeDialogOpen(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fw-bold d-flex align-items-center justify-content-between mt-0 \">\r\n                <span style={{ marginLeft: '20px' }}>Projects</span>\r\n                <div className=\"mb-1\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\r\n                        <SearchIcon style={{ position: 'absolute', left: 15, color: '#aaa' }} />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            onChange={e => setFilterInput(e.target.value)}\r\n                            style={{\r\n                                paddingLeft: 35,\r\n                                marginRight: 10,\r\n                                margin: 10,\r\n                                borderRadius: 4,\r\n                                border: '1px solid black'\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    {Number(contextObj?.Add_Rights) === 1 && (\r\n                        <button onClick={handleOpenCreateDialog} className=\"btn btn-primary fa-13 shadow\">\r\n                            Create Project\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-body p-0 table-container\">\r\n                <DataTable\r\n                    columns={columns}\r\n                    data={filteredProjects}\r\n                    pagination\r\n                    highlightOnHover\r\n                    fixedHeader\r\n                    paginationPerPage={15}\r\n                    responsive\r\n                    persistTableHead\r\n                    customStyles={{\r\n                        headCells: {\r\n                            style: {\r\n                                fontSize: '16px',\r\n                                fontWeight: 'bold',\r\n                                padding: '10px',\r\n                                backgroundColor: '#2c3e50',\r\n                                color: '#ecf0f1',\r\n                                position: 'sticky',\r\n                                top: 0,\r\n                                zIndex: 2,\r\n                            },\r\n                        },\r\n                        cells: {\r\n                            style: {\r\n                                padding: '8px',\r\n                                fontSize: '14px',\r\n                                backgroundColor: '#f9f9f9',\r\n                                color: '#2c3e50',\r\n                            },\r\n                        },\r\n                        rows: {\r\n                            style: {\r\n                                borderBottom: '1px solid #ddd',\r\n                            },\r\n                        },\r\n                    }}\r\n                    style={{\r\n                        overflowY: 'auto',\r\n                        maxHeight: 'calc(100vh - 200px)',\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <Dialog\r\n                    open={deleteDialog}\r\n                    onClose={handleCloseDialogs}\r\n                    aria-labelledby=\"delete-dialog-title\"\r\n                    aria-describedby=\"delete-dialog-description\">\r\n                    <DialogTitle className=\"bg-danger text-white mb-2 px-3 py-2\" style={{ fontSize: '18px' }}>\r\n                        Confirm Deletion\r\n                    </DialogTitle>\r\n                    <DialogContent className=\"p-4\" style={{ fontSize: '16px' }}>\r\n                        Are you sure you want to delete the project\r\n                        <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <button\r\n                            onClick={() => setDeleteDialog(false)}\r\n                            className=\"btn btn-secondary fa-13 shadow\"\r\n                            style={{\r\n                                background: '#95a5a6',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button\r\n                            onClick={deleteFun}\r\n                            className=\"btn btn-danger fa-13 shadow\"\r\n                            style={{\r\n                                background: '#e74c3c',\r\n                                color: 'white',\r\n                                borderRadius: '25px',\r\n                                padding: '8px 15px',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n            </div>\r\n\r\n            <ListingTask\r\n                onClose={handleCloseDialogs}\r\n                dialogOpen={listingTaskDialogOpen}\r\n                setDialogOpen={setListingTaskDialogOpen}\r\n                isEdit={false}\r\n                parseData={parseData}\r\n                projectid={projectId}\r\n                onReload={handleReloadProjects}\r\n                selectedProject={selectedProject}\r\n                reload={reload}  \r\n              \r\n            />\r\n\r\n            <ProjectForm\r\n                open={dialogOpen}\r\n                onClose={handleCloseDialogs}\r\n                inputValue={selectedProject}\r\n                isEdit={isEdit}\r\n                setReload={handleReloadProjects}\r\n                projectData={projectId}\r\n            />\r\n\r\n            <EmployeeManagementDialog\r\n                open={employeeDialogOpen}\r\n                onClose={() => setEmployeeDialogOpen(false)}\r\n                projectId={projectId}\r\n                onReload={handleReloadProjects}\r\n            />\r\n\r\n            <Dialog\r\n                open={deleteDialog}\r\n                onClose={handleCloseDialogs}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\">\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">Confirmation</DialogTitle>\r\n                <DialogContent className=\"p-4\">\r\n                    Do you want to delete the project\r\n                    <span className=\"text-primary\">{\" \" + projectToDelete?.Project_Name + \" \"}</span>?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <button onClick={() => setDeleteDialog(false)} className=\"btn btn-secondary fa-13 shadow\">\r\n                        Cancel\r\n                    </button>\r\n                    <button onClick={deleteFun} className=\"btn btn-danger fa-13 shadow\">\r\n                        Delete\r\n                    </button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ActiveProjects;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Autocomplete,\r\n    TextField,\r\n} from '@mui/material';\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport { toast } from 'react-toastify';\r\nimport { Box } from '@mui/material';\r\nimport { MyContext } from \"../../Components/context/contextProvider\";\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst EmployeeManagementDialog = ({ open, onClose, projectId, onReload }) => {\r\n\r\n    const initialValue = {\r\n        Name: '',\r\n        Designation_Name: '',\r\n        BranchName: ''\r\n    }\r\n\r\n    const [employees, setEmployees] = useState(initialValue);\r\n    const [loading, setLoading] = useState(true);\r\n    const [addEmployeeDialogOpen, setAddEmployeeDialogOpen] = useState(false);\r\n    const [dropdownEmployees, setDropdownEmployees] = useState([]);\r\n    const [selectedEmployees, setSelectedEmployees] = useState([]);\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const { contextObj } = useContext(MyContext);\r\n\r\n    useEffect(() => {\r\n        if (open && projectId) {\r\n            fetchEmployeeDetails();\r\n            fetchDropdownEmployees();\r\n            fetchAssignedEmployees();\r\n        }\r\n    }, [open, projectId]);\r\n\r\n    const CustomPopper = (props) => {\r\n        return <Popper {...props} placement=\"top\" />;\r\n    };\r\n\r\n    const fetchEmployeeDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employee details\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchDropdownEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails/dropDown?Company_id=${parseData.Company_id}`,\r\n            });\r\n            if (data.success) {\r\n                setDropdownEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch employees for dropdown\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchAssignedEmployees = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await fetchLink({\r\n                address: `masters/Employeedetails?Project_Id=${projectId}`,\r\n            });\r\n            if (data.success) {\r\n                setSelectedEmployees(data.data);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            toast.error(\"Failed to fetch assigned employees\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAddEmployeeOpen = () => {\r\n        setAddEmployeeDialogOpen(true);\r\n    };\r\n\r\n    const handleAddEmployeeClose = () => {\r\n        setAddEmployeeDialogOpen(false);\r\n        onClosed()\r\n        setEmployees(initialValue)\r\n    };\r\n\r\n    const handleAddEmployees = async () => {\r\n        if (Number(contextObj?.Add_Rights) === 1) {\r\n            try {\r\n                const response = await fetchLink({\r\n                    address: 'masters/Employeedetails/employeeAdd',\r\n                    method: 'POST',\r\n                    bodyData: {\r\n                        Project_Id: projectId,\r\n                        UserIds: selectedEmployees.map(emp => emp.UserId),\r\n                    },\r\n                });\r\n\r\n                if (response.success) {\r\n                    toast.success(\"Employees added successfully\");\r\n                    setAddEmployeeDialogOpen(false);\r\n                    await fetchEmployeeDetails();\r\n                    await fetchAssignedEmployees();\r\n                    onReload();\r\n                } else {\r\n                    toast.error(\"Failed to add employees\");\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n                toast.error(\"Error adding employees\");\r\n            }\r\n        }\r\n    };\r\n    const onClosed = () => {\r\n\r\n        onClose()\r\n        setEmployees(initialValue);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" marginTop={2} marginInlineStart={2}>\r\n                    <span>Employee Details</span>\r\n\r\n{/* <Button variant=\"contained\" color=\"primary\"    style={{ marginRight: '18px ' }}   onClick={onClosed}>Close</Button> */}\r\n<DialogActions>\r\n                    <Button \r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddEmployeeOpen}\r\n                        sx={{ mr: 1 }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n{/* \r\n                    <button\r\n                        className='btn btn-light'\r\n                        style={{ marginRight: '18px ',color:'#1976d2' }}\r\n                     \r\n                        onClick={onClosed}\r\n                    >\r\n                        Close\r\n                    </button> */}\r\n                </Box>\r\n                <DialogContent>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : (\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Employee Name</TableCell>\r\n                                        <TableCell>Position</TableCell>\r\n                                        <TableCell>Department</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {Array.isArray(employees) && employees.length > 0 ? (\r\n                                        employees.map(user => (\r\n                                            <TableRow key={user.EmployeeId || user.UserId}>\r\n                                                <TableCell>{user.Name || 'N/A'}</TableCell>\r\n                                                <TableCell>{user.Designation_Name || '-'}</TableCell>\r\n                                                <TableCell>{user.BranchName || '-'}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    ) : (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={3}>No data available</TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions sx={{ marginTop: 'auto ', position: 'sticky', bottom: 0 }}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onClosed}>Close</Button>\r\n                </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n            <Dialog\r\n                open={addEmployeeDialogOpen}\r\n                // onClose={handleAddEmployeeClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Autocomplete\r\n                        multiple\r\n                        options={dropdownEmployees}\r\n                        getOptionLabel={(option) => option.Name}\r\n                        isOptionEqualToValue={(option, value) => option.UserId === value.UserId}\r\n                        onChange={(event, value) => {\r\n                            const uniqueValues = value.filter((val, index, self) =>\r\n                                index === self.findIndex((t) => (\r\n                                    t.UserId === val.UserId\r\n                                ))\r\n                            );\r\n                            setSelectedEmployees(uniqueValues);\r\n                        }}\r\n                        PopperComponent={CustomPopper}\r\n                        value={selectedEmployees}\r\n                        onClose={onclose}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} placeholder=\"Employees\" />\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleAddEmployeeClose}>Cancel</Button>\r\n                    <Button onClick={handleAddEmployees} variant='contained' color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeManagementDialog;\r\n","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport RequiredStar from '../../Components/requiredStar';\r\nimport { ISOString } from '../../Components/functions';\r\n\r\nconst ProjectForm = ({ open, onClose, inputValue, isEdit, setReload }) => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n\r\n    const [projectHead, setProjectHead] = useState([]);\r\n    const [proStatus, setProStatus] = useState([]);\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        Project_Id: '',\r\n        Project_Name: '',\r\n        Project_Desc: '',\r\n        Project_Head: '',\r\n        Est_Start_Dt: ISOString(),\r\n        Est_End_Dt: ISOString(),\r\n        Project_Status: '',\r\n        Entry_By: parseData?.UserId,\r\n        Company_id: parseData?.Company_id\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            setProjectHead(data.success ? data.data : []);\r\n            \r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, [parseData?.Company_id]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `taskManagement/statusList`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProStatus(data.data);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n    \r\n            if (isEdit && inputValue) {\r\n                setFormData({\r\n                    ...inputValue,\r\n                    Project_Head: inputValue?.Project_Head_Id, \r\n                    Est_Start_Dt: inputValue.Est_Start_Dt ? ISOString(inputValue.Est_Start_Dt) : '',\r\n                    Est_End_Dt: inputValue.Est_End_Dt ? ISOString(inputValue.Est_End_Dt) : '',\r\n                    Project_Status: inputValue?.Project_Status || '', \r\n                    Project_Desc: inputValue?.Project_Desc || '-'\r\n                });\r\n            } else if (!isEdit) {\r\n           \r\n                setFormData({\r\n                    Project_Name: '',\r\n                    Project_Desc: '',\r\n                    Project_Head: '', \r\n                    Est_Start_Dt: ISOString(),\r\n                    Est_End_Dt: ISOString(),\r\n                    Project_Status: '',\r\n                    Entry_By: parseData?.UserId,\r\n                    Company_id: parseData?.Company_id\r\n                });\r\n            }\r\n        }\r\n    }, [inputValue, open, isEdit]);\r\n    \r\n    \r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const validateFields = () => {\r\n        const requiredFields = [\r\n            'Project_Name',\r\n            'Project_Head',\r\n            'Est_Start_Dt',\r\n            'Est_End_Dt',\r\n            'Project_Status',\r\n        ];\r\n\r\n        for (const field of requiredFields) {\r\n            if (!formData[field]) {\r\n                toast.error(`${field.replace(/_/g, ' ')} is required`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const createFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        const payload = {\r\n            ...formData,\r\n            Company_id: parseData.Company_id\r\n        };\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'POST',\r\n            bodyData: payload,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => {\r\n            console.error('Fetch Error:', e);\r\n            toast.error(\"An error occurred while creating the project.\");\r\n        });\r\n    };\r\n\r\n    const editFun = () => {\r\n        if (!validateFields()) return;\r\n\r\n        fetchLink({\r\n            address: `taskManagement/project`,\r\n            method: 'PUT',\r\n            bodyData: formData,\r\n        }).then(data => {\r\n            if (data.success) {\r\n                onClose();\r\n                setReload(prev => !prev);\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        }).catch(e => console.error('Fetch Error:', e));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        isEdit ? editFun() : createFun();\r\n    };\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Project Name',\r\n            elem: 'input',\r\n            type: 'text',\r\n            required: true,\r\n            name: 'Project_Name',\r\n            value: formData.Project_Name || '',\r\n        },\r\n        {\r\n            label: \"Project Head\",\r\n            elem: \"select\",\r\n            options: projectHead.map(obj => ({ value: obj?.UserId, label: obj?.Name })),\r\n            required: true,\r\n            name: 'Project_Head',\r\n            value: formData.Project_Head || '',\r\n        },\r\n        {\r\n            label: 'Estimated Start Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_Start_Dt',\r\n            value: formData.Est_Start_Dt || '',\r\n        },\r\n        {\r\n            label: 'Estimated End Date',\r\n            elem: 'input',\r\n            type: 'date',\r\n            required: true,\r\n            name: 'Est_End_Dt',\r\n            value: formData.Est_End_Dt || '',\r\n        },\r\n        {\r\n            label: 'Project Status',\r\n            elem: 'select',\r\n            options: proStatus.map(obj => ({ value: obj.Status_Id, label: obj.Status })),\r\n            required: true,\r\n            name: 'Project_Status',\r\n            value: formData.Project_Status || '',\r\n        },\r\n        {\r\n            label: 'Description',\r\n            elem: 'textarea',\r\n            name: 'Project_Desc',\r\n            value: formData.Project_Desc || ' ',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={onClose}>\r\n                <DialogTitle className=\"bg-primary text-white mb-2 px-3 py-2\">\r\n                    {isEdit ? \"Edit Project\" : 'Create Project'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 mb-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        >\r\n                                            <option value=''>Select</option>\r\n                                            {field.options && field.options.map((option, idx) => (\r\n                                                <option key={idx} value={option.value}>{option.label}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : (\r\n                                        <input\r\n                                            type={field.type}\r\n                                            name={field.name}\r\n                                            className='cus-inpt'\r\n                                            value={field.value}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <DialogActions>\r\n                            <button\r\n                                className=\"btn btn-light rounded-5 px-3\"\r\n                                type=\"button\"\r\n                                onClick={onClose}>\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-primary rounded-5 px-3\"\r\n                                type='submit'>\r\n                                {isEdit ? \"Update\" : \"Submit\"}\r\n                            </button>\r\n                        </DialogActions>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectForm;\r\n","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]"],"names":["icon","_jsx","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","_ref","row","children","openAction","reload","onCloseFun","loadingOn","loadingOff","onTaskAdded","localData","localStorage","getItem","parseData","JSON","parse","initialValue","Task_Id","Task_Name","Task_Desc","Task_Group_Id","Entry_By","UserId","Company_id","Entry_Date","Update_By","Update_Date","Task_Parameters","dialog","setDialog","useState","isEdit","setIsEdit","taskData","setTaskData","taskGroup","setTaskGroup","taskParameters","setTaskParameters","inputValue","setInputValue","editDialog","setEditDialog","editInputValue","setEditInputValue","useEffect","async","taskResponse","fetchLink","address","success","data","taskGroupResponse","taskParametersResponse","e","console","error","fetchData","isValidObject","log","prev","_objectSpread","closeDialog","closeEditDialog","_jsxs","_Fragment","onClick","style","cursor","Dialog","open","DialogTitle","className","onSubmit","preventDefault","paramArr","map","param","Param_Id","Paramet_Id","PostObj","response","method","bodyData","toast","message","postAndPutTask","DialogContent","RequiredStar","maxLength","onChange","target","value","required","placeholder","disabled","o","i","Task_Type_Id","Task_Type","Under_Task_Id","rows","Autocomplete","multiple","id","options","disableCloseOnSelect","getOptionLabel","option","concat","Paramet_Name","Paramet_Data_Type","event","newValue","renderOption","props","_ref2","selected","Checkbox","marginRight","checked","isOptionEqualToValue","opt","val","Number","renderInput","params","TextField","label","index","type","updatedParams","Default_Value","DialogActions","onClose","handleEditSubmit","fullWidth","select","projectId","taskId","onReload","editData","usersDropdown","setUsersDropdown","loading","setLoading","selectedSch","setSelectedSch","intitalVlaue","AN_No","Project_Id","Sch_Id","Assigned_Emp_Id","Emp_Id","Task_Assign_dt","Date","toISOString","split","Sch_Period","Sch_Time","EN_Time","Est_Start_Dt","Est_End_Dt","Ord_By","Timer_Based","Sch_Type","Invovled_Stat","EmpGet","Is_Repitative","RepeatDays","Mon","Tue","Wed","Thu","Fri","Sat","Sun","assignEmpInpt","setAssignEmpInpt","userResponse","schTypeResponse","_selectedSchType$data","_selectedSchType$data2","selectedSchType","selectedSchId","Sch_Type_Id","selectedSchName","Sch_Name","_selectedSchType$data3","_selectedSchType$data4","TaskSchId","fetchSelectedData","Sch_Type_Name","EmployeeName","IS_Rep_Monday","IS_Rep_Tuesday","IS_Rep_Wednesday","IS_Rep_Thursday","Is_Rep_Friday","Is_Rep_Saturday","Is_Rep_Sunday","maxWidth","schPeriod","calculateSchPeriod","hours1","minutes1","hours2","minutes2","date1","date2","difference","Math","abs","hours","floor","minutes","String","padStart","repeatDaysMapped","Task_Levl_Id","tableLayout","verticalAlign","paddingRight","paddingLeft","Select","obj","Name","styles","customSelectStyles","isSearchable","padding","isDisabled","min","display","Boolean","htmlFor","alignItems","flexWrap","prevState","marginBottom","gap","day","width","Button","variant","taskDetails","closeDialogTask","selectedTask","setSelectedTask","assignDialogOpen","setAssignDialogOpen","contextObj","useContext","MyContext","setTimeout","formatDate","dateString","date","isNaN","getTime","getDate","month","getMonth","year","getFullYear","justifyContent","color","height","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","length","colSpan","textAlign","detail","AssignedUser","CalendarMonth","QueryBuilder","Edit_Rights","IconButton","size","Edit","TaskAssign","dialogOpen","setDialogOpen","projectid","selectedProject","isDialogOpen","setIsDialogOpen","taskAssignOpen","setTaskAssignOpen","tasks","setTasks","setTaskDetails","taskDetailDialog","setTaskDetailsDialog","taskScheduleInput","setTaskScheduleInput","deleteDialogOpen","setDeleteDialogOpen","userData","entryBy","companyId","editDialogOpen","setEditDialogOpen","expandedAccordion","setExpandedAccordion","expandedAccordionTask","setExpandedAccordionTask","setIsedit","updateDialogOpen","setUpdateDialogOpen","selectedTab","setSelectedTab","scheduleTypes","setScheduleTypes","handleTabChange","fetchTasks","useCallback","then","Schtype","taskOptions","handleSchTypeChange","selectedOption","find","parseInt","PaperProps","borderRadius","flex","marginLeft","requestData","Sch_Project_Id","task","schtypeid","status","warn","updatesTaskDetails","Project_Name","Box","sx","typography","schedule","SchTypes","TabContext","borderBottom","borderColor","TabList","Array","isArray","sch","Tab","SchType","SchTypeId","toString","Typography","TabPanel","backgroundColor","TaskCountsInSchType","count","TotalTasks","CompletedTasks","TaskTypeGroups","taskType","Accordion","expanded","handleAccordionChange","boxShadow","AccordionSummary","expandIcon","ExpandMoreIcon","fontWeight","flexGrow","TaskMetrics","AccordionDetails","Tasks","taskItem","handleAccordionChangeTask","maxHeight","stickyHeader","handleTaskEdit","AssignedEmployees","employee","empIndex","Chip","margin","handleSelectedTask","LibraryAddIcon","handleviewTaskDetail","ViewHeadlineSharpIcon","marginTop","position","bottom","TasksGet","Task_Sch_Duaration","Task_Start_Time","Task_End_Time","Task_Est_Start_Date","Task_Est_End_Date","handleTaskChange","Sch_Est_Start_Date","Sch_Est_End_Date","TaskMasterMgt","Reload","TaskIndividual","ActiveProjects","setReload","projects","setProjects","projectAlldata","setProjectAlldata","setSelectedProject","setProjectId","deleteDialog","setDeleteDialog","projectToDelete","setProjectToDelete","employeeDialogOpen","setEmployeeDialogOpen","listingTaskDialogOpen","setListingTaskDialogOpen","filterInput","setFilterInput","reloadFlag","setReloadFlag","fetchProjects","fetchProjectData","handleReloadProjects","deleteFun","catch","columns","name","selector","sortable","_projectAlldata$find","p","Project_Head_Name","_projectAlldata$find2","Status","toLocaleDateString","TodayTaskcounts","completed","toFixed","calcPercentage","cell","handleOpenListingTaskDialog","Launch","TasksAssignedToEmployee","Add_Rights","handleOpenEmployeeDialog","People","EmployeesInvolved","handleOpenEditDialog","filteredProjects","filter","project","_projectAlldata$find3","_projectAlldata$find4","projectHead","toLowerCase","includes","handleCloseDialogs","SearchIcon","left","border","handleOpenCreateDialog","DataTable","pagination","highlightOnHover","fixedHeader","paginationPerPage","responsive","persistTableHead","customStyles","headCells","top","zIndex","cells","overflowY","background","ListingTask","ProjectForm","projectData","EmployeeManagementDialog","Designation_Name","BranchName","employees","setEmployees","addEmployeeDialogOpen","setAddEmployeeDialogOpen","dropdownEmployees","setDropdownEmployees","selectedEmployees","setSelectedEmployees","fetchEmployeeDetails","fetchDropdownEmployees","fetchAssignedEmployees","onClosed","marginInlineStart","handleAddEmployeeOpen","mr","user","EmployeeId","uniqueValues","self","findIndex","t","PopperComponent","Popper","placement","onclose","handleAddEmployeeClose","UserIds","emp","setProjectHead","proStatus","setProStatus","formData","setFormData","Project_Desc","Project_Head","ISOString","Project_Status","Project_Head_Id","handleChange","validateFields","requiredFields","field","replace","inputFields","elem","Status_Id","createFun","payload","idx","customTableStyles","table","menu","provided","state","menuPortal","base","groupHeading","textTransform","isSelected","isFocused","MainMenu","headname","align","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}