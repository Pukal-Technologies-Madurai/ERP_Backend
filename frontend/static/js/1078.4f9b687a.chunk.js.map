{"version":3,"file":"static/js/1078.4f9b687a.chunk.js","mappings":"2GACA,Q,SAAoC,C,2CCD7B,MAAMA,EAAkB,CAC3B,CACIC,GAAI,EACJC,MAAO,MACPC,MAAO,wBAEX,CACIF,GAAI,EACJC,MAAO,WACPC,MAAO,2BAEX,CACIF,GAAI,EACJC,MAAO,YACPC,MAAO,2BAEX,CACIF,GAAI,EACJC,MAAO,WACPC,MAAO,2BAIFC,EAAW,CACpB,CACIH,GAAI,EACJC,MAAO,MACPC,MAAO,wBAEX,CACIF,GAAI,EACJC,MAAO,UACPC,MAAO,2BAEX,CACIF,GAAI,EACJC,MAAO,YACPC,MAAO,2BAEX,CACIF,GAAI,EACJC,MAAO,WACPC,MAAO,0B,8FCtCf,MAAME,EAAqB,eAAAC,EAAA,IAAWC,EAASC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OAA8D,QAA9DJ,GAAhBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAAsBG,KAAKC,IAAOC,EAAAA,EAAAA,IAAcD,EAAIE,WAAYP,WAAW,IAAAD,EAAAA,EAAI,CAAC,CAAE,EA2JpH,EAzJ+BS,IASxB,IATyB,gBAC5BC,EAAkB,GAAE,gBACpBC,EAAkB,GAAE,iBACpBC,EAAgB,YAChBC,EAAW,QACXC,EAAO,SACPC,EAAW,GAAE,YACbC,EAAc,CAAC,EAAC,eAChBC,GACHR,EAEG,MAAMS,GAAmBC,EAAAA,EAAAA,SAAQ,KACtBC,EAAAA,EAAAA,IAAQT,GAAiBU,OAAO,CAACC,EAAKC,KAAQC,EAAAA,EAAAA,IAASF,EAAQ,OAAHC,QAAG,IAAHA,OAAG,EAAHA,EAAKE,eAAgB,GACzF,CAACd,IAEEe,GAAsBP,EAAAA,EAAAA,SAAQ,KAChC,MAAMQ,EAAWjB,EAAgBW,OAAO,CAACC,EAAKM,KAC1C,MAAMC,GAASC,EAAAA,EAAAA,IAAgB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,QAEjC,GAAIjB,EAAkB,OAAOY,EAAAA,EAAAA,IAASF,EAAKO,GAE3C,MAAME,EAAUhC,EAAmBgB,EAAUa,EAAKI,SAC5CC,EAAgBnB,EAAUiB,EAAQG,OAASH,EAAQI,MAEzD,OAAItB,GACOW,EAAAA,EAAAA,IAASF,GAAKc,EAAAA,EAAAA,GAAoBP,EAAQI,EAAe,UAAUI,WAEnEb,EAAAA,EAAAA,IAASF,GAAKc,EAAAA,EAAAA,GAAoBP,EAAQI,EAAe,OAAOI,WAE5E,GAEH,OAAOb,EAAAA,EAAAA,IAASG,EAAUT,IAC3B,CAACR,EAAiBE,EAAkBG,EAAUD,EAASD,EAAaK,IAEjEoB,GAAanB,EAAAA,EAAAA,SAAQ,KACvB,IAAKT,GAA8C,IAA3BA,EAAgBP,OAAc,MAAO,CAAC,EAE9D,IAAIoC,EAAe,EACfC,EAAW,EAEf9B,EAAgB+B,QAAQb,IACpB,MAAMC,GAASC,EAAAA,EAAAA,KAAgB,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,SAAU,GAE3C,GAAIjB,EAEA,YADA2B,GAAef,EAAAA,EAAAA,IAASe,EAAcV,IAI1C,MAAME,EAAUhC,EAAmBgB,EAAUa,EAAKI,SAC5CC,GAAgB1B,EAAAA,EAAAA,IAAcO,EAAS,GAAKiB,EAAQG,OAASH,EAAQI,MAErEO,GAAUN,EAAAA,EAAAA,GAAoBP,EAAQI,EAAepB,EAAc,SAAW,OAEpF0B,GAAef,EAAAA,EAAAA,IAASe,EAAcI,WAAWD,EAAQE,cACzDJ,GAAWhB,EAAAA,EAAAA,IAASgB,EAAUG,WAAWD,EAAQG,eAGrD,MAAMC,GAAetB,EAAAA,EAAAA,IAASe,EAAcC,GACtCO,GAAoBvB,EAAAA,EAAAA,IAASsB,EAAc5B,GAC3C8B,EAAeC,KAAKC,MAAMH,GAC1BI,GAAWrB,EAAAA,EAAAA,IAAYkB,EAAeD,GAEtCK,GAAO7C,EAAAA,EAAAA,IAAcO,EAAS,GAAK,GAAIgB,EAAAA,EAAAA,IAAYU,EAAW,GAC9Da,GAAO9C,EAAAA,EAAAA,IAAcO,EAAS,GAAK,GAAIgB,EAAAA,EAAAA,IAAYU,EAAW,GAC9Dc,GAAO/C,EAAAA,EAAAA,IAAcO,EAAS,IAAKgB,EAAAA,EAAAA,IAAYU,GAAY,EAEjE,MAAO,CACHD,cAAcT,EAAAA,EAAAA,IAAYS,GAC1BC,UAAUV,EAAAA,EAAAA,IAAYU,GACtBY,OACAC,OACAC,OACAH,WACAI,aAAcP,IAGnB,CAACtC,EAAiBK,EAAUD,EAASF,EAAkBC,EAAaK,IASvE,OANAC,EAAAA,EAAAA,SAAQ,UACwBf,IAAxBkC,EAAWa,UAA0Bb,EAAWa,WAAanC,EAAYwC,WACzEvC,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAED,UAAWlB,EAAWa,aAE5D,CAACb,EAAWa,YAGXQ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,SAAAF,SAAA,EACIE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIE,EAAAA,EAAAA,MAAA,MAAID,UAAU,aAAaE,QAASlD,EAAU,EAAI,EAAE+C,SAAA,CAAC,oBAChCI,EAAAA,EAAAA,IAAcC,SAASxC,QAE5CiC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,0BAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SACrBvB,EAAWC,kBAGlBzB,GAgBEiD,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,UAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SACrBvB,EAAWgB,WAlBpBS,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,UAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SACrBvB,EAAWc,WAGpBW,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,UAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SACrBvB,EAAWe,cAY5BU,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,oBAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,UACrB/B,EAAAA,EAAAA,IAAYZ,SAGrB6C,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,eAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,UACtBF,EAAAA,EAAAA,KAAA,SACIQ,MAAOnD,EAAYwC,WAAalB,EAAWa,UAAY,EACvDW,UAAU,4BACVM,QAASC,EAAAA,GACTC,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC1BD,GAAG,IACND,UAAWb,WAAW4B,EAAEC,OAAOL,QAAU,aAKzDJ,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAC,WAC3BF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,UACrBY,EAAAA,EAAAA,IAAaxB,KAAKC,MAAMxB,gB,6DClJrD,SAAegD,EAAAA,EAAAA,IAA4Bf,EAAAA,EAAAA,KAAK,OAAQ,CACtDgB,EAAG,0GACD,Q,sLCIJ,MAoKA,EApK+BlE,IAMxB,IANyB,gBAC5BE,EAAkB,GAAE,mBACpBiE,EAAkB,cAClBC,EAAgB,GAAE,QAClB/D,EAAO,QACPgE,GACHrE,EA0EI,OACGkD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIE,EAAAA,EAAAA,MAACgB,EAAAA,EAAI,CAAAlB,SAAA,EACDE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,wEAAuED,SAAA,EAClFF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,MAAKD,SAAC,cACpBF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAACC,QAAQ,WAAWC,KAAK,SAASC,QAbvCC,KACdR,EAAmBS,GAAQ,IAAIA,GAAI3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO4B,EAAAA,IAAwB,IAAEC,IAAKF,EAAKlF,YAYN0D,SAAC,YAEjEF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAAkBD,UAC7BE,EAAAA,EAAAA,MAAA,SAAOD,UAAU,2BAA0BD,SAAA,EACvCF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,cAAaD,UAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SACK,CACG,OAAQ,UACR,gBAAiB,UAAU2B,IAC3B,CAACC,EAAGC,KAAM/B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,iBAAgBD,SAAU4B,GAAJC,SAI1D3B,EAAAA,EAAAA,MAAA,SAAO4B,MAAO,CAAEC,SAAU,QAAS/B,SAAA,CAC9BlD,EAAgB6E,IAAI,CAACK,EAAKC,KAAW,IAADC,EAEjC,MAAMC,GAEL,QAF0BD,EAAAlB,EAAcxE,KACrCkB,IAAOhB,EAAAA,EAAAA,IAAcgB,EAAI0E,GAAO,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,oBACrC,IAAAH,OAAA,EAF0BA,EAExBI,eAAgB,GAEnB,OACIpC,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAKiC,EAAQ,KACbnC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,WAAW6B,MAAO,CAAES,SAAU,SAAUvC,UAClDF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACHlC,MAAO,CACHA,MAAU,OAAH0B,QAAG,IAAHA,OAAG,EAAHA,EAAKK,WACZtG,MAAOoG,GAEX1B,SAAUC,GAxD3B+B,EAACR,EAAOS,KAC/B,MAAMC,EAAW3B,EAAcxE,KAAKkB,IAAOhB,EAAAA,EAAAA,IAAcgB,EAAI0E,GAAIM,EAAepC,SAAW,CAAC,EAC5FS,EAAmBS,GACfA,EAAKG,IAAI,CAAC5D,EAAM8D,IACRA,IAAMI,EAAclE,GACxB8B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO9B,GAAI,IACPsE,WAAYM,EAASP,GACrBxE,cAAe,OAgD4B6E,CAAmBR,EAAOvB,GACzCkC,QAAS5B,EAEJ6B,OAAOnF,MAEAhB,EAAAA,EAAAA,IAAcgB,EAAI0E,GAAO,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,cAGvBvF,EAAgBgG,KACpB,CAACC,EAAKC,IAAQA,IAAQf,IAASvF,EAAAA,EAAAA,IAAcqG,EAAIV,WAAY3E,EAAI0E,MAGxET,IAAIjE,IAAG,CAAO4C,MAAO5C,EAAI0E,GAAIrG,MAAO2B,EAAI4E,gBAE7CW,OAAQC,EAAAA,GACRC,iBAAkBC,SAASC,KAC3BC,cAAc,EACdC,YAAY,sBAGpBzD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,WAAUD,UACpBF,EAAAA,EAAAA,KAAA,SACIS,QAASC,EAAAA,GACTP,UAAU,wBACVK,MAAO0B,EAAIpE,eAAiB,GAC5B4F,WAAWC,EAAAA,EAAAA,IAAczB,EAAIK,YAC7B5B,SAAUC,IApI5BgD,EAACzB,EAAO0B,EAAOrD,KAErCS,EAAmBS,GACfA,EAAKG,IAAI,CAAC5D,EAAM8D,KACZ,GAAIA,IAAMI,EAAO,OAAOlE,EAExB,MAAM6F,GAAO/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAI,IAAE,CAAC4F,GAAQrD,IAEpC,GAAc,kBAAVqD,EAA2B,CAC3B,MACIE,EAAO9F,EAAK8F,MAAOC,EAAAA,EAAAA,IAAS/F,EAAK8F,MAAQ,EACzCE,EAAOhG,EAAKgG,MAAOD,EAAAA,EAAAA,IAAS/F,EAAKgG,MAAQ,EACzCC,EAAOjG,EAAKiG,MAAOF,EAAAA,EAAAA,IAAS/F,EAAKiG,MAAQ,EACzCC,GAASH,EAAAA,EAAAA,IAASxD,GAClB4D,EAAgBjH,EAAU+G,GAAOrG,EAAAA,EAAAA,IAASkG,EAAME,GAE9CI,GAAY5F,EAAAA,EAAAA,GAAoB0F,EAAQC,EAAejD,GAE7D2C,EAAQQ,SAAYP,EAAO,IAAM5G,EAC3BkH,EAAUE,YACV,EACNT,EAAQU,SAAYP,EAAO,IAAM9G,EAC3BkH,EAAUI,YACV,EACNX,EAAQY,SAAYR,EAAO,GAAK/G,EAC1BkH,EAAUM,YACV,CACV,CAEA,GAAc,SAAVd,EAAkB,CAClB,MACIK,EAAO/G,GAAU6G,EAAAA,EAAAA,IAASxD,GAAS,EACnCuD,EAAQ5G,EAAyC,GAA/ByH,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,IAASxD,GAAQ,GAC5CyD,EAAQ9G,EAAyC,GAA/ByH,EAAAA,EAAAA,KAASZ,EAAAA,EAAAA,IAASxD,GAAQ,GAE1C2D,GAASH,EAAAA,EAAAA,IAAS/F,EAAKH,eAAgBsG,EAAgBjH,EAAU+G,GAAOrG,EAAAA,EAAAA,IAASkG,EAAME,GACvFI,GAAY5F,EAAAA,EAAAA,GAAoB0F,EAAQC,EAAejD,GAE7D2C,EAAQC,KAAOA,EACfD,EAAQG,KAAOA,EACfH,EAAQQ,SAAWP,EAAO,EAAIM,EAAUE,YAAc,EACtDT,EAAQU,SAAWP,EAAO,EAAII,EAAUI,YAAc,EACtDX,EAAQY,SAAWR,EAAO,EAAIG,EAAUM,YAAc,CAC1D,CAEA,OAAOb,MAwF6BF,CAAkBzB,EAAO,gBAAiBvB,EAAEC,OAAOL,aAI/DR,EAAAA,EAAAA,KAAA,MAAIG,UAAU,yBAAwBD,UAClCF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACrD,QAASA,IAtE3CW,KACdlB,EAAmBS,GAAQA,EAAKqB,OAAO,CAAC+B,EAAG/C,IAAMA,IAAMI,KAqEQ4C,CAAU5C,GAAQ6C,KAAK,QAAO9E,UACrDF,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CAAC/I,MAAM,QAAQ+F,SAAS,gBAzClCE,KA+CW,IAA3BnF,EAAgBR,SACbwD,EAAAA,EAAAA,KAAA,MAAAE,UAAIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,cAAc+E,QAAS,EAAEhF,SAAC,2B,oHC9J5E,MAuLA,EAvLsCpD,IAQ/B,IAADqI,EAAA,IARiC,YACnC9H,EAAc,CAAC,EAAC,eAChBC,EAAc,UACd8H,EAAY,GAAE,YACdC,EAAc,GAAE,SAChBC,EAAW,GAAE,iBACbC,EAAgB,oBAChBC,EAAsB,IACzB1I,EAEG,MACM2I,EAAa,eAEnB,OACIrF,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,MAAKD,SAAA,EAGhBE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,gBACzBF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACHlC,MAAO,CACHA,MAAkB,OAAXnD,QAAW,IAAXA,OAAW,EAAXA,EAAaqI,YACpBzJ,MAAkB,OAAXoB,QAAW,IAAXA,OAAW,EAAXA,EAAasI,eAExBhF,SAAUC,IACNtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAG,IACN4F,YAAa9E,EAAEJ,MACfmF,cAAe/E,EAAE3E,SAGjBsJ,GAAkBA,KAE1BzC,QAAS,CACL,CAAEtC,MAAO,GAAIvE,MAAO,SAAU2J,YAAY,OACvCnI,EAAAA,EAAAA,IAAQ2H,GAAWvD,IAAIlF,IAAG,CACzB6D,MAAU,OAAH7D,QAAG,IAAHA,OAAG,EAAHA,EAAK+I,YACZzJ,MAAU,OAAHU,QAAG,IAAHA,OAAG,EAAHA,EAAKgJ,kBAGpBxC,OAAQC,EAAAA,GACRI,cAAc,EACdC,YAAa,gBACboC,cAAe,UAKvBzF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcD,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,kBACzBF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACHlC,MAAO,CACHA,MAAOnD,EAAYyI,aACnB7J,MAAgG,QAA3FkJ,GAAE1H,EAAAA,EAAAA,IAAQ4H,GAAa3I,KAAKqJ,IAAKnJ,EAAAA,EAAAA,IAAcmJ,EAAEC,eAAgB3I,EAAYyI,sBAAc,IAAAX,OAAA,EAAzFA,EAA2FW,cAEtGnF,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEgG,aAAclF,EAAEJ,SAChEsC,QAAS,CACL,CAAEtC,MAAO,GAAIvE,MAAO,SAAU2J,YAAY,OACvCnI,EAAAA,EAAAA,IAAQ4H,GAAatC,OACpBkD,GAAqB,WAAX,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKC,OACdrE,IAAIlF,IAAG,CACL6D,MAAU,OAAH7D,QAAG,IAAHA,OAAG,EAAHA,EAAKqJ,eACZ/J,MAAU,OAAHU,QAAG,IAAHA,OAAG,EAAHA,EAAKmJ,iBAGpB3C,OAAQC,EAAAA,GACRI,cAAc,EACd2C,UAAU,EACV1C,YAAa,sBACboC,cAAe,IAChBD,cAAcjC,EAAAA,EAAAA,IAAyB,OAAXtG,QAAW,IAAXA,OAAW,EAAXA,EAAa+I,aAKhDhG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,MAAA,SAAOD,UAAU,QAAOD,SAAA,CAAC,eAAWF,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,QACjDrG,EAAAA,EAAAA,KAAA,SACIQ,MAAkB,OAAXnD,QAAW,IAAXA,OAAW,EAAXA,EAAaiJ,QACpB/E,KAAK,OACL4E,UAAQ,EACRhG,UAAWsF,EACX9E,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEwG,QAAS1F,EAAEC,OAAOL,eAK1EJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,MAAA,SAAOD,UAAU,QAAOD,SAAA,CAAC,WAAOF,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,QAC7CjG,EAAAA,EAAAA,MAAA,UACID,UAAWsF,EACXjF,MAAkB,OAAXnD,QAAW,IAAXA,OAAW,EAAXA,EAAakJ,UACpBJ,UAAQ,EACRxF,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEyG,UAAW3F,EAAEC,OAAOL,SAAUN,SAAA,EAE9EF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,GAAEN,SAAC,WAChBoF,EAASzD,IAAI,CAACC,EAAGC,KACd/B,EAAAA,EAAAA,KAAA,UAAQQ,MAAQ,OAADsB,QAAC,IAADA,OAAC,EAADA,EAAG0E,SAAStG,SAAW,OAAD4B,QAAC,IAADA,OAAC,EAADA,EAAG2E,YAAP1E,WAM7C3B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CE,EAAAA,EAAAA,MAAA,SAAOD,UAAU,QAAOD,SAAA,CAAC,aAASF,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,QAC/CjG,EAAAA,EAAAA,MAAA,UACID,UAAWsF,EACX9E,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE4G,cAAeC,OAAO/F,EAAEC,OAAOL,UAC/EA,MAAOnD,EAAYqJ,cACnBP,UAAQ,EAAAjG,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQQ,MAAO,EAAEN,SAAC,mBAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAO,EAAEN,SAAC,mBAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAO,EAAEN,SAAC,uBAK1BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,cACzBE,EAAAA,EAAAA,MAAA,UACID,UAAWsF,EACX9E,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE3C,QAASwJ,OAAO/F,EAAEC,OAAOL,UACzEA,MAAOnD,EAAYF,QAAQ+C,SAAA,EAE3BF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,SAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,gBAK1BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,4BACzBF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACHlC,MAAO,CAAEA,MAAOnD,EAAYuJ,uBAAwB3K,MAAOoB,EAAYuJ,wBACvEjG,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE8G,uBAAwBhG,EAAEJ,SAC1EsC,QAAS,CACL,CAAEtC,MAAO,GAAIvE,MAAO,SAAU2J,YAAY,MACvCJ,EAAoB3D,IAAIlF,IAAG,CAC1B6D,MAAU,OAAH7D,QAAG,IAAHA,OAAG,EAAHA,EAAKiK,uBACZ3K,MAAU,OAAHU,QAAG,IAAHA,OAAG,EAAHA,EAAKiK,2BAGpBzD,OAAQC,EAAAA,GACRC,iBAAkBC,SAASC,KAC3B4C,UAAU,EACV3C,cAAc,EACdC,YAAa,SACboC,cAAe,UAKvBzF,EAAAA,EAAAA,MAAA,OAAKD,UAAU,iCAAgCD,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,YACzBE,EAAAA,EAAAA,MAAA,UACII,MAAkB,OAAXnD,QAAW,IAAXA,OAAW,EAAXA,EAAawJ,cACpB1G,UAAWsF,EACX9E,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE+G,cAAejG,EAAEC,OAAOL,SAAUN,SAAA,EAElFF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,GAAGkD,UAAQ,EAAAxD,SAAC,YAC1BF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,SAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,aAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,eAClBF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,IAAGN,SAAC,uBAM9BF,EAAAA,EAAAA,KAAA,SAAOG,UAAU,QAAOD,SAAC,eACzBF,EAAAA,EAAAA,KAAA,YACIG,UAAU,iBACV2G,KAAM,EACNtG,MAAOnD,EAAY0J,UACnBpG,SAAUC,GAAKtD,EAAewC,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAEiH,UAAWnG,EAAEC,OAAOL,c,kBCnLpFwG,OAAOC,eAAeC,EAAS,aAAc,CAC3C1G,OAAO,IAETwG,OAAOC,eAAeC,EAAS,UAAW,CACxCC,YAAY,EACZC,IAAK,WACH,OAAOC,EAAOtG,aAChB,IAEF,IAAIsG,EAASC,EAAQ,M,sBCTjBC,EAAyBD,EAAQ,OAIrCJ,EAAQ,OAAU,EAClB,IAAIM,EAAiBD,EAAuBD,EAAQ,QAChDG,EAAcH,EAAQ,OACXJ,EAAQ,GAAU,EAAIM,EAAeE,UAAuB,EAAID,EAAYE,KAAK,OAAQ,CACtG3G,EAAG,gDACD,e,+fCXJ,QCDe,SAA4B4G,EAAWC,GAElD,MAAO,IAAM,IAUjB,E,qCCXA,QCAe,SAA4BC,EAAsBC,GAE7D,MAAO,IAAM,IAoBjB,ECtBA,Q,SAAqB,E,0BCArB,QCDe,SAAyBC,EAAOC,EAAUC,EAAeC,EAAUC,GAE9E,OAAO,IAOX,E,gDCaO,MAAMC,EAA8B,CACzCC,UAAWC,IAITC,EAAAA,EAAmBF,UAAUC,I,6DCvBjC,SAAexH,EAAAA,EAAAA,IAA4Bf,EAAAA,EAAAA,KAAK,OAAQ,CACtDgB,EAAG,uIACD,O,kDCLJ,QCAe,SAAsByH,EAASC,GAC5C,IAAIC,EAAUC,EACd,OAAoBC,EAAAA,eAAqBJ,KAGiM,IAHrLC,EAASI,QAGzB,OAApCH,EAAWF,EAAQlH,KAAKwH,SAAmBJ,EAA6C,OAAjCC,EAAgBH,EAAQlH,OAA6D,OAA3CqH,EAAgBA,EAAcI,WAA8D,OAAxCJ,EAAgBA,EAAcpI,YAAiB,EAASoI,EAAcG,QAC9N,C,6KCHA,SAAehI,EAAAA,EAAAA,IAA4Bf,EAAAA,EAAAA,KAAK,OAAQ,CACtDgB,EAAG,mHACD,U,+LCo2BJ,MAAMiI,GAAUC,EAAAA,EAAAA,MAAiBC,KA4pBjC,EAvpB+BrM,IAA2D,IAA1D,UAAEsM,EAAS,WAAEC,EAAU,KAAEC,EAAI,QAAEC,EAAO,WAAEC,GAAY1M,EACpF2M,QAAQC,IAAI,aAAaF,GACrB,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACrCzM,SAAU,GACV0M,OAAQ,GACR1E,UAAW,GACXC,YAAa,GACb0E,IAAK,GACLC,MAAO,GACPC,UAAW,GACXC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,cAAe,GACf7E,oBAAqB,MAGlB8E,EAAQC,IAAaV,EAAAA,EAAAA,UAAS,CACjCW,kBAAkB,EAClBC,qBAAqB,KAGlBpN,EAAaC,IAAkBuM,EAAAA,EAAAA,UAASa,EAAAA,KACxC3N,EAAiB4N,IAAqBd,EAAAA,EAAAA,UAAS,KAC9C7M,EAAiBiE,IAAsB4I,EAAAA,EAAAA,UAAS,KACjDe,EAAYC,IAAiBhB,EAAAA,EAAAA,UAAS,KAEtCiB,EAAuBC,IAA4BlB,EAAAA,EAAAA,UAAS,MAE7D3M,GAAcN,EAAAA,EAAAA,IAAcS,EAAYqJ,cAAe,GACvDzJ,GAAmBL,EAAAA,EAAAA,IAAcS,EAAYqJ,cAAe,GAC5DvJ,GAAUP,EAAAA,EAAAA,IAAcS,EAAYF,QAAS,GAC7CgE,EAAUlE,EAAmB,UAAYC,EAAc,SAAW,MAElE8N,EADc,EACgBjO,EAAgBP,QAKpDyO,EAAAA,EAAAA,WAAU,KACN,IAAK3B,EAAM,OAEO4B,WACd,IACQ9B,GAAWA,IAEf,MACI+B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,SACMC,QAAQC,IAAI,EAClBC,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,6BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,sBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yCAADC,OAAkD,OAAPjD,QAAO,IAAPA,OAAO,EAAPA,EAASkD,eACvEH,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,0BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,iBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,0BACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,mCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,oCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,kCACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,yBACpBD,EAAAA,EAAAA,GAAU,CAAEC,QAAQ,8CAGlBG,GAAcjB,EAAekB,QAAUlB,EAAemB,KAAO,IAAIC,KACnE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG/F,YAAYkG,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGhG,aAE/CmG,GAAgBxB,EAAiBiB,QAAUjB,EAAiBkB,KAAO,IAAIC,KACzE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGK,cAAcF,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGI,eAEjDC,GAAiBzB,EAAiBgB,QAAUhB,EAAiBiB,KAAO,IAAIC,KAC1E,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG7G,eAAegH,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG9G,gBAElDN,GAAeiG,EAAoBe,QAAUf,EAAoBgB,KAAO,IAAIC,KAC9E,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG1G,cAAc6G,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG3G,eAEjDiH,GAAWxB,EAAYc,QAAUd,EAAYe,KAAO,IAAIC,KAC1D,CAACC,EAAGC,IAAMC,OAAOF,EAAEQ,OAAOL,cAAcF,EAAEO,QAExCC,GAAazB,EAAca,QAAUb,EAAcc,KAAO,IAAIC,KAChE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGU,kBAAkBP,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGS,mBAErDC,GAAqB1B,EAAcY,QAAUZ,EAAca,KAAO,IAAIC,KACxE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGY,eAAeT,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGW,gBAElDC,GAAmB3B,EAAwBW,QAAUX,EAAwBY,KAAO,IAAIC,KAC1F,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGc,aAAaX,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGa,cAEhDC,GAAkB5B,EAAgBU,SAAU5O,EAAAA,EAAAA,IAAQkO,EAAgBW,MAAQ,IAAIC,KAClF,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGgB,cAAcb,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGe,eAEjDC,GAAkB7B,EAAgBS,QAAUT,EAAgBU,KAAO,IAAIC,KACzE,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGkB,iBAAiBf,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGiB,kBAEpDlI,GAAuBqG,EAA4BQ,QAAUR,EAA4BS,KAAO,IAAIC,KACtG,CAACC,EAAGC,IAAMC,OAAQ,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG5F,wBAAwB+F,cAAe,OAADF,QAAC,IAADA,OAAC,EAADA,EAAG7F,yBAGjEgD,EAAa9J,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTD,GAAG,IACN1C,SAAUwP,EACV9C,OAAQsC,EACRhH,UAAW0H,EACXzH,YAAaA,EACb0E,IAAKgD,EACL/C,MAAOiD,EACPhD,UAAWkD,EACXhD,OAAQkD,EACRnD,OAAOyD,EAAAA,EAAAA,IAAcf,EAAc,QAAS,CAAC,eAC7CxC,QAASmD,EAAexK,OACpBnF,KAAQgQ,EAAAA,EAAAA,IAAchQ,EAAIsI,KAAM,YAClCrE,IAAIjE,IAAG,CAAO0E,GAAI1E,EAAIiQ,OAAQrL,aAAc5E,EAAI4P,gBAClDnD,cAAeoD,EACfjI,oBAAqBA,IAE7B,CAAE,MAAO5E,GACL6I,QAAQqE,MAAM,uBAAwBlN,EAC1C,CAAC,QACOyI,GAAYA,GACpB,GAGJ0E,IAED,CAAQ,OAAP9E,QAAO,IAAPA,OAAO,EAAPA,EAASkD,WAAY7C,KAezB2B,EAAAA,EAAAA,WAAU,KACNN,EAAkB7K,GACA,IAAIA,GAEL+B,IAAI5D,GACN+I,OAAOgH,YACVhH,OAAOiH,QAAQhQ,GAAM4D,IAAIqM,IAAmB,IAAjBC,EAAK3N,GAAM0N,EAClC,MAAME,EA7JH,eAAA/R,EAAA,IAAWC,EAASC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OAA8D,QAA9DJ,GAAhBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAAsBG,KAAKC,IAAOC,EAAAA,EAAAA,IAAcD,EAAIE,WAAYP,WAAW,IAAAD,EAAAA,EAAI,CAAC,CAAE,CA6JtED,CAAmBuN,EAASvM,SAAc,OAAJa,QAAI,IAAJA,OAAI,EAAJA,EAAMI,SAC5DC,EAAgBnB,EAAUiR,EAAc7P,OAAS6P,EAAc5P,MAC/D6P,EAAY/P,EAAgB,GAE5B,SAAEgQ,EAAQ,UAAEC,EAAS,OAAErQ,GAAWD,EAElCuQ,GAAc/P,EAAAA,EAAAA,GAAoB8P,EAAWjQ,EAAe6C,GAC5DsN,GAAUhQ,EAAAA,EAAAA,GAAoBP,EAAQI,EAAe6C,GAErDuN,EAAWvR,EAA6B,EAAnBsR,EAAQE,SAC7BC,EAAUzR,EAAUsR,EAAQI,SAAW,EACvCvK,EAAYnH,EAAgC,EAAtBsR,EAAQlK,YAC9BG,EAAWvH,EAAUsR,EAAQ9J,YAAc,EAEjD,OAAQwJ,GACJ,IAAK,eAAgB,MAAO,CAACA,EAAKK,EAAYM,aAC9C,IAAK,YAAa,MAAO,CAACX,EAAKG,GAC/B,IAAK,SAAU,MAAO,CAACH,EAAKE,EAAY,EAAI,GAC5C,IAAK,iBAAkB,MAAO,CAACF,EAAKM,EAAQK,aAC5C,IAAK,WAAY,MAAO,CAACX,EAAK7P,GAC9B,IAAK,OACL,IAAK,OAAQ,MAAO,CAAC6P,EAAY,OAAPO,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WACL,IAAK,WAAY,MAAO,CAACP,EAAKlR,EAAmB,EAAIqH,GACrD,IAAK,OAAQ,MAAO,CAAC6J,EAAY,OAAPS,QAAO,IAAPA,EAAAA,EAAW,GACrC,IAAK,WAAY,MAAO,CAACT,EAAKlR,EAAmB,EAAIyH,GACrD,IAAK,YAAa,MAAO,CAACyJ,EAAKM,EAAQ/P,UAEvC,QAAS,MAAO,CAACyP,EAAKlQ,EAAKkQ,IAAQ3N,UAMxD,CACCmJ,EAASvM,SACTD,EACAgE,KAGJ8J,EAAAA,EAAAA,WAAU,KACNhK,EAAmBnB,GACD,IAAIA,GAEL+B,IAAI5D,IACb,MACIiG,EAAO/G,GAAU6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMiG,MAAQ,EACxCH,EAAQ5G,EAAiC,GAAvB6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAM8F,MACjCE,EAAQ9G,EAAiC,GAAvB6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMgG,MACjCnG,GAAgBkG,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMH,eAC/BsG,EAAgBjH,EAAU+G,GAAOrG,EAAAA,EAAAA,IAASkG,EAAME,GAE9CI,GAAY5F,EAAAA,EAAAA,GAAoBX,EAAesG,EAAejD,GAEpE,OAAApB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO9B,GAAI,IACP8F,OAAME,OAAMC,OACZpG,gBACAwG,SAAUP,EAAO,EAAIM,EAAUE,YAAc,EAC7CC,SAAUP,EAAO,EAAII,EAAUI,YAAc,EAC7CC,SAAUR,EAAO,EAAIG,EAAUM,YAAc,QAI1D,CACCgF,EAASS,QACTjN,EACAgE,KAGR8J,EAAAA,EAAAA,WAAU,KACN,IACI8D,EAAAA,EAAAA,IAAcvF,IACdwF,MAAMC,QAAkB,OAAVzF,QAAU,IAAVA,OAAU,EAAVA,EAAY0F,cAC1BvF,EAASK,MAAMxN,OAAS,GACxBmN,EAASM,UAAUzN,OAAS,EAC9B,CACE,MAAM,YACF0S,EAAW,aACXC,EAAY,UACZC,EAAS,YACTC,EAAW,cACXC,EAAa,eACbC,EAAc,iBACdC,GACAhG,EAUEiG,GAJejG,EAAW8F,eAAiB9F,EAAWkG,cACxClG,EAAWmG,UAAYnG,EAAWoG,UAClCpG,EAAWqG,aAAerG,EAAWsG,YAErCnG,EAASvE,UAAU1I,KAAKqT,IACxCnT,EAAAA,EAAAA,IAAcmT,EAAErK,YAAa8D,EAAWwG,cAElD/O,GACcxD,EAAAA,EAAAA,IAAQ6R,GAAezN,IAAI5D,GAAQ+I,OAAOgH,YACtChH,OAAOiH,QAAQtM,EAAAA,IAA0BE,IAAIoO,IAAmB,IAADC,EAAA,IAAhB/B,EAAK3N,GAAMyP,EACtD,MAAO,CAAC9B,EAAc,QAAX+B,EAAEjS,EAAKkQ,UAAI,IAAA+B,EAAAA,EAAI1P,QAI1ClD,EAAeoE,IAAI3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZ2B,GAAI,IACP0E,MAAOoD,EAAW2G,QAAU,GAC5BC,MAAO5G,EAAW6G,QAAU,GAC5BC,QAAS9G,EAAW+G,UAAWC,EAAAA,EAAAA,IAAUhH,EAAW+G,UAAY,GAChE7K,YAAa8D,EAAWwG,YAAc,GACtCrK,eAA0B,OAAX8J,QAAW,IAAXA,OAAW,EAAXA,EAAa9J,gBAAiB,GAC7CyJ,UAAW5F,EAAW4F,WAAa,GACnCC,YAAa7F,EAAW6F,aAAe,GACvCE,eAAgB/F,EAAW+F,gBAAkB,GAC7CC,iBAAkBhG,EAAWgG,kBAAoB,GACjDiB,cAAejH,EAAWiH,eAAiB,EAC3C3K,aAAc0D,EAAWG,UAAY,EACrC+G,OAAQlH,EAAWkH,QAAU,GAC7BC,YAAanH,EAAWmH,aAAe,EACvC5S,oBAAqByL,EAAWzL,qBAAuB,KAG3D4M,EACIuE,EAAYrN,IAAI5D,IAAI8B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb6Q,EAAAA,IAAuB,IAC1BvS,QAASJ,EAAKI,SAAW,GACzBwS,UAAW5S,EAAK4O,cAAgB,GAChCiE,SAAU7S,EAAK6S,UAAY,GAC3BxC,SAAUrQ,EAAKqQ,UAAY,EAC3ByC,QAAS9S,EAAKqQ,UAAY,EAC1BC,UAAWtQ,EAAKsQ,WAAa,EAC7BrQ,OAAQD,EAAKC,QAAU,EACvB8S,UAAW/S,EAAKgT,WAAa,GAC7BC,SAAUjT,EAAKiT,UAAY,EAC3BnN,KAAM9F,EAAK8F,MAAQ,EACnBoN,IAAIlT,EAAKmT,SAAW,EACpBpE,MAAM/O,EAAKoT,WAAa,GACxBpN,KAAMhG,EAAKgG,MAAQ,EACnBC,KAAMjG,EAAKiG,MAAQ,EACnBI,SAAUrG,EAAKqG,UAAY,EAC3BE,SAAUvG,EAAKuG,UAAY,EAC3BE,SAAUzG,EAAKyG,UAAY,EAC3B4M,eAAgBrT,EAAKqT,gBAAkB,EACvCC,UAAWtT,EAAKsT,WAAa,MAIrC,IAAIC,EAAY,GAEhB,MAAMC,EAAyBC,IAC3B,MAAMC,EAAWhI,EAASM,UAAUvN,KAAKkV,IACrChE,EAAAA,EAAAA,IAAcgE,EAAIxE,cAAesE,IAErC,OAAe,OAARC,QAAQ,IAARA,OAAQ,EAARA,EAAUE,mBAAoB,IAGzC,GAAIzC,KAAcxS,EAAAA,EAAAA,IAAcwS,EAAW,GAAI,CAC3C,MAAM0C,EAAcnI,EAASK,MAAMtN,KAAKqV,IACpCnV,EAAAA,EAAAA,IAAcmV,EAAEC,eAAgB5C,IAE9B6C,EAAmBR,EAAsB,UAE3CK,GACAN,EAAUU,KAAK,CACXC,gBAAiBL,EAAYE,eAC7BI,QAASN,EAAY5E,iBACrBmF,oBAAqBJ,EACrBK,iBAAkB,UAG9B,CAEA,GAAI/C,KAAmB3S,EAAAA,EAAAA,IAAc2S,EAAgB,GAAI,CACrD,MAAMgD,EAAmB5I,EAASK,MAAMtN,KAAKqV,IACzCnV,EAAAA,EAAAA,IAAcmV,EAAEC,eAAgBzC,IAE9BiD,EAAwBf,EAAsB,aAEhDc,GACAf,EAAUU,KAAK,CACXC,gBAAiBI,EAAiBP,eAClCI,QAASG,EAAiBrF,iBAC1BmF,oBAAqBG,EACrBF,iBAAkB,eAG9B,EAEA7U,EAAAA,EAAAA,IAAQ0R,GAAcrQ,QAAQ,CAACb,EAAMiF,KACjC,MAAMuP,EAAW9I,EAASK,MAAMtN,KAAKqV,IACjCnV,EAAAA,EAAAA,IAAcmV,EAAEC,eAAgB/T,EAAKyU,WAGzC,IAAIC,EAAa1U,EAAK2U,YAClBlB,EAAezT,EAAK4U,eAEnBF,GAAcjB,IACfiB,EAAalB,EAAsBC,IAGnCe,GACAjB,EAAUU,KAAK,CACXC,gBAAiBM,EAAST,eAC1BI,QAASK,EAASvF,iBAClBmF,oBAAqBM,GAAc,GACnCL,iBAAkBZ,GAAgB,OAM9C7G,EAAc2G,EAIlB,GACD,CAAChI,EAAYG,EAASK,MAAOL,EAASM,UAAWN,EAASvE,aACvD6F,EAAAA,EAAAA,WAAU,KACLhK,EAAmBnB,GACD,IAAIA,GAEL+B,IAAI5D,IACb,MACIiG,EAAO/G,GAAU6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMiG,MAAQ,EACxCH,EAAQ5G,EAAiC,GAAvB6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAM8F,MACjCE,EAAQ9G,EAAiC,GAAvB6G,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMgG,MACjCnG,GAAgBkG,EAAAA,EAAAA,IAAa,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMH,eAC/BsG,EAAgBjH,EAAU+G,GAAOrG,EAAAA,EAAAA,IAASkG,EAAME,GAE9CI,GAAY5F,EAAAA,EAAAA,GAAoBX,EAAesG,EAAejD,GAEpE,OAAApB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO9B,GAAI,IACP8F,OAAME,OAAMC,OACZpG,gBACAwG,SAAUP,EAAO,EAAIM,EAAUE,YAAc,EAC7CC,SAAUP,EAAO,EAAII,EAAUI,YAAc,EAC7CC,SAAUR,EAAO,EAAIG,EAAUM,YAAc,QAI1D,CACCgF,EAASS,QACTjN,EACAgE,IAEX,MAAM2R,EAAmBA,KACjB1J,GAAWA,IAEf,MAAM2J,EAAsBnI,EAAW/I,IAAImI,IAAK,CAC5CmI,gBAAiBnI,EAAMmI,gBACvBE,oBAAqBrI,EAAMqI,uBAE9B5I,QAAQC,IAAI,cAAcrM,IAE3B2O,EAAAA,EAAAA,GAAU,CACNC,QAAQ,+BAER+G,OAAO,OACPC,UAAQlT,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACD1C,GAAW,IACdgT,OAAOhT,EAAY+I,MACnB8M,cAAenW,EACfgW,oBAAqBA,EACrBzD,cAAetS,EACfmW,gBAAgB,WAErBC,KAAK9G,IACAA,EAAKD,SAhST/O,EAAeoN,EAAAA,IACfC,EAAkB,IAClB1J,EAAmB,IACnB4J,EAAc,IA+RVwI,EAAAA,GAAMhH,QAAQC,EAAKgH,SACnB/J,GAAQ,IAER8J,EAAAA,GAAME,KAAKjH,EAAKgH,WAErBE,MAAM5S,GAAK6I,QAAQqE,MAAMlN,IAAI6S,QAAQ,KAChCpK,GAAYA,OAIpB,OAAKC,GAGDtJ,EAAAA,EAAAA,KAAC0T,EAAAA,EAAM,CAACpK,KAAMA,EAAMC,QAASA,IAAMA,GAAQ,GAAQoK,SAAS,KAAKC,WAAS,EAAA1T,UACtEE,EAAAA,EAAAA,MAAA,OAAK4B,MAAO,CAAE6R,UAAW,OAAQC,SAAU,QAAS5T,SAAA,EAEhDF,EAAAA,EAAAA,KAAC+T,EAAAA,EAAsB,CACnBC,cAAejX,EACfkX,iBAAkBtJ,EAClBrB,KAAMgB,EAAOE,iBACbjB,QAASA,KACLgB,EAAUzK,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE0K,kBAAkB,KAC9CO,EAAyB,OAE7B3N,SAAUuM,EAASvM,SACnB8W,OAAQvK,EAASO,MACjBH,IAAKJ,EAASI,IACdoK,QAASxK,EAASQ,OAClBzD,cAAerJ,EAAYqJ,cAC3BvJ,QAASA,EACTqM,WAAYsB,EACZsJ,cAAYrU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAO6Q,EAAAA,IAAuB,IAAEP,OAAQhT,EAAY+S,QAChE/F,cAAeV,EAASU,iBAG5BjK,EAAAA,EAAAA,MAACgB,EAAAA,EAAI,CAAAlB,SAAA,EACDE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,8DAA6DD,SAAA,EACxEF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,4BAA2BD,SAAC,mBAC5CE,EAAAA,EAAAA,MAAA,QAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACrD,QAASA,IAAM+H,GAAQ,GAAOrJ,UACtCF,EAAAA,EAAAA,KAACqU,EAAAA,EAAK,OAEVrU,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAACG,QAASA,IAAMsR,IAAoBxR,QAAQ,YAAWpB,SAAC,kBAGvEE,EAAAA,EAAAA,MAACkU,EAAAA,EAAW,CAAApU,SAAA,EACRE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,UAASD,SAAA,EAEpBF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kCAAiCD,UAC5CF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,aAAa6B,MAAO,CAAEuS,UAAW,OAAQC,OAAQ,QAAStU,UACrEF,EAAAA,EAAAA,KAACyU,EAAc,CACXC,WAAY9J,EACZC,cA/UJ8J,IAC5B9J,EAAc8J,IA+UkBC,WAAYjL,EAASK,MACrB6K,aAAclL,EAASM,iBAMnCjK,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wCAAuCD,UAClDF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAAmB6B,MAAO,CAAEuS,UAAW,OAAQC,OAAQ,QAAStU,UAC3EF,EAAAA,EAAAA,KAAC8U,EAAAA,EAA6B,CAC1BzX,YAAaA,EACbC,eAAgBA,EAChB8H,UAAWuE,EAASvE,UACpBE,SAAUqE,EAASG,OACnBzE,YAAasE,EAAStE,YACtBG,oBAAqBmE,EAASnE,oBAC9BD,iBAAkBA,KACdoF,EAAkB,IAClB1J,EAAmB,eAQvCjB,EAAAA,EAAAA,KAAC+U,EAAAA,GAAe,CACZC,MAAM,QACNC,iBAAkB,GAClBC,eAAgB,GAChBC,oBAAkB,EAClBC,mBAAiB,EACjBC,YACIjV,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACHG,QAASA,KACLuJ,EAAyB,MACzBR,EAAUzK,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE0K,kBAAkB,MAElD8K,GAAI,CAAEC,GAAI,GACVjU,QAAQ,WACRC,KAAK,SACLiU,WAAWxV,EAAAA,EAAAA,KAACyV,EAAAA,EAAG,IACf/R,WACKC,EAAAA,EAAAA,IAActG,EAAYqI,cACvB3I,EAAgBP,OAAS,IACtBmH,EAAAA,EAAAA,IAActG,EAAY+S,OACpClQ,SACJ,iBAEDF,EAAAA,EAAAA,KAAC0V,EAAAA,EAAyB,CACtBtM,UAAWA,EACXC,WAAYA,EACZC,KAAMgB,EAAOG,oBACblB,QAASA,IAAMgB,EAAUzK,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE2K,qBAAqB,KAChEkL,SAAqB,OAAXtY,QAAW,IAAXA,OAAW,EAAXA,EAAaqI,YACvBkQ,cAAe7Y,EACf8Y,iBAAkBlL,EAClBC,WAAYA,EACZC,cAAeA,EACfzN,SAAUuM,EAASvM,SACnBsJ,cAAerJ,EAAYqJ,cAC3BvJ,QAASA,EACTE,YAAaA,EACbC,eAAgBA,EAChB6W,QAASxK,EAASQ,OAClBE,cAAeV,EAASU,mBAoBpCyL,UAAW,IACJ/Y,KACAiS,MAAM+G,KAAK,CACVvZ,OAAQwO,EAAgB,EAAIA,EAAgB,IAC7CnJ,IAAIb,GAAK4P,EAAAA,KAEhBoF,QAAS,EACLC,EAAAA,EAAAA,IAAU,YAAa,WACvBA,EAAAA,EAAAA,IAAU,WAAY,WACtBA,EAAAA,EAAAA,IAAU,WAAY,WACtBA,EAAAA,EAAAA,IAAU,UAAW,WACrBA,EAAAA,EAAAA,IAAU,YAAa,UACvB,CACIC,UAAW,EACXC,aAAc,MACdC,cAAc,EACdC,KAAMC,IAAc,IAAb,IAAEpU,GAAKoU,EACV,MAAM,KAAEvS,EAAO,EAAC,KAAEE,EAAO,EAAC,KAAEC,EAAO,EAAC,SAAEI,EAAW,EAAC,SAAEE,EAAW,EAAC,SAAEE,EAAW,GAAMxC,EAC7EkC,EAAgBjH,EAAU+G,GAAOrG,EAAAA,EAAAA,IAASkG,EAAME,GAChDI,EAAYlH,EAAUuH,GAAW7G,EAAAA,EAAAA,IAASyG,EAAUE,GAE1D,OAAQb,EAAAA,EAAAA,IAAiB,OAAHzB,QAAG,IAAHA,OAAG,EAAHA,EAAK7D,SAAa,GAAA6N,OAAM7H,EAAS,QAAA6H,OAAO9H,EAAa,OAArC,KAG9C,CACI8R,UAAW,EACXC,aAAc,SACdC,cAAc,EACdC,KAAME,IAAA,IAAAC,EAAAC,EAAA,IAAC,IAAEvU,GAAKqU,EAAA,OAEA,QAFAC,EAEb,QAFaC,EAAK9M,EAASQ,OAAOzN,KAC/ByN,IAAUvN,EAAAA,EAAAA,IAAcuN,EAAO8G,UAAc,OAAH/O,QAAG,IAAHA,OAAG,EAAHA,EAAK8O,mBAClD,IAAAyF,OAAA,EAFkBA,EAEhBnJ,mBAAW,IAAAkJ,EAAAA,EAAI,MAEtBP,EAAAA,EAAAA,IAAU,SAAU,UACpB,CACIG,cAAc,EACdC,KAAMK,IAAc,IAAb,IAAExU,GAAKwU,EACV,OACItW,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CACPrD,QAASA,KACLuJ,EAAyB7I,GACzBqI,EAAUzK,IAAGC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAG,IAAE0K,kBAAkB,MAElDxF,KAAK,QACLzD,KAAK,SACLmC,WAAWC,EAAAA,EAAAA,IAAiB,OAAHzB,QAAG,IAAHA,OAAG,EAAHA,EAAK7D,SAAS6B,UAEvCF,EAAAA,EAAAA,KAAC2W,EAAAA,EAAI,OAET3W,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CACPG,KAAK,QACLzD,KAAK,SACLC,QAASA,IAAMmJ,EACX7K,GAAOA,EAAIiD,OAAOpG,KAAQC,EAAAA,EAAAA,IAAcD,EAAI0B,QAAS6D,EAAI7D,WAE7DnC,MAAM,QACNwH,WAAWC,EAAAA,EAAAA,IAAiB,OAAHzB,QAAG,IAAHA,OAAG,EAAHA,EAAK7D,SAAS6B,UAEvCF,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,UAKvBkR,aAAc,SACdD,UAAW,OAKvBlW,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAC4W,EAAAA,EAAsB,CACnB5Z,gBAAiBA,EACjBiE,mBAAoBA,EACpBC,cAAeyI,EAASS,QACxBjN,QAASA,EACTgE,QAASA,KAGbnB,EAAAA,EAAAA,KAAA,UAEDA,EAAAA,EAAAA,KAAC6W,EAAAA,EAAsB,CACtB9Z,gBAAiBA,EACjBC,gBAAiBA,EACjBC,iBAAkBA,EAClBC,YAAaA,EACbC,QAASA,EACTC,SAAUuM,EAASvM,SACnBC,YAAaA,EACbC,eAAgBA,eA1NlB,MAwOhBmX,EAAiBqC,IAA6E,IAA5E,WAAEpC,EAAa,GAAE,cAAE7J,EAAa,WAAE+J,EAAa,GAAE,aAAEC,EAAe,IAAIiC,EAkB1F,OACI1W,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,8DAA6DD,SAAA,EACxEF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,kBAAiBD,SAAC,oBAChCF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACHC,QAAQ,WACRpF,MAAM,UACNqF,KAAK,SACLC,QAASA,IAAMqJ,EAAc/K,GAAO,IAAIA,EAAK,CACzCqS,gBAAiB,GACjBC,QAAS,GACTC,oBAAqB,GACrBC,iBAAkB,MAClBpS,SACP,YAGLE,EAAAA,EAAAA,MAAA,SAAOD,UAAU,uBAAsBD,SAAA,EACnCF,EAAAA,EAAAA,KAAA,SAAAE,UACIE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAOD,SAAC,SACtBF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAOD,SAAC,gBACtBF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAOD,SAAC,cACtBF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAOD,SAAC,YAG9BF,EAAAA,EAAAA,KAAA,SAAAE,UACKzC,EAAAA,EAAAA,IAAQiX,GAAY7S,IAAI,CAACK,EAAKC,KAE3B,MAAM4U,EAAmB7U,EAAImQ,qBA5ClBX,KAC3B,MAAMC,EAAWkD,EAAanY,KAAKkV,IAC/BhE,EAAAA,EAAAA,IAAcgE,EAAIxE,cAAesE,IAErC,OAAe,OAARC,QAAQ,IAARA,OAAQ,EAARA,EAAUE,mBAAoB,IAwC+BJ,CAAsBvP,EAAIoQ,kBAE9E,OACIlS,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,yBAAwBD,SAAEiC,EAAQ,KAChDnC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,kBAAiBD,UAC3BF,EAAAA,EAAAA,KAAC0C,EAAAA,GAAM,CACHlC,MAAO,CACHA,MAAO0B,EAAIiQ,gBACXlW,MAAOiG,EAAIkQ,SAAW,gBAE1BzR,SAAUC,IACgBgU,EAAWlY,KAAKsa,IAClCpa,EAAAA,EAAAA,IAAcoa,EAAEhF,eAAgBpR,EAAEJ,QADtC,MAGMyW,EAAWvC,EAAW7S,IAAI,CAACmI,EAAOjI,IACpCA,IAAMI,GAAKpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJiK,GAAK,IACRmI,gBAAiBxL,OAAO/F,EAAEJ,OAC1B4R,QAASxR,EAAE3E,QACX+N,GAERa,EAAcoM,IAElBnU,QAAS8R,EACJ7R,OAAOiH,IACH0K,EAAW1R,KAAK,CAACkU,EAAInV,IAClBA,IAAMI,IAASvF,EAAAA,EAAAA,IAAcsa,EAAG/E,gBAAiBnI,EAAMgI,kBAG9DnQ,IAAIqV,IAAE,CACH1W,MAAO0W,EAAGlF,eACV/V,MAAOib,EAAGhK,oBAGlB/J,OAAQC,EAAAA,GACRI,cAAc,EACdC,YAAY,oBAGpBzD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,iBAAiB6B,MAAO,CAAE2R,SAAU,QAASlR,SAAU,SAAUvC,UAC3EE,EAAAA,EAAAA,MAAA,UACII,MAAOuW,EACPpW,SAAUC,IACN,MAAMuW,EAAmBtC,EAAanY,KAAKsa,IACvCpa,EAAAA,EAAAA,IAAcoa,EAAEnF,iBAAkBjR,EAAEC,OAAOL,QAEzCyW,EAAWvC,EAAW7S,IAAI,CAACmI,EAAOjI,IACpCA,IAAMI,GAAKpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJiK,GAAK,IACRqI,oBAAqBzR,EAAEC,OAAOL,MAC9B8R,kBAAkC,OAAhB6E,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB/J,gBAAiB,KACrDpD,GAERa,EAAcoM,IAElB9W,UAAU,wBAAuBD,SAAA,EAEjCF,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,GAAEN,SAAC,WAChB2U,EAAahT,IAAI,CAACqV,EAAIE,KACnBpX,EAAAA,EAAAA,KAAA,UAAQQ,MAAO0W,EAAGrF,iBAAiB3R,SAC9BgX,EAAG9J,eADiCgK,UAMrDpX,EAAAA,EAAAA,KAAA,MAAIG,UAAU,iBAAgBD,UAC1BF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CACPrD,QAASA,KACL,MAAMyV,EAAWvC,EAAW3R,OAAO,CAAC+B,EAAG/C,IAAMA,IAAMI,GACnD0I,EAAcoM,IAElBjS,KAAK,QAAO9E,UAEZF,EAAAA,EAAAA,KAACiF,EAAAA,EAAM,CAAC/I,MAAM,gBAvEjBiG,c,eC9iDrC,MA8fA,EA9fkBrF,IAAgC,IAA/B,UAAEsM,EAAS,WAAEC,GAAYvM,EACxC,MAAOua,EAASC,IAAczN,EAAAA,EAAAA,UAAS,CACnC0N,UAAU,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAC9CC,QAAQ,IAAIH,MAAOC,cAAcC,MAAM,KAAK,GAC5CE,SAAS,EACTC,OAAQ,MAELC,EAAaC,IAAkBlO,EAAAA,EAAAA,UAAS,KACxCyC,EAAM0L,IAAWnO,EAAAA,EAAAA,UAAS,KAC1BoO,EAAMC,IAAWrO,EAAAA,EAAAA,WAAS,IAC1BsO,EAAWC,IAAgBvO,EAAAA,EAAAA,WAAS,IACpCwO,EAAWC,IAAgBzO,EAAAA,EAAAA,WAAS,IACpC0O,EAAeC,IAAoB3O,EAAAA,EAAAA,UAAS,MAG7C4O,IAFQC,EAAAA,EAAAA,MAEWxW,IACrBsW,EAAiBtW,GACjBoW,GAAa,MAUrBrN,EAAAA,EAAAA,WAAU,KACgBC,WACdkN,GAAa,GACThP,GAAWA,IAEf,IACI,MAAMuP,QAAiB3M,EAAAA,EAAAA,GAAU,CAC7BC,QAAQ,uCAADC,OAAyCmL,EAAQE,SAAQ,YAAArL,OAAWmL,EAAQM,UAGnFgB,EAAStM,SACT2L,EAAQW,EAASrM,KAGzB,CAAE,MAAO1L,GACL6I,QAAQqE,MAAMlN,EAClB,CAAC,QACGwX,GAAa,GACT/O,GAAYA,GACpB,GAGJ0E,IACD,CAACsJ,EAAQE,SAAUF,EAAQM,OAAQN,EAAQO,UAyB9C,MAAMgB,EAAkBC,GACpBnM,OAAOmM,GACFC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,cAAe,IACvBC,OAEHC,GAAezb,EAAAA,EAAAA,SAAQ,KACzB,MAAMqa,EAASe,EAAevB,EAAQQ,QAAU,IAEhD,OAAOvL,EAAKvJ,OAAQpG,IAEhB,IAAIuc,EAAS,GAEb,IAAK,IAAI/K,KAAOxR,EACA,gBAARwR,GACA+K,EAAOhH,KAAKvV,EAAIwR,IAIpBa,MAAMC,QAAQtS,EAAIuS,cAClBvS,EAAIuS,YAAYpQ,QAAQb,IACpBib,EAAOhH,QAAQlL,OAAOkS,OAAOjb,MAMrC,OADiB2a,EAAeM,EAAOC,KAAK,MAC5BC,SAASvB,MAE9B,CAACR,EAAQQ,OAAQvL,IAMd+M,EAAsBnL,IAAc,IAADoL,EAAAC,EAAA,IAAZ,IAAErX,GAAKgM,EAChC,OACIlO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACQ,OAAHgC,QAAG,IAAHA,GAAgB,QAAboX,EAAHpX,EAAKgN,mBAAW,IAAAoK,OAAb,EAAHA,EAAkB9c,QAAS,IACxB4D,EAAAA,EAAAA,MAAA,SAAOD,UAAU,QAAOD,SAAA,EACpBF,EAAAA,EAAAA,KAAA,SAAAE,UACIE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,UACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,aACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,kBACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,cACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,eACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,aACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,eACpCF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,sBAAqBD,SAAC,iBAG5CF,EAAAA,EAAAA,KAAA,SAAAE,SACQ,OAAHgC,QAAG,IAAHA,GAAgB,QAAbqX,EAAHrX,EAAKgN,mBAAW,IAAAqK,OAAb,EAAHA,EAAkB1X,IAAI,CAACyK,EAAMnK,KAC1B/B,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMkN,QAClCxZ,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMjO,WAClC2B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMO,gBAClC7M,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMgC,YAClCtO,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,aAElCvO,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,WAClCpR,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAM+E,aAElCrR,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAYD,SAAM,OAAJoM,QAAI,IAAJA,OAAI,EAAJA,EAAMpO,WAV7BiE,YAyBnCsX,EAAiBnN,IACnBlD,IAGA,MAKMsQ,EAAgB1K,MAAMC,QAAQ3C,EAAK4C,aACnC5C,EAAK4C,YACFnM,OAAO4W,IAAKC,EAAAA,EAAAA,GAAgB,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGrL,SAAU,IACxCzM,IAAI8X,IACD,MAAME,EATaC,KAC3B,MAAMC,EAAY,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMC,MAAM,eAC1B,OAAOA,EAAQxZ,SAASwZ,EAAM,IAAM,GAObC,CAAuB,OAADL,QAAC,IAADA,OAAC,EAADA,EAAG9M,cACxC,OAAA9M,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACO4Z,GAAC,IACJtJ,OAAY,OAAJ/D,QAAI,IAAJA,OAAI,EAAJA,EAAM+D,OACd/B,SAAUuL,GAAU,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGrL,UACtB2L,UAAY,OAADN,QAAC,IAADA,OAAC,EAADA,EAAGrL,aAGxB,GA0BA4L,EAxBsBC,KACxB,MAAMC,EAAS,GAoBf,OAlBID,EAAU/K,WAAqC,IAAxB+K,EAAU/K,WACjCgL,EAAOlI,KAAK,CACR5P,GAAI,GACJ+X,MAAO,GACPC,OAAQH,EAAU/K,UAClBmL,YAAaJ,EAAUK,aAAe,IAI1CL,EAAU5K,gBAA+C,IAA7B4K,EAAU5K,gBACtC6K,EAAOlI,KAAK,CACR5P,GAAI,GACJ8D,MAAO,GACPkU,OAAQH,EAAU5K,eAClBgL,YAAaJ,EAAU1J,eAAiB,IAIzC2J,EAAOrX,OAAOiH,GAA+B,IAAtBA,EAAMuQ,cAGpBE,CAAmBnO,GAEjCoO,GAAO3a,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNuM,GAAI,IACP4G,cAAewG,EACfhU,YAAiB,OAAJ4G,QAAI,IAAJA,OAAI,EAAJA,EAAM0D,WACnBb,aAAc+K,KAKlBlO,EAAAA,EAAAA,GAAU,CACNC,QAAQ,8CACR+G,OAA8B,KAAlB,OAAJ1G,QAAI,IAAJA,OAAI,EAAJA,EAAMqE,aAAoB,MAAQ,OAC1CsC,SAAUyH,IAEbtH,KAAMuF,IACCA,EAAStM,SACTgH,EAAAA,GAAMhH,QAAgB,OAARsM,QAAQ,IAARA,OAAQ,EAARA,EAAUrF,SACxB4E,GAAQ,IAER7E,EAAAA,GAAMvF,MAAc,OAAR6K,QAAQ,IAARA,OAAQ,EAARA,EAAUrF,WAG7BE,MAAM,KACHH,EAAAA,GAAMvF,MAAM,2BAEf2F,QAAQ,IAAMpK,MAmBf,OAhBA4B,EAAAA,EAAAA,WAAU,KACFgN,IACAjM,EAAAA,EAAAA,GAAU,CACNC,QAAQ,uCAADC,OAAyCmL,EAAQE,SAAQ,YAAArL,OAAWmL,EAAQM,UAElFvE,KAAM9G,IACCA,EAAKD,SACL2L,EAAQ1L,EAAKA,QAIpBkH,MAAO5S,GAAM6I,QAAQqE,MAAMlN,IAC3B6S,QAAQ,IAAMyE,GAAQ,KAEhC,CAACD,EAAMZ,EAAQE,SAAUF,EAAQM,UAGhCvX,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,MAACgB,EAAAA,EAAI,CAAAlB,SAAA,EAEDF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAiBD,UAC5BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,sCAAqCD,SAAA,EAChDF,EAAAA,EAAAA,KAAA,MAAIgC,MAAO,CAAE2Y,cAAe,UAAWza,SAAC,UACxCF,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAA,SACIuB,KAAK,OACLf,MAAO6W,EAAQE,SACf5W,SAAWC,GACP0W,GAAUvX,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIsX,GAAO,IAAEE,SAAU3W,EAAEC,OAAOL,SAEhDL,UAAU,gBAGlBH,EAAAA,EAAAA,KAAA,MAAIgC,MAAO,CAAE2Y,cAAe,UAAWza,SAAC,QACxCF,EAAAA,EAAAA,KAAA,MAAAE,UACIF,EAAAA,EAAAA,KAAA,SACIuB,KAAK,OACLf,MAAO6W,EAAQM,OACfhX,SAAWC,GACP0W,GAAUvX,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIsX,GAAO,IAAEM,OAAQ/W,EAAEC,OAAOL,SAE9CL,UAAU,gBAIlBH,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CACPG,KAAK,QACLxD,QAASA,KACL8V,EAAY5V,IACY3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb2B,GAAI,IACPkZ,eAAgBlZ,EAAKkZ,yBAazCvD,EAAQQ,QACJ7X,EAAAA,EAAAA,KAAC+U,EAAAA,GAAe,CACZC,MAAO,sBACPE,eAAgB,GAChBD,iBAAkB,GAClBa,UAAWmD,EACXjD,QAAS,EACLC,EAAAA,EAAAA,IAAU,SAAU,SAAU,UAC9B,CACI4E,WAAY,WACZ1E,aAAc,WACdD,UAAW,EACXE,cAAc,EACdC,KAAMpG,IAAA,IAAC,IAAE/N,GAAK+N,EAAA,OACVjQ,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,SAC1C,OAAHgC,QAAG,IAAHA,OAAG,EAAHA,EAAKqO,SAASmH,MAAM,KAAK,QAItCzB,EAAAA,EAAAA,IAAU,gBAAiB,SAAU,kBAClCA,EAAAA,EAAAA,IAAU,cAAe,SAAU,gBACnCA,EAAAA,EAAAA,IAAU,mBAAoB,SAAU,qBAE3CA,EAAAA,EAAAA,IAAU,sBAAuB,SAAU,uBAC3C,CACIE,aAAc,SACdD,UAAW,EACX4E,MAAO,SACP1E,cAAc,EACdC,KAAMC,IAAc,IAADC,EAAAwE,EAAA,IAAZ,IAAE7Y,GAAKoU,EACV,MAAM0E,EAAUjf,EAAAA,EAAgBW,KAC3Bue,GAAWA,EAAOjf,KAAO2K,OAAU,OAAHzE,QAAG,IAAHA,OAAG,EAAHA,EAAKyO,cAE1C,OACI3Q,EAAAA,EAAAA,KAAA,QACIG,UACyD,QADhDoW,EACL,sCAA8C,OAAPyE,QAAO,IAAPA,OAAO,EAAPA,EAAS9e,cAAK,IAAAqa,EAAAA,EACrD,0BACHrW,SAEc,QAFd6a,EAEO,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAAS/e,aAAK,IAAA8e,EAAAA,EAAI,gBAKnC,CACAF,WAAY,UACZ1E,aAAc,UACdD,UAAW,EACXE,cAAc,EACdC,KAAMK,IAAc,IAAb,IAAExU,GAAKwU,EACV,OACItW,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,UAC9CF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACG,KAAK,QAAQxD,QAASA,IAAMiY,EAAcvX,GAAKhC,SACjC,KAAlB,OAAHgC,QAAG,IAAHA,OAAG,EAAHA,EAAKyO,cAAoB3Q,EAAAA,EAAAA,KAACkb,EAAM,KAAMlb,EAAAA,EAAAA,KAAC2W,EAAAA,EAAI,SAGpD3W,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,UAC9CF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACG,KAAK,QAAQxD,QAASA,IAAMiX,EAAgBvW,GAAKhC,UACzDF,EAAAA,EAAAA,KAACmb,EAAAA,EAAgB,cASzCC,cAAc,EACdC,eAAgB,IAChBC,eAAgBjC,EAChBhE,YACIjV,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EAEIF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACHiU,GAAI,CAAEC,GAAI,GACVjU,QAAQ,WACRE,QAASA,IACL8V,EAAY5V,IAAI3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT2B,GAAI,IACPmW,OAAQC,KAEf5X,SACJ,YAGDF,EAAAA,EAAAA,KAAA,SACIuB,KAAK,SACLpB,UAAU,sBACVK,MAAOsX,EACPnX,SAAWC,GAAMmX,EAAenX,EAAEC,OAAOL,OACzCiD,YAAY,mBAM5BzD,EAAAA,EAAAA,KAAC+U,EAAAA,GAAe,CACZC,MAAO,sBACPE,eAAgB,GAChBD,iBAAkB,GAClBa,UAAWxJ,EACX0J,QAAS,EACLC,EAAAA,EAAAA,IAAU,SAAU,SAAU,UAC9B,CACI4E,WAAY,WACZ1E,aAAc,WACdD,UAAW,EACXE,cAAc,EACdC,KAAMS,IAAA,IAAC,IAAE5U,GAAK4U,EAAA,OACV9W,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,SAC1C,OAAHgC,QAAG,IAAHA,OAAG,EAAHA,EAAKqO,SAASmH,MAAM,KAAK,QAItCzB,EAAAA,EAAAA,IAAU,gBAAiB,SAAU,kBACrCA,EAAAA,EAAAA,IAAU,cAAe,SAAU,gBACnCA,EAAAA,EAAAA,IAAU,mBAAoB,SAAU,qBACxCA,EAAAA,EAAAA,IAAU,sBAAuB,SAAU,uBAC3C,CACIE,aAAc,SACdD,UAAW,EACX4E,MAAO,SACP1E,cAAc,EACdC,KAAMkF,IAAc,IAADC,EAAAC,EAAA,IAAZ,IAAEvZ,GAAKqZ,EACV,MAAMP,EAAUjf,EAAAA,EAAgBW,KAC3Bue,GAAWA,EAAOjf,KAAO2K,OAAU,OAAHzE,QAAG,IAAHA,OAAG,EAAHA,EAAKyO,cAE1C,OACI3Q,EAAAA,EAAAA,KAAA,QACIG,UACyD,QADhDqb,EACL,sCAA8C,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAAS9e,cAAK,IAAAsf,EAAAA,EACrD,0BACHtb,SAEc,QAFdub,EAEO,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAAS/e,aAAK,IAAAwf,EAAAA,EAAI,gBAKxC,CACKZ,WAAY,UACZ1E,aAAc,UACdD,UAAW,EACXE,cAAc,EACdC,KAAMqF,IAAc,IAAb,IAAExZ,GAAKwZ,EACV,OACItb,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,UAC9CF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACG,KAAK,QAAQxD,QAASA,IAAMiY,EAAcvX,GAAKhC,SACjC,KAAlB,OAAHgC,QAAG,IAAHA,OAAG,EAAHA,EAAKyO,cAAoB3Q,EAAAA,EAAAA,KAACkb,EAAM,KAAMlb,EAAAA,EAAAA,KAAC2W,EAAAA,EAAI,QAGhC,IAAhB,OAAHzU,QAAG,IAAHA,OAAG,EAAHA,EAAKyO,eAClD3Q,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAQ6B,MAAO,CAAES,SAAU,QAASvC,UACFF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACG,KAAK,QAAQxD,QAASA,IAAMiX,EAAgBvW,GAAKhC,UACzDF,EAAAA,EAAAA,KAACmb,EAAAA,EAAgB,cAazCC,cAAc,EACdC,eAAgB,IAChBC,eAAgBjC,EAEhBhE,YACIjV,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAC,SAAA,EAEIF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACHiU,GAAI,CAAEC,GAAI,GACVjU,QAAQ,WACRE,QAASA,IACL8V,EAAY5V,IAAI3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT2B,GAAI,IACPmW,OAAQC,KAEf5X,SACJ,YAGDF,EAAAA,EAAAA,KAAA,SACIuB,KAAK,SACLpB,UAAU,sBACVK,MAAOsX,EACPnX,SAAWC,GAAMmX,EAAenX,EAAEC,OAAOL,OACzCiD,YAAY,sBASrCzD,EAAAA,EAAAA,KAAC2b,EAAwB,CACxBrS,KAAM+O,EACN9O,QAjec8C,IACtBiM,GAAa,GACTjM,GAEA6L,GAAQ,IA8dJ1O,WAAY+O,EACZnP,UAAWA,EACXC,WAAYA,O","sources":["../node_modules/@mui/material/utils/createChainedFunction.js","Pages/Sales/convertedStatus.js","Pages/Sales/SalesInvoice/taxDetails.jsx","../node_modules/@mui/icons-material/esm/Close.js","Pages/Sales/SalesInvoice/manageExpences.jsx","Pages/Sales/SalesInvoice/manageGeneralInfo.jsx","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/icons-material/ArrowOutward.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/requirePropFactory/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/unsupportedProp/unsupportedProp.js","../node_modules/@mui/material/utils/index.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/material/utils/isMuiElement.js","../node_modules/@mui/utils/isMuiElement/isMuiElement.js","../node_modules/@mui/icons-material/esm/AddBox.js","Pages/Sales/SalesInvoice/directSaleInvoiceFromPos.jsx","Pages/Sales/PreSaleOrder/orderList.jsx"],"sourcesContent":["import createChainedFunction from '@mui/utils/createChainedFunction';\nexport default createChainedFunction;","export const convertedStatus = [\r\n    {\r\n        id: 0,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 1,\r\n        label: 'Verified',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Converted',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]\r\n\r\nexport const dbStatus = [\r\n    {\r\n        id: 1,\r\n        label: 'New',\r\n        color: ' bg-info text-white '\r\n    },\r\n    {\r\n        id: 2,\r\n        label: 'Progess',\r\n        color: ' bg-warning text-white '\r\n    },\r\n    {\r\n        id: 3,\r\n        label: 'Completed',\r\n        color: ' bg-success text-white '\r\n    },\r\n    {\r\n        id: 4,\r\n        label: 'Canceled',\r\n        color: ' bg-danger text-white '\r\n    },\r\n]","import { useMemo } from \"react\";\r\nimport { Addition, isEqualNumber, NumberFormat, numberToWords, onlynumAndNegative, RoundNumber, toArray } from \"../../../Components/functions\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\nconst SalesInvoiceTaxDetails = ({\r\n    invoiceProducts = [],\r\n    invoiceExpences = [],\r\n    isNotTaxableBill,\r\n    isInclusive,\r\n    IS_IGST,\r\n    products = [],\r\n    invoiceInfo = {},\r\n    setInvoiceInfo\r\n}) => {\r\n\r\n    const invExpencesTotal = useMemo(() => {\r\n        return toArray(invoiceExpences).reduce((acc, exp) => Addition(acc, exp?.Expence_Value), 0)\r\n    }, [invoiceExpences]);\r\n\r\n    const Total_Invoice_value = useMemo(() => {\r\n        const invValue = invoiceProducts.reduce((acc, item) => {\r\n            const Amount = RoundNumber(item?.Amount);\r\n\r\n            if (isNotTaxableBill) return Addition(acc, Amount);\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = IS_IGST ? product.Igst_P : product.Gst_P;\r\n\r\n            if (isInclusive) {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'remove').with_tax);\r\n            } else {\r\n                return Addition(acc, calculateGSTDetails(Amount, gstPercentage, 'add').with_tax);\r\n            }\r\n        }, 0);\r\n\r\n        return Addition(invValue, invExpencesTotal);\r\n    }, [invoiceProducts, isNotTaxableBill, products, IS_IGST, isInclusive, invExpencesTotal])\r\n\r\n    const taxSplitUp = useMemo(() => {\r\n        if (!invoiceProducts || invoiceProducts.length === 0) return {};\r\n\r\n        let totalTaxable = 0;\r\n        let totalTax = 0;\r\n\r\n        invoiceProducts.forEach(item => {\r\n            const Amount = RoundNumber(item?.Amount || 0);\r\n\r\n            if (isNotTaxableBill) {\r\n                totalTaxable = Addition(totalTaxable, Amount);\r\n                return;\r\n            }\r\n\r\n            const product = findProductDetails(products, item.Item_Id);\r\n            const gstPercentage = isEqualNumber(IS_IGST, 1) ? product.Igst_P : product.Gst_P;\r\n\r\n            const taxInfo = calculateGSTDetails(Amount, gstPercentage, isInclusive ? 'remove' : 'add');\r\n\r\n            totalTaxable = Addition(totalTaxable, parseFloat(taxInfo.without_tax));\r\n            totalTax = Addition(totalTax, parseFloat(taxInfo.tax_amount));\r\n        });\r\n\r\n        const totalWithTax = Addition(totalTaxable, totalTax);\r\n        const totalWithExpenses = Addition(totalWithTax, invExpencesTotal);\r\n        const roundedTotal = Math.round(totalWithExpenses);\r\n        const roundOff = RoundNumber(roundedTotal - totalWithExpenses);\r\n\r\n        const cgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const sgst = isEqualNumber(IS_IGST, 1) ? 0 : RoundNumber(totalTax / 2);\r\n        const igst = isEqualNumber(IS_IGST, 1) ? RoundNumber(totalTax) : 0;\r\n\r\n        return {\r\n            totalTaxable: RoundNumber(totalTaxable),\r\n            totalTax: RoundNumber(totalTax),\r\n            cgst,\r\n            sgst,\r\n            igst,\r\n            roundOff,\r\n            invoiceTotal: roundedTotal\r\n        };\r\n\r\n    }, [invoiceProducts, products, IS_IGST, isNotTaxableBill, isInclusive, invExpencesTotal]);\r\n\r\n    // Update invoiceInfo when roundOff changes\r\n    useMemo(() => {\r\n        if (taxSplitUp.roundOff !== undefined && taxSplitUp.roundOff !== invoiceInfo.Round_off) {\r\n            setInvoiceInfo(pre => ({ ...pre, Round_off: taxSplitUp.roundOff }));\r\n        }\r\n    }, [taxSplitUp.roundOff]);\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"border p-2\" rowSpan={IS_IGST ? 5 : 6}>\r\n                            Total in words: {numberToWords(parseInt(Total_Invoice_value))}\r\n                        </td>\r\n                        <td className=\"border p-2\">Total Taxable Amount</td>\r\n                        <td className=\"border p-2\">\r\n                            {taxSplitUp.totalTaxable}\r\n                        </td>\r\n                    </tr>\r\n                    {!IS_IGST ? (\r\n                        <>\r\n                            <tr>\r\n                                <td className=\"border p-2\">CGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.cgst}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"border p-2\">SGST</td>\r\n                                <td className=\"border p-2\">\r\n                                    {taxSplitUp.sgst}\r\n                                </td>\r\n                            </tr>\r\n                        </>\r\n                    ) : (\r\n                        <tr>\r\n                            <td className=\"border p-2\">IGST</td>\r\n                            <td className=\"border p-2\">\r\n                                {taxSplitUp.igst}\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total Expences</td>\r\n                        <td className=\"border p-2\">\r\n                            {RoundNumber(invExpencesTotal)}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Round Off</td>\r\n                        <td className=\"border p-0\">\r\n                            <input\r\n                                value={invoiceInfo.Round_off || taxSplitUp.roundOff || 0}\r\n                                className=\"cus-inpt p-2 m-0 border-0\"\r\n                                onInput={onlynumAndNegative}\r\n                                onChange={e => setInvoiceInfo(pre => ({ \r\n                                    ...pre, \r\n                                    Round_off: parseFloat(e.target.value) || 0 \r\n                                }))}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"border p-2\">Total</td>\r\n                        <td className=\"border p-2\">\r\n                            {NumberFormat(Math.round(Total_Invoice_value))}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SalesInvoiceTaxDetails;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { Button, Card, CardContent, Dialog, DialogActions, DialogContent, DialogTitle, IconButton } from \"@mui/material\";\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { Addition, checkIsNumber, Division, isEqualNumber, NumberFormat, onlynum, onlynumAndNegative, RoundNumber, toArray, toNumber } from \"../../../Components/functions\";\r\nimport { salesInvoiceExpencesInfo } from \"./variable\";\r\nimport { useState } from \"react\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport { calculateGSTDetails } from \"../../../Components/taxCalculator\";\r\n\r\nconst ExpencesOfSalesInvoice = ({\r\n    invoiceExpences = [],\r\n    setInvoiceExpences,\r\n    expenceMaster = [],\r\n    IS_IGST,\r\n    taxType,\r\n}) => {\r\n\r\n    const handleInputChange = (index, field, value) => {\r\n\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n\r\n                const updated = { ...item, [field]: value };\r\n\r\n                if (field === 'Expence_Value') {\r\n                    const\r\n                        Cgst = item.Cgst ? toNumber(item.Cgst) : 0,\r\n                        Sgst = item.Sgst ? toNumber(item.Sgst) : 0,\r\n                        Igst = item.Igst ? toNumber(item.Igst) : 0,\r\n                        expVal = toNumber(value),\r\n                        taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst_Amo = (Cgst > 0 && !IS_IGST)\r\n                        ? taxAmount.cgst_amount\r\n                        : 0;\r\n                    updated.Sgst_Amo = (Sgst > 0 && !IS_IGST)\r\n                        ? taxAmount.sgst_amount\r\n                        : 0;\r\n                    updated.Igst_Amo = (Igst > 0 && IS_IGST)\r\n                        ? taxAmount.igst_amount\r\n                        : 0;\r\n                }\r\n\r\n                if (field === 'Igst') {\r\n                    const \r\n                        Igst = IS_IGST ? toNumber(value) : 0, \r\n                        Cgst = !IS_IGST ? Division(toNumber(value), 2) : 0, \r\n                        Sgst = !IS_IGST ? Division(toNumber(value), 2) : 0;\r\n\r\n                    const expVal = toNumber(item.Expence_Value), taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                    const taxAmount = calculateGSTDetails(expVal, taxPercentage, taxType);\r\n\r\n                    updated.Cgst = Cgst;\r\n                    updated.Sgst = Sgst;\r\n                    updated.Cgst_Amo = Cgst > 0 ? taxAmount.cgst_amount : 0;\r\n                    updated.Sgst_Amo = Sgst > 0 ? taxAmount.sgst_amount : 0;\r\n                    updated.Igst_Amo = Igst > 0 ? taxAmount.igst_amount : 0;\r\n                }\r\n\r\n                return updated;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSelectChange = (index, selectedOption) => {\r\n        const selected = expenceMaster.find(exp => isEqualNumber(exp.Id, selectedOption.value)) || {};\r\n        setInvoiceExpences(prev =>\r\n            prev.map((item, i) => {\r\n                if (i !== index) return item;\r\n                return {\r\n                    ...item,\r\n                    Expense_Id: selected.Id,\r\n                    Expence_Value: 0\r\n                };\r\n            })\r\n        );\r\n    };\r\n\r\n    const addNewRow = () => {\r\n        setInvoiceExpences(prev => [...prev, { ...salesInvoiceExpencesInfo, Sno: prev.length }]);\r\n    };\r\n\r\n    const removeRow = index => {\r\n        setInvoiceExpences(prev => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n     return (\r\n        <>\r\n            <Card >\r\n                <div className=\"d-flex align-items-center justify-content-between flex-wrap px-3 py-2\">\r\n                    <h5 className=\"m-0\">Expenses</h5>\r\n                    <Button variant=\"outlined\" type=\"button\" onClick={addNewRow}>Add</Button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered m-0\">\r\n                        <thead className=\"table-light\">\r\n                            <tr>\r\n                                {[\r\n                                    'S.No', 'Expense', \r\n                                    'Expense Value', 'Action'].map(\r\n                                    (o, i) => <th className=\"fa-13 bg-light\" key={i}>{o}</th>\r\n                                )}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{ fontSize: '13px' }}>\r\n                            {invoiceExpences.map((row, index) => {\r\n                                // Get the current expense name for display\r\n                                const currentExpenseName = expenceMaster.find(\r\n                                    exp => isEqualNumber(exp.Id, row?.Expense_Id)\r\n                                )?.Expence_Name || '';\r\n                                \r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td className=\"p-0 vctr\" style={{ minWidth: '180px' }}>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: row?.Expense_Id,\r\n                                                    label: currentExpenseName,\r\n                                                }}\r\n                                                onChange={e => handleSelectChange(index, e)}\r\n                                                options={expenceMaster\r\n                                                    // Fix the filtering logic\r\n                                                    .filter(exp => {\r\n                                                        // Always include the currently selected expense\r\n                                                        if (isEqualNumber(exp.Id, row?.Expense_Id)) return true;\r\n                                                        \r\n                                                        // Exclude expenses that are already selected in other rows\r\n                                                        return !invoiceExpences.some(\r\n                                                            (inv, idx) => idx !== index && isEqualNumber(inv.Expense_Id, exp.Id)\r\n                                                        );\r\n                                                    })\r\n                                                    .map(exp => ({ value: exp.Id, label: exp.Expence_Name }))\r\n                                                }\r\n                                                styles={customSelectStyles}\r\n                                                menuPortalTarget={document.body}\r\n                                                isSearchable={true}\r\n                                                placeholder=\"Select Expense\"\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr\">\r\n                                            <input\r\n                                                onInput={onlynumAndNegative}\r\n                                                className=\"cus-inpt p-2 border-0\"\r\n                                                value={row.Expence_Value || ''}\r\n                                                disabled={!checkIsNumber(row.Expense_Id)}\r\n                                                onChange={e => {\r\n                                                    handleInputChange(index, 'Expence_Value', e.target.value)\r\n                                                }}\r\n                                            />\r\n                                        </td>\r\n                                        <td className=\"p-0 vctr  text-center \">\r\n                                            <IconButton onClick={() => removeRow(index)} size=\"small\">\r\n                                                <Delete color=\"error\" fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                            {invoiceExpences.length === 0 && (\r\n                                <tr><td className=\"text-center\" colSpan={6}>No rows</td></tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpencesOfSalesInvoice;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\"\r\nimport { checkIsNumber, isEqualNumber, toArray } from \"../../../Components/functions\";\r\nimport RequiredStar from '../../../Components/requiredStar';\r\n\r\nconst ManageSalesInvoiceGeneralInfo = ({\r\n    invoiceInfo = {},\r\n    setInvoiceInfo,\r\n    retailers = [],\r\n    voucherType = [],\r\n    branches = [],\r\n    onChangeRetailer,\r\n    stockItemLedgerName = []\r\n}) => {\r\n\r\n    const tdStyle = 'border fa-14 vctr';\r\n    const inputStyle = 'cus-inpt p-2';\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n\r\n                {/* customer name */}\r\n                <div className=\"col-sm-8 p-2\">\r\n                    <label className='fa-13'>Party Name</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo?.Retailer_Id,\r\n                            label: invoiceInfo?.Retailer_Name\r\n                        }}\r\n                        onChange={e => {\r\n                            setInvoiceInfo(pre => ({\r\n                                ...pre,\r\n                                Retailer_Id: e.value,\r\n                                Retailer_Name: e.label\r\n                            }));\r\n\r\n                            if (onChangeRetailer) onChangeRetailer();\r\n                        }}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(retailers).map(obj => ({\r\n                                value: obj?.Retailer_Id,\r\n                                label: obj?.Retailer_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select Vendor\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* voucher type */}\r\n                <div className=\"col-sm-4 p-2\">\r\n                    <label className='fa-13'>Voucher Type</label>\r\n                    <Select\r\n                        value={{\r\n                            value: invoiceInfo.Voucher_Type,\r\n                            label: toArray(voucherType).find(v => isEqualNumber(v.Vocher_Type_Id, invoiceInfo.Voucher_Type))?.Voucher_Type\r\n                        }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Voucher_Type: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...toArray(voucherType).filter(\r\n                                fil => fil?.Type === 'SALES'\r\n                            ).map(obj => ({\r\n                                value: obj?.Vocher_Type_Id,\r\n                                label: obj?.Voucher_Type\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        required={true}\r\n                        placeholder={\"Select Voucher Type\"}\r\n                        maxMenuHeight={300}\r\n                       isDisabled={!!checkIsNumber(invoiceInfo?.Do_Id)}\r\n                    />\r\n                </div>\r\n\r\n                {/* Date */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Entry Date <RequiredStar /></label>\r\n                    <input\r\n                        value={invoiceInfo?.Do_Date}\r\n                        type=\"date\"\r\n                        required\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Do_Date: e.target.value }))}\r\n                    />\r\n                </div>\r\n\r\n                {/* branch */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Branch <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        value={invoiceInfo?.Branch_Id}\r\n                        required\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Branch_Id: e.target.value }))}\r\n                    >\r\n                        <option value=\"\">select</option>\r\n                        {branches.map((o, i) => (\r\n                            <option value={o?.BranchId} key={i}>{o?.BranchName}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {/* GST TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>GST Type <RequiredStar /></label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, GST_Inclusive: Number(e.target.value) }))}\r\n                        value={invoiceInfo.GST_Inclusive}\r\n                        required\r\n                    >\r\n                        <option value={1}>Inclusive Tax</option>\r\n                        <option value={0}>Exclusive Tax</option>\r\n                        <option value={2}>Not Taxable</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* TAX TYPE */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Tax Type</label>\r\n                    <select\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, IS_IGST: Number(e.target.value) }))}\r\n                        value={invoiceInfo.IS_IGST}\r\n                    >\r\n                        <option value='0'>GST</option>\r\n                        <option value='1'>IGST</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* stock item ledger name */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Stock Item Ledger Name</label>\r\n                    <Select\r\n                        value={{ value: invoiceInfo.Stock_Item_Ledger_Name, label: invoiceInfo.Stock_Item_Ledger_Name }}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Stock_Item_Ledger_Name: e.value }))}\r\n                        options={[\r\n                            { value: '', label: 'Search', isDisabled: true },\r\n                            ...stockItemLedgerName.map(obj => ({\r\n                                value: obj?.Stock_Item_Ledger_Name,\r\n                                label: obj?.Stock_Item_Ledger_Name\r\n                            }))\r\n                        ]}\r\n                        styles={customSelectStyles}\r\n                        menuPortalTarget={document.body}\r\n                        required={true}\r\n                        isSearchable={true}\r\n                        placeholder={\"Select\"}\r\n                        maxMenuHeight={300}\r\n                    />\r\n                </div>\r\n\r\n                {/* STATUS */}\r\n                <div className=\"col-xl-3 col-md-4 col-sm-6 p-2\">\r\n                    <label className='fa-13'>Status</label>\r\n                    <select\r\n                        value={invoiceInfo?.Cancel_status}\r\n                        className={inputStyle}\r\n                        onChange={e => setInvoiceInfo(pre => ({ ...pre, Cancel_status: e.target.value }))}\r\n                    >\r\n                        <option value=\"\" disabled>Select</option>\r\n                        <option value=\"1\">New</option>\r\n                        <option value=\"2\">Progess</option>\r\n                        <option value=\"3\">Completed</option>\r\n                        <option value=\"0\">Canceled</option>\r\n                    </select>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <label className='fa-13'>Narration</label>\r\n            <textarea\r\n                className=\"cus-inpt fa-14\"\r\n                rows={2}\r\n                value={invoiceInfo.Narration}\r\n                onChange={e => setInvoiceInfo(pre => ({ ...pre, Narration: e.target.value }))}\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ManageSalesInvoiceGeneralInfo;","\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\nvar _utils = require(\"@mui/material/utils\");","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 6v2h8.59L5 17.59 6.41 19 16 9.41V18h2V6z\"\n}), 'ArrowOutward');","import deprecatedPropType from '@mui/utils/deprecatedPropType';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n    return null;\n  };\n}","import requirePropFactory from '@mui/utils/requirePropFactory';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n    return null;\n  };\n  return requireProp;\n}","import setRef from '@mui/utils/setRef';\nexport default setRef;","import unsupportedProp from '@mui/utils/unsupportedProp';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n  const propFullNameSafe = propFullName || propName;\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n  return null;\n}","'use client';\n\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/ClassNameGenerator';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\n// TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    }\n    ClassNameGenerator.configure(generator);\n  }\n};","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import isMuiElement from '@mui/utils/isMuiElement';\nexport default isMuiElement;","import * as React from 'react';\nexport default function isMuiElement(element, muiNames) {\n  var _muiName, _element$type;\n  return /*#__PURE__*/React.isValidElement(element) && muiNames.indexOf( // For server components `muiName` is avaialble in element.type._payload.value.muiName\n  // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45\n  // eslint-disable-next-line no-underscore-dangle\n  (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName) !== -1;\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4z\"\n}), 'AddBox');","// import React, { useState, useEffect, useMemo } from \"react\";\r\n// import { Button, IconButton, CardContent, Card, Dialog } from \"@mui/material\";\r\n// import Select from \"react-select\";\r\n// import { customSelectStyles } from \"../../../Components/tablecolumn\";\r\n// import { toast } from 'react-toastify';\r\n// import {\r\n//     isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n//     NumberFormat, numberToWords,\r\n//     RoundNumber, Addition,\r\n//     getSessionUser,\r\n//     checkIsNumber,\r\n//     toNumber,\r\n//     toArray,\r\n//     stringCompare\r\n// } from \"../../../Components/functions\";\r\n// import { Add, ArrowLeft, Clear, Delete, Download, Edit, ReceiptLong, Save, Close } from \"@mui/icons-material\";\r\n// import { fetchLink } from '../../../Components/fetchComponent';\r\n// import FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\n// import { calculateGSTDetails } from '../../../Components/taxCalculator';\r\n// import { salesInvoiceGeneralInfo, salesInvoiceDetailsInfo, salesInvoiceExpencesInfo, salesInvoiceStaffInfo } from './variable';\r\n\r\n// import ManageSalesInvoiceGeneralInfo from \"./manageGeneralInfo\";\r\n// import SalesInvoiceTaxDetails from \"./taxDetails\";\r\n\r\n// import AddItemToSaleOrderCart from \"../SaleOrder/addItemToCart\";\r\n// import AddProductsInSalesInvoice from \"./importFromSaleOrder\";\r\n// import ExpencesOfSalesInvoice from \"./manageExpences\";\r\n// // import InvolvedStaffs from \"./manageInvolvedStaff\";\r\n// const storage = getSessionUser().user;\r\n\r\n// const findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\n\r\n// const DirectSaleInvoiceModal = ({ loadingOn, loadingOff, open, onClose, editValues }) => {\r\n\r\n//     const [baseData, setBaseData] = useState({\r\n//         products: [],\r\n//         branch: [],\r\n//         retailers: [],\r\n//         voucherType: [],\r\n//         uom: [],\r\n//         staff: [],\r\n//         staffType: [],\r\n//         brand: [],\r\n//         godown: [],\r\n//         expence: [],\r\n//         stockInGodown: [],\r\n//         stockItemLedgerName: [],\r\n//     });\r\n\r\n//     const [dialog, setDialog] = useState({\r\n//         addProductDialog: false,\r\n//         importFromSaleOrder: false,\r\n//     })\r\n\r\n//     const [invoiceInfo, setInvoiceInfo] = useState(salesInvoiceGeneralInfo)\r\n//     const [invoiceProducts, setInvoiceProduct] = useState([]);\r\n//      const [invoiceExpences, setInvoiceExpences] = useState([]);\r\n//     const [staffArray, setStaffArray] = useState([]);\r\n\r\n//     const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n//     const isInclusive = isEqualNumber(invoiceInfo.GST_Inclusive, 1);\r\n//     const isNotTaxableBill = isEqualNumber(invoiceInfo.GST_Inclusive, 2);\r\n//     const IS_IGST = isEqualNumber(invoiceInfo.IS_IGST, 1);\r\n//     const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n//     const minimumRows = 3;\r\n//     const dummyRowCount = minimumRows - invoiceProducts.length\r\n\r\n\r\n    \r\n     \r\n//     useEffect(() => {\r\n//         if (!open) return;\r\n\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 if (loadingOn) loadingOn();\r\n\r\n//                 const [\r\n//                     branchResponse,\r\n//                     productsResponse,\r\n//                     retailerResponse,\r\n//                     voucherTypeResponse,\r\n//                     uomResponse,\r\n//                     staffResponse,\r\n//                     staffCategory,\r\n//                     godownLocationsResponse,\r\n//                     expenceResponse,\r\n//                     godownWiseStock,\r\n//                     stockItemLedgerNameResponse\r\n//                 ] = await Promise.all([\r\n//                     fetchLink({ address: `masters/branch/dropDown` }),\r\n//                     fetchLink({ address: `masters/products` }),\r\n//                     fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n//                     fetchLink({ address: `purchase/voucherType` }),\r\n//                     fetchLink({ address: `masters/uom` }),\r\n//                     fetchLink({ address: `dataEntry/costCenter` }),\r\n//                     fetchLink({ address: `dataEntry/costCenter/category` }),\r\n//                     fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n//                     fetchLink({ address: `masters/defaultAccountMaster` }),\r\n//                     fetchLink({ address: `sales/stockInGodown` }),\r\n//                     fetchLink({ address: `purchase/stockItemLedgerName?type=SALES` }),\r\n//                 ]);\r\n\r\n//                 const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n//                     (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n//                 );\r\n//                 const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n//                 );\r\n//                 const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n//                 );\r\n//                 const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n//                 );\r\n//                 const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n//                     (a, b) => String(a.Units).localeCompare(b.Units)\r\n//                 );\r\n//                 const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n//                 );\r\n//                 const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n//                     (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n//                 );\r\n//                 const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n//                 );\r\n//                 const expencesMaster = (expenceResponse.success ? toArray(expenceResponse.data) : []).sort(\r\n//                     (a, b) => String(a?.Account_Name).localeCompare(b?.Account_Name)\r\n//                 );\r\n//                 const stockInGodowns = (godownWiseStock.success ? godownWiseStock.data : []).sort(\r\n//                     (a, b) => String(a?.stock_item_name).localeCompare(b?.stock_item_name)\r\n//                 );\r\n//                 const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n//                     (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n//                 );\r\n\r\n//                 setBaseData((pre) => ({\r\n//                     ...pre,\r\n//                     products: productsData,\r\n//                     branch: branchData,\r\n//                     retailers: retailersData,\r\n//                     voucherType: voucherType,\r\n//                     uom: uomData,\r\n//                     staff: staffData,\r\n//                     staffType: staffCategoryData,\r\n//                     godown: godownLocations,\r\n//                     brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n//                     expence: expencesMaster.filter(\r\n//                         exp => !stringCompare(exp.Type, 'DEFAULT')\r\n//                     ).map(exp => ({ Id: exp.Acc_Id, Expence_Name: exp.Account_Name })),\r\n//                     stockInGodown: stockInGodowns,\r\n//                     stockItemLedgerName: stockItemLedgerName\r\n//                 }));\r\n//             } catch (e) {\r\n//                 console.error(\"Error fetching data:\", e);\r\n//             } finally {\r\n//                 if (loadingOff) loadingOff();\r\n//             }\r\n//         };\r\n\r\n//         fetchData();\r\n\r\n//     }, [storage?.Company_id, open])\r\n\r\n//     const clearValues = () => {\r\n//         setInvoiceInfo(salesInvoiceGeneralInfo);\r\n//         setInvoiceProduct([]);\r\n//         setInvoiceExpences([]);\r\n//         setStaffArray([]);\r\n//     }\r\n\r\n//     // Handle staff array changes from InvolvedStaffs component\r\n//     const handleStaffArrayChange = (updatedStaffArray) => {\r\n//         setStaffArray(updatedStaffArray);\r\n//     };\r\n\r\n//     // re-calculate the tax after changeing tax-type, invoice-type\r\n//     useEffect(() => {\r\n//         setInvoiceProduct(pre => {\r\n//             const exist = [...pre];\r\n\r\n//             return exist.map(item => {\r\n//                 return Object.fromEntries(\r\n//                     Object.entries(item).map(([key, value]) => {\r\n//                         const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n//                         const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n//                         const isTaxable = gstPercentage > 0;\r\n\r\n//                         const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n//                         const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n//                         const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n//                         const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n//                         const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n//                         const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n//                         const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n//                         switch (key) {\r\n//                             case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n//                             case 'Total_Qty': return [key, Bill_Qty]\r\n//                             case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n//                             case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n//                             case 'Tax_Rate': return [key, gstPercentage]\r\n//                             case 'Cgst':\r\n//                             case 'Sgst': return [key, cgstPer ?? 0]\r\n//                             case 'Cgst_Amo':\r\n//                             case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n//                             case 'Igst': return [key, igstPer ?? 0]\r\n//                             case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n//                             case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n//                             default: return [key, item[key] || value]\r\n//                         }\r\n//                     })\r\n//                 )\r\n//             })\r\n//         });\r\n//     }, [\r\n//         baseData.products,\r\n//         IS_IGST,\r\n//         taxType,\r\n//     ]);\r\n\r\n//     useEffect(() => {\r\n//         setInvoiceExpences(pre => {\r\n//             const exist = [...pre];\r\n\r\n//             return exist.map(item => {\r\n//                 const\r\n//                     Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n//                     Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n//                     Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n//                     Expence_Value = toNumber(item?.Expence_Value),\r\n//                     taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n//                 const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n\r\n//                 return {\r\n//                     ...item,\r\n//                     Cgst, Sgst, Igst,\r\n//                     Expence_Value,\r\n//                     Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n//                     Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n//                     Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n//                 }\r\n//             })\r\n//         })\r\n//     }, [\r\n//         baseData.expence,\r\n//         IS_IGST,\r\n//         taxType,\r\n//     ]);\r\n\r\n// useEffect(() => {\r\n//     if (\r\n//         isValidObject(editValues) &&\r\n//         Array.isArray(editValues?.ProductList) &&\r\n//         baseData.staff.length > 0 &&\r\n//         baseData.staffType.length > 0\r\n//     ) {\r\n//         const {\r\n//             ProductList,\r\n//             Staffs_Array,\r\n//             Broker_Id,\r\n//             Broker_Name,\r\n//             Expence_Array,\r\n//             Transporter_Id,\r\n//             Transporter_Name,\r\n//         } = editValues;\r\n\r\n      \r\n     \r\n        \r\n      \r\n//         const expenseArray = editValues.Expence_Array || editValues.expenceArray || \r\n//                             editValues.Expenses || editValues.expenses || \r\n//                             editValues.ExpenceList || editValues.expenceList || [];\r\n\r\n//         const retailerObj = baseData.retailers.find(r =>\r\n//             isEqualNumber(r.Retailer_Id, editValues.Custome_Id)\r\n//         );\r\n//   setInvoiceExpences(\r\n//                 toArray(Expence_Array).map(item => Object.fromEntries(\r\n//                     Object.entries(salesInvoiceExpencesInfo).map(([key, value]) => {\r\n//                         return [key, item[key] ?? value]\r\n//                     })\r\n//                 ))\r\n//             );\r\n//         setInvoiceInfo(prev => ({\r\n//             ...prev,\r\n//             Do_Id: editValues.Pos_Id || '',\r\n//             So_No: editValues.Pre_Id || '',\r\n//             So_Date: editValues.Pre_Date ? ISOString(editValues.Pre_Date) : '',\r\n//             Retailer_Id: editValues.Custome_Id || '',\r\n//             Retailer_Name: retailerObj?.Retailer_Name || '',\r\n//             Broker_Id: editValues.Broker_Id || '',\r\n//             Broker_Name: editValues.Broker_Name || '',\r\n//             Transporter_Id: editValues.Transporter_Id || '',\r\n//             Transporter_Name: editValues.Transporter_Name || '',\r\n//             TrasnportType: editValues.TrasnportType || 2,\r\n//             Voucher_Type: editValues.baseData || 0,\r\n//             Status: editValues.Status || '',\r\n//             isConverted: editValues.isConverted || 0,\r\n//             Total_Invoice_value: editValues.Total_Invoice_value || 0,\r\n//         }));\r\n\r\n//         setInvoiceProduct(\r\n//             ProductList.map(item => ({\r\n//                 ...salesInvoiceDetailsInfo,\r\n//                 Item_Id: item.Item_Id || '',\r\n//                 Item_Name: item.Product_Name || '',\r\n//                 HSN_Code: item.HSN_Code || '',\r\n//                 Bill_Qty: item.Bill_Qty || 0,\r\n//                 Act_Qty: item.Bill_Qty || 0,\r\n//                 Item_Rate: item.Item_Rate || 0,\r\n//                 Amount: item.Amount || 0,\r\n//                 GoDown_Id: item.Godown_Id || '',\r\n//                 Tax_Rate: item.Tax_Rate || 0,\r\n//                 Cgst: item.Cgst || 0,\r\n//                 Sgst: item.Sgst || 0,\r\n//                 Igst: item.Igst || 0,\r\n//                 Cgst_Amo: item.Cgst_Amo || 0,\r\n//                 Sgst_Amo: item.Sgst_Amo || 0,\r\n//                 Igst_Amo: item.Igst_Amo || 0,\r\n//                 Taxable_Amount: item.Taxable_Amount || 0,\r\n//                 Final_Amo: item.Final_Amo || 0,\r\n//             }))\r\n//         );\r\n\r\n//         let staffTemp = [];\r\n\r\n//         const getCategoryIdFromName = (categoryName) => {\r\n//             const category = baseData.staffType.find(cat => \r\n//                 stringCompare(cat.Cost_Category, categoryName)\r\n//             );\r\n//             return category?.Cost_Category_Id || '';\r\n//         };\r\n\r\n//         if (Broker_Id && !isEqualNumber(Broker_Id, 0)) {\r\n//             const brokerStaff = baseData.staff.find(s => \r\n//                 isEqualNumber(s.Cost_Center_Id, Broker_Id)\r\n//             );\r\n//             const brokerCategoryId = getCategoryIdFromName('Broker');\r\n\r\n//             if (brokerStaff) {\r\n//                 staffTemp.push({\r\n//                     Involved_Emp_Id: brokerStaff.Cost_Center_Id,\r\n//                     EmpName: brokerStaff.Cost_Center_Name,\r\n//                     Cost_Center_Type_Id: brokerCategoryId,\r\n//                     Cost_Center_Type: 'Broker',\r\n//                 });\r\n//             }\r\n//         }\r\n\r\n//         if (Transporter_Id && !isEqualNumber(Transporter_Id, 0)) {\r\n//             const transporterStaff = baseData.staff.find(s => \r\n//                 isEqualNumber(s.Cost_Center_Id, Transporter_Id)\r\n//             );\r\n//             const transporterCategoryId = getCategoryIdFromName('Transport');\r\n\r\n//             if (transporterStaff) {\r\n//                 staffTemp.push({\r\n//                     Involved_Emp_Id: transporterStaff.Cost_Center_Id,\r\n//                     EmpName: transporterStaff.Cost_Center_Name,\r\n//                     Cost_Center_Type_Id: transporterCategoryId,\r\n//                     Cost_Center_Type: 'Transporter',\r\n//                 });\r\n//             }\r\n//         }\r\n\r\n//         toArray(Staffs_Array).forEach((item, idx) => {\r\n//             const staffObj = baseData.staff.find(s =>\r\n//                 isEqualNumber(s.Cost_Center_Id, item.Staff_Id)\r\n//             );\r\n            \r\n//             let categoryId = item.Cost_Cat_Id;\r\n//             let categoryName = item.Cost_Cat_Name;\r\n            \r\n//             if (!categoryId && categoryName) {\r\n//                 categoryId = getCategoryIdFromName(categoryName);\r\n//             }\r\n\r\n//             if (staffObj) {\r\n//                 staffTemp.push({\r\n//                     Involved_Emp_Id: staffObj.Cost_Center_Id,\r\n//                     EmpName: staffObj.Cost_Center_Name,\r\n//                     Cost_Center_Type_Id: categoryId || '',\r\n//                     Cost_Center_Type: categoryName || '',\r\n//                 });\r\n//             }\r\n//         });\r\n\r\n//         console.log(\"Final staffTemp:\", staffTemp);\r\n//         setStaffArray(staffTemp);\r\n\r\n//         // Use the expenseArray variable\r\n    \r\n//     }\r\n// }, [editValues, baseData.staff, baseData.staffType, baseData.retailers]);\r\n//       useEffect(() => {\r\n//            setInvoiceExpences(pre => {\r\n//                const exist = [...pre];\r\n   \r\n//                return exist.map(item => {\r\n//                    const\r\n//                        Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n//                        Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n//                        Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n//                        Expence_Value = toNumber(item?.Expence_Value),\r\n//                        taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n   \r\n//                    const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n   \r\n//                    return {\r\n//                        ...item,\r\n//                        Cgst, Sgst, Igst,\r\n//                        Expence_Value,\r\n//                        Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n//                        Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n//                        Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n//                    }\r\n//                })\r\n//            })\r\n//        }, [\r\n//            baseData.expence,\r\n//            IS_IGST,\r\n//            taxType,\r\n//        ])\r\n// const saveSalesInvoice = () => {\r\n//     if (loadingOn) loadingOn();\r\n\r\n//     const staff_Involved_List = staffArray.map(staff => ({\r\n//         Involved_Emp_Id: staff.Involved_Emp_Id,\r\n//         Cost_Center_Type_Id: staff.Cost_Center_Type_Id\r\n//     }));\r\n\r\n//     fetchLink({\r\n//         address: `sales/salesInvoice`,\r\n//         method: checkIsNumber(invoiceInfo?.Do_Id) ? 'PUT' : 'POST',\r\n//         bodyData: {\r\n//             ...invoiceInfo,\r\n//             Product_Array: invoiceProducts,\r\n//             staff_Involved_List: staff_Involved_List, \r\n//             Expence_Array: invoiceExpences\r\n//         }\r\n//     }).then(data => {\r\n//         if (data.success) {\r\n//             clearValues();\r\n//             toast.success(data.message);\r\n//             onClose(true);\r\n//         } else {\r\n//             toast.warn(data.message)\r\n//         }\r\n//     }).catch(e => console.error(e)).finally(() => {\r\n//         if (loadingOff) loadingOff();\r\n//     })\r\n// }\r\n\r\n//     if (!open) return null;\r\n\r\n//     return (\r\n//         <Dialog open={open} onClose={() => onClose(false)} maxWidth=\"xl\" fullWidth>\r\n//             <div style={{ maxHeight: '90vh', overflow: 'auto' }}>\r\n                \r\n//                 <AddItemToSaleOrderCart\r\n//                     orderProducts={invoiceProducts}\r\n//                     setOrderProducts={setInvoiceProduct}\r\n//                     open={dialog.addProductDialog}\r\n//                     onClose={() => {\r\n//                         setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n//                         setSelectedProductToEdit(null);\r\n//                     }}\r\n//                     products={baseData.products}\r\n//                     brands={baseData.brand}\r\n//                     uom={baseData.uom}\r\n//                     godowns={baseData.godown}\r\n//                     GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n//                     IS_IGST={IS_IGST}\r\n//                     editValues={selectedProductToEdit}\r\n//                     initialValue={{ ...salesInvoiceDetailsInfo, Pre_Id: invoiceInfo.So_No }}\r\n//                     stockInGodown={baseData.stockInGodown}\r\n//                 />\r\n\r\n//                 <Card>\r\n//                     <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n//                         <span className=\"flex-grow-1 fa-16 fw-bold\">Sales Invoice</span>\r\n//                         <span>\r\n//                             <IconButton onClick={() => onClose(false)}>\r\n//                                 <Close />\r\n//                             </IconButton>\r\n//                             <Button onClick={() => saveSalesInvoice()} variant=\"contained\">Submit</Button>\r\n//                         </span>\r\n//                     </div>\r\n//                     <CardContent>\r\n//                         <div className=\"row p-0\">\r\n                           \r\n//                             <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n//                                 <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n//                                     <InvolvedStaffs\r\n//                                         StaffArray={staffArray}\r\n//                                         setStaffArray={handleStaffArrayChange}\r\n//                                         costCenter={baseData.staff}\r\n//                                         costCategory={baseData.staffType}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n\r\n                 \r\n//                             <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n//                                 <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n//                                     <ManageSalesInvoiceGeneralInfo\r\n//                                         invoiceInfo={invoiceInfo}\r\n//                                         setInvoiceInfo={setInvoiceInfo}\r\n//                                         retailers={baseData.retailers}\r\n//                                         branches={baseData.branch}\r\n//                                         voucherType={baseData.voucherType}\r\n//                                         stockItemLedgerName={baseData.stockItemLedgerName}\r\n//                                         onChangeRetailer={() => {\r\n//                                             setInvoiceProduct([]);\r\n//                                             setInvoiceExpences([]);\r\n//                                         }}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n\r\n                     \r\n//                         <FilterableTable\r\n//                             title=\"Items\"\r\n//                             headerFontSizePx={13}\r\n//                             bodyFontSizePx={13}\r\n//                             EnableSerialNumber\r\n//                             disablePagination\r\n//                             ButtonArea={\r\n//                                 <>\r\n//                                     <Button\r\n//                                         onClick={() => {\r\n//                                             setSelectedProductToEdit(null);\r\n//                                             setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n//                                         }}\r\n//                                         sx={{ ml: 1 }}\r\n//                                         variant='outlined'\r\n//                                         type=\"button\"\r\n//                                         startIcon={<Add />}\r\n//                                         disabled={\r\n//                                             !checkIsNumber(invoiceInfo.Retailer_Id)\r\n//                                             || (invoiceProducts.length > 0\r\n//                                                 && checkIsNumber(invoiceInfo.So_No))\r\n//                                         }\r\n//                                     >Add Product</Button>\r\n\r\n//                                     <AddProductsInSalesInvoice\r\n//                                         loadingOn={loadingOn}\r\n//                                         loadingOff={loadingOff}\r\n//                                         open={dialog.importFromSaleOrder}\r\n//                                         onClose={() => setDialog(pre => ({ ...pre, importFromSaleOrder: false }))}\r\n//                                         retailer={invoiceInfo?.Retailer_Id}\r\n//                                         selectedItems={invoiceProducts}\r\n//                                         setSelectedItems={setInvoiceProduct}\r\n//                                         staffArray={staffArray}\r\n//                                         setStaffArray={setStaffArray}\r\n//                                         products={baseData.products}\r\n//                                         GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n//                                         IS_IGST={IS_IGST}\r\n//                                         invoiceInfo={invoiceInfo}\r\n//                                         setInvoiceInfo={setInvoiceInfo}\r\n//                                         godowns={baseData.godown}\r\n//                                         stockInGodown={baseData.stockInGodown}\r\n//                                     >\r\n//                                         {/* <Button\r\n//                                             onClick={() => setDialog(pre => ({ ...pre, importFromSaleOrder: true }))}\r\n//                                             disabled={\r\n//                                                 !checkIsNumber(invoiceInfo.Retailer_Id)\r\n//                                                 || (\r\n//                                                     invoiceProducts.length > 0\r\n//                                                     && !checkIsNumber(invoiceInfo.So_No)\r\n//                                                 )\r\n//                                             }\r\n//                                             sx={{ ml: 1 }}\r\n//                                             type=\"button\"\r\n//                                             variant='outlined'\r\n//                                             startIcon={<ReceiptLong />}\r\n//                                         >\r\n//                                             Choose Sale Order</Button> */}\r\n//                                     </AddProductsInSalesInvoice>\r\n//                                 </>\r\n//                             }\r\n//                             dataArray={[\r\n//                                 ...invoiceProducts,\r\n//                                 ...Array.from({\r\n//                                     length: dummyRowCount > 0 ? dummyRowCount : 0\r\n//                                 }).map(d => salesInvoiceDetailsInfo)\r\n//                             ]}\r\n//                             columns={[\r\n//                                 createCol('Item_Name', 'string'),\r\n//                                 createCol('HSN_Code', 'string'),\r\n//                                 createCol('Bill_Qty', 'number'),\r\n//                                 createCol('Act_Qty', 'number'),\r\n//                                 createCol('Item_Rate', 'number'),\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: 'Tax',\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         const { Cgst = 0, Sgst = 0, Igst = 0, Cgst_Amo = 0, Sgst_Amo = 0, Igst_Amo = 0 } = row;\r\n//                                         const taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n//                                         const taxAmount = IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo);\r\n\r\n//                                         return !checkIsNumber(row?.Item_Id) ? '' : `${taxAmount} - (${taxPercentage} %)`\r\n//                                     }\r\n//                                 },\r\n//                                 {\r\n//                                     isVisible: 1,\r\n//                                     ColumnHeader: 'Godown',\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => baseData.godown.find(\r\n//                                         godown => isEqualNumber(godown.Godown_Id, row?.GoDown_Id)\r\n//                                     )?.Godown_Name ?? ''\r\n//                                 },\r\n//                                 createCol('Amount', 'number'),\r\n//                                 {\r\n//                                     isCustomCell: true,\r\n//                                     Cell: ({ row }) => {\r\n//                                         return (\r\n//                                             <>\r\n//                                                 <IconButton\r\n//                                                     onClick={() => {\r\n//                                                         setSelectedProductToEdit(row);\r\n//                                                         setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n//                                                     }}\r\n//                                                     size=\"small\"\r\n//                                                     type=\"button\"\r\n//                                                     disabled={!checkIsNumber(row?.Item_Id)}\r\n//                                                 >\r\n//                                                     <Edit />\r\n//                                                 </IconButton>\r\n//                                                 <IconButton\r\n//                                                     size=\"small\"\r\n//                                                     type=\"button\"\r\n//                                                     onClick={() => setInvoiceProduct(\r\n//                                                         pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id))\r\n//                                                     )}\r\n//                                                     color='error'\r\n//                                                     disabled={!checkIsNumber(row?.Item_Id)}\r\n//                                                 >\r\n//                                                     <Delete />\r\n//                                                 </IconButton>\r\n//                                             </>\r\n//                                         )\r\n//                                     },\r\n//                                     ColumnHeader: 'Action',\r\n//                                     isVisible: 1,\r\n//                                 },\r\n//                             ]}\r\n//                         />\r\n\r\n//                         <br />\r\n\r\n//                         <ExpencesOfSalesInvoice\r\n//                             invoiceExpences={invoiceExpences}\r\n//                             setInvoiceExpences={setInvoiceExpences}\r\n//                             expenceMaster={baseData.expence}\r\n//                             IS_IGST={IS_IGST}\r\n//                             taxType={taxType}\r\n//                         />\r\n\r\n//                         <br />\r\n\r\n//                        <SalesInvoiceTaxDetails\r\n//                         invoiceProducts={invoiceProducts}\r\n//                         invoiceExpences={invoiceExpences}\r\n//                         isNotTaxableBill={isNotTaxableBill}\r\n//                         isInclusive={isInclusive}\r\n//                         IS_IGST={IS_IGST}\r\n//                         products={baseData.products}\r\n//                         invoiceInfo={invoiceInfo}\r\n//                         setInvoiceInfo={setInvoiceInfo}\r\n//                     />\r\n//                     </CardContent>\r\n//                 </Card>\r\n//             </div>\r\n//         </Dialog>\r\n//     )\r\n// }\r\n\r\n\r\n// export default DirectSaleInvoiceModal;\r\n\r\n\r\n\r\n// const InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [] }) => {\r\n\r\n//     // Function to get category ID from category name\r\n//     const getCategoryIdFromName = (categoryName) => {\r\n//         const category = costCategory.find(cat => \r\n//             stringCompare(cat.Cost_Category, categoryName)\r\n//         );\r\n//         return category?.Cost_Category_Id || '';\r\n//     };\r\n\r\n//     // Function to get category name from ID\r\n//     const getCategoryNameFromId = (categoryId) => {\r\n//         const category = costCategory.find(cat => \r\n//             isEqualNumber(cat.Cost_Category_Id, categoryId)\r\n//         );\r\n//         return category?.Cost_Category || '';\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n//                 <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n//                 <Button\r\n//                     variant=\"outlined\"\r\n//                     color=\"primary\"\r\n//                     type=\"button\"\r\n//                     onClick={() => setStaffArray(pre => [...pre, { \r\n//                         Involved_Emp_Id: '',\r\n//                         EmpName: '',\r\n//                         Cost_Center_Type_Id: '',\r\n//                         Cost_Center_Type: '' \r\n//                     }])}\r\n//                 >Add</Button>\r\n//             </div>\r\n\r\n//             <table className=\"table table-bordered\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th className=\"fa-13\">Sno</th>\r\n//                         <th className=\"fa-13\">Staff Name</th>\r\n//                         <th className=\"fa-13\">Category</th>\r\n//                         <th className=\"fa-13\">#</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {toArray(StaffArray).map((row, index) => {\r\n//                         // Convert category name to ID if needed (for existing data)\r\n//                         const actualCategoryId = row.Cost_Center_Type_Id || getCategoryIdFromName(row.Cost_Center_Type);\r\n                        \r\n//                         return (\r\n//                             <tr key={index}>\r\n//                                 <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n//                                 <td className='fa-13 w-100 p-0'>\r\n//                                     <Select\r\n//                                         value={{\r\n//                                             value: row.Involved_Emp_Id,\r\n//                                             label: row.EmpName || 'Select Staff'\r\n//                                         }}\r\n//                                         onChange={e => {\r\n//                                             const selectedStaff = costCenter.find(c => \r\n//                                                 isEqualNumber(c.Cost_Center_Id, e.value)\r\n//                                             );\r\n//                                             const newArray = StaffArray.map((staff, i) => \r\n//                                                 i === index ? { \r\n//                                                     ...staff, \r\n//                                                     Involved_Emp_Id: Number(e.value),\r\n//                                                     EmpName: e.label\r\n//                                                 } : staff\r\n//                                             );\r\n//                                             setStaffArray(newArray);\r\n//                                         }}\r\n//                                         options={costCenter\r\n//                                             .filter(staff => \r\n//                                                 !StaffArray.some((st, i) => \r\n//                                                     i !== index && isEqualNumber(st.Involved_Emp_Id, staff.Cost_Center_Id)\r\n//                                                 )\r\n//                                             )\r\n//                                             .map(st => ({\r\n//                                                 value: st.Cost_Center_Id,\r\n//                                                 label: st.Cost_Center_Name\r\n//                                             }))\r\n//                                         }\r\n//                                         styles={customSelectStyles}\r\n//                                         isSearchable={true}\r\n//                                         placeholder=\"Select Staff\"\r\n//                                     />\r\n//                                 </td>\r\n//                                 <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n//                                     <select\r\n//                                         value={actualCategoryId}\r\n//                                         onChange={e => {\r\n//                                             const selectedCategory = costCategory.find(c => \r\n//                                                 isEqualNumber(c.Cost_Category_Id, e.target.value)\r\n//                                             );\r\n//                                             const newArray = StaffArray.map((staff, i) => \r\n//                                                 i === index ? { \r\n//                                                     ...staff, \r\n//                                                     Cost_Center_Type_Id: e.target.value,\r\n//                                                     Cost_Center_Type: selectedCategory?.Cost_Category || ''\r\n//                                                 } : staff\r\n//                                             );\r\n//                                             setStaffArray(newArray);\r\n//                                         }}\r\n//                                         className=\"cus-inpt p-2 border-0\"\r\n//                                     >\r\n//                                         <option value=\"\">Select</option>\r\n//                                         {costCategory.map((st, sti) =>\r\n//                                             <option value={st.Cost_Category_Id} key={sti}>\r\n//                                                 {st.Cost_Category}\r\n//                                             </option>\r\n//                                         )}\r\n//                                     </select>\r\n//                                 </td>\r\n//                                 <td className='fa-13 vctr p-0'>\r\n//                                     <IconButton\r\n//                                         onClick={() => {\r\n//                                             const newArray = StaffArray.filter((_, i) => i !== index);\r\n//                                             setStaffArray(newArray);\r\n//                                         }}\r\n//                                         size='small'\r\n//                                     >\r\n//                                         <Delete color='error' />\r\n//                                     </IconButton>\r\n//                                 </td>\r\n//                             </tr>\r\n//                         );\r\n//                     })}\r\n//                 </tbody>\r\n//             </table>\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export  {InvolvedStaffs}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Button, IconButton, CardContent, Card, Dialog } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../../Components/tablecolumn\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    isEqualNumber, isGraterNumber, isValidObject, ISOString, getUniqueData,\r\n    NumberFormat, numberToWords,\r\n    RoundNumber, Addition,\r\n    getSessionUser,\r\n    checkIsNumber,\r\n    toNumber,\r\n    toArray,\r\n    stringCompare\r\n} from \"../../../Components/functions\";\r\nimport { Add, ArrowLeft, Clear, Delete, Download, Edit, ReceiptLong, Save, Close } from \"@mui/icons-material\";\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport FilterableTable, { createCol } from \"../../../Components/filterableTable2\";\r\nimport { calculateGSTDetails } from '../../../Components/taxCalculator';\r\nimport { salesInvoiceGeneralInfo, salesInvoiceDetailsInfo, salesInvoiceExpencesInfo, salesInvoiceStaffInfo } from './variable';\r\n\r\nimport ManageSalesInvoiceGeneralInfo from \"./manageGeneralInfo\";\r\nimport SalesInvoiceTaxDetails from \"./taxDetails\";\r\n\r\nimport AddItemToSaleOrderCart from \"../SaleOrder/addItemToCart\";\r\nimport AddProductsInSalesInvoice from \"./importFromSaleOrder\";\r\nimport ExpencesOfSalesInvoice from \"./manageExpences\";\r\n// import InvolvedStaffs from \"./manageInvolvedStaff\";\r\nconst storage = getSessionUser().user;\r\n\r\nconst findProductDetails = (arr = [], productid) => arr.find(obj => isEqualNumber(obj.Product_Id, productid)) ?? {};\r\n\r\n\r\nconst DirectSaleInvoiceModal = ({ loadingOn, loadingOff, open, onClose, editValues }) => {\r\nconsole.log(\"Editvalues\",editValues)\r\n    const [baseData, setBaseData] = useState({\r\n        products: [],\r\n        branch: [],\r\n        retailers: [],\r\n        voucherType: [],\r\n        uom: [],\r\n        staff: [],\r\n        staffType: [],\r\n        brand: [],\r\n        godown: [],\r\n        expence: [],\r\n        stockInGodown: [],\r\n        stockItemLedgerName: [],\r\n    });\r\n\r\n    const [dialog, setDialog] = useState({\r\n        addProductDialog: false,\r\n        importFromSaleOrder: false,\r\n    })\r\n\r\n    const [invoiceInfo, setInvoiceInfo] = useState(salesInvoiceGeneralInfo)\r\n    const [invoiceProducts, setInvoiceProduct] = useState([]);\r\n     const [invoiceExpences, setInvoiceExpences] = useState([]);\r\n    const [staffArray, setStaffArray] = useState([]);\r\n\r\n    const [selectedProductToEdit, setSelectedProductToEdit] = useState(null);\r\n\r\n    const isInclusive = isEqualNumber(invoiceInfo.GST_Inclusive, 1);\r\n    const isNotTaxableBill = isEqualNumber(invoiceInfo.GST_Inclusive, 2);\r\n    const IS_IGST = isEqualNumber(invoiceInfo.IS_IGST, 1);\r\n    const taxType = isNotTaxableBill ? 'zerotax' : isInclusive ? 'remove' : 'add';\r\n    const minimumRows = 3;\r\n    const dummyRowCount = minimumRows - invoiceProducts.length\r\n\r\n\r\n    \r\n     \r\n    useEffect(() => {\r\n        if (!open) return;\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                if (loadingOn) loadingOn();\r\n\r\n                const [\r\n                    branchResponse,\r\n                    productsResponse,\r\n                    retailerResponse,\r\n                    voucherTypeResponse,\r\n                    uomResponse,\r\n                    staffResponse,\r\n                    staffCategory,\r\n                    godownLocationsResponse,\r\n                    expenceResponse,\r\n                    godownWiseStock,\r\n                    stockItemLedgerNameResponse\r\n                ] = await Promise.all([\r\n                    fetchLink({ address: `masters/branch/dropDown` }),\r\n                    fetchLink({ address: `masters/products` }),\r\n                    fetchLink({ address: `masters/retailers/dropDown?Company_Id=${storage?.Company_id}` }),\r\n                    fetchLink({ address: `purchase/voucherType` }),\r\n                    fetchLink({ address: `masters/uom` }),\r\n                    fetchLink({ address: `dataEntry/costCenter` }),\r\n                    fetchLink({ address: `dataEntry/costCenter/category` }),\r\n                    fetchLink({ address: `dataEntry/godownLocationMaster` }),\r\n                    fetchLink({ address: `masters/defaultAccountMaster` }),\r\n                    fetchLink({ address: `sales/stockInGodown` }),\r\n                    fetchLink({ address: `purchase/stockItemLedgerName?type=SALES` }),\r\n                ]);\r\n\r\n                const branchData = (branchResponse.success ? branchResponse.data : []).sort(\r\n                    (a, b) => String(a?.BranchName).localeCompare(b?.BranchName)\r\n                );\r\n                const productsData = (productsResponse.success ? productsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Product_Name).localeCompare(b?.Product_Name)\r\n                );\r\n                const retailersData = (retailerResponse.success ? retailerResponse.data : []).sort(\r\n                    (a, b) => String(a?.Retailer_Name).localeCompare(b?.Retailer_Name)\r\n                );\r\n                const voucherType = (voucherTypeResponse.success ? voucherTypeResponse.data : []).sort(\r\n                    (a, b) => String(a?.Voucher_Type).localeCompare(b?.Voucher_Type)\r\n                );\r\n                const uomData = (uomResponse.success ? uomResponse.data : []).sort(\r\n                    (a, b) => String(a.Units).localeCompare(b.Units)\r\n                );\r\n                const staffData = (staffResponse.success ? staffResponse.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Center_Name).localeCompare(b?.Cost_Center_Name)\r\n                );\r\n                const staffCategoryData = (staffCategory.success ? staffCategory.data : []).sort(\r\n                    (a, b) => String(a?.Cost_Category).localeCompare(b?.Cost_Category)\r\n                );\r\n                const godownLocations = (godownLocationsResponse.success ? godownLocationsResponse.data : []).sort(\r\n                    (a, b) => String(a?.Godown_Name).localeCompare(b?.Godown_Name)\r\n                );\r\n                const expencesMaster = (expenceResponse.success ? toArray(expenceResponse.data) : []).sort(\r\n                    (a, b) => String(a?.Account_Name).localeCompare(b?.Account_Name)\r\n                );\r\n                const stockInGodowns = (godownWiseStock.success ? godownWiseStock.data : []).sort(\r\n                    (a, b) => String(a?.stock_item_name).localeCompare(b?.stock_item_name)\r\n                );\r\n                const stockItemLedgerName = (stockItemLedgerNameResponse.success ? stockItemLedgerNameResponse.data : []).sort(\r\n                    (a, b) => String(a?.Stock_Item_Ledger_Name).localeCompare(b?.Stock_Item_Ledger_Name)\r\n                );\r\n\r\n                setBaseData((pre) => ({\r\n                    ...pre,\r\n                    products: productsData,\r\n                    branch: branchData,\r\n                    retailers: retailersData,\r\n                    voucherType: voucherType,\r\n                    uom: uomData,\r\n                    staff: staffData,\r\n                    staffType: staffCategoryData,\r\n                    godown: godownLocations,\r\n                    brand: getUniqueData(productsData, 'Brand', ['Brand_Name']),\r\n                    expence: expencesMaster.filter(\r\n                        exp => !stringCompare(exp.Type, 'DEFAULT')\r\n                    ).map(exp => ({ Id: exp.Acc_Id, Expence_Name: exp.Account_Name })),\r\n                    stockInGodown: stockInGodowns,\r\n                    stockItemLedgerName: stockItemLedgerName\r\n                }));\r\n            } catch (e) {\r\n                console.error(\"Error fetching data:\", e);\r\n            } finally {\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [storage?.Company_id, open])\r\n\r\n    const clearValues = () => {\r\n        setInvoiceInfo(salesInvoiceGeneralInfo);\r\n        setInvoiceProduct([]);\r\n        setInvoiceExpences([]);\r\n        setStaffArray([]);\r\n    }\r\n\r\n\r\n    const handleStaffArrayChange = (updatedStaffArray) => {\r\n        setStaffArray(updatedStaffArray);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setInvoiceProduct(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                return Object.fromEntries(\r\n                    Object.entries(item).map(([key, value]) => {\r\n                        const productMaster = findProductDetails(baseData.products, item?.Item_Id);\r\n                        const gstPercentage = IS_IGST ? productMaster.Igst_P : productMaster.Gst_P;\r\n                        const isTaxable = gstPercentage > 0;\r\n\r\n                        const { Bill_Qty, Item_Rate, Amount } = item;\r\n\r\n                        const itemRateGst = calculateGSTDetails(Item_Rate, gstPercentage, taxType);\r\n                        const gstInfo = calculateGSTDetails(Amount, gstPercentage, taxType);\r\n\r\n                        const cgstPer = !IS_IGST ? gstInfo.cgst_per : 0;\r\n                        const igstPer = IS_IGST ? gstInfo.igst_per : 0;\r\n                        const Cgst_Amo = !IS_IGST ? gstInfo.cgst_amount : 0;\r\n                        const Igst_Amo = IS_IGST ? gstInfo.igst_amount : 0;\r\n\r\n                        switch (key) {\r\n                            case 'Taxable_Rate': return [key, itemRateGst.base_amount]\r\n                            case 'Total_Qty': return [key, Bill_Qty]\r\n                            case 'Taxble': return [key, isTaxable ? 1 : 0]\r\n                            case 'Taxable_Amount': return [key, gstInfo.base_amount]\r\n                            case 'Tax_Rate': return [key, gstPercentage]\r\n                            case 'Cgst':\r\n                            case 'Sgst': return [key, cgstPer ?? 0]\r\n                            case 'Cgst_Amo':\r\n                            case 'Sgst_Amo': return [key, isNotTaxableBill ? 0 : Cgst_Amo]\r\n                            case 'Igst': return [key, igstPer ?? 0]\r\n                            case 'Igst_Amo': return [key, isNotTaxableBill ? 0 : Igst_Amo]\r\n                            case 'Final_Amo': return [key, gstInfo.with_tax]\r\n\r\n                            default: return [key, item[key] || value]\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        });\r\n    }, [\r\n        baseData.products,\r\n        IS_IGST,\r\n        taxType,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setInvoiceExpences(pre => {\r\n            const exist = [...pre];\r\n\r\n            return exist.map(item => {\r\n                const\r\n                    Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n                    Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n                    Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n                    Expence_Value = toNumber(item?.Expence_Value),\r\n                    taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n\r\n                const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n\r\n                return {\r\n                    ...item,\r\n                    Cgst, Sgst, Igst,\r\n                    Expence_Value,\r\n                    Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n                    Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n                    Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n                }\r\n            })\r\n        })\r\n    }, [\r\n        baseData.expence,\r\n        IS_IGST,\r\n        taxType,\r\n    ]);\r\n\r\nuseEffect(() => {\r\n    if (\r\n        isValidObject(editValues) &&\r\n        Array.isArray(editValues?.ProductList) &&\r\n        baseData.staff.length > 0 &&\r\n        baseData.staffType.length > 0\r\n    ) {\r\n        const {\r\n            ProductList,\r\n            Staffs_Array,\r\n            Broker_Id,\r\n            Broker_Name,\r\n            Expence_Array,\r\n            Transporter_Id,\r\n            Transporter_Name,\r\n        } = editValues;\r\n\r\n      \r\n     \r\n        \r\n      \r\n        const expenseArray = editValues.Expence_Array || editValues.expenceArray || \r\n                            editValues.Expenses || editValues.expenses || \r\n                            editValues.ExpenceList || editValues.expenceList || [];\r\n\r\n        const retailerObj = baseData.retailers.find(r =>\r\n            isEqualNumber(r.Retailer_Id, editValues.Custome_Id)\r\n        );\r\n  setInvoiceExpences(\r\n                toArray(Expence_Array).map(item => Object.fromEntries(\r\n                    Object.entries(salesInvoiceExpencesInfo).map(([key, value]) => {\r\n                        return [key, item[key] ?? value]\r\n                    })\r\n                ))\r\n            );\r\n        setInvoiceInfo(prev => ({\r\n            ...prev,\r\n            Do_Id: editValues.Pos_Id || '',\r\n            So_No: editValues.Pre_Id || '',\r\n            So_Date: editValues.Pre_Date ? ISOString(editValues.Pre_Date) : '',\r\n            Retailer_Id: editValues.Custome_Id || '',\r\n            Retailer_Name: retailerObj?.Retailer_Name || '',\r\n            Broker_Id: editValues.Broker_Id || '',\r\n            Broker_Name: editValues.Broker_Name || '',\r\n            Transporter_Id: editValues.Transporter_Id || '',\r\n            Transporter_Name: editValues.Transporter_Name || '',\r\n            TrasnportType: editValues.TrasnportType || 2,\r\n            Voucher_Type: editValues.baseData || 0,\r\n            Status: editValues.Status || '',\r\n            isConverted: editValues.isConverted || 0,\r\n            Total_Invoice_value: editValues.Total_Invoice_value || 0,\r\n        }));\r\n\r\n        setInvoiceProduct(\r\n            ProductList.map(item => ({\r\n                ...salesInvoiceDetailsInfo,\r\n                Item_Id: item.Item_Id || '',\r\n                Item_Name: item.Product_Name || '',\r\n                HSN_Code: item.HSN_Code || '',\r\n                Bill_Qty: item.Bill_Qty || 0,\r\n                Act_Qty: item.Bill_Qty || 0,\r\n                Item_Rate: item.Item_Rate || 0,\r\n                Amount: item.Amount || 0,\r\n                GoDown_Id: item.Godown_Id || '',\r\n                Tax_Rate: item.Tax_Rate || 0,\r\n                Cgst: item.Cgst || 0,\r\n                UOM:item.Unit_Id || 0,\r\n                Units:item.Unit_Name || '',\r\n                Sgst: item.Sgst || 0,\r\n                Igst: item.Igst || 0,\r\n                Cgst_Amo: item.Cgst_Amo || 0,\r\n                Sgst_Amo: item.Sgst_Amo || 0,\r\n                Igst_Amo: item.Igst_Amo || 0,\r\n                Taxable_Amount: item.Taxable_Amount || 0,\r\n                Final_Amo: item.Final_Amo || 0,\r\n            }))\r\n        );\r\n\r\n        let staffTemp = [];\r\n\r\n        const getCategoryIdFromName = (categoryName) => {\r\n            const category = baseData.staffType.find(cat => \r\n                stringCompare(cat.Cost_Category, categoryName)\r\n            );\r\n            return category?.Cost_Category_Id || '';\r\n        };\r\n\r\n        if (Broker_Id && !isEqualNumber(Broker_Id, 0)) {\r\n            const brokerStaff = baseData.staff.find(s => \r\n                isEqualNumber(s.Cost_Center_Id, Broker_Id)\r\n            );\r\n            const brokerCategoryId = getCategoryIdFromName('Broker');\r\n\r\n            if (brokerStaff) {\r\n                staffTemp.push({\r\n                    Involved_Emp_Id: brokerStaff.Cost_Center_Id,\r\n                    EmpName: brokerStaff.Cost_Center_Name,\r\n                    Cost_Center_Type_Id: brokerCategoryId,\r\n                    Cost_Center_Type: 'Broker',\r\n                });\r\n            }\r\n        }\r\n\r\n        if (Transporter_Id && !isEqualNumber(Transporter_Id, 0)) {\r\n            const transporterStaff = baseData.staff.find(s => \r\n                isEqualNumber(s.Cost_Center_Id, Transporter_Id)\r\n            );\r\n            const transporterCategoryId = getCategoryIdFromName('Transport');\r\n\r\n            if (transporterStaff) {\r\n                staffTemp.push({\r\n                    Involved_Emp_Id: transporterStaff.Cost_Center_Id,\r\n                    EmpName: transporterStaff.Cost_Center_Name,\r\n                    Cost_Center_Type_Id: transporterCategoryId,\r\n                    Cost_Center_Type: 'Transporter',\r\n                });\r\n            }\r\n        }\r\n\r\n        toArray(Staffs_Array).forEach((item, idx) => {\r\n            const staffObj = baseData.staff.find(s =>\r\n                isEqualNumber(s.Cost_Center_Id, item.Staff_Id)\r\n            );\r\n            \r\n            let categoryId = item.Cost_Cat_Id;\r\n            let categoryName = item.Cost_Cat_Name;\r\n            \r\n            if (!categoryId && categoryName) {\r\n                categoryId = getCategoryIdFromName(categoryName);\r\n            }\r\n\r\n            if (staffObj) {\r\n                staffTemp.push({\r\n                    Involved_Emp_Id: staffObj.Cost_Center_Id,\r\n                    EmpName: staffObj.Cost_Center_Name,\r\n                    Cost_Center_Type_Id: categoryId || '',\r\n                    Cost_Center_Type: categoryName || '',\r\n                });\r\n            }\r\n        });\r\n\r\n      \r\n        setStaffArray(staffTemp);\r\n\r\n    \r\n    \r\n    }\r\n}, [editValues, baseData.staff, baseData.staffType, baseData.retailers]);\r\n      useEffect(() => {\r\n           setInvoiceExpences(pre => {\r\n               const exist = [...pre];\r\n   \r\n               return exist.map(item => {\r\n                   const\r\n                       Igst = IS_IGST ? toNumber(item?.Igst) : 0,\r\n                       Cgst = !IS_IGST ? toNumber(item?.Cgst) : 0,\r\n                       Sgst = !IS_IGST ? toNumber(item?.Sgst) : 0,\r\n                       Expence_Value = toNumber(item?.Expence_Value),\r\n                       taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n   \r\n                   const taxAmount = calculateGSTDetails(Expence_Value, taxPercentage, taxType);\r\n   \r\n                   return {\r\n                       ...item,\r\n                       Cgst, Sgst, Igst,\r\n                       Expence_Value,\r\n                       Cgst_Amo: Cgst > 0 ? taxAmount.cgst_amount : 0,\r\n                       Sgst_Amo: Sgst > 0 ? taxAmount.sgst_amount : 0,\r\n                       Igst_Amo: Igst > 0 ? taxAmount.igst_amount : 0,\r\n                   }\r\n               })\r\n           })\r\n       }, [\r\n           baseData.expence,\r\n           IS_IGST,\r\n           taxType,\r\n       ])\r\nconst saveSalesInvoice = () => {\r\n    if (loadingOn) loadingOn();\r\n\r\n    const staff_Involved_List = staffArray.map(staff => ({\r\n        Involved_Emp_Id: staff.Involved_Emp_Id,\r\n        Cost_Center_Type_Id: staff.Cost_Center_Type_Id\r\n    }));\r\n     console.log(\"invoiceinfo\",invoiceInfo)\r\n\r\n    fetchLink({\r\n        address: `sales/salesOrderSalesInvoice`,\r\n        // method: checkIsNumber(invoiceInfo?.Do_Id) ? 'PUT' : 'POST',\r\n        method:'POST',\r\n        bodyData: {\r\n            ...invoiceInfo,\r\n            Pre_Id:invoiceInfo.Do_Id,\r\n            Product_Array: invoiceProducts,\r\n            staff_Involved_List: staff_Involved_List, \r\n            Expence_Array: invoiceExpences,\r\n            transactionType:'both'\r\n        }\r\n    }).then(data => {\r\n        if (data.success) {\r\n            clearValues();\r\n            toast.success(data.message);\r\n            onClose(true);\r\n        } else {\r\n            toast.warn(data.message)\r\n        }\r\n    }).catch(e => console.error(e)).finally(() => {\r\n        if (loadingOff) loadingOff();\r\n    })\r\n}\r\n\r\n    if (!open) return null;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={() => onClose(false)} maxWidth=\"xl\" fullWidth>\r\n            <div style={{ maxHeight: '90vh', overflow: 'auto' }}>\r\n                \r\n                <AddItemToSaleOrderCart\r\n                    orderProducts={invoiceProducts}\r\n                    setOrderProducts={setInvoiceProduct}\r\n                    open={dialog.addProductDialog}\r\n                    onClose={() => {\r\n                        setDialog(pre => ({ ...pre, addProductDialog: false }))\r\n                        setSelectedProductToEdit(null);\r\n                    }}\r\n                    products={baseData.products}\r\n                    brands={baseData.brand}\r\n                    uom={baseData.uom}\r\n                    godowns={baseData.godown}\r\n                    GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                    IS_IGST={IS_IGST}\r\n                    editValues={selectedProductToEdit}\r\n                    initialValue={{ ...salesInvoiceDetailsInfo, Pre_Id: invoiceInfo.So_No }}\r\n                    stockInGodown={baseData.stockInGodown}\r\n                />\r\n\r\n                <Card>\r\n                    <div className='d-flex flex-wrap align-items-center border-bottom py-2 px-3'>\r\n                        <span className=\"flex-grow-1 fa-16 fw-bold\">Sales Invoice</span>\r\n                        <span>\r\n                            <IconButton onClick={() => onClose(false)}>\r\n                                <Close />\r\n                            </IconButton>\r\n                            <Button onClick={() => saveSalesInvoice()} variant=\"contained\">Submit</Button>\r\n                        </span>\r\n                    </div>\r\n                    <CardContent>\r\n                        <div className=\"row p-0\">\r\n                           \r\n                            <div className=\"col-xxl-3 col-lg-4 col-md-5 p-2\">\r\n                                <div className=\"border p-2\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                    <InvolvedStaffs\r\n                                        StaffArray={staffArray}\r\n                                        setStaffArray={handleStaffArrayChange}\r\n                                        costCenter={baseData.staff}\r\n                                        costCategory={baseData.staffType}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                 \r\n                            <div className=\"col-xxl-9 col-lg-8 col-md-7 py-2 px-0\">\r\n                                <div className=\"border px-3 py-1\" style={{ minHeight: '30vh', height: '100%' }}>\r\n                                    <ManageSalesInvoiceGeneralInfo\r\n                                        invoiceInfo={invoiceInfo}\r\n                                        setInvoiceInfo={setInvoiceInfo}\r\n                                        retailers={baseData.retailers}\r\n                                        branches={baseData.branch}\r\n                                        voucherType={baseData.voucherType}\r\n                                        stockItemLedgerName={baseData.stockItemLedgerName}\r\n                                        onChangeRetailer={() => {\r\n                                            setInvoiceProduct([]);\r\n                                            setInvoiceExpences([]);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                     \r\n                        <FilterableTable\r\n                            title=\"Items\"\r\n                            headerFontSizePx={13}\r\n                            bodyFontSizePx={13}\r\n                            EnableSerialNumber\r\n                            disablePagination\r\n                            ButtonArea={\r\n                                <>\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            setSelectedProductToEdit(null);\r\n                                            setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                        }}\r\n                                        sx={{ ml: 1 }}\r\n                                        variant='outlined'\r\n                                        type=\"button\"\r\n                                        startIcon={<Add />}\r\n                                        disabled={\r\n                                            !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                            || (invoiceProducts.length > 0\r\n                                                && checkIsNumber(invoiceInfo.So_No))\r\n                                        }\r\n                                    >Add Product</Button>\r\n\r\n                                    <AddProductsInSalesInvoice\r\n                                        loadingOn={loadingOn}\r\n                                        loadingOff={loadingOff}\r\n                                        open={dialog.importFromSaleOrder}\r\n                                        onClose={() => setDialog(pre => ({ ...pre, importFromSaleOrder: false }))}\r\n                                        retailer={invoiceInfo?.Retailer_Id}\r\n                                        selectedItems={invoiceProducts}\r\n                                        setSelectedItems={setInvoiceProduct}\r\n                                        staffArray={staffArray}\r\n                                        setStaffArray={setStaffArray}\r\n                                        products={baseData.products}\r\n                                        GST_Inclusive={invoiceInfo.GST_Inclusive}\r\n                                        IS_IGST={IS_IGST}\r\n                                        invoiceInfo={invoiceInfo}\r\n                                        setInvoiceInfo={setInvoiceInfo}\r\n                                        godowns={baseData.godown}\r\n                                        stockInGodown={baseData.stockInGodown}\r\n                                    >\r\n                                        {/* <Button\r\n                                            onClick={() => setDialog(pre => ({ ...pre, importFromSaleOrder: true }))}\r\n                                            disabled={\r\n                                                !checkIsNumber(invoiceInfo.Retailer_Id)\r\n                                                || (\r\n                                                    invoiceProducts.length > 0\r\n                                                    && !checkIsNumber(invoiceInfo.So_No)\r\n                                                )\r\n                                            }\r\n                                            sx={{ ml: 1 }}\r\n                                            type=\"button\"\r\n                                            variant='outlined'\r\n                                            startIcon={<ReceiptLong />}\r\n                                        >\r\n                                            Choose Sale Order</Button> */}\r\n                                    </AddProductsInSalesInvoice>\r\n                                </>\r\n                            }\r\n                            dataArray={[\r\n                                ...invoiceProducts,\r\n                                ...Array.from({\r\n                                    length: dummyRowCount > 0 ? dummyRowCount : 0\r\n                                }).map(d => salesInvoiceDetailsInfo)\r\n                            ]}\r\n                            columns={[\r\n                                createCol('Item_Name', 'string'),\r\n                                createCol('HSN_Code', 'string'),\r\n                                createCol('Bill_Qty', 'number'),\r\n                                createCol('Act_Qty', 'number'),\r\n                                createCol('Item_Rate', 'number'),\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Tax',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const { Cgst = 0, Sgst = 0, Igst = 0, Cgst_Amo = 0, Sgst_Amo = 0, Igst_Amo = 0 } = row;\r\n                                        const taxPercentage = IS_IGST ? Igst : Addition(Cgst, Sgst);\r\n                                        const taxAmount = IS_IGST ? Igst_Amo : Addition(Cgst_Amo, Sgst_Amo);\r\n\r\n                                        return !checkIsNumber(row?.Item_Id) ? '' : `${taxAmount} - (${taxPercentage} %)`\r\n                                    }\r\n                                },\r\n                                {\r\n                                    isVisible: 1,\r\n                                    ColumnHeader: 'Godown',\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => baseData.godown.find(\r\n                                        godown => isEqualNumber(godown.Godown_Id, row?.GoDown_Id)\r\n                                    )?.Godown_Name ?? ''\r\n                                },\r\n                                createCol('Amount', 'number'),\r\n                                {\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        return (\r\n                                            <>\r\n                                                <IconButton\r\n                                                    onClick={() => {\r\n                                                        setSelectedProductToEdit(row);\r\n                                                        setDialog(pre => ({ ...pre, addProductDialog: true }));\r\n                                                    }}\r\n                                                    size=\"small\"\r\n                                                    type=\"button\"\r\n                                                    disabled={!checkIsNumber(row?.Item_Id)}\r\n                                                >\r\n                                                    <Edit />\r\n                                                </IconButton>\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    type=\"button\"\r\n                                                    onClick={() => setInvoiceProduct(\r\n                                                        pre => pre.filter(obj => !isEqualNumber(obj.Item_Id, row.Item_Id))\r\n                                                    )}\r\n                                                    color='error'\r\n                                                    disabled={!checkIsNumber(row?.Item_Id)}\r\n                                                >\r\n                                                    <Delete />\r\n                                                </IconButton>\r\n                                            </>\r\n                                        )\r\n                                    },\r\n                                    ColumnHeader: 'Action',\r\n                                    isVisible: 1,\r\n                                },\r\n                            ]}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <ExpencesOfSalesInvoice\r\n                            invoiceExpences={invoiceExpences}\r\n                            setInvoiceExpences={setInvoiceExpences}\r\n                            expenceMaster={baseData.expence}\r\n                            IS_IGST={IS_IGST}\r\n                            taxType={taxType}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                       <SalesInvoiceTaxDetails\r\n                        invoiceProducts={invoiceProducts}\r\n                        invoiceExpences={invoiceExpences}\r\n                        isNotTaxableBill={isNotTaxableBill}\r\n                        isInclusive={isInclusive}\r\n                        IS_IGST={IS_IGST}\r\n                        products={baseData.products}\r\n                        invoiceInfo={invoiceInfo}\r\n                        setInvoiceInfo={setInvoiceInfo}\r\n                    />\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport default DirectSaleInvoiceModal;\r\n\r\n\r\n\r\nconst InvolvedStaffs = ({ StaffArray = [], setStaffArray, costCenter = [], costCategory = [] }) => {\r\n\r\n    // Function to get category ID from category name\r\n    const getCategoryIdFromName = (categoryName) => {\r\n        const category = costCategory.find(cat => \r\n            stringCompare(cat.Cost_Category, categoryName)\r\n        );\r\n        return category?.Cost_Category_Id || '';\r\n    };\r\n\r\n    // Function to get category name from ID\r\n    const getCategoryNameFromId = (categoryId) => {\r\n        const category = costCategory.find(cat => \r\n            isEqualNumber(cat.Cost_Category_Id, categoryId)\r\n        );\r\n        return category?.Cost_Category || '';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex align-items-center flex-wrap mb-2 border-bottom pb-2\">\r\n                <h6 className=\"flex-grow-1 m-0\">Staff Involved</h6>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={() => setStaffArray(pre => [...pre, { \r\n                        Involved_Emp_Id: '',\r\n                        EmpName: '',\r\n                        Cost_Center_Type_Id: '',\r\n                        Cost_Center_Type: '' \r\n                    }])}\r\n                >Add</Button>\r\n            </div>\r\n\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"fa-13\">Sno</th>\r\n                        <th className=\"fa-13\">Staff Name</th>\r\n                        <th className=\"fa-13\">Category</th>\r\n                        <th className=\"fa-13\">#</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {toArray(StaffArray).map((row, index) => {\r\n                        // Convert category name to ID if needed (for existing data)\r\n                        const actualCategoryId = row.Cost_Center_Type_Id || getCategoryIdFromName(row.Cost_Center_Type);\r\n                        \r\n                        return (\r\n                            <tr key={index}>\r\n                                <td className='fa-13 vctr text-center'>{index + 1}</td>\r\n                                <td className='fa-13 w-100 p-0'>\r\n                                    <Select\r\n                                        value={{\r\n                                            value: row.Involved_Emp_Id,\r\n                                            label: row.EmpName || 'Select Staff'\r\n                                        }}\r\n                                        onChange={e => {\r\n                                            const selectedStaff = costCenter.find(c => \r\n                                                isEqualNumber(c.Cost_Center_Id, e.value)\r\n                                            );\r\n                                            const newArray = StaffArray.map((staff, i) => \r\n                                                i === index ? { \r\n                                                    ...staff, \r\n                                                    Involved_Emp_Id: Number(e.value),\r\n                                                    EmpName: e.label\r\n                                                } : staff\r\n                                            );\r\n                                            setStaffArray(newArray);\r\n                                        }}\r\n                                        options={costCenter\r\n                                            .filter(staff => \r\n                                                !StaffArray.some((st, i) => \r\n                                                    i !== index && isEqualNumber(st.Involved_Emp_Id, staff.Cost_Center_Id)\r\n                                                )\r\n                                            )\r\n                                            .map(st => ({\r\n                                                value: st.Cost_Center_Id,\r\n                                                label: st.Cost_Center_Name\r\n                                            }))\r\n                                        }\r\n                                        styles={customSelectStyles}\r\n                                        isSearchable={true}\r\n                                        placeholder=\"Select Staff\"\r\n                                    />\r\n                                </td>\r\n                                <td className='fa-13 vctr p-0' style={{ maxWidth: '130px', minWidth: '100px' }}>\r\n                                    <select\r\n                                        value={actualCategoryId}\r\n                                        onChange={e => {\r\n                                            const selectedCategory = costCategory.find(c => \r\n                                                isEqualNumber(c.Cost_Category_Id, e.target.value)\r\n                                            );\r\n                                            const newArray = StaffArray.map((staff, i) => \r\n                                                i === index ? { \r\n                                                    ...staff, \r\n                                                    Cost_Center_Type_Id: e.target.value,\r\n                                                    Cost_Center_Type: selectedCategory?.Cost_Category || ''\r\n                                                } : staff\r\n                                            );\r\n                                            setStaffArray(newArray);\r\n                                        }}\r\n                                        className=\"cus-inpt p-2 border-0\"\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {costCategory.map((st, sti) =>\r\n                                            <option value={st.Cost_Category_Id} key={sti}>\r\n                                                {st.Cost_Category}\r\n                                            </option>\r\n                                        )}\r\n                                    </select>\r\n                                </td>\r\n                                <td className='fa-13 vctr p-0'>\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            const newArray = StaffArray.filter((_, i) => i !== index);\r\n                                            setStaffArray(newArray);\r\n                                        }}\r\n                                        size='small'\r\n                                    >\r\n                                        <Delete color='error' />\r\n                                    </IconButton>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport  {InvolvedStaffs}","import { useEffect, useMemo, useState } from \"react\";\r\nimport { fetchLink } from \"../../../Components/fetchComponent\";\r\nimport { isGraterNumber } from \"../../../Components/functions\";\r\nimport FilterableTable, {\r\n    createCol,\r\n} from \"../../../Components/filterableTable2\";\r\nimport { Card, IconButton, Button } from \"@mui/material\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AddBox, Edit } from \"@mui/icons-material\";\r\nimport { convertedStatus } from \"../convertedStatus\";\r\nimport ArrowOutwardIcon from '@mui/icons-material/ArrowOutward';\r\n// import directSaleInvoiceFromPos from \"../SalesInvoice/directSaleInvoiceFromPos\";\r\nimport DirectSaleInvoiceFromPos from \"../SalesInvoice/directSaleInvoiceFromPos\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nconst OrderList = ({ loadingOn, loadingOff }) => {\r\n    const [filters, setFilters] = useState({\r\n        FromDate: new Date().toISOString().split(\"T\")[0],\r\n        ToDate: new Date().toISOString().split(\"T\")[0],\r\n        refresh: false,\r\n        search: '',\r\n    });\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [load, setLoad] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [modalOpen, setModalOpen] = useState(false); // State for modal visibility\r\n    const [selectedOrder, setSelectedOrder] = useState(null); // State for selected order data\r\n const navigate = useNavigate();\r\n\r\n    const handleOpenModal = (row) => {\r\n        setSelectedOrder(row); // Set the selected order data\r\n        setModalOpen(true);   // Open the modal\r\n    };\r\n\r\n    const handleCloseModal = (success) => {\r\n        setModalOpen(false);\r\n        if (success) {\r\n            // Optionally refresh the data if the modal was closed after a successful action\r\n            setLoad(true);\r\n        }\r\n    };\r\nuseEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            if (loadingOn) loadingOn();\r\n            \r\n            try {\r\n                const response = await fetchLink({\r\n                    address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n                });\r\n                \r\n                if (response.success) {\r\n                    setData(response.data);\r\n                    // setTallyLOL(response.data);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            } finally {\r\n                setIsLoading(false);\r\n                if (loadingOff) loadingOff();\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [filters.FromDate, filters.ToDate, filters.refresh]);\r\n\r\n    // useEffect(() => {\r\n    //     if (!search) return;\r\n    //     if (loadingOn) loadingOn();\r\n    //     setLoad(true);\r\n    //     fetchLink({\r\n    //         address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n    //     })\r\n    //         .then((data) => {\r\n    //             if (data.success) {\r\n    //                 setData(data.data);\r\n    //                 setTallyLOL(data.data); // Changed from tallyLOL to data.data\r\n    //             }\r\n    //         })\r\n    //         .catch((e) => {\r\n    //             console.error(e);\r\n    //         })\r\n    //         .finally(() => {\r\n    //             setLoad(false);\r\n    //             setSearch(false);\r\n    //             if (loadingOff) loadingOff();\r\n    //         });\r\n    // }, [filters.refresh, search, filters.FromDate, filters.ToDate]);\r\n\r\n    const filterableText = (text) =>\r\n        String(text)\r\n            .toLowerCase()\r\n            .replace(/\\s+/g, \" \")\r\n            .replace(/[^a-z0-9]/gi, '')\r\n            .trim();\r\n\r\n    const FilteredData = useMemo(() => {\r\n        const search = filterableText(filters.search || \"\");\r\n\r\n        return data.filter((obj) => {\r\n\r\n            let values = [];\r\n\r\n            for (let key in obj) {\r\n                if (key !== \"ProductList\") {\r\n                    values.push(obj[key]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(obj.ProductList)) {\r\n                obj.ProductList.forEach(item => {\r\n                    values.push(...Object.values(item));\r\n                });\r\n            }\r\n\r\n\r\n            const combined = filterableText(values.join(\" \"));\r\n            return combined.includes(search);\r\n        });\r\n    }, [filters.search, data]);\r\n\r\n\r\n\r\n\r\n\r\n    const ExpendableComponent = ({ row }) => {\r\n        return (\r\n            <>\r\n                {row?.ProductList?.length > 0 && (\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"border p-2 bg-light\">S_No</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Id</th>\r\n                                <th className=\"border p-2 bg-light\">Product_Name</th>\r\n                                <th className=\"border p-2 bg-light\">Bill_Qty</th>\r\n                                <th className=\"border p-2 bg-light\">Item_Rate</th>\r\n                                <th className=\"border p-2 bg-light\">Unit_Id</th>\r\n                                <th className=\"border p-2 bg-light\">Unit_Name</th>\r\n                                <th className=\"border p-2 bg-light\">Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {row?.ProductList?.map((data, index) => (\r\n                                <tr key={index}>\r\n                                    <td className=\"border p-2\">{data?.S_No}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Id}</td>\r\n                                    <td className=\"border p-2\">{data?.Product_Name}</td>\r\n                                    <td className=\"border p-2\">{data?.Bill_Qty}</td>\r\n                                    <td className=\"border p-2\">{data?.Item_Rate}</td>\r\n\r\n                                    <td className=\"border p-2\">{data?.Unit_Id}</td>\r\n                                    <td className=\"border p-2\">{data?.Unit_Name}</td>\r\n\r\n                                    <td className=\"border p-2\">{data?.Amount}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n\r\n\r\n    const posData=(datas)=>{\r\n\r\n    }\r\n\r\nconst postSaleOrder = (data) => {\r\n    loadingOn();\r\n\r\n    // Product processing remains the same\r\n    const extractWeightFromName = (name) => {\r\n        const match = name?.match(/(\\d+)\\s?kg/i);\r\n        return match ? parseInt(match[1]) : 1;\r\n    };\r\n\r\n    const validProducts = Array.isArray(data.ProductList)\r\n        ? data.ProductList\r\n            .filter(p => isGraterNumber(p?.Bill_Qty, 0))\r\n            .map(p => {\r\n                const weight = extractWeightFromName(p?.Product_Name);\r\n                return {\r\n                    ...p,\r\n                    Pre_Id: data?.Pre_Id,\r\n                    Bill_Qty: weight * p?.Bill_Qty,\r\n                    Total_Qty: p?.Bill_Qty\r\n                };\r\n            })\r\n        : [];\r\n\r\n    const transformStaffData = (orderData) => {\r\n        const staffs = [];\r\n        \r\n        if (orderData.Broker_Id && orderData.Broker_Id !== 0) {\r\n            staffs.push({\r\n                Id: \"\",\r\n                So_Id: \"\",\r\n                Emp_Id: orderData.Broker_Id,\r\n                Emp_Type_Id: orderData.Broker_Type || 0 \r\n            });\r\n        }\r\n        \r\n        if (orderData.Transporter_Id && orderData.Transporter_Id !== 0) {\r\n            staffs.push({\r\n                Id: \"\",\r\n                Do_Id: \"\",\r\n                Emp_Id: orderData.Transporter_Id,\r\n                Emp_Type_Id: orderData.TrasnportType || 0  \r\n            });\r\n        }\r\n        \r\n        return staffs.filter(staff => staff.Emp_Type_Id !== 0);  \r\n    };\r\n\r\n    const staffsArray = transformStaffData(data);\r\n\r\n    const payload = {\r\n        ...data,\r\n        Product_Array: validProducts,\r\n        Retailer_Id: data?.Custome_Id,\r\n        Staffs_Array: staffsArray\r\n    };\r\n\r\n\r\n\r\n    fetchLink({\r\n        address: `sales/presaleOrder/saleOrderCreationWithPso`,\r\n        method: data?.isConverted !== 0 ? 'PUT' : 'POST',\r\n        bodyData: payload\r\n    })\r\n    .then((response) => {\r\n        if (response.success) {\r\n            toast.success(response?.message);\r\n            setLoad(true);\r\n        } else {\r\n            toast.error(response?.message);\r\n        }\r\n    })\r\n    .catch(() => {\r\n        toast.error(\"Something went wrong!\");\r\n    })\r\n    .finally(() => loadingOff());\r\n};\r\n\r\n    useEffect(() => {\r\n        if (load) {\r\n            fetchLink({\r\n                address: `sales/presaleOrder/getList?FromDate=${filters.FromDate}&ToDate=${filters.ToDate}`,\r\n            })\r\n                .then((data) => {\r\n                    if (data.success) {\r\n                        setData(data.data);\r\n                        // setTallyLOL(data.data);\r\n                    }\r\n                })\r\n                .catch((e) => console.error(e))\r\n                .finally(() => setLoad(false));\r\n        }\r\n    }, [load, filters.FromDate, filters.ToDate]);\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n\r\n                <div className=\"px-3 py-2 fa-14\">\r\n                    <div className=\"d-flex flex-wrap align-items-center\">\r\n                        <td style={{ verticalAlign: \"middle\" }}>From</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.FromDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, FromDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n                        <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={filters.ToDate}\r\n                                onChange={(e) =>\r\n                                    setFilters({ ...filters, ToDate: e.target.value })\r\n                                }\r\n                                className=\"cus-inpt\"\r\n                            />\r\n                        </td>\r\n                        \r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setFilters((prev) => {\r\n                                    const updatedFilters = {\r\n                                        ...prev,\r\n                                        viewNotSynced: !prev.viewNotSynced,\r\n                                    };\r\n\r\n                                    return updatedFilters;\r\n                                });\r\n                            }}\r\n                        >\r\n\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    filters.search ? (\r\n                        <FilterableTable\r\n                            title={\"Pre-Sale Order List\"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={FilteredData}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                   createCol(\"Broker_Name\", \"string\", \"Broker_Name\"),\r\n                                   createCol(\"Transporter_Name\", \"string\", \"Transporter_Name\"),\r\n\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                                {\r\n                                Field_Name: \"Actions\",\r\n                                ColumnHeader: \"Actions\",\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                                <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                    {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                                </IconButton>\r\n                                            </td>\r\n                                            <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                                <IconButton size=\"small\" onClick={() => handleOpenModal(row)}>\r\n                                                    <ArrowOutwardIcon />\r\n                                                </IconButton>\r\n                                            </td>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            }\r\n\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <FilterableTable\r\n                            title={\"Pre-Sale Order List\"}\r\n                            bodyFontSizePx={11}\r\n                            headerFontSizePx={11}\r\n                            dataArray={data}\r\n                            columns={[\r\n                                createCol(\"Pre_Id\", \"string\", \"Pre_Id\"),\r\n                                {\r\n                                    Field_Name: \"Pre_Date\",\r\n                                    ColumnHeader: \"Pre_Date\",\r\n                                    isVisible: 1,\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => (\r\n                                        <td className=\"fa-12\" style={{ minWidth: \"80px\" }}>\r\n                                            {row?.Pre_Date.split(\"T\")[0]}\r\n                                        </td>\r\n                                    ),\r\n                                },\r\n                                createCol(\"Retailer_Name\", \"string\", \"Retailer_Name\"),\r\n                                createCol(\"Broker_Name\", \"string\", \"Broker_Name\"),\r\n                                createCol(\"Transporter_Name\", \"string\", \"Transporter_Name\"),\r\n                                createCol(\"Total_Invoice_value\", \"string\", \"Total_Invoice_value\"),\r\n                                {\r\n                                    ColumnHeader: \"Status\",\r\n                                    isVisible: 1,\r\n                                    align: \"center\",\r\n                                    isCustomCell: true,\r\n                                    Cell: ({ row }) => {\r\n                                        const convert = convertedStatus.find(\r\n                                            (status) => status.id === Number(row?.isConverted)\r\n                                        );\r\n                                        return (\r\n                                            <span\r\n                                                className={\r\n                                                    \"py-0 fw-bold px-2 rounded-4 fa-12 \" + convert?.color ??\r\n                                                    \"bg-secondary text-white\"\r\n                                                }\r\n                                            >\r\n                                                {convert?.label ?? \"Undefined\"}\r\n                                            </span>\r\n                                        );\r\n                                    },\r\n                                },\r\n                           {\r\n                                Field_Name: \"Actions\",\r\n                                ColumnHeader: \"Actions\",\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => {\r\n                                    return (\r\n                                        <>\r\n                                            <td className=\"fa-12\" style={{ minWidth: \"50px\" }}>\r\n                                                <IconButton size=\"small\" onClick={() => postSaleOrder(row)}>\r\n                                                    {row?.isConverted === 0 ? <AddBox /> : <Edit />}\r\n                                                </IconButton>\r\n                                            </td>\r\n                                           { row?.isConverted !=2 && (\r\n<td className=\"fa-12\" style={{ minWidth: \"50px\" }}>\r\n                                                <IconButton size=\"small\" onClick={() => handleOpenModal(row)}>\r\n                                                    <ArrowOutwardIcon />\r\n                                                </IconButton>\r\n                                               \r\n                                            </td>\r\n                                           )\r\n\r\n\r\n                                           } \r\n                                        </>\r\n                                    )\r\n                                }\r\n                            }\r\n                            ]}\r\n                            isExpendable={true}\r\n                            tableMaxHeight={550}\r\n                            expandableComp={ExpendableComponent}\r\n\r\n                            ButtonArea={\r\n                                <>\r\n\r\n                                    <Button\r\n                                        sx={{ ml: 1 }}\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            setFilters((prev) => ({\r\n                                                ...prev,\r\n                                                search: searchInput,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        className=\"cus-inpt p-1 w-auto\"\r\n                                        value={searchInput}\r\n                                        onChange={(e) => setSearchInput(e.target.value)}\r\n                                        placeholder=\"Search..\"\r\n                                    />\r\n                                </>\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            </Card>\r\n\r\n               <DirectSaleInvoiceFromPos\r\n                open={modalOpen}\r\n                onClose={handleCloseModal}\r\n                editValues={selectedOrder} \r\n                loadingOn={loadingOn}\r\n                loadingOff={loadingOff}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderList;\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["convertedStatus","id","label","color","dbStatus","findProductDetails","_arr$find","productid","arguments","length","undefined","find","obj","isEqualNumber","Product_Id","_ref","invoiceProducts","invoiceExpences","isNotTaxableBill","isInclusive","IS_IGST","products","invoiceInfo","setInvoiceInfo","invExpencesTotal","useMemo","toArray","reduce","acc","exp","Addition","Expence_Value","Total_Invoice_value","invValue","item","Amount","RoundNumber","product","Item_Id","gstPercentage","Igst_P","Gst_P","calculateGSTDetails","with_tax","taxSplitUp","totalTaxable","totalTax","forEach","taxInfo","parseFloat","without_tax","tax_amount","totalWithTax","totalWithExpenses","roundedTotal","Math","round","roundOff","cgst","sgst","igst","invoiceTotal","Round_off","pre","_objectSpread","_jsx","_Fragment","children","className","_jsxs","rowSpan","numberToWords","parseInt","value","onInput","onlynumAndNegative","onChange","e","target","NumberFormat","createSvgIcon","d","setInvoiceExpences","expenceMaster","taxType","Card","Button","variant","type","onClick","addNewRow","prev","salesInvoiceExpencesInfo","Sno","map","o","i","style","fontSize","row","index","_expenceMaster$find","currentExpenseName","Id","Expense_Id","Expence_Name","minWidth","Select","handleSelectChange","selectedOption","selected","options","filter","some","inv","idx","styles","customSelectStyles","menuPortalTarget","document","body","isSearchable","placeholder","disabled","checkIsNumber","handleInputChange","field","updated","Cgst","toNumber","Sgst","Igst","expVal","taxPercentage","taxAmount","Cgst_Amo","cgst_amount","Sgst_Amo","sgst_amount","Igst_Amo","igst_amount","Division","IconButton","_","removeRow","size","Delete","colSpan","_toArray$find","retailers","voucherType","branches","onChangeRetailer","stockItemLedgerName","inputStyle","Retailer_Id","Retailer_Name","isDisabled","maxMenuHeight","Voucher_Type","v","Vocher_Type_Id","fil","Type","required","Do_Id","RequiredStar","Do_Date","Branch_Id","BranchId","BranchName","GST_Inclusive","Number","Stock_Item_Ledger_Name","Cancel_status","rows","Narration","Object","defineProperty","exports","enumerable","get","_utils","require","_interopRequireDefault","_createSvgIcon","_jsxRuntime","default","jsx","validator","reason","componentNameInError","Component","props","propName","componentName","location","propFullName","unstable_ClassNameGenerator","configure","generator","ClassNameGenerator","element","muiNames","_muiName","_element$type","React","indexOf","muiName","_payload","storage","getSessionUser","user","loadingOn","loadingOff","open","onClose","editValues","console","log","baseData","setBaseData","useState","branch","uom","staff","staffType","brand","godown","expence","stockInGodown","dialog","setDialog","addProductDialog","importFromSaleOrder","salesInvoiceGeneralInfo","setInvoiceProduct","staffArray","setStaffArray","selectedProductToEdit","setSelectedProductToEdit","dummyRowCount","useEffect","async","branchResponse","productsResponse","retailerResponse","voucherTypeResponse","uomResponse","staffResponse","staffCategory","godownLocationsResponse","expenceResponse","godownWiseStock","stockItemLedgerNameResponse","Promise","all","fetchLink","address","concat","Company_id","branchData","success","data","sort","a","b","String","localeCompare","productsData","Product_Name","retailersData","uomData","Units","staffData","Cost_Center_Name","staffCategoryData","Cost_Category","godownLocations","Godown_Name","expencesMaster","Account_Name","stockInGodowns","stock_item_name","getUniqueData","stringCompare","Acc_Id","error","fetchData","fromEntries","entries","_ref2","key","productMaster","isTaxable","Bill_Qty","Item_Rate","itemRateGst","gstInfo","cgstPer","cgst_per","igstPer","igst_per","base_amount","isValidObject","Array","isArray","ProductList","Staffs_Array","Broker_Id","Broker_Name","Expence_Array","Transporter_Id","Transporter_Name","retailerObj","expenceArray","Expenses","expenses","ExpenceList","expenceList","r","Custome_Id","_ref3","_item$key","Pos_Id","So_No","Pre_Id","So_Date","Pre_Date","ISOString","TrasnportType","Status","isConverted","salesInvoiceDetailsInfo","Item_Name","HSN_Code","Act_Qty","GoDown_Id","Godown_Id","Tax_Rate","UOM","Unit_Id","Unit_Name","Taxable_Amount","Final_Amo","staffTemp","getCategoryIdFromName","categoryName","category","cat","Cost_Category_Id","brokerStaff","s","Cost_Center_Id","brokerCategoryId","push","Involved_Emp_Id","EmpName","Cost_Center_Type_Id","Cost_Center_Type","transporterStaff","transporterCategoryId","staffObj","Staff_Id","categoryId","Cost_Cat_Id","Cost_Cat_Name","saveSalesInvoice","staff_Involved_List","method","bodyData","Product_Array","transactionType","then","toast","message","warn","catch","finally","Dialog","maxWidth","fullWidth","maxHeight","overflow","AddItemToSaleOrderCart","orderProducts","setOrderProducts","brands","godowns","initialValue","Close","CardContent","minHeight","height","InvolvedStaffs","StaffArray","updatedStaffArray","costCenter","costCategory","ManageSalesInvoiceGeneralInfo","FilterableTable","title","headerFontSizePx","bodyFontSizePx","EnableSerialNumber","disablePagination","ButtonArea","sx","ml","startIcon","Add","AddProductsInSalesInvoice","retailer","selectedItems","setSelectedItems","dataArray","from","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref4","_ref5","_baseData$godown$find","_baseData$godown$find2","_ref6","Edit","ExpencesOfSalesInvoice","SalesInvoiceTaxDetails","_ref7","actualCategoryId","c","newArray","st","selectedCategory","sti","filters","setFilters","FromDate","Date","toISOString","split","ToDate","refresh","search","searchInput","setSearchInput","setData","load","setLoad","isLoading","setIsLoading","modalOpen","setModalOpen","selectedOrder","setSelectedOrder","handleOpenModal","useNavigate","response","filterableText","text","toLowerCase","replace","trim","FilteredData","values","join","includes","ExpendableComponent","_row$ProductList","_row$ProductList2","S_No","postSaleOrder","validProducts","p","isGraterNumber","weight","name","match","extractWeightFromName","Total_Qty","staffsArray","orderData","staffs","So_Id","Emp_Id","Emp_Type_Id","Broker_Type","transformStaffData","payload","verticalAlign","viewNotSynced","Field_Name","align","_convert$label","convert","status","AddBox","ArrowOutwardIcon","isExpendable","tableMaxHeight","expandableComp","_ref8","_ref9","_convert$label2","_ref10","DirectSaleInvoiceFromPos"],"sourceRoot":""}