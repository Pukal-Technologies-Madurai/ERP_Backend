{"version":3,"file":"static/js/4145.bd94b783.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/utils/useSlot.js","../node_modules/@mui/icons-material/esm/Clear.js","../node_modules/@mui/icons-material/esm/ClearAll.js","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/ExpandMore.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","Components/tablecolumn.js","../node_modules/@mui/material/Box/boxClasses.js","../node_modules/@mui/material/Box/Box.js","../node_modules/@mui/system/esm/createBox.js","Pages/Sales/lrReport.jsx"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"elementType\", \"ownerState\", \"externalForwardedProps\", \"getSlotOwnerState\", \"internalForwardedProps\"],\n  _excluded2 = [\"component\", \"slots\", \"slotProps\"],\n  _excluded3 = [\"component\"];\nimport useForkRef from '@mui/utils/useForkRef';\nimport { appendOwnerState, resolveComponentProps, mergeSlotProps } from '@mui/base/utils';\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname, parameters) {\n  const {\n      className,\n      elementType: initialElementType,\n      ownerState,\n      externalForwardedProps,\n      getSlotOwnerState,\n      internalForwardedProps\n    } = parameters,\n    useSlotPropsParams = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const {\n      component: rootComponent,\n      slots = {\n        [name]: undefined\n      },\n      slotProps = {\n        [name]: undefined\n      }\n    } = externalForwardedProps,\n    other = _objectWithoutPropertiesLoose(externalForwardedProps, _excluded2);\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const _mergeSlotProps = mergeSlotProps(_extends({\n      className\n    }, useSlotPropsParams, {\n      externalForwardedProps: name === 'root' ? other : undefined,\n      externalSlotProps: resolvedComponentsProps\n    })),\n    {\n      props: {\n        component: slotComponent\n      },\n      internalRef\n    } = _mergeSlotProps,\n    mergedProps = _objectWithoutPropertiesLoose(_mergeSlotProps.props, _excluded3);\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, parameters.ref);\n  const slotOwnerState = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};\n  const finalOwnerState = _extends({}, ownerState, slotOwnerState);\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, _extends({}, name === 'root' && !rootComponent && !slots[name] && internalForwardedProps, name !== 'root' && !slots[name] && internalForwardedProps, mergedProps, LeafComponent && {\n    as: LeafComponent\n  }, {\n    ref\n  }), finalOwnerState);\n  Object.keys(slotOwnerState).forEach(propName => {\n    delete props[propName];\n  });\n  return [elementType, props];\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 13h14v-2H5zm-2 4h14v-2H3zM7 7v2h14V7z\"\n}), 'ClearAll');","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nimport THEME_ID from '../styles/identifier';\nimport boxClasses from './boxClasses';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  themeId: THEME_ID,\n  defaultTheme,\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport styleFunctionSx, { extendSxProp } from './styleFunctionSx';\nimport useTheme from './useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    themeId,\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName\n  } = options;\n  const BoxRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'\n  })(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n    const _extendSxProp = extendSxProp(inProps),\n      {\n        className,\n        component = 'div'\n      } = _extendSxProp,\n      other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded);\n    return /*#__PURE__*/_jsx(BoxRoot, _extends({\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: themeId ? theme[themeId] || theme : theme\n    }, other));\n  });\n  return Box;\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton,\r\n  Box, Typography, Accordion, AccordionSummary, AccordionDetails\r\n} from '@mui/material';\r\nimport FilterableTable, { createCol } from '../../Components/filterableTable2';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport {\r\n  Addition, getSessionFiltersByPageId, ISOString, NumberFormat, setSessionFilters,\r\n  toArray, toNumber\r\n} from \"../../Components/functions\";\r\nimport {\r\n  ClearAll, FilterAlt, Search, ExpandMore, Edit, Clear\r\n} from \"@mui/icons-material\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst StockDetailsExpandable = ({ row }) => {\r\n    return (\r\n        <Box sx={{ padding: 2, backgroundColor: '#fafafa', border: '1px solid #e0e0e0' }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ color: '#333', fontSize: '1.1rem', mb: 2 }}>\r\n                Trip Details - {row.Trip_No}\r\n            </Typography>\r\n            \r\n            {row.TripDetails && row.TripDetails.length > 0 ? (\r\n                <Box sx={{ width: '100%' }}>\r\n                    {row.TripDetails.map((tripDetail, tripIndex) => (\r\n                        <Accordion key={tripDetail.TripDetailId || tripIndex} defaultExpanded={tripIndex === 0}>\r\n                            <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\r\n                                    Invoice: {tripDetail.Do_Inv_No} | \r\n                                    Date: {tripDetail.Do_Date} | \r\n                                    Value: {NumberFormat(tripDetail.Total_Invoice_value)} | \r\n                                    Retailer: {tripDetail.Retailer_Name}\r\n                                </Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                {/* Stock Details for this TripDetail */}\r\n                                {tripDetail.StockDetails && tripDetail.StockDetails.length > 0 ? (\r\n                                    <Box sx={{ overflowX: 'auto', mt: 1 }}>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n                                            Stock Items ({tripDetail.StockDetails.length})\r\n                                        </Typography>\r\n                                        <table className=\"table\" style={{ width: '100%', minWidth: '500px' }}>\r\n                                            <thead>\r\n                                                <tr style={{ backgroundColor: '#e3f2fd' }}>\r\n                                                    <th style={{ padding: '8px', border: '1px solid #ddd' }}>S.No</th>\r\n                                                    <th style={{ padding: '8px', border: '1px solid #ddd' }}>Product Name</th>\r\n                                                    <th style={{ padding: '8px', border: '1px solid #ddd' }}>Amount</th>\r\n                                                    <th style={{ padding: '8px', border: '1px solid #ddd' }}>Item ID</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {tripDetail.StockDetails.map((stock, stockIndex) => (\r\n                                                    <tr key={stock.Item_Id || stockIndex} style={{ borderBottom: '1px solid #eee' }}>\r\n                                                        <td style={{ padding: '8px', border: '1px solid #ddd' }}>{stockIndex + 1}</td>\r\n                                                        <td style={{ padding: '8px', border: '1px solid #ddd', fontWeight: 'bold' }}>\r\n                                                            {stock.Product_Name || 'N/A'}\r\n                                                        </td>\r\n                                                        <td style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right', fontWeight: 'bold' }}>\r\n                                                            {NumberFormat(stock.Amount) || '0.00'}\r\n                                                        </td>\r\n                                                        <td style={{ padding: '8px', border: '1px solid #ddd' }}>\r\n                                                            {stock.Item_Id || 'N/A'}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ))}\r\n                                                {/* Total row for this TripDetail */}\r\n                                                <tr style={{ backgroundColor: '#e8f5e8' }}>\r\n                                                    <td colSpan={2} style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right', fontWeight: 'bold' }}>\r\n                                                        Total for {tripDetail.Do_Inv_No}:\r\n                                                    </td>\r\n                                                    <td style={{ padding: '8px', border: '1px solid #ddd', textAlign: 'right', fontWeight: 'bold' }}>\r\n                                                        {NumberFormat(tripDetail.StockDetails.reduce((sum, item) => sum + (item.Amount || 0), 0))}\r\n                                                    </td>\r\n                                                    <td style={{ padding: '8px', border: '1px solid #ddd' }}></td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </Box>\r\n                                ) : (\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic', mt: 1 }}>\r\n                                        No stock details available for this invoice.\r\n                                    </Typography>\r\n                                )}\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    ))}\r\n                    \r\n                    {/* Grand Total for all TripDetails */}\r\n                    {row.TripDetails.length > 0 && (\r\n                        <Box sx={{ mt: 2, p: 2, backgroundColor: '#fff3cd', border: '1px solid #ffeaa7', borderRadius: 1 }}>\r\n                            <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: '#856404' }}>\r\n                                Grand Total for Trip {row.Trip_No}: {NumberFormat(\r\n                                    row.TripDetails.reduce((total, tripDetail) => \r\n                                        total + (tripDetail.StockDetails?.reduce((sum, item) => sum + (item.Amount || 0), 0) || 0), 0)\r\n                                )}\r\n                            </Typography>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            ) : (\r\n                <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\r\n                    No trip details available for this trip.\r\n                </Typography>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst LrReport = ({ loadingOn, loadingOff, AddRights, pageID }) => {\r\n  const [tripData, setTripData] = useState({ rows: [], allEmpCategories: [] });\r\n  const [filters, setFilters] = useState({\r\n    Fromdate: ISOString(),\r\n    Todate: ISOString(),\r\n    voucherType_Filter: { label: 'ALL', value: '' },\r\n    created_by_Filter: { label: 'ALL', value: '' },\r\n    filterDialog: false\r\n  });\r\n  const [filterDropDown, setFilterDropDown] = useState({ voucherType: [], created_by: [] });\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [editRow, setEditRow] = useState(null);\r\n  const [editPairs, setEditPairs] = useState([]);\r\n  const [costCenterOptions, setCostCenterOptions] = useState([]);\r\n  const [costCategoryOptions, setCostCategoryOptions] = useState([]);\r\n  const [optionsLoaded, setOptionsLoaded] = useState(false);\r\n  const navigate = useNavigate();\r\nconst [reload, setReload] = useState(false);\r\n  useEffect(() => {\r\n\r\n    Promise.all([\r\n      fetchLink({ address: `dataEntry/costCenter` }),\r\n      fetchLink({ address: `dataEntry/costCenter/category` })\r\n    ]).then(([ccRes, catRes]) => {\r\n      setCostCenterOptions(\r\n        (ccRes?.data || []).map(cc => ({\r\n          id: cc.Cost_Center_Id,\r\n          value: cc.Cost_Center_Name,\r\n          label: cc.Cost_Center_Name\r\n        }))\r\n      );\r\n\r\n      setCostCategoryOptions(\r\n        (catRes?.data || []).map(cat => ({\r\n          id: cat.Cost_Category_Id,\r\n          value: cat.Cost_Category,\r\n          label: cat.Cost_Category\r\n        }))\r\n      );\r\n      \r\n      setOptionsLoaded(true);\r\n    }).catch(error => {\r\n      console.error('Error loading options:', error);\r\n      setOptionsLoaded(true); // Still set loaded to true even if there's an error\r\n    });\r\n  }, []);\r\n\r\n  const addNewPair = () => {\r\n    setEditPairs(prev => [\r\n      ...prev,\r\n      { \r\n        Involved_Emp_Id: '', \r\n        Cost_Center_Name: '', \r\n        Cost_Center_Type_Id: '', \r\n        Cost_Category: '',\r\n        Cost_Center_Id: '',\r\n        Cost_Category_Id: ''\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const removePair = (index) => {\r\n    setEditPairs(prev => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sessionFilterValues = getSessionFiltersByPageId(pageID);\r\n    if (sessionFilterValues) setFilters(prev => ({ ...prev, ...sessionFilterValues }));\r\n  }, [pageID]);\r\n\r\n  const transformTripData = (data) => {\r\n    const allEmpCategories = new Set();\r\n    data.forEach(trip => {\r\n      trip.Employees?.forEach(emp => allEmpCategories.add(emp.Cost_Category || 'Unknown'));\r\n    });\r\n    const empCategoriesArray = [...allEmpCategories];\r\n\r\n    const rows = data.map(trip => {\r\n      const empByCategory = {};\r\n      empCategoriesArray.forEach(cat => empByCategory[cat] = []);\r\n      trip.Employees?.forEach(emp => {\r\n        const cat = emp.Cost_Category || 'Unknown';\r\n        empByCategory[cat].push(emp.Cost_Center_Name);\r\n      });\r\n      const categoryColumns = {};\r\n      empCategoriesArray.forEach(cat => categoryColumns[cat] = empByCategory[cat]?.join(', ') || '');\r\n      const detail = trip.TripDetails?.[0] || {};\r\n      return {\r\n        ...trip,\r\n        Delivery_Id: detail.Delivery_Id || null,\r\n        Do_Inv_No: detail.Do_Inv_No || null,\r\n        Do_Date: detail.Do_Date || null,\r\n        Total_Invoice_value: detail.Total_Invoice_value || null,\r\n        Retailer_Name: detail.Retailer_Name || trip.Retailer_Name || '',\r\n        ...categoryColumns\r\n      };\r\n    });\r\n\r\n    return { rows, allEmpCategories: empCategoriesArray };\r\n  };\r\n\r\nuseEffect(() => {\r\n  const { Fromdate, Todate, voucherType_Filter, created_by_Filter } = filters;\r\n\r\n  fetchLink({\r\n    address: `sales/lrReport?Fromdate=${Fromdate}&Todate=${Todate}&voucher=${voucherType_Filter.value}&createdBy=${created_by_Filter.value}`,\r\n    loadingOff, \r\n    loadingOn\r\n  }).then(res => {\r\n    if (res.success) {\r\n      const { rows, allEmpCategories } = transformTripData(res.data);\r\n      setTripData({ rows, allEmpCategories });\r\n    }\r\n  }).catch(console.error);\r\n\r\n}, [filters, reload]); \r\n\r\n  const closeDialog = () => setFilters(prev => ({ ...prev, filterDialog: false }));\r\n\r\n  const handleEdit = (row) => {\r\n    if (!optionsLoaded) {\r\n      console.warn('Options not loaded yet');\r\n      return;\r\n    }\r\n\r\n    setEditRow(row);\r\n    \r\n    const normalized = (row.Employees || []).map(emp => {\r\n\r\n      const matchingCategory = costCategoryOptions.find(opt => \r\n        opt.value === emp.Cost_Category || opt.label === emp.Cost_Category\r\n      );\r\n      \r\n      \r\n      const matchingCenter = costCenterOptions.find(opt => \r\n        opt.value === emp.Cost_Center_Name || opt.label === emp.Cost_Center_Name\r\n      );\r\n\r\n      return {\r\n        Involved_Emp_Id: emp.Involved_Emp_Id || '',\r\n        Cost_Center_Name: emp.Cost_Center_Name || '',\r\n        Cost_Center_Type_Id: emp.Cost_Center_Type_Id || '',\r\n        Cost_Category: emp.Cost_Category || '',\r\n        Cost_Center_Id: matchingCenter ? matchingCenter.id : '',\r\n        Cost_Category_Id: matchingCategory ? matchingCategory.id : ''\r\n      };\r\n    });\r\n    \r\n    setEditPairs(normalized);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const processedTrips = (tripData.rows || []).map(trip => ({\r\n    ...trip,\r\n    Total_Invoice_value: (trip.TripDetails || []).reduce((sum, d) => sum + (d.Total_Invoice_value || 0), 0)\r\n  }));\r\n\r\n  const totalAmount = processedTrips.reduce((sum, trip) => sum + (trip.Total_Invoice_value || 0), 0);\r\n\r\nconst saveEditedData = async () => {\r\n  if (!editRow) return;\r\n\r\n  try {\r\n    const payload = {\r\n      tripId: editRow.Trip_Id,\r\n      employeeCostCenters: editPairs.map(pair => ({\r\n        Involved_Emp_Id: pair.Involved_Emp_Id,\r\n        Cost_Center_Type_Id: pair.Cost_Center_Type_Id || pair.Cost_Category_Id,\r\n      })),\r\n    };\r\n\r\n    const response = await fetchLink({ \r\n      address: 'sales/lrReport',\r\n      method: 'POST', \r\n      bodyData: payload \r\n    });\r\n\r\n    if (response.success) {\r\n      toast.success(response.message || 'Cost centers updated successfully');\r\n      setEditDialog(false);\r\n\r\n   \r\n      setReload(true);\r\n    } else {\r\n      toast.error(response.message || 'Failed to update cost centers');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving cost centers:\", error);\r\n    toast.error('Error saving cost centers');\r\n  }\r\n};\r\n\r\n\r\nuseEffect(() => {\r\n  if (reload) {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetchLink({ address: 'sales/lrReport' });\r\n        if (res.success) {\r\n        \r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching data:\", err);\r\n      } finally {\r\n     \r\n        setReload(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }\r\n}, [reload]);\r\n\r\n  return (\r\n    <>\r\n      <FilterableTable\r\n        title=\"Trips\"\r\n        headerFontSizePx={12}\r\n        bodyFontSizePx={12}\r\n        dataArray={processedTrips || []}\r\n        columns={[\r\n          createCol('Trip_No', 'string', 'Trip No'),\r\n          createCol('TR_INV_ID', 'string', 'TR_INV_ID'),\r\n          createCol('Trip_Date', 'date', 'TripDate'),\r\n          createCol('StartTime', 'time', 'StartTime'),\r\n          createCol('EndTime', 'time', 'EndTime'),\r\n          createCol('Vehicle_No', 'string', 'Veh.No'),\r\n          createCol('Do_Date', 'date', 'Deliv.Date'),\r\n          createCol('Total_Invoice_value', 'number', 'Tot.Inv'),\r\n          ...(tripData.allEmpCategories?.map(cat => createCol(cat, 'string', cat)) || []),\r\n          {\r\n            isVisible: 1,\r\n            ColumnHeader: 'Action',\r\n            isCustomCell: true,\r\n            Cell: ({ row }) => (\r\n              <IconButton size=\"small\" onClick={() => handleEdit(row)}>\r\n                <Edit />\r\n              </IconButton>\r\n            )\r\n          }\r\n        ]}\r\n        isExpendable\r\n        expandableComp={StockDetailsExpandable}\r\n        EnableSerialNumber\r\n        ButtonArea={\r\n          <>\r\n            <IconButton onClick={() => setFilters(prev => ({ ...prev, filterDialog: true }))} size=\"small\" className=\"mx-1\">\r\n              <FilterAlt className=\"fa-20\" />\r\n            </IconButton>\r\n            <span className=\"bg-light text-light fa-11 px-1 shadow-sm py-1 rounded-3 mx-1\">\r\n              {toNumber(totalAmount) > 0 && (\r\n                <h6 className=\"m-0 text-end text-muted px-3\">\r\n                  Total: {NumberFormat(totalAmount)}\r\n                </h6>\r\n              )}\r\n            </span>\r\n          </>\r\n        }\r\n      />\r\n\r\n      {/* Filter Dialog */}\r\n      <Dialog open={filters.filterDialog} onClose={closeDialog} fullWidth maxWidth='sm'>\r\n        <DialogTitle>Filters</DialogTitle>\r\n        <DialogContent>\r\n          <table className=\"table\">\r\n            <tbody>\r\n              <tr>\r\n                <td>From</td>\r\n                <td><input type=\"date\" value={filters.Fromdate} onChange={e => setFilters({ ...filters, Fromdate: e.target.value })} className=\"cus-inpt\" /></td>\r\n              </tr>\r\n              <tr>\r\n                <td>To</td>\r\n                <td><input type=\"date\" value={filters.Todate} onChange={e => setFilters({ ...filters, Todate: e.target.value })} className=\"cus-inpt\" /></td>\r\n              </tr>\r\n              <tr>\r\n                <td>Created By</td>\r\n                <td>\r\n                  <Select\r\n                    value={filters.created_by_Filter}\r\n                    onChange={e => setFilters({ ...filters, created_by_Filter: e })}\r\n                    options={[{ value: '', label: 'ALL' }, ...filterDropDown.created_by]}\r\n                    styles={customSelectStyles}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => setFilters({ Fromdate: ISOString(), Todate: ISOString(), voucherType_Filter: { label: 'ALL', value: '' }, created_by_Filter: { label: 'ALL', value: '' }, filterDialog: false })}\r\n            startIcon={<ClearAll />}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button onClick={closeDialog}>Close</Button>\r\n          <Button\r\n            onClick={() => { setSessionFilters({ Fromdate: filters.Fromdate, Todate: filters.Todate, pageID, voucherType_Filter: filters.voucherType_Filter, created_by_Filter: filters.created_by_Filter }); closeDialog(); }}\r\n            variant=\"contained\"\r\n            startIcon={<Search />}\r\n          >\r\n            Search\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog open={editDialog} onClose={() => setEditDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Edit Cost Center Details</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ my: 2 }}>\r\n            <Typography variant=\"subtitle1\">Trip No: {editRow?.Trip_No}</Typography>\r\n            {editPairs.length === 0 && <Typography>No Cost Center info available. Please add.</Typography>}\r\n            {editPairs.map((emp, idx) => (\r\n              <Box key={idx} sx={{ mb: 2, p: 2, border: '1px solid #ddd', borderRadius: 1, position: 'relative' }}>\r\n                <Typography fontWeight=\"bold\" mb={1}>Employee #{idx + 1}</Typography>\r\n                <IconButton size=\"small\" onClick={() => removePair(idx)} sx={{ position: 'absolute', top: 8, right: 8 }}><Clear /></IconButton>\r\n\r\n                <Typography variant=\"body2\" mb={0.5}>Cost Category</Typography>\r\n                <Select\r\n                  value={costCategoryOptions.find(opt => opt.id === emp.Cost_Category_Id) || null}\r\n                  onChange={option => {\r\n                    const updated = [...editPairs];\r\n                    if (option) {\r\n                      updated[idx].Cost_Category = option.value;\r\n                      updated[idx].Cost_Category_Id = option.id;\r\n                    } else {\r\n                      updated[idx].Cost_Category = '';\r\n                      updated[idx].Cost_Category_Id = '';\r\n                    }\r\n                    setEditPairs(updated);\r\n                  }}\r\n                  options={costCategoryOptions}\r\n                  styles={customSelectStyles}\r\n                  placeholder=\"Select Category\"\r\n                  isClearable\r\n                />\r\n\r\n                <Typography variant=\"body2\" mt={2} mb={0.5}>Cost Center Name</Typography>\r\n                <Select\r\n                  value={costCenterOptions.find(opt => opt.id === emp.Cost_Center_Id) || null}\r\n                  onChange={option => {\r\n                    const updated = [...editPairs];\r\n                    if (option) {\r\n                      updated[idx].Cost_Center_Name = option.value;\r\n                      updated[idx].Cost_Center_Id = option.id;\r\n                      updated[idx].Cost_Center_Type_Id = option.id;\r\n                      updated[idx].Involved_Emp_Id = option.id;\r\n                    } else {\r\n                      updated[idx].Cost_Center_Name = '';\r\n                      updated[idx].Cost_Center_Id = '';\r\n                      updated[idx].Cost_Center_Type_Id = '';\r\n                      updated[idx].Involved_Emp_Id = '';\r\n                    }\r\n                    setEditPairs(updated);\r\n                  }}\r\n                  options={costCenterOptions}\r\n                  styles={customSelectStyles}\r\n                  placeholder=\"Select Center\"\r\n                  isClearable\r\n                />\r\n              </Box>\r\n            ))}\r\n            <Button variant=\"outlined\" onClick={addNewPair} sx={{ mt: 2 }}>Add New Cost Center</Button>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialog(false)}>Cancel</Button>\r\n          <Button variant=\"contained\" onClick={saveEditedData}>Save</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LrReport;"],"names":["_excluded","_excluded2","_excluded3","useSlot","name","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps","useSlotPropsParams","_objectWithoutPropertiesLoose","component","rootComponent","slots","undefined","slotProps","other","resolvedComponentsProps","resolveComponentProps","_mergeSlotProps","mergeSlotProps","_extends","externalSlotProps","props","slotComponent","internalRef","mergedProps","ref","useForkRef","slotOwnerState","finalOwnerState","LeafComponent","appendOwnerState","as","Object","keys","forEach","propName","createSvgIcon","_jsx","d","preprocessDataForExport","data","columns","map","row","flattenedRow","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","event","currentTarget","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","entries","_ref4","console","log","colSpan","Number","Card","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","customTableStyles","table","style","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","generateUtilityClasses","defaultTheme","createTheme","createBox","themeId","THEME_ID","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate","options","BoxRoot","styled","shouldForwardProp","prop","styleFunctionSx","React","inProps","theme","useTheme","_extendSxProp","extendSxProp","clsx","StockDetailsExpandable","Box","border","Typography","gutterBottom","mb","Trip_No","TripDetails","tripDetail","tripIndex","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMore","Do_Inv_No","Do_Date","Total_Invoice_value","Retailer_Name","AccordionDetails","StockDetails","overflowX","mt","minWidth","stock","stockIndex","Product_Name","Amount","Item_Id","reduce","sum","item","fontStyle","TripDetailId","p","borderRadius","total","_tripDetail$StockDeta","_tripData$allEmpCateg","loadingOn","loadingOff","AddRights","pageID","tripData","setTripData","allEmpCategories","filters","setFilters","Fromdate","ISOString","Todate","voucherType_Filter","label","created_by_Filter","filterDialog","filterDropDown","setFilterDropDown","voucherType","created_by","editDialog","setEditDialog","editRow","setEditRow","editPairs","setEditPairs","costCenterOptions","setCostCenterOptions","costCategoryOptions","setCostCategoryOptions","optionsLoaded","setOptionsLoaded","reload","setReload","useNavigate","useEffect","Promise","all","fetchLink","then","ccRes","catRes","cc","Cost_Center_Id","Cost_Center_Name","cat","Cost_Category_Id","Cost_Category","catch","sessionFilterValues","getSessionFiltersByPageId","prev","res","success","trip","_trip$Employees","Employees","emp","add","empCategoriesArray","_trip$Employees2","_trip$TripDetails","empByCategory","push","categoryColumns","_empByCategory$cat","join","detail","Delivery_Id","transformTripData","closeDialog","processedTrips","totalAmount","async","err","fetchData","warn","normalized","matchingCategory","opt","matchingCenter","Involved_Emp_Id","Cost_Center_Type_Id","handleEdit","Edit","FilterAlt","toNumber","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","onChange","Select","styles","DialogActions","Button","startIcon","ClearAll","setSessionFilters","Search","my","idx","position","removePair","_","top","right","Clear","updated","placeholder","isClearable","addNewPair","payload","tripId","Trip_Id","employeeCostCenters","pair","response","method","bodyData","toast","message"],"sourceRoot":""}