{"version":3,"file":"static/js/9137.e346d325.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/FilterAltOff.js","Components/filterableTable2.jsx","Pages/Reports/outstanding.jsx","../node_modules/@mui/icons-material/esm/FilterAlt.js","Components/tablecolumn.js","../node_modules/@mui/icons-material/esm/Search.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.79 5.61C20.3 4.95 19.83 4 19 4H6.83l7.97 7.97zM2.81 2.81 1.39 4.22 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-2.17l5.78 5.78 1.41-1.41z\"\n}), 'FilterAltOff');","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    Tooltip,\r\n} from \"@mui/material\";\r\nimport {\r\n    ISOString,\r\n    isValidDate,\r\n    NumberFormat,\r\n    toArray,\r\n    Addition,\r\n} from \"../../Components/functions\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { createCol } from \"../../Components/filterableTable2\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\nimport { FilterAlt, Search, FilterAltOff } from \"@mui/icons-material\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst defaultFilters = {\r\n    fromDate: ISOString(),\r\n    toDate: ISOString(),\r\n};\r\n\r\nconst defaultFilterDropDown = {\r\n    voucherType: [],\r\n    retailers: [],\r\n    collectionType: [],\r\n    paymentStatus: [],\r\n    collectedBy: [],\r\n};\r\n\r\nconst Outstanding = ({ loadingOn, loadingOff }) => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n    const storage = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const [allAccounts, setAllAccounts] = useState([]);\r\n    const [viewType, setViewType] = useState(\"debtors\");\r\n\r\n    const [accountOptions, setAccountOptions] = useState([]);\r\n    const [groupOptions, setGroupOptions] = useState([]);\r\n\r\n    const [filters, setFilters] = useState({\r\n        fromDate: defaultFilters.fromDate,\r\n        toDate: defaultFilters.toDate,\r\n        fetchFrom: defaultFilters.fromDate,\r\n        fetchTo: defaultFilters.toDate,\r\n        Account_Id: \"\",\r\n        Group_Name: \"\",\r\n        filterDialog: false,\r\n        refresh: false,\r\n    });\r\n\r\n    const [drowDownValues, setDropDownValues] = useState(defaultFilterDropDown);\r\n\r\n    useEffect(() => {\r\n        fetchLink({ address: `receipt/filterValues` })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    setDropDownValues({\r\n                        voucherType: toArray(data?.others?.voucherType),\r\n                    });\r\n                }\r\n            })\r\n            .catch(console.error);\r\n\r\n        fetchAllAccounts();\r\n    }, [storage?.Company_id]);\r\n\r\n    const resetFilters = () => {\r\n        setFilters({\r\n            ...defaultFilters,\r\n            fetchFrom: defaultFilters.fromDate,\r\n            fetchTo: defaultFilters.toDate,\r\n            Account_Id: \"\",\r\n            Group_Name: \"\",\r\n            filterDialog: false,\r\n            refresh: false,\r\n        });\r\n\r\n        updateQueryString({\r\n            fromDate: defaultFilters.fromDate,\r\n            toDate: defaultFilters.toDate,\r\n            Account_Id: \"\",\r\n            Group_Name: \"\",\r\n        });\r\n\r\n        fetchAllAccounts();\r\n    };\r\n\r\n    const fetchAllAccounts = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `payment/getDebtorDetails?fromDate=${filters?.fromDate}&toDate=${filters?.toDate}`,\r\n            method: \"GET\",\r\n        })\r\n            .then((data) => {\r\n                if (data.success) setAllAccounts(data.data || []);\r\n            })\r\n            .finally(() => loadingOff && loadingOff())\r\n            .catch(console.error);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Array.isArray(allAccounts)) {\r\n            const accOpts = allAccounts.map((a) => ({\r\n                value: a.Acc_Id,\r\n                label: a.Account_name,\r\n            }));\r\n\r\n            const grpOpts = [\r\n                ...new Map(\r\n                    allAccounts.map((a) => [\r\n                        a.Group_Name,\r\n                        { value: a.Group_Name, label: a.Group_Name },\r\n                    ])\r\n                ).values(),\r\n            ];\r\n\r\n            setAccountOptions([{ value: \"\", label: \"ALL\" }, ...accOpts]);\r\n            setGroupOptions([{ value: \"\", label: \"ALL\" }, ...grpOpts]);\r\n        }\r\n    }, [allAccounts]);\r\n\r\n    const tableData = useMemo(() => {\r\n        if (!Array.isArray(allAccounts)) return [];\r\n\r\n        return allAccounts.filter((item) => {\r\n            const balance = parseFloat(item?.Bal_Amount || 0);\r\n\r\n            // Skip zero balances\r\n            if (balance === 0) return false;\r\n\r\n            // Filter by account type\r\n            if (viewType === \"debtors\" && item.Account_Types !== \"Debtor\") return false;\r\n            if (viewType === \"creditors\" && item.Account_Types !== \"Creditor\") return false;\r\n\r\n            if (filters.Account_Id && item.Acc_Id !== filters.Account_Id)\r\n                return false;\r\n            if (filters.Group_Name && item.Group_Name !== filters.Group_Name)\r\n                return false;\r\n\r\n            return true;\r\n        });\r\n    }, [allAccounts, viewType, filters.Account_Id, filters.Group_Name]);\r\n\r\n    const Total_Debit = useMemo(() => {\r\n        return tableData.reduce((acc, item) => Addition(acc, parseFloat(item?.Dr_Amount || 0)), 0);\r\n    }, [tableData]);\r\n\r\n    const Total_Credit = useMemo(() => {\r\n        return tableData.reduce((acc, item) => Addition(acc, parseFloat(item?.Cr_Amount || 0)), 0);\r\n    }, [tableData]);\r\n\r\n    const Total_Outstanding = useMemo(() => {\r\n        return Total_Debit - Total_Credit;\r\n    }, [Total_Debit, Total_Credit]);\r\n\r\n    useEffect(() => {\r\n        const queryFilters = {\r\n            fromDate:\r\n                query.get(\"fromDate\") && isValidDate(query.get(\"fromDate\"))\r\n                    ? query.get(\"fromDate\")\r\n                    : defaultFilters.fromDate,\r\n            toDate:\r\n                query.get(\"toDate\") && isValidDate(query.get(\"toDate\"))\r\n                    ? query.get(\"toDate\")\r\n                    : defaultFilters.toDate,\r\n        };\r\n        setFilters((pre) => ({\r\n            ...pre,\r\n            fetchFrom: queryFilters.fromDate,\r\n            fetchTo: queryFilters.toDate,\r\n        }));\r\n    }, [location.search]);\r\n\r\n    const updateQueryString = (newFilters) => {\r\n        const params = new URLSearchParams(newFilters);\r\n        navigate(`?${params.toString()}`, { replace: true });\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setFilters((pre) => ({ ...pre, filterDialog: false }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title={\r\n                    viewType === \"debtors\"\r\n                        ? \"Debtors Outstanding\"\r\n                        : \"Creditors Outstanding\"\r\n                }\r\n                ButtonArea={\r\n                    <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n                        <div style={{ display: \"flex\", alignItems: \"center\", gap: \"10px\" }}>\r\n                            <Button\r\n                                variant={viewType === \"debtors\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setViewType(\"debtors\")}\r\n                                size=\"small\"\r\n                            >\r\n                                Debtors\r\n                            </Button>\r\n                            <Button\r\n                                variant={viewType === \"creditors\" ? \"contained\" : \"outlined\"}\r\n                                onClick={() => setViewType(\"creditors\")}\r\n                                size=\"small\"\r\n                            >\r\n                                Creditors\r\n                            </Button>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Tooltip title=\"Filters\">\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => setFilters({ ...filters, filterDialog: true })}\r\n                                    >\r\n                                        <FilterAlt />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Reset Filters\">\r\n                                    <IconButton size=\"small\" onClick={resetFilters}>\r\n                                        <FilterAltOff />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex flex-column align-items-end\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total {viewType === \"debtors\" ? \"Debtors\" : \"Creditors\"} Debit:</span>\r\n                                <strong>{NumberFormat(Total_Debit)}</strong>\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total {viewType === \"debtors\" ? \"Debtors\" : \"Creditors\"} Credit:</span>\r\n                                <strong>{NumberFormat(Total_Credit)}</strong>\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <span className=\"text-muted me-2\">Total Outstanding:</span>\r\n                                <strong className={Total_Outstanding >= 0 ? \"text-danger\" : \"text-success\"}>\r\n                                    {NumberFormat(Math.abs(Total_Outstanding))} {Total_Outstanding >= 0 ? \"DR\" : \"CR\"}\r\n                                </strong>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                EnableSerialNumber\r\n                ExcelPrintOption={true}\r\n                dataArray={tableData}\r\n                headerFontSizePx={14}\r\n                bodyFontSizePx={13}\r\n                columns={[\r\n                    createCol(\"Acc_Id\", \"string\", \"Account ID\"),\r\n                    createCol(\"Account_name\", \"string\", \"Account Name\"),\r\n                    createCol(\"Group_Name\", \"string\", \"Group\"),\r\n                    {\r\n                        ...createCol(\"Account_Types\", \"string\", \"Account Type\"),\r\n                        isVisible: 1\r\n                    },\r\n                    {\r\n                        ...createCol(\"OB_Amount\", \"number\", \"Opening Balance\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    {\r\n                        ...createCol(\"Dr_Amount\", \"number\", \"Debit Amount\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    {\r\n                        ...createCol(\"Cr_Amount\", \"number\", \"Credit Amount\"),\r\n                        format: (value) => NumberFormat(value || 0)\r\n                    },\r\n                    createCol(\"CR_DR\", \"string\", \"Type\"),\r\n                    {\r\n                        Field_Name: \"Bal_Amount\",\r\n                        isVisible: 1,\r\n                        Fied_Data: \"number\",\r\n                        isCustomCell: true,\r\n                        Header: \"Balance Amount\",\r\n                        Cell: ({ row }) => (\r\n                            <span className={row?.CR_DR === \"DR\" ? \"text-danger\" : \"text-success\"}>\r\n                                {NumberFormat(Math.abs(row?.Bal_Amount || 0))} {row?.CR_DR}\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n            {/* Filter Dialog */}\r\n            <Dialog\r\n                open={filters.filterDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <table className=\"table table-borderless w-100\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\", width: \"150px\" }}>\r\n                                    From\r\n                                </td>\r\n                                <td>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        value={filters.fromDate || \"\"}\r\n                                        onChange={(e) =>\r\n                                            setFilters({ ...filters, fromDate: e.target.value })\r\n                                        }\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>To</td>\r\n                                <td>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        value={filters.toDate || \"\"}\r\n                                        onChange={(e) =>\r\n                                            setFilters({ ...filters, toDate: e.target.value })\r\n                                        }\r\n                                        className=\"cus-inpt\"\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>Account Name</td>\r\n                                <td>\r\n                                    <Select\r\n                                        styles={customSelectStyles}\r\n                                        value={\r\n                                            accountOptions.find(\r\n                                                (a) => a.value === filters.Account_Id\r\n                                            ) || { value: \"\", label: \"ALL\" }\r\n                                        }\r\n                                        options={accountOptions}\r\n                                        onChange={(selected) =>\r\n                                            setFilters({\r\n                                                ...filters,\r\n                                                Account_Id: selected?.value || \"\",\r\n                                            })\r\n                                        }\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td style={{ verticalAlign: \"middle\" }}>Group Name</td>\r\n                                <td>\r\n                                    <Select\r\n                                        styles={customSelectStyles}\r\n                                        value={\r\n                                            groupOptions.find(\r\n                                                (g) => g.value === filters.Group_Name\r\n                                            ) || { value: \"\", label: \"ALL\" }\r\n                                        }\r\n                                        options={groupOptions}\r\n                                        onChange={(selected) =>\r\n                                            setFilters({\r\n                                                ...filters,\r\n                                                Group_Name: selected?.value || \"\",\r\n                                            })\r\n                                        }\r\n                                    />\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>Close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            const updatedFilters = {\r\n                                fromDate: filters?.fromDate,\r\n                                toDate: filters?.toDate,\r\n                                Account_Id: filters?.Account_Id,\r\n                                Group_Name: filters?.Group_Name,\r\n                            };\r\n\r\n                            setFilters((prev) => ({\r\n                                ...prev,\r\n                                fetchFrom: filters.fromDate,\r\n                                fetchTo: filters.toDate,\r\n                            }));\r\n\r\n                            updateQueryString(updatedFilters);\r\n                            fetchAllAccounts();\r\n                            closeDialog();\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Outstanding;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["createSvgIcon","_jsx","d","preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","event","currentTarget","className","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","name","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","fontSize","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","component","Paper","ToggleOn","color","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","defaultFilters","fromDate","ISOString","toDate","defaultFilterDropDown","voucherType","retailers","collectionType","paymentStatus","collectedBy","loadingOn","loadingOff","navigate","useNavigate","location","useLocation","query","URLSearchParams","search","storage","JSON","parse","localStorage","getItem","allAccounts","setAllAccounts","viewType","setViewType","accountOptions","setAccountOptions","groupOptions","setGroupOptions","filters","setFilters","fetchFrom","fetchTo","Account_Id","Group_Name","filterDialog","refresh","drowDownValues","setDropDownValues","useEffect","fetchLink","address","then","_data$others","success","toArray","others","catch","fetchAllAccounts","Company_id","method","finally","isArray","accOpts","Acc_Id","label","Account_name","grpOpts","Map","values","tableData","useMemo","item","parseFloat","Bal_Amount","Account_Types","Total_Debit","reduce","acc","Addition","Dr_Amount","Total_Credit","Cr_Amount","Total_Outstanding","queryFilters","get","isValidDate","updateQueryString","newFilters","params","toString","closeDialog","style","display","alignItems","gap","Button","variant","FilterAlt","resetFilters","FilterAltOff","Math","abs","format","Header","CR_DR","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","width","onChange","Select","styles","customSelectStyles","options","selected","g","DialogActions","updatedFilters","prev","startIcon","Search","customTableStyles","table","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}