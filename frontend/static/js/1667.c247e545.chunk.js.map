{"version":3,"file":"static/js/1667.c247e545.chunk.js","mappings":"wNAGaA,EAAoB,CAC7BC,MAAO,CACHC,MAAO,CACHC,MAAO,OACPC,gBAAiB,gBAIzBC,KAAM,CACFH,MAAO,CACHE,gBAAiB,gBAGzBE,UAAW,CACPJ,MAAO,CACHE,gBAAiB,YACjBG,MAAO,QACPC,SAAU,UAMTC,EAAqB,CAM9BC,KAAMA,CAACC,EAAUC,KAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfF,GAAQ,IACXG,OAAQ,OAEZC,WAAYC,IAAIH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUG,GAAI,IAAEF,OAAQ,OACxCG,aAAeD,IAAIH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZG,GAAI,IACPZ,gBAAiB,UACjBG,MAAO,OACPW,WAAY,OACZV,SAAU,OACVW,QAAS,WACTC,aAAc,iBACdC,cAAe,cAEnBC,OAAQA,CAACN,EAAMJ,KAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbG,GAAI,IACPZ,gBAAiBQ,EAAMW,WACjB,UACAX,EAAMY,UACF,UACA,QACVjB,MAAOK,EAAMW,WAAa,QAAU,OACpCJ,QAAS,eAmBJM,EAAW,CACpB,CACIC,GAAI,EACJC,SAAU,UACVC,QAAS,OACTC,MAAO,OACP1B,MAAO,KAEX,CACIuB,GAAI,EACJC,SAAU,YAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,cAEd,CACID,GAAI,EACJC,SAAU,eAEd,CACID,GAAI,EACJC,SAAU,iBAEd,CACID,GAAI,EACJC,SAAU,gBAEd,CACID,GAAI,EACJC,SAAU,WAILG,EAAiB,CAC1B,CACIC,SAAU,EACVC,KAAM,kBACNC,SAAU,8BACVC,QAAS,iGACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIV,SAAU,EACVC,KAAM,oBACNC,SAAU,GACVC,QAAS,4JACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,eACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,eAEV,CACIV,SAAU,EACVC,KAAM,kBACNC,SAAU,GACVC,QAAS,4HACTC,KAAMC,EACNC,MAAO,kBACPC,MAAO,6BACPC,MAAO,iBACPC,YAAa,qBACbC,KAAM,gBAIDC,EAAa,CACtB,CAAEV,KAAM,kBACR,CAAEA,KAAM,oBACR,CAAEA,KAAM,cACR,CAAEA,KAAM,gBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,iBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,U,6OCgdZ,MAg9BA,EAh9BuBW,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACzB,MAAMC,EAAYC,aAAaC,QAAQ,QACjCC,EAAYC,KAAKC,MAAML,GACvBM,EAAqB,CACvBC,OAAQ,GACRC,WAAY,EACZC,QAAS,EACTC,WAAY,EACZC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAC1CC,IAAI,IAAIH,MAAOC,cAAcC,MAAM,KAAK,GACxCE,OAAQ,eACRC,WAAY,cACZC,QAAS,WACTC,WAAY,gBAETC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,KACtDG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,KAC9CK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,CAAC,IAC3CO,EAAoBC,IAAyBR,EAAAA,EAAAA,UAAS,CAAC,IACvDS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,KAClDW,EAAQC,IAAaZ,EAAAA,EAAAA,WAAS,IAC9Ba,EAAkBC,IAAuBd,EAAAA,EAAAA,WAAS,IAClDe,EAASC,IAAehB,EAAAA,EAAAA,UAAShB,IACjCiC,EAAUC,IAAelB,EAAAA,EAAAA,UAAS,KAClCmB,EAAeC,IAAoBpB,EAAAA,EAAAA,UAAS,KAC5CqB,EAAOC,IAAYtB,EAAAA,EAAAA,UAAS,KAC5BuB,EAAUC,IAAexB,EAAAA,EAAAA,UAAS,SAClCyB,EAAcC,IAAmB1B,EAAAA,EAAAA,UAAS,IAE3C2B,EAAgB,SAACC,GAAuC,IAA3BC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAAIxC,KAC9C,IAAKsC,EAAY,OAAOC,EACxB,IACI,MAAMI,EAAO,IAAI3C,KAAKsC,GACtB,OAAOM,MAAMD,EAAKE,WAAaN,EAAWI,CAC9C,CAAE,MAAOG,GACL,OAAOP,CACX,CACJ,EAEMQ,EAAuBJ,IACzB,IAEI,OADkBN,EAAcM,GACf1C,cAAcC,MAAM,KAAK,EAC9C,CAAE,MAAO4C,GACL,OAAO,IAAI9C,MAAOC,cAAcC,MAAM,KAAK,EAC/C,GAsBE8C,GAAyBC,IAC3B,MAIMC,EAxBcC,EAACC,EAAWC,KAChC,MAAMC,EAAQ,GACRC,EAAQlB,EAAce,GACtBI,EAAMnB,EAAcgB,GAE1B,GAAIT,MAAMY,EAAIX,WACV,MAAO,CAACE,EAAoBQ,IAGhC,MAAME,EAAc,IAAIzD,KAAKuD,GAE7B,KAAOE,GAAeD,GAClBF,EAAMI,KAAKX,EAAoB,IAAI/C,KAAKyD,KACxCA,EAAYE,QAAQF,EAAYG,UAAY,GAGhD,OAAON,GAQWH,CAJAF,EAAKY,cAAgBZ,EAAKa,eAC5Bb,EAAKc,YAAcd,EAAKY,cAAgBZ,EAAKa,gBAmC7D,OA9BoBZ,EAAUc,OAAOrB,GAEZ,IADH,IAAI3C,KAAK2C,GAAMsB,UAIVC,IAAIvB,IAAI3F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC5BiG,GAAI,IACPkB,SAAU,WACVC,QAASzB,EACT0B,UAAWpB,EAAKoB,UAChBC,aAAcrB,EAAKqB,aACnB3E,OAAQsD,EAAKtD,QAAUsD,EAAKsB,gBAC5BC,aAAcvB,EAAKuB,cAAgB,gBACnCC,aAAcxB,EAAKwB,aACnBC,WAAYzB,EAAK0B,UAAY,WAC7BC,SAAU3B,EAAK4B,SAAW,WAC1BC,YAAa7B,EAAK6B,aAAe,GACjCC,UAAW9B,EAAK+B,WAAa,gBAC7BC,WAAY,WAEZC,MAAOjC,EAAKiC,MACZC,WAAYlC,EAAKkC,WACjBtB,aAAcZ,EAAKY,aACnBE,WAAYd,EAAKc,WAEjBqB,kBAAkB,EAClBC,kBAAmBpC,EAAKY,aACxByB,gBAAiBrC,EAAKc,gBA0B9BwB,EAAAA,EAAAA,WAAU,KACN,IAAIlH,EAAO,mCAAAmH,OAAsC/D,EAAQ9B,OAAM,gBAAA6F,OAAe/D,EAAQ7B,WAAU,UAAA4F,OAAS/D,EAAQ1B,KAAI,QAAAyF,OAAO/D,EAAQtB,GAAE,aAAAqF,OAAY/D,EAAQ5B,SAEzI,YAAboC,IACA5D,GAAO,eAAAmH,OAAmB/D,EAAQ3B,cAGtC2F,EAAAA,EAAAA,GAAU,CACNpH,QAASA,IACVqH,KAAKC,IACJ,GAAIA,EAAKC,QAAS,CACdC,QAAQC,IAAI,2BAA4BH,EAAKA,MAC7C,MAAMI,EAAgBJ,EAAKA,KAAKzB,IAAI8B,IAAQC,OAhCxBC,EAgC+CF,GA/B3EhJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOkJ,GAAI,IACP/B,SAAU,YACVC,QAAS8B,EAAK9B,QACdC,UAAW6B,EAAK7B,UAChBC,aAAc4B,EAAK5B,aACnB3E,OAAQuG,EAAKvG,OACb6E,aAAc0B,EAAK1B,aACnBC,aAAcyB,EAAKzB,aACnBC,WAAYwB,EAAKxB,WACjBE,SAAUsB,EAAKtB,SACfE,YAAaoB,EAAKpB,YAClBC,UAAWmB,EAAKnB,UAChBE,WAAYiB,EAAKjB,WACjBkB,WAAYD,EAAKC,YAAc,GAC/Bf,kBAAkB,IAhBMc,QAiCpBzF,EAAgBsF,EACpB,IACDK,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAC7B,CAAC5E,EAASQ,KAEbsD,EAAAA,EAAAA,WAAU,KACN,IAAIlH,EAAO,4CAAAmH,OAA+C/D,EAAQ9B,OAAM,eAAA6F,OAAc/D,EAAQ1B,KAAI,aAAAyF,OAAY/D,EAAQtB,IAErG,YAAb8B,IACA5D,GAAO,eAAAmH,OAAmB/D,EAAQ3B,cAGtC2F,EAAAA,EAAAA,GAAU,CACNpH,QAASA,IACVqH,KAAKC,IACJ,GAAIA,EAAKC,QAAS,CACdC,QAAQC,IAAI,2BAA4BH,EAAKA,MAC7C,MAAMW,EAAeX,EAAKA,KAAKY,QAAQP,GAAQhD,GAAsBgD,IAErE5D,EAAgBkE,EACpB,IACDF,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAC7B,CAAC5E,EAASQ,KAEbsD,EAAAA,EAAAA,WAAU,KACN,GAAI/E,EAAaiC,OAAS,GAAKN,EAAaM,OAAS,EAAG,CACpD,MAAM+D,EAAe,IAAIhG,KAAiB2B,GAC1C0D,QAAQC,IAAI,8BAA+BU,GAC3C,MAAMC,EAAUC,GAAuBF,GACvC5F,EAAsB6F,EAC1B,GACD,CAACjG,EAAc2B,IAElB,MAAMuE,GAA0Bf,IAC5B,MAAMc,EAAU,CAAC,EA2EjB,OAzEAd,EAAKgB,QAAQX,IACT,MAAMrD,EAAOI,EAAoBiD,EAAK5B,SA8BtC,GA5BKqC,EAAQ9D,KACT8D,EAAQ9D,GAAQ,CACZA,KAAMA,EACNiE,UAAW,GACXC,aAAc,EACdC,WAAY,EACZC,UAAW,IAAIC,IACfC,gBAAiB,CAAC,EAClBC,aAAc,CAAC,EACfC,cAAe,EACfC,eAAgB,EAChBC,gBAAiB,EACjBC,iBAAkB,IAKtBtB,EAAKxB,eACAiC,EAAQ9D,GAAMuE,aAAalB,EAAKxB,gBACjCiC,EAAQ9D,GAAMuE,aAAalB,EAAKxB,cAAgB,GAEpDiC,EAAQ9D,GAAMuE,aAAalB,EAAKxB,iBAIpCiC,EAAQ9D,GAAMiE,UAAUlD,KAAKsC,GAGP,cAAlBA,EAAK7B,SACLsC,EAAQ9D,GAAMyE,iBACdX,EAAQ9D,GAAM2E,kBAAoBC,SAASvB,EAAKlB,cAAgB,EAChE2B,EAAQ9D,GAAMkE,cAAgBU,SAASvB,EAAKlB,cAAgB,MACzD,CACH2B,EAAQ9D,GAAMwE,gBAEd,MAAME,EAAkBE,SAASvB,EAAKlB,cAAgB,GACtD2B,EAAQ9D,GAAM0E,iBAAmBA,EACjCZ,EAAQ9D,GAAMkE,cAAgBQ,CAClC,CAKA,GAHAZ,EAAQ9D,GAAMmE,aAGVd,EAAK1B,cAAgB0B,EAAKrG,OAAQ,CAClC8G,EAAQ9D,GAAMoE,UAAUS,IAAIxB,EAAK1B,cAEjC,MAAMmD,EAAQzB,EAAKrG,OAAO+H,WAErBjB,EAAQ9D,GAAMsE,gBAAgBQ,KAC/BhB,EAAQ9D,GAAMsE,gBAAgBQ,GAAS,CACnC5J,GAAI4J,EACJtJ,KAAM6H,EAAK1B,aACXvC,MAAO,GACP8E,aAAc,EACdM,cAAe,EACfC,eAAgB,IAGxBX,EAAQ9D,GAAMsE,gBAAgBQ,GAAO1F,MAAM2B,KAAKsC,GAE1B,cAAlBA,EAAK7B,UACLsC,EAAQ9D,GAAMsE,gBAAgBQ,GAAOZ,cAAgBU,SAASvB,EAAKlB,cAAgB,EACnF2B,EAAQ9D,GAAMsE,gBAAgBQ,GAAOL,mBAErCX,EAAQ9D,GAAMsE,gBAAgBQ,GAAON,gBACrCV,EAAQ9D,GAAMsE,gBAAgBQ,GAAOZ,cAAgBU,SAASvB,EAAKlB,cAAgB,GAE3F,IAGG6C,OAAOC,OAAOnB,GAASvC,IAAI2D,IAAG7K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC9B6K,GAAG,IACNC,cAAeD,EAAId,UAAUgB,KAC7BC,aAAcL,OAAOM,QAAQJ,EAAIX,cAC5BgB,KAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,IACxBE,MAAM,EAAG,GACTnE,IAAIoE,IAAA,IAAEnK,EAAMoK,GAAMD,EAAA,SAAA9C,OAAQrH,EAAI,MAAAqH,OAAK+C,EAAK,OACxCC,KAAK,MACVC,cAAed,OAAOC,OAAOC,EAAIZ,qBA0JnCyB,GAAiB,SAACC,GAA0C,IAA9BC,EAAWpG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,WAC9C,IAAKmG,GAAoC,kBAAfA,EAAyB,OAAOC,EAE1D,MAAMC,EAAYF,EAAWzI,MAAM,KACnC,GAAI2I,EAAUpG,QAAU,EAAG,CACvB,MAAMqG,EAAQD,EAAU,GAAGE,SAAS,EAAG,KACjCC,EAAUH,EAAU,GAAGE,SAAS,EAAG,KACzC,MAAM,GAANvD,OAAUsD,EAAK,KAAAtD,OAAIwD,EAAO,MAC9B,CACA,OAAOJ,CACX,EAqBMK,GAAgBC,IAClB,IAAKA,EAAQ,MAAO,MACpB,IACI,MAAML,EAAYK,EAAOhJ,MAAM,KACzB4I,EAAQvB,SAASsB,EAAU,IAC3BG,EAAUzB,SAASsB,EAAU,IAEnC,GAAIjG,MAAMkG,IAAUlG,MAAMoG,GAAU,MAAO,MAE3C,IAAIG,EAAUL,EAAQ,GACtBK,EAAUA,GAAW,GACrB,MAAMC,EAASN,EAAQ,GAAK,KAAO,KAE7BO,EAAmBL,EAAU,GAAK,IAAMA,EAAUA,EACxD,MAAM,GAANxD,OAFuB2D,EAAU,GAAK,IAAMA,EAAUA,EAE9B,KAAA3D,OAAI6D,EAAgB,KAAA7D,OAAI4D,EACpD,CAAE,MAAOtG,GACL,MAAO,KACX,GA0DEwG,GAAmBA,IAChBrI,GAAuBA,EAAmB2F,UAI1CzF,EAIEF,EAAmB2F,UAAU5C,OAAOf,GAChCA,EAAKtD,QAAUsD,EAAKtD,OAAO+H,aAAevG,EAAiBuG,YAJ3DzG,EAAmB2F,UAJnB,IAsBfrB,EAAAA,EAAAA,WAAU,MACNE,EAAAA,EAAAA,GAAU,CACNpH,QAAQ,8CAADmH,OAAyD,OAATjG,QAAS,IAATA,OAAS,EAATA,EAAWgK,cACnE7D,KAAKC,IACAA,EAAKC,SACLhE,EAAY+D,EAAKA,QAEtBS,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAE5BZ,EAAAA,EAAAA,GAAU,CACNpH,QAAQ,4CAADmH,OAAuD,OAATjG,QAAS,IAATA,OAAS,EAATA,EAAWiK,SAAQ,gBAAAhE,OAAwB,OAATjG,QAAS,IAATA,OAAS,EAATA,EAAWgK,cACnG7D,KAAKC,IACe,IAAD8D,EAAd9D,EAAKC,SACL9D,EAAqB,OAAJ6D,QAAI,IAAJA,GAAU,QAAN8D,EAAJ9D,EAAMA,YAAI,IAAA8D,OAAN,EAAJA,EAAYvB,KAAK,CAACC,EAAGC,IAAMsB,OAAQ,OAADvB,QAAC,IAADA,OAAC,EAADA,EAAGwB,MAAMC,cAAe,OAADxB,QAAC,IAADA,OAAC,EAADA,EAAGuB,UAElFvD,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAE5BZ,EAAAA,EAAAA,GAAU,CACNpH,QAAQ,qDACTqH,KAAKC,IACe,IAADkE,EAAdlE,EAAKC,SACL5D,EAAa,OAAJ2D,QAAI,IAAJA,GAAU,QAANkE,EAAJlE,EAAMA,YAAI,IAAAkE,OAAN,EAAJA,EAAY3B,KAAK,CAACC,EAAGC,IAAMsB,OAAQ,OAADvB,QAAC,IAADA,OAAC,EAADA,EAAG9D,WAAWuF,cAAe,OAADxB,QAAC,IAADA,OAAC,EAADA,EAAG/D,eAE/E+B,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAE5BZ,EAAAA,EAAAA,GAAU,CACNpH,QAAQ,0CACTqH,KAAKC,IACAA,EAAKC,SACL9E,EAAkB6E,EAAKA,QAE5BS,MAAMC,GAAKR,QAAQ/C,MAAMuD,KAC7B,CAAU,OAAT9G,QAAS,IAATA,OAAS,EAATA,EAAWiK,SAAmB,OAATjK,QAAS,IAATA,OAAS,EAATA,EAAWgK,aAEpC,MAAM1C,GAAeyC,KAAmBQ,OACpC,CAACC,EAAO9G,IAAS8G,GAASxC,SAAStE,EAAK6B,eAAmC,aAAlB7B,EAAKkB,SAA0B,GAAK,IAC7F,GAGJ,OACI6F,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCAAsCF,UACjDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oDAAmDF,SAAA,EAC9DC,EAAAA,EAAAA,KAAA,UACIC,UAAS,yBAAA5E,OAAwC,SAAbvD,EAAsB,cAAgB,aAC1EoI,QAASA,IAAMnI,EAAY,QAAQgI,SACtC,eAGDC,EAAAA,EAAAA,KAAA,UACIC,UAAS,yBAAA5E,OAAwC,YAAbvD,EAAyB,cAAgB,aAC7EoI,QAASA,IAAMnI,EAAY,WAAWgI,SACzC,yBAObF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,MAAKF,SAAA,EAChBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2CAA0CF,UACrDC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAc,OAAP9I,QAAO,IAAPA,OAAO,EAAPA,EAAS9B,OAAQ6K,MAAc,OAAP/I,QAAO,IAAPA,OAAO,EAAPA,EAASrB,QACjDqK,SAAWpE,GAAM3E,GAAW1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIyE,GAAO,IAAE9B,OAAQ0G,EAAEkE,MAAOnK,OAAQiG,EAAEmE,SACtEE,QAAS,CAAC,CAAEH,MAAO,GAAIC,MAAO,mBAAqB3I,EAAcqC,IAAIyG,IAAG,CAAOJ,MAAOI,EAAIC,OAAQJ,MAAOG,EAAIhB,SAC7GkB,OAAQjO,EAAAA,GACRkO,cAAc,EACdC,YAAa,qBAErBZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2CAA0CF,UACrDC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAc,OAAP9I,QAAO,IAAPA,OAAO,EAAPA,EAAS7B,WAAY4K,MAAc,OAAP/I,QAAO,IAAPA,OAAO,EAAPA,EAASpB,YACrDoK,SAAWpE,GAAM3E,GAAW1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIyE,GAAO,IAAE7B,WAAYyG,EAAEkE,MAAOlK,WAAYgG,EAAEmE,SAC9EE,QAAS,IAAI/I,EAASuC,IAAIyG,IAAG,CAAOJ,MAAOI,EAAI/K,WAAY4K,MAAkC,IAA3BQ,OAAOL,EAAI/K,YAAoB,cAAgB+K,EAAIlG,iBACrHoG,OAAQjO,EAAAA,GACRkO,cAAc,EACdC,YAAa,oBAGP,SAAb9I,IACGkI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2CAA0CF,UACrDC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAc,OAAP9I,QAAO,IAAPA,OAAO,EAAPA,EAAS5B,QAAS2K,MAAc,OAAP/I,QAAO,IAAPA,OAAO,EAAPA,EAASnB,SAClDmK,SAAWpE,GAAM3E,GAAW1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIyE,GAAO,IAAE5B,QAASwG,EAAEkE,MAAOjK,QAAS+F,EAAEmE,SACxEE,QAAS,CAAC,CAAEH,MAAO,EAAGC,MAAO,eAAiBzI,EAAMmC,IAAIyG,IAAG,CAAOJ,MAAOI,EAAI9K,QAAS2K,MAAOG,EAAItG,cACjGwG,OAAQjO,EAAAA,GACRkO,cAAc,EACdC,YAAa,kBAIX,YAAb9I,IACGkI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2CAA0CF,UACrDC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,MAAO,CAAEA,MAAc,OAAP9I,QAAO,IAAPA,OAAO,EAAPA,EAAS3B,WAAY0K,MAAc,OAAP/I,QAAO,IAAPA,OAAO,EAAPA,EAASlB,YACrDkK,SAAWpE,GAAM3E,GAAW1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIyE,GAAO,IAAE3B,WAAYuG,EAAEkE,MAAOhK,WAAY8F,EAAEmE,SAC9EE,QAAS,CAAC,CAAEH,MAAO,EAAGC,MAAO,kBAAoB3J,EAAeqD,IAAIyG,IAAG,CAAOJ,MAAOI,EAAIM,GAAIT,MAAOG,EAAInG,iBACxGqG,OAAQjO,EAAAA,GACRkO,cAAc,EACdC,YAAa,yBAK7Bf,EAAAA,EAAAA,MAAA,OAAKI,UAAU,qBAAoBF,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gCAA+BF,SAxLjC,SAAbjI,EAAsB,kEAAoE,kEA0LzFkI,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CACTC,QAAS,CAACC,EAAAA,EAAgBC,EAAAA,EAAYC,EAAAA,EAAeC,EAAAA,IACrDC,YAAY,eACZC,YAAa,IAAIzL,KACjB0L,OArOK,SAAbzJ,EAlKkB0J,MACtB,MAAMC,EAAiB,GAGjBC,EAAa,CAAC,EAwHpB,OArHArL,EAAamG,QAAQX,IACjB,MAAMrD,EAAOI,EAAoBiD,EAAK5B,SACjCyH,EAAWlJ,KACZkJ,EAAWlJ,GAAQ,CACfA,KAAMA,EACNmJ,SAAU,GACVC,UAAW,KAGnBF,EAAWlJ,GAAMoJ,UAAUrI,KAAKsC,KAIpC7D,EAAawE,QAAQX,IACjB,MAAMrD,EAAOI,EAAoBiD,EAAK5B,SACjCyH,EAAWlJ,KACZkJ,EAAWlJ,GAAQ,CACfA,KAAMA,EACNmJ,SAAU,GACVC,UAAW,KAGnBF,EAAWlJ,GAAMmJ,SAASpI,KAAKsC,KAInC2B,OAAOC,OAAOiE,GAAYlF,QAAQqF,IAC9B,MAAM,KAAErJ,EAAI,SAAEmJ,EAAQ,UAAEC,GAAcC,EAGtC,GAAIF,EAASrJ,OAAS,EAAG,CACrB,MAAMwJ,EAAuBH,EAAShC,OAAO,CAACoC,EAAKjJ,IAASiJ,GAAO3E,SAAStE,EAAK6B,cAAgB,IAAK,GACtG8G,EAAelI,KAAK,CAEhBH,MAAOZ,EACPwJ,QAAQ,EACRC,QAAS,aACT7P,gBAAiB,UACjB8P,YAAa,UACbC,UAAW,QACXC,cAAe,CACXC,KAAM,mBACN7J,KAAMA,EACNZ,MAAO+J,EACPvD,MAAOuD,EAASrJ,OAChBoE,aAAcoF,GAElBQ,WAAY,CAAC,oBAErB,CAGA,GAAIV,EAAUtJ,OAAS,EAAG,CACtB,MAAMiK,EAAwBX,EAAUjC,OAAO,CAACoC,EAAKjJ,IAASiJ,GAAO3E,SAAStE,EAAK6B,cAAgB,GAAI,GACvG8G,EAAelI,KAAK,CAEhBH,MAAOZ,EACPwJ,QAAQ,EACRC,QAAS,aACT7P,gBAAiB,UACjB8P,YAAa,UACbC,UAAW,QACXC,cAAe,CACXC,KAAM,oBACN7J,KAAMA,EACNZ,MAAOgK,EACPxD,MAAOwD,EAAUtJ,OACjBoE,aAAc6F,GAElBD,WAAY,CAAC,qBAErB,CAGAX,EAASnF,QAAQ1D,IACb,MAAM0J,EAAW5J,EAAoBE,EAAKmB,SACpCwI,EAAYlE,GAAezF,EAAKyB,WAAY,YAC5CmI,EAAUnE,GAAezF,EAAK2B,SAAU,YAE9CgH,EAAelI,KAAK,CAChBoJ,MAAM,gBAADtH,OAAQvC,EAAKoB,WAClBd,MAAM,GAADiC,OAAKmH,EAAQ,KAAAnH,OAAIoH,GACtBpJ,IAAI,GAADgC,OAAKmH,EAAQ,KAAAnH,OAAIqH,GACpBE,WAAY9J,EACZ1G,gBAAiB,UACjB8P,YAAa,UACbC,UAAW,QACXC,cAAe,CACXQ,WAAY9J,EACZmC,iBAAkBnC,EAAKmC,iBACvBoH,KAAM,uBAKlBT,EAAUpF,QAAQ1D,IACd,MAAM0J,EAAW5J,EAAoBE,EAAKmB,SACpCwI,EAAYlE,GAAezF,EAAKyB,WAAY,YAC5CmI,EAAUnE,GAAezF,EAAK2B,SAAU,YAE9CgH,EAAelI,KAAK,CAChBoJ,MAAM,UAADtH,OAAOvC,EAAKoB,WACjBd,MAAM,GAADiC,OAAKmH,EAAQ,KAAAnH,OAAIoH,GACtBpJ,IAAI,GAADgC,OAAKmH,EAAQ,KAAAnH,OAAIqH,GACpBE,WAAY9J,EACZ1G,gBAAiB,UACjB8P,YAAa,UACbC,UAAW,QACXC,cAAe,CACXQ,WAAY9J,EACZmC,iBAAkBnC,EAAKmC,iBACvBoH,KAAM,0BAMfZ,GAwCID,GAEAhL,EAAmBuD,IAAI2D,IAEnB,CAEHtE,MAHcR,EAAoB8E,EAAIlF,MAItCwJ,QAAQ,EACRY,WAAYlF,EACZtL,gBAAiBsL,EAAIV,cAAgBU,EAAIT,eAAiB,UAAY,UACtEiF,YAAaxE,EAAIV,cAAgBU,EAAIT,eAAiB,UAAY,aA0NlE4F,cAAe,CACXC,KAAM,YACNC,OAAQ,QACRC,MAAO,sDAEXC,aAAc,WACdC,YAAa,WACbC,YAAa,WACbC,qBAAqB,EACrBC,UAAU,EACVC,cAAY,EACZC,WA1LUC,IACtB,GAAiB,SAAb1L,EAAqB,CACrB,MACMsK,EADQoB,EAAKC,MACSrB,cAE5B,GAA2B,qBAAvBA,EAAcC,MAAsD,sBAAvBD,EAAcC,KAA8B,CAEzF,MAAM7J,EAAO4J,EAAc5J,KACrBkL,EAAW,IAAIrN,KAAiB2B,GAAc6B,OAAOf,GACvDF,EAAoBE,EAAKmB,WAAazB,GAGpCmL,EAAU,CACZnL,KAAMA,EACNiE,UAAWiH,EACX1G,cAAsC,qBAAvBoF,EAAcC,KAA8BD,EAAcxK,MAAQ,GACjFqF,eAAuC,sBAAvBmF,EAAcC,KAA+BD,EAAcxK,MAAQ,GACnF+E,WAAY+G,EAASpL,OACrBqF,cAAe,IAAId,IAAI6G,EAAS3J,IAAI6J,GAAKA,EAAEpO,SAASoI,MAGxD7G,EAAsB4M,GACtB1M,EAAoB,IACpBI,GAAoB,EACxB,KAAO,CAEH,MAAMwM,EAASzB,EAAcQ,WAC7B/L,EAAgBgN,GAChB1M,GAAU,EACd,CACJ,KAAO,CACH,MAAMwM,EAAUH,EAAKC,MAAMrB,cAAcQ,WACzC7L,EAAsB4M,GACtB1M,EAAoB,IACpBI,GAAoB,EACxB,GAwJYyM,UAxMSN,IACrB,GAAiB,YAAb1L,EAAwB,CACxB,MAAMiM,EAAcP,EAAKQ,QACnBL,EAAUnN,EAAmByN,KAAKC,GAAKA,EAAE1L,OAASuL,GAEpDJ,IACA5M,EAAsB4M,GACtB1M,EAAoB,IACpBI,GAAoB,GAE5B,GA+LY8M,SAAU3L,IACNjB,EAAY6M,IAAGvR,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUuR,GAAG,IAAExO,KAAM4C,EAAK6L,SAAStO,MAAM,KAAK,GAAIC,GAAIwC,EAAK8L,OAAOvO,MAAM,KAAK,OAEhGwO,OAAQ,KACRC,aAAa,QACbC,WAAW,+BAKnB5E,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CACHC,KAAMzN,EAAQ0N,SAAS,KAAKC,WAAS,EACrCC,QAASA,KAAQ3N,GAAU,GAAQN,EAAgB,CAAC,IAAKkJ,SAAA,EACzDF,EAAAA,EAAAA,MAACkF,EAAAA,EAAW,CAAC9E,UAAU,QAAOF,SAAA,CAAC,kBACgB,cAAf,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,UAA0B,gBAAkB,kBAC7D,OAAZpD,QAAY,IAAZA,OAAY,EAAZA,EAAcqE,mBAAoB,oBAEvC+E,EAAAA,EAAAA,KAACgF,EAAAA,EAAa,CAAC/E,UAAU,OAAMF,UAC3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYF,UACzBF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,eAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UAC1BF,EAAAA,EAAAA,MAAA,QAAMI,UAAS,SAAA5E,OAAsC,cAAf,OAAZzE,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,UAA0B,aAAe,aAAc+F,SAAA,CAC/D,cAAf,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,UAA0B,WAAa,aACzC,OAAZpD,QAAY,IAAZA,OAAY,EAAZA,EAAcqE,mBAAoB,yBAI/C4E,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,mBAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcuD,mBAElD0F,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,UAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcsD,gBAElD2F,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcyD,mBAElDwF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,aAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAc0D,kBAGtB,cAAf,OAAZ1D,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,WACX6F,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,kBAC/BF,EAAAA,EAAAA,MAAA,MAAII,UAAU,iBAAgBF,SAAA,EACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcqD,UAAW,IAAIpE,KAAiB,OAAZe,QAAY,IAAZA,OAAY,EAAZA,EAAcqD,SAASgL,mBAAmB,QAAS,CAClFvH,IAAK,UAAWwH,MAAO,UAAWC,KAAM,aAE/B,OAAZvO,QAAY,IAAZA,OAAY,EAAZA,EAAcqE,mBAAoB,+BAG3C4E,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,gBAC/BF,EAAAA,EAAAA,MAAA,MAAII,UAAU,iBAAgBF,SAAA,EACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcsE,oBAAqB,IAAIrF,KAAiB,OAAZe,QAAY,IAAZA,OAAY,EAAZA,EAAcsE,mBAAmB+J,mBAAmB,SAChG,QACY,OAAZrO,QAAY,IAAZA,OAAY,EAAZA,EAAcuE,kBAAmB,IAAItF,KAAiB,OAAZe,QAAY,IAAZA,OAAY,EAAZA,EAAcuE,iBAAiB8J,mBAAmB,gBAGrGpF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,oBAC/BF,EAAAA,EAAAA,MAAA,MAAII,UAAU,iBAAgBF,SAAA,EACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAc4D,WAAYsE,GAAyB,OAAZlI,QAAY,IAAZA,OAAY,EAAZA,EAAc4D,UAAU,OAAgB,OAAZ5D,QAAY,IAAZA,OAAY,EAAZA,EAAc8D,UAAWoE,GAAyB,OAAZlI,QAAY,IAAZA,OAAY,EAAZA,EAAc8D,gBAGhImF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,sBAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAciE,YAAa,eAInEgF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,UAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcqD,UAAW,IAAIpE,KAAiB,OAAZe,QAAY,IAAZA,OAAY,EAAZA,EAAcqD,SAASgL,mBAAmB,QAAS,CAClFvH,IAAK,UAAWwH,MAAO,UAAWC,KAAM,kBAIpDtF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,gBAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAc2D,aAAcuE,GAAyB,OAAZlI,QAAY,IAAZA,OAAY,EAAZA,EAAc2D,kBAGhEsF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,cAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAc6D,WAAYqE,GAAyB,OAAZlI,QAAY,IAAZA,OAAY,EAAZA,EAAc6D,gBAG9DoF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,eAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcgE,YAAa,eAKvEiF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,cAC/BF,EAAAA,EAAAA,MAAA,MAAII,UAAU,iBAAgBF,SAAA,EACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAc+D,eAA2C,cAAf,OAAZ/D,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,UAA0B,iBAAmB,KAAK,kBAGvG6F,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,YAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,UACb,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAckE,cAA0C,cAAf,OAAZlE,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,UAA0B,WAAa,kBAK/D,cAAf,OAAZpD,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,YAAuC,OAAZpD,QAAY,IAAZA,OAAY,EAAZA,EAAcmE,SACpD8E,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAC,eAC/BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAc,OAAZnJ,QAAY,IAAZA,OAAY,EAAZA,EAAcmE,WAK1B,eAAf,OAAZnE,QAAY,IAAZA,OAAY,EAAZA,EAAcoD,YAAwC,OAAZpD,QAAY,IAAZA,GAAwB,QAAZhC,EAAZgC,EAAcoF,kBAAU,IAAApH,OAAZ,EAAZA,EAA0B0D,QAAS,IAC1EuH,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,MAAIoF,QAAS,EAAGnF,UAAU,oDAAmDF,SAAC,sBAErE,OAAZnJ,QAAY,IAAZA,GAAwB,QAAZ/B,EAAZ+B,EAAcoF,kBAAU,IAAAnH,OAAZ,EAAZA,EAA0BkF,IAAI,CAACsL,EAAGC,KAC/BzF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAG,OAADsF,QAAC,IAADA,OAAC,EAADA,EAAGE,gBACnCvF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,iBAAgBF,SAAG,OAADsF,QAAC,IAADA,OAAC,EAADA,EAAGG,kBAF9BF,iBAWrCtF,EAAAA,EAAAA,KAACyF,EAAAA,EAAa,CAAA1F,UACVC,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CAACxF,QAASA,KAAQ/I,GAAU,GAAQN,EAAgB,CAAC,IAAKkJ,SAAC,gBAK1EF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CACHC,KAAMvN,EAAkBwN,SAAS,KAAKC,WAAS,EAC/CC,QAASA,KAAQzN,GAAoB,GAAQN,EAAsB,CAAC,GAAIE,EAAoB,KAAO8I,SAAA,EACnGF,EAAAA,EAAAA,MAACkF,EAAAA,EAAW,CAAC9E,UAAU,QAAOF,SAAA,CAAC,oBACQ,OAAlBjJ,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB0B,OAAQ,IAAI3C,KAAKiB,EAAmB0B,MAAMyM,mBAAmB,QAAS,CACvGvH,IAAK,UAAWwH,MAAO,UAAWC,KAAM,gBAGhDtF,EAAAA,EAAAA,MAACmF,EAAAA,EAAa,CAAC/E,UAAU,OAAMF,SAAA,EAE3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,WAAUF,SAAA,EACrBC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,qBAAoBF,SAAC,sBACtCC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,MAAOpJ,EACH,CACIoJ,MAAOpJ,EACPqJ,OAAyC,QAAlCvL,EAAAgC,EAAmBgG,uBAAe,IAAAhI,GAAoB,QAApBC,EAAlCD,EAAqCkC,UAAiB,IAAAjC,OAApB,EAAlCA,EAAwDf,OAAQ,oBAEzE,CAAEoM,MAAO,GAAIC,MAAO,iBAE1BC,SAAWpE,GAAMjF,EAAoBiF,EAAEkE,OACvCG,QAAS,CACL,CAAEH,MAAO,GAAIC,MAAO,qBACgB,QAAhCrL,EAAA8B,EAAmBwH,qBAAa,IAAAtJ,OAAA,EAAhCA,EAAkC+E,IAAI4L,IAAG,CACzCvF,MAAOuF,EAAIjS,GACX2M,MAAM,GAADhF,OAAKsK,EAAI3R,KAAI,MAAAqH,OAAKsK,EAAI3I,eAAiB,EAAC,MAAA3B,OAAKsK,EAAI1I,gBAAkB,EAAC,WACtE,IAEXyD,OAAQjO,EAAAA,GACRkO,cAAc,EACdC,YAAY,0BAcxBf,EAAAA,EAAAA,MAAA,OAAKI,UAAU,WAAUF,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBF,SAAC,iBAChCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iCAAgCF,SAAEZ,KAAmB7G,iBAI9E0H,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBF,SAAC,oBAChCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iCAAgCF,SACxCZ,KAAmBtF,OAAOf,GAA0B,aAAlBA,EAAKkB,UAAyB1B,iBAKjF0H,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBF,SAAC,qBAChCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gCAA+BF,SACvCZ,KAAmBtF,OAAOf,GAA0B,cAAlBA,EAAKkB,UAA0B1B,iBAKlF0H,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeF,UAC1BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,4BAA2BF,SAAA,EACtCC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBF,SAAC,oBAChCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,8BAA6BF,SA7W1E,SAA8BrD,GAC1B,MAAMiC,EAAQiH,KAAKC,MAAMnJ,EAAe,IAClCmC,EAAUnC,EAAe,GAC/B,OAAIiC,EAAQ,EACF,GAANtD,OAAUsD,EAAK,MAAAtD,OAAKwD,EAAO,KAEzB,GAANxD,OAAUwD,EAAO,IACrB,CAuWqCiH,CAAqBpJ,iBAQ1CsD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCF,EAAAA,EAAAA,MAAA,SAAOI,UAAU,4BAA2BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,WAAUF,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,OACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,UACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,cACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,UACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,aACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,aACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,UACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,cACtBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAC,sBAG9BC,EAAAA,EAAAA,KAAA,SAAAD,SACmC,IAA9BZ,KAAmB7G,QAChB0H,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,MAAIoF,QAAQ,IAAInF,UAAU,yBAAwBF,SAAC,+CAKvDZ,KAAmBpF,IAAI,CAACjB,EAAMiN,KAC1BlG,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAEgG,EAAQ,KAC/B/F,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,UACjBF,EAAAA,EAAAA,MAAA,QAAMI,UAAS,SAAA5E,OAA6B,aAAlBvC,EAAKkB,SAA0B,aAAe,aAAc+F,SAAA,CAC/D,aAAlBjH,EAAKkB,SAA0B,WAAa,YAC5ClB,EAAKmC,kBAAoB,sBAGlC+E,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAEjH,EAAKqB,gBAC5B6F,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAEjH,EAAKoB,aAC5B8F,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAEjH,EAAKuB,gBAC5B2F,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SAAEjH,EAAKwB,gBAC5B0F,EAAAA,EAAAA,KAAA,MAAIC,UAAU,QAAOF,SACE,cAAlBjH,EAAKkB,UACF6F,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACKjH,EAAKyB,YAAcuE,GAAahG,EAAKyB,YAAY,MAAIzB,EAAK2B,UAAYqE,GAAahG,EAAK2B,cAG7FoF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACKjH,EAAK0B,UAAYsE,GAAahG,EAAK0B,UAAU,MAAI1B,EAAK4B,SAAWoE,GAAahG,EAAK4B,SACnF5B,EAAKmC,kBAAoB,iBAItC4E,EAAAA,EAAAA,MAAA,MAAII,UAAU,QAAOF,SAAA,CAAEjH,EAAK6B,cAAkC,aAAlB7B,EAAKkB,SAA0B,KAAO,KAAK,YACvF6F,EAAAA,EAAAA,MAAA,MAAII,UAAU,QAAOF,SAAA,CACE,cAAlBjH,EAAKkB,SAA2BlB,EAAK8B,UAAY9B,EAAK+B,UACtD/B,EAAKmC,kBAAgB,iBAAAI,OAAqBvC,EAAKoC,mBAAqB,IAAIrF,KAAKiD,EAAKoC,mBAAmB+J,mBAAmB,SAAQ,QAAA5J,OAAOvC,EAAKqC,iBAAmB,IAAItF,KAAKiD,EAAKqC,iBAAiB8J,mBAAmB,SAAQ,UA3BzNc,eAoCjC/F,EAAAA,EAAAA,KAACyF,EAAAA,EAAa,CAAA1F,UACVC,EAAAA,EAAAA,KAAC0F,EAAAA,EAAM,CAACxF,QAASA,KAAQ7I,GAAoB,GAAQN,EAAsB,CAAC,GAAIE,EAAoB,KAAO8I,SAAC,kB","sources":["Components/tablecolumn.js","Pages/Reports/calendar.jsx"],"sourcesContent":["\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","// import React, { useEffect, useState } from \"react\";\r\n// import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import FullCalendar from '@fullcalendar/react'\r\n// import dayGridPlugin from '@fullcalendar/daygrid'\r\n// import timeGridPlugin from '@fullcalendar/timegrid'\r\n// import interactionPlugin from '@fullcalendar/interaction'\r\n// import listPlugin from '@fullcalendar/list';\r\n// import Select from 'react-select';\r\n// import { customSelectStyles } from \"../../Components/tablecolumn\";\r\n// import { fetchLink } from '../../Components/fetchComponent'\r\n\r\n// const ReportCalendar = () => {\r\n//     const localData = localStorage.getItem(\"user\");\r\n//     const parseData = JSON.parse(localData);\r\n//     const initialValueFilter = {\r\n//         Emp_Id: '',\r\n//         Project_Id: 0,\r\n//         Task_Id: 0,\r\n//         Process_Id: 0,\r\n//         from: new Date().toISOString().split('T')[0],\r\n//         to: new Date().toISOString().split('T')[0],\r\n//         EmpGet: 'All Employee',\r\n//         ProjectGet: 'All Project',\r\n//         TaskGet: 'All Task',\r\n//         ProcessGet: 'All Process'\r\n//     }\r\n//     const [workedDetais, setWorkedDetais] = useState([]);\r\n//     const [groupedProcessData, setGroupedProcessData] = useState([]);\r\n//     const [processDetails, setProcessDetails] = useState([]);\r\n//     const [selectedTask, setSelectedTask] = useState({});\r\n//     const [selectedProcessDay, setSelectedProcessDay] = useState({});\r\n//     const [selectedEmployee, setSelectedEmployee] = useState('');\r\n//     const [dialog, setDialog] = useState(false);\r\n//     const [processDayDialog, setProcessDayDialog] = useState(false);\r\n//     const [filters, setFileters] = useState(initialValueFilter);\r\n//     const [projects, setProjects] = useState([]);\r\n//     const [usersDropDown, setUsersDropdown] = useState([]);\r\n//     const [tasks, setTasks] = useState([]);\r\n//     const [viewMode, setViewMode] = useState('task'); \r\n\r\n//     useEffect(() => {\r\n//         let address = `taskManagement/task/work?Emp_Id=${filters.Emp_Id}&Project_Id=${filters.Project_Id}&from=${filters.from}&to=${filters.to}&Task_Id=${filters.Task_Id}`;\r\n        \r\n//         if (viewMode === 'process') {\r\n//             address += `&Process_Id=${filters.Process_Id}`;\r\n//         }\r\n        \r\n//         fetchLink({\r\n//             address: address\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setWorkedDetais(data.data);\r\n                \r\n             \r\n//                 if (viewMode === 'process') {\r\n//                     const grouped = groupProcessDataByDate(data.data);\r\n//                     setGroupedProcessData(grouped);\r\n//                 }\r\n//             }\r\n//         }).catch(e => console.error(e))    \r\n//     }, [filters, viewMode])\r\n\r\n\r\n//     const groupProcessDataByDate = (data) => {\r\n//         const grouped = {};\r\n        \r\n//         data.forEach(item => {\r\n//             const date = new Date(item.Work_Dt).toISOString().split('T')[0];\r\n            \r\n//             if (!grouped[date]) {\r\n//                 grouped[date] = {\r\n//                     date: date,\r\n//                     processes: [],\r\n//                     totalMinutes: 0,\r\n//                     totalTasks: 0,\r\n//                     employees: new Set(),\r\n//                     employeeDetails: {},\r\n//                     processCount: {}\r\n//                 };\r\n//             }\r\n            \r\n         \r\n//             if (item.Process_Name) {\r\n//                 if (!grouped[date].processCount[item.Process_Name]) {\r\n//                     grouped[date].processCount[item.Process_Name] = 0;\r\n//                 }\r\n//                 grouped[date].processCount[item.Process_Name]++;\r\n//             }\r\n            \r\n     \r\n//             grouped[date].processes.push(item);\r\n            \r\n        \r\n//             grouped[date].totalMinutes += parseInt(item.Tot_Minutes) || 0;\r\n//             grouped[date].totalTasks++;\r\n            \r\n          \r\n//             if (item.EmployeeName && item.Emp_Id) {\r\n//                 grouped[date].employees.add(item.EmployeeName);\r\n                \r\n//                 const empId = item.Emp_Id.toString();\r\n                \r\n//                 if (!grouped[date].employeeDetails[empId]) {\r\n//                     grouped[date].employeeDetails[empId] = {\r\n//                         id: empId,\r\n//                         name: item.EmployeeName,\r\n//                         tasks: [],\r\n//                         totalMinutes: 0\r\n//                     };\r\n//                 }\r\n//                 grouped[date].employeeDetails[empId].tasks.push(item);\r\n//                 grouped[date].employeeDetails[empId].totalMinutes += parseInt(item.Tot_Minutes) || 0;\r\n//             }\r\n//         });\r\n        \r\n \r\n//         return Object.values(grouped).map(day => ({\r\n//             ...day,\r\n//             employeeCount: day.employees.size,\r\n//             topProcesses: Object.entries(day.processCount)\r\n//                 .sort((a, b) => b[1] - a[1])\r\n//                 .slice(0, 3)\r\n//                 .map(([name, count]) => `${name} (${count})`)\r\n//                 .join(', '),\r\n//             employeesList: Object.values(day.employeeDetails)\r\n//         }));\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         fetchLink({\r\n//             address: `taskManagement/project/dropDown?Company_id=${parseData?.Company_id}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setProjects(data.data)\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n        \r\n//         fetchLink({\r\n//             address: `masters/users/employee/dropDown?BranchId=${parseData?.BranchId}&Company_id=${parseData?.Company_id}`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setUsersDropdown(data?.data?.sort((a, b) => String(a?.Name).localeCompare(b?.Name)))\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n        \r\n//         fetchLink({\r\n//             address: `taskManagement/task/assignEmployee/task/dropDown`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setTasks(data?.data?.sort((a, b) => String(a?.Task_Name).localeCompare(b?.Task_Name)))\r\n//             }\r\n//         }).catch(e => console.error(e))\r\n        \r\n//         fetchLink({\r\n//             address: `taskManagement/processMaster/dropDown`\r\n//         }).then(data => {\r\n//             if (data.success) {\r\n//                 setProcessDetails(data.data)\r\n//             }\r\n//         }).catch(e => console.error(e))            \r\n//     }, [parseData?.BranchId])\r\n\r\n//     const formatTime24 = (time24) => {\r\n//         const [hours, minutes] = time24.split(':').map(Number);\r\n\r\n//         let hours12 = hours % 12;\r\n//         hours12 = hours12 || 12;\r\n//         const period = hours < 12 ? 'AM' : 'PM';\r\n//         const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n//         const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n//         const time12 = `${formattedHours}:${formattedMinutes} ${period}`;\r\n\r\n//         return time12;\r\n//     }\r\n\r\n//     const getEventTitle = (item) => {\r\n//         if (viewMode === 'task') {\r\n//             return item?.Task_Name;\r\n//         } else {\r\n//             const dayData = groupedProcessData.find(d => d.date === new Date(item.Work_Dt).toISOString().split('T')[0]);\r\n//             if (dayData) {\r\n//                 return `${dayData.totalTasks} tasks | ${dayData.totalMinutes}m | ${dayData.employeeCount} emp`;\r\n//             }\r\n//             return item?.Process_Name || 'No Process';\r\n//         }\r\n//     }\r\n\r\n//     const getCalendarTitle = () => {\r\n//         return viewMode === 'task' ? 'Completed Tasks' : 'Process Timeline (Cumulative)';\r\n//     }\r\n\r\n//     const handleDateClick = (info) => {\r\n//         if (viewMode === 'process') {\r\n//             const clickedDate = info.dateStr;\r\n//             const dayData = groupedProcessData.find(d => d.date === clickedDate);\r\n            \r\n//             if (dayData) {\r\n//                 setSelectedProcessDay(dayData);\r\n//                 setSelectedEmployee('');\r\n//                 setProcessDayDialog(true);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     const getEventBackgroundColor = (item) => {\r\n//         if (viewMode === 'task') {\r\n//             return '#3788d8';\r\n//         } else {\r\n//             const dayData = groupedProcessData.find(d => d.date === new Date(item.Work_Dt).toISOString().split('T')[0]);\r\n//             if (dayData) {\r\n//                 if (dayData.totalMinutes > 480) return '#28a745';\r\n//                 if (dayData.totalMinutes > 240) return '#ffc107';\r\n//                 return '#dc3545';\r\n//             }\r\n//             return '#28a745';\r\n//         }\r\n//     }\r\n\r\n   \r\n//     const getFilteredTasks = () => {\r\n//         if (!selectedProcessDay || !selectedProcessDay.processes) {\r\n//             return [];\r\n//         }\r\n        \r\n//         if (!selectedEmployee) {\r\n//             return selectedProcessDay.processes;\r\n//         }\r\n        \r\n//         return selectedProcessDay.processes.filter(task => {\r\n//             return task.Emp_Id && task.Emp_Id.toString() === selectedEmployee.toString();\r\n//         });\r\n//     }\r\n\r\n//     function formatMinutesToHours(totalMinutes) {\r\n//   const hours = Math.floor(totalMinutes / 60);\r\n//   const minutes = totalMinutes % 60;\r\n//   if (hours > 0) {\r\n//     return `${hours}h ${minutes}m`;\r\n//   }\r\n//   return `${minutes}m`;\r\n// }\r\n// const totalMinutes = getFilteredTasks().reduce(\r\n//   (total, task) => total + (parseInt(task.Tot_Minutes) || 0),\r\n//   0\r\n// );\r\n\r\n//     return (\r\n//         <>\r\n//             <div className=\"row mb-3\">\r\n//                 <div className=\"col-12 d-flex justify-content-center\">\r\n//                     <div className=\"toggle-container bg-light rounded-pill p-1 d-flex\">\r\n//                         <button\r\n//                             className={`btn rounded-pill px-4 ${viewMode === 'task' ? 'btn-primary' : 'btn-light'}`}\r\n//                             onClick={() => setViewMode('task')}\r\n//                         >\r\n//                             Task View\r\n//                         </button>\r\n//                         <button\r\n//                             className={`btn rounded-pill px-4 ${viewMode === 'process' ? 'btn-primary' : 'btn-light'}`}\r\n//                             onClick={() => setViewMode('process')}\r\n//                         >\r\n//                             Process View\r\n//                         </button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n\r\n//             <div className=\"row\">\r\n//                 <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n//                     <Select\r\n//                         value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\r\n//                         onChange={(e) => setFileters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\r\n//                         options={[{ value: '', label: 'All Employee' }, ...usersDropDown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n//                         styles={customSelectStyles}\r\n//                         isSearchable={true}\r\n//                         placeholder={\"Employee Name\"} />\r\n//                 </div>\r\n//                 <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n//                     <Select\r\n//                         value={{ value: filters?.Project_Id, label: filters?.ProjectGet }}\r\n//                         onChange={(e) => setFileters({ ...filters, Project_Id: e.value, ProjectGet: e.label })}\r\n//                         options={[...projects.map(obj => ({ value: obj.Project_Id, label: Number(obj.Project_Id) === 0 ? 'All Project' : obj.Project_Name }))]}\r\n//                         styles={customSelectStyles}\r\n//                         isSearchable={true}\r\n//                         placeholder={\"Project Title\"} />\r\n//                 </div>\r\n                \r\n//                 {viewMode === 'task' && (\r\n//                     <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n//                         <Select\r\n//                             value={{ value: filters?.Task_Id, label: filters?.TaskGet }}\r\n//                             onChange={(e) => setFileters({ ...filters, Task_Id: e.value, TaskGet: e.label })}\r\n//                             options={[{ value: 0, label: 'All Task' }, ...tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))]}\r\n//                             styles={customSelectStyles}\r\n//                             isSearchable={true}\r\n//                             placeholder={\"Select Task\"} />\r\n//                     </div>\r\n//                 )}\r\n                \r\n//                 {viewMode === 'process' && (\r\n//                     <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n//                         <Select\r\n//                             value={{ value: filters?.Process_Id, label: filters?.ProcessGet }}\r\n//                             onChange={(e) => setFileters({ ...filters, Process_Id: e.value, ProcessGet: e.label })}\r\n//                             options={[{ value: 0, label: 'All Process' }, ...processDetails.map(obj => ({ value: obj.Id, label: obj.Process_Name }))]}\r\n//                             styles={customSelectStyles}\r\n//                             isSearchable={true}\r\n//                             placeholder={\"Select Process\"} />\r\n//                     </div>\r\n//                 )}\r\n//             </div>\r\n\r\n//             <div className=\"px-3 py-2 calendar\" >\r\n//                 <h4 className=\"mb-3 text-center text-primary\">{getCalendarTitle()}</h4>\r\n\r\n//                 <FullCalendar\r\n//                     plugins={[timeGridPlugin, listPlugin, dayGridPlugin, interactionPlugin]}\r\n//                     initialView=\"dayGridMonth\"\r\n//                     initialDate={new Date()}\r\n//                     events={\r\n//                         viewMode === 'task' \r\n//                             ? workedDetais.map(o => ({\r\n//                                 title: getEventTitle(o),\r\n//                                 start: new Date(o?.Work_Dt).toISOString().split('T')[0] + 'T' + o?.Start_Time,\r\n//                                 end: new Date(o?.Work_Dt).toISOString().split('T')[0] + 'T' + o?.End_Time,\r\n//                                 objectData: o,\r\n//                                 backgroundColor: getEventBackgroundColor(o),\r\n//                                 borderColor: getEventBackgroundColor(o)\r\n//                             }))\r\n//                             : groupedProcessData.map(day => ({\r\n//                                 title: getEventTitle({ Work_Dt: day.date }),\r\n//                                 start: day.date,\r\n//                                 allDay: true,\r\n//                                 objectData: day,\r\n//                                 backgroundColor: getEventBackgroundColor({ Work_Dt: day.date }),\r\n//                                 borderColor: getEventBackgroundColor({ Work_Dt: day.date })\r\n//                             }))\r\n//                     }\r\n//                     headerToolbar={{\r\n//                         left: 'prev next',\r\n//                         center: 'title',\r\n//                         right: 'timeGridDay, timeGridWeek, dayGridMonth, listMonth',\r\n//                     }}\r\n//                     slotDuration={'00:20:00'}\r\n//                     slotMinTime={'08:00:00'}\r\n//                     slotMaxTime={'22:00:00'}\r\n//                     showNonCurrentDates={false}\r\n//                     editable={false}\r\n//                     selectMirror\r\n//                     eventClick={eve => {\r\n//                         if (viewMode === 'task') {\r\n//                             const eveObj = eve.event.extendedProps.objectData;\r\n//                             setSelectedTask(eveObj);\r\n//                             setDialog(true);\r\n//                         } else {\r\n//                             const dayData = eve.event.extendedProps.objectData;\r\n//                             setSelectedProcessDay(dayData);\r\n//                             setSelectedEmployee('');\r\n//                             setProcessDayDialog(true);\r\n//                         }\r\n//                     }}\r\n//                     dateClick={handleDateClick}\r\n//                     datesSet={date => {\r\n//                         setFileters(pre => ({ ...pre, from: date.startStr.split('T')[0], to: date.endStr.split('T')[0] }))\r\n//                     }}\r\n//                     height={1200}\r\n//                 />\r\n//             </div>\r\n\r\n        \r\n//             <Dialog\r\n//                 open={dialog} maxWidth=\"sm\" fullWidth\r\n//                 onClose={() => { setDialog(false); setSelectedTask({}) }}>\r\n//                 <DialogTitle className=\"fa-18\">\r\n//                     Task Details\r\n//                 </DialogTitle>\r\n//                 <DialogContent className=\"pb-0\">\r\n//                     <div className=\"table-responsive pb-0\">\r\n//                         <table className=\"table mb-0\">\r\n//                             <tbody>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">EmpName</td>\r\n//                                     <td className=\"border-1 fa-14\">{selectedTask?.EmployeeName}</td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Task</td>\r\n//                                     <td className=\"border-1 fa-14\">{selectedTask?.Task_Name}</td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">ProcessName</td>\r\n//                                     <td className=\"border-1 fa-14\">{selectedTask?.Process_Name}</td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Date</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.Work_Dt && new Date(selectedTask?.Work_Dt).toLocaleDateString('en-IN', {\r\n//                                             day: '2-digit', month: '2-digit', year: 'numeric'\r\n//                                         })}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Start Time</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.Start_Time && formatTime24(selectedTask?.Start_Time)}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">End Time</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.End_Time && formatTime24(selectedTask?.End_Time)}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Duration</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.Tot_Minutes} ( Minutes )\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Description</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.Work_Done}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Status</td>\r\n//                                     <td className=\"border-1 fa-14\">\r\n//                                         {selectedTask?.WorkStatus}\r\n//                                     </td>\r\n//                                 </tr>\r\n//                                 <tr>\r\n//                                     <td className=\"border-1 fa-14\">Project</td>\r\n//                                     <td className=\"border-1 fa-14\">{selectedTask?.Project_Name}</td>\r\n//                                 </tr>\r\n//                                 {selectedTask?.Work_Param?.length > 0 && (\r\n//                                     <tr>\r\n//                                         <td colSpan={2} className=\"border-1 fa-14 text-center text-uppercase\">Parameter Values</td>\r\n//                                     </tr>\r\n//                                 )}\r\n//                                 {selectedTask?.Work_Param?.map((o, i) => (\r\n//                                     <tr key={i}>\r\n//                                         <td className=\"border-1 fa-14\">{o?.Paramet_Name}</td>\r\n//                                         <td className=\"border-1 fa-14\">{o?.Current_Value}</td>\r\n//                                     </tr>\r\n//                                 ))}\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </div>\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={() => { setDialog(false); setSelectedTask({}) }}>close</Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n\r\n          \r\n//             <Dialog\r\n//                 open={processDayDialog} maxWidth=\"lg\" fullWidth\r\n//                 onClose={() => { setProcessDayDialog(false); setSelectedProcessDay({}); setSelectedEmployee(''); }}>\r\n//                 <DialogTitle className=\"fa-18\">\r\n//                     Process Summary - {selectedProcessDay?.date && new Date(selectedProcessDay.date).toLocaleDateString('en-IN', {\r\n//                         day: '2-digit', month: '2-digit', year: 'numeric'\r\n//                     })}\r\n//                 </DialogTitle>\r\n//                 <DialogContent className=\"pb-0\">\r\n//                     {/* Employee Selection Dropdown */}\r\n//                     <div className=\"row mb-3\">\r\n//                         <div className=\"col-md-6\">\r\n//                             <label className=\"form-label fw-bold\">Select Employee:</label>\r\n//                             <Select\r\n//                                 value={selectedEmployee ? \r\n//                                     { \r\n//                                         value: selectedEmployee, \r\n//                                         label: selectedProcessDay.employeeDetails?.[selectedEmployee]?.name || 'Unknown Employee'\r\n//                                     } \r\n//                                     : { value: '', label: 'All Employees' }\r\n//                                 }\r\n//                                 onChange={(e) => setSelectedEmployee(e.value)}\r\n//                                 options={[\r\n//                                     { value: '', label: 'All Employees' },\r\n//                                     ...(selectedProcessDay.employeesList?.map(emp => ({\r\n//                                         value: emp.id,\r\n//                                         label: `${emp.name} (${emp.tasks?.length || 0} tasks, ${emp.totalMinutes || 0} mins)`\r\n//                                     })) || [])\r\n//                                 ]}\r\n//                                 styles={customSelectStyles}\r\n//                                 isSearchable={true}\r\n//                                 placeholder=\"Select Employee\"\r\n//                             />\r\n//                         </div>\r\n//                         <div className=\"col-md-6 d-flex align-items-end\">\r\n//                             <div className=\"text-muted fa-14\">\r\n//                                 {selectedEmployee ? \r\n//                                     `Showing tasks for ${selectedProcessDay.employeeDetails?.[selectedEmployee]?.name || 'Unknown'}` \r\n//                                     : `Showing all ${selectedProcessDay.totalTasks || 0} tasks from ${selectedProcessDay.employeeCount || 0} employees`\r\n//                                 }\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n\r\n                  \r\n//                     <div className=\"row mb-3\">\r\n//                         <div className=\"col-md-3\">\r\n//                             <div className=\"card bg-light\">\r\n//                                 <div className=\"card-body text-center p-2\">\r\n//                                     <h6 className=\"card-title mb-1\">Total Tasks</h6>\r\n//                                     <p className=\"card-text h4 text-primary mb-0\">{getFilteredTasks().length}</p>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"col-md-3\">\r\n//                             <div className=\"card bg-light\">\r\n//                                 <div className=\"card-body text-center p-2\">\r\n//                                     <h6 className=\"card-title mb-1\">Total Duration</h6>\r\n//                                     <p className=\"card-text h4 text-success mb-0\">\r\n//                                         {/* {getFilteredTasks().reduce((total, task) => total + (parseInt(task.Tot_Minutes) || 0), 0)}m */}\r\n//                                          {formatMinutesToHours(totalMinutes)}\r\n//                                     </p>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"col-md-3\">\r\n//                             <div className=\"card bg-light\">\r\n//                                 <div className=\"card-body text-center p-2\">\r\n//                                     <h6 className=\"card-title mb-1\">Processes</h6>\r\n//                                     <p className=\"card-text h4 text-info mb-0\">\r\n//                                         {[...new Set(getFilteredTasks().map(task => task.Process_Name))].length}\r\n//                                     </p>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"col-md-3\">\r\n//                             <div className=\"card bg-light\">\r\n//                                 <div className=\"card-body text-center p-2\">\r\n//                                     <h6 className=\"card-title mb-1\">Projects</h6>\r\n//                                     <p className=\"card-text h4 text-warning mb-0\">\r\n//                                         {[...new Set(getFilteredTasks().map(task => task.Project_Name))].length}\r\n//                                     </p>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n\r\n               \r\n//                     <div className=\"table-responsive pb-0\">\r\n//                         <table className=\"table table-bordered mb-0\">\r\n//                             <thead className=\"bg-light\">\r\n//                                 <tr>\r\n//                                     <th className=\"fa-14\">#</th>\r\n//                                     <th className=\"fa-14\">Employee</th>\r\n//                                     <th className=\"fa-14\">Task</th>\r\n//                                     <th className=\"fa-14\">Process</th>\r\n//                                     <th className=\"fa-14\">Time</th>\r\n//                                     <th className=\"fa-14\">Duration</th>\r\n//                                     <th className=\"fa-14\">Description</th>\r\n//                                     <th className=\"fa-14\">Project</th>\r\n//                                 </tr>\r\n//                             </thead>\r\n//                             <tbody>\r\n//                                 {getFilteredTasks().length === 0 ? (\r\n//                                     <tr>\r\n//                                         <td colSpan=\"8\" className=\"text-center fa-14 py-3\">\r\n//                                             No tasks found for the selected criteria\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 ) : (\r\n//                                     getFilteredTasks().map((task, index) => (\r\n//                                         <tr key={index}>\r\n//                                             <td className=\"fa-13\">{index + 1}</td>\r\n//                                             <td className=\"fa-13\">{task.EmployeeName}</td>\r\n//                                             <td className=\"fa-13\">{task.Task_Name}</td>\r\n//                                             <td className=\"fa-13\">{task.Process_Name}</td>\r\n//                                             <td className=\"fa-13\">\r\n//                                                 {task.Start_Time && formatTime24(task.Start_Time)} - {task.End_Time && formatTime24(task.End_Time)}\r\n//                                             </td>\r\n//                                             <td className=\"fa-13\">{task.Tot_Minutes} mins</td>\r\n//                                             <td className=\"fa-13\">{task.Work_Done}</td>\r\n//                                             <td className=\"fa-13\">{task.Project_Name}</td>\r\n//                                         </tr>\r\n//                                     ))\r\n//                                 )}\r\n//                             </tbody>\r\n//                         </table>\r\n//                     </div>\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={() => { setProcessDayDialog(false); setSelectedProcessDay({}); setSelectedEmployee(''); }}>\r\n//                         close\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//         </>\r\n//     );\r\n// }\r\n\r\n// export default ReportCalendar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport listPlugin from '@fullcalendar/list';\r\nimport Select from 'react-select';\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { fetchLink } from '../../Components/fetchComponent'\r\n\r\nconst ReportCalendar = () => {\r\n    const localData = localStorage.getItem(\"user\");\r\n    const parseData = JSON.parse(localData);\r\n    const initialValueFilter = {\r\n        Emp_Id: '',\r\n        Project_Id: 0,\r\n        Task_Id: 0,\r\n        Process_Id: 0,\r\n        from: new Date().toISOString().split('T')[0],\r\n        to: new Date().toISOString().split('T')[0],\r\n        EmpGet: 'All Employee',\r\n        ProjectGet: 'All Project',\r\n        TaskGet: 'All Task',\r\n        ProcessGet: 'All Process'\r\n    }\r\n    const [workedDetais, setWorkedDetais] = useState([]);\r\n    const [groupedProcessData, setGroupedProcessData] = useState([]);\r\n    const [processDetails, setProcessDetails] = useState([]);\r\n    const [selectedTask, setSelectedTask] = useState({});\r\n    const [selectedProcessDay, setSelectedProcessDay] = useState({});\r\n    const [selectedEmployee, setSelectedEmployee] = useState('');\r\n    const [dialog, setDialog] = useState(false);\r\n    const [processDayDialog, setProcessDayDialog] = useState(false);\r\n    const [filters, setFileters] = useState(initialValueFilter);\r\n    const [projects, setProjects] = useState([]);\r\n    const [usersDropDown, setUsersDropdown] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [viewMode, setViewMode] = useState('task'); \r\n    const [taskAssigned, setTaskAssigned] = useState([]);\r\n\r\n    const safeDateParse = (dateString, fallback = new Date()) => {\r\n        if (!dateString) return fallback;\r\n        try {\r\n            const date = new Date(dateString);\r\n            return isNaN(date.getTime()) ? fallback : date;\r\n        } catch (error) {\r\n            return fallback;\r\n        }\r\n    };\r\n\r\n    const safeDateToISOString = (date) => {\r\n        try {\r\n            const validDate = safeDateParse(date);\r\n            return validDate.toISOString().split('T')[0];\r\n        } catch (error) {\r\n            return new Date().toISOString().split('T')[0];\r\n        }\r\n    };\r\n\r\n    const getDatesInRange = (startDate, endDate) => {\r\n        const dates = [];\r\n        const start = safeDateParse(startDate);\r\n        const end = safeDateParse(endDate);\r\n        \r\n        if (isNaN(end.getTime())) {\r\n            return [safeDateToISOString(start)];\r\n        }\r\n        \r\n        const currentDate = new Date(start);\r\n        \r\n        while (currentDate <= end) {\r\n            dates.push(safeDateToISOString(new Date(currentDate)));\r\n            currentDate.setDate(currentDate.getDate() + 1);\r\n        }\r\n        \r\n        return dates;\r\n    };\r\n\r\n    const normalizeAssignedTask = (task) => {\r\n        const startDate = task.Est_Start_Dt || task.Task_Assign_dt;\r\n        const endDate = task.Est_End_Dt || task.Est_Start_Dt || task.Task_Assign_dt;\r\n        \r\n      \r\n        const dateRange = getDatesInRange(startDate, endDate);\r\n       \r\n        const workingDays = dateRange.filter(date => {\r\n            const dayOfWeek = new Date(date).getDay();\r\n            return dayOfWeek !== 0;\r\n        });\r\n\r\n        const events = workingDays.map(date => ({\r\n            ...task,\r\n            workType: 'assigned',\r\n            Work_Dt: date, \r\n            Task_Name: task.Task_Name,\r\n            EmployeeName: task.EmployeeName,\r\n            Emp_Id: task.Emp_Id || task.Assigned_Emp_Id,\r\n            Process_Name: task.Process_Name || 'Not Specified',\r\n            Project_Name: task.Project_Name,\r\n            Start_Time: task.Sch_Time || '08:00:00',\r\n            End_Time: task.EN_Time || '17:00:00',\r\n            Tot_Minutes: task.Tot_Minutes || 60, \r\n            Work_Done: task.Task_Desc || 'Assigned Task',\r\n            WorkStatus: 'Assigned',\r\n         \r\n            AN_No: task.AN_No,\r\n            Sch_Period: task.Sch_Period,\r\n            Est_Start_Dt: task.Est_Start_Dt,\r\n            Est_End_Dt: task.Est_End_Dt,\r\n          \r\n            isDateRangeEvent: true,\r\n            originalStartDate: task.Est_Start_Dt,\r\n            originalEndDate: task.Est_End_Dt\r\n        }));\r\n\r\n        return events;\r\n    };\r\n\r\n    const normalizeCompletedWork = (work) => {\r\n        return {\r\n            ...work,\r\n            workType: 'completed',\r\n            Work_Dt: work.Work_Dt,\r\n            Task_Name: work.Task_Name,\r\n            EmployeeName: work.EmployeeName,\r\n            Emp_Id: work.Emp_Id,\r\n            Process_Name: work.Process_Name,\r\n            Project_Name: work.Project_Name,\r\n            Start_Time: work.Start_Time,\r\n            End_Time: work.End_Time,\r\n            Tot_Minutes: work.Tot_Minutes,\r\n            Work_Done: work.Work_Done,\r\n            WorkStatus: work.WorkStatus,\r\n            Work_Param: work.Work_Param || [],\r\n            isDateRangeEvent: false\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        let address = `taskManagement/task/work?Emp_Id=${filters.Emp_Id}&Project_Id=${filters.Project_Id}&from=${filters.from}&to=${filters.to}&Task_Id=${filters.Task_Id}`;\r\n        \r\n        if (viewMode === 'process') {\r\n            address += `&Process_Id=${filters.Process_Id}`;\r\n        }\r\n        \r\n        fetchLink({\r\n            address: address\r\n        }).then(data => {\r\n            if (data.success) {\r\n                console.log('Completed work raw data:', data.data);\r\n                const completedWork = data.data.map(item => normalizeCompletedWork(item));\r\n                setWorkedDetais(completedWork);\r\n            }\r\n        }).catch(e => console.error(e))    \r\n    }, [filters, viewMode])\r\n\r\n    useEffect(() => {\r\n        let address = `taskManagement/tasks/assignedTask?Emp_Id=${filters.Emp_Id}&startDate=${filters.from}&endDate=${filters.to}`;\r\n   \r\n        if (viewMode === 'process') {\r\n            address += `&Process_Id=${filters.Process_Id}`;\r\n        }\r\n        \r\n        fetchLink({\r\n            address: address\r\n        }).then(data => {\r\n            if (data.success) {\r\n                console.log('Assigned tasks raw data:', data.data);\r\n                const assignedWork = data.data.flatMap(item => normalizeAssignedTask(item));\r\n              \r\n                setTaskAssigned(assignedWork);\r\n            }\r\n        }).catch(e => console.error(e))    \r\n    }, [filters, viewMode])\r\n\r\n    useEffect(() => {\r\n        if (workedDetais.length > 0 || taskAssigned.length > 0) {\r\n            const combinedData = [...workedDetais, ...taskAssigned];\r\n            console.log('Combined data for grouping:', combinedData);\r\n            const grouped = groupProcessDataByDate(combinedData);\r\n            setGroupedProcessData(grouped);\r\n        }\r\n    }, [workedDetais, taskAssigned])\r\n\r\n    const groupProcessDataByDate = (data) => {\r\n        const grouped = {};\r\n        \r\n        data.forEach(item => {\r\n            const date = safeDateToISOString(item.Work_Dt);\r\n            \r\n            if (!grouped[date]) {\r\n                grouped[date] = {\r\n                    date: date,\r\n                    processes: [],\r\n                    totalMinutes: 0,\r\n                    totalTasks: 0,\r\n                    employees: new Set(),\r\n                    employeeDetails: {},\r\n                    processCount: {},\r\n                    assignedTasks: 0,\r\n                    completedTasks: 0,\r\n                    assignedMinutes: 0,\r\n                    completedMinutes: 0\r\n                };\r\n            }\r\n            \r\n\r\n            if (item.Process_Name) {\r\n                if (!grouped[date].processCount[item.Process_Name]) {\r\n                    grouped[date].processCount[item.Process_Name] = 0;\r\n                }\r\n                grouped[date].processCount[item.Process_Name]++;\r\n            }\r\n            \r\n\r\n            grouped[date].processes.push(item);\r\n            \r\n \r\n            if (item.workType === 'completed') {\r\n                grouped[date].completedTasks++;\r\n                grouped[date].completedMinutes += parseInt(item.Tot_Minutes) || 0;\r\n                grouped[date].totalMinutes += parseInt(item.Tot_Minutes) || 0;\r\n            } else {\r\n                grouped[date].assignedTasks++;\r\n\r\n                const assignedMinutes = parseInt(item.Tot_Minutes) || 60;\r\n                grouped[date].assignedMinutes += assignedMinutes;\r\n                grouped[date].totalMinutes += assignedMinutes;\r\n            }\r\n            \r\n            grouped[date].totalTasks++;\r\n            \r\n            // Employee details\r\n            if (item.EmployeeName && item.Emp_Id) {\r\n                grouped[date].employees.add(item.EmployeeName);\r\n                \r\n                const empId = item.Emp_Id.toString();\r\n                \r\n                if (!grouped[date].employeeDetails[empId]) {\r\n                    grouped[date].employeeDetails[empId] = {\r\n                        id: empId,\r\n                        name: item.EmployeeName,\r\n                        tasks: [],\r\n                        totalMinutes: 0,\r\n                        assignedTasks: 0,\r\n                        completedTasks: 0\r\n                    };\r\n                }\r\n                grouped[date].employeeDetails[empId].tasks.push(item);\r\n                \r\n                if (item.workType === 'completed') {\r\n                    grouped[date].employeeDetails[empId].totalMinutes += parseInt(item.Tot_Minutes) || 0;\r\n                    grouped[date].employeeDetails[empId].completedTasks++;\r\n                } else {\r\n                    grouped[date].employeeDetails[empId].assignedTasks++;\r\n                    grouped[date].employeeDetails[empId].totalMinutes += parseInt(item.Tot_Minutes) || 60;\r\n                }\r\n            }\r\n        });\r\n        \r\n        return Object.values(grouped).map(day => ({\r\n            ...day,\r\n            employeeCount: day.employees.size,\r\n            topProcesses: Object.entries(day.processCount)\r\n                .sort((a, b) => b[1] - a[1])\r\n                .slice(0, 3)\r\n                .map(([name, count]) => `${name} (${count})`)\r\n                .join(', '),\r\n            employeesList: Object.values(day.employeeDetails)\r\n        }));\r\n    }\r\n\r\n    // NEW: Create parallel events for assigned and completed tasks\r\n    const getParallelEvents = () => {\r\n        const parallelEvents = [];\r\n        \r\n        // Group by date first\r\n        const dateGroups = {};\r\n        \r\n        // Add completed work\r\n        workedDetais.forEach(item => {\r\n            const date = safeDateToISOString(item.Work_Dt);\r\n            if (!dateGroups[date]) {\r\n                dateGroups[date] = {\r\n                    date: date,\r\n                    assigned: [],\r\n                    completed: []\r\n                };\r\n            }\r\n            dateGroups[date].completed.push(item);\r\n        });\r\n        \r\n        // Add assigned work\r\n        taskAssigned.forEach(item => {\r\n            const date = safeDateToISOString(item.Work_Dt);\r\n            if (!dateGroups[date]) {\r\n                dateGroups[date] = {\r\n                    date: date,\r\n                    assigned: [],\r\n                    completed: []\r\n                };\r\n            }\r\n            dateGroups[date].assigned.push(item);\r\n        });\r\n        \r\n    \r\n        Object.values(dateGroups).forEach(dateGroup => {\r\n            const { date, assigned, completed } = dateGroup;\r\n            \r\n      \r\n            if (assigned.length > 0) {\r\n                const totalAssignedMinutes = assigned.reduce((sum, task) => sum + (parseInt(task.Tot_Minutes) || 60), 0);\r\n                parallelEvents.push({\r\n                    // title: `📋 Assigned: ${assigned.length} tasks | ${formatMinutesToHours(totalAssignedMinutes)}`,\r\n                    start: date,\r\n                    allDay: true,\r\n                    display: 'background',\r\n                    backgroundColor: '#28a745',\r\n                    borderColor: '#28a745',\r\n                    textColor: 'white',\r\n                    extendedProps: {\r\n                        type: 'assigned-summary',\r\n                        date: date,\r\n                        tasks: assigned,\r\n                        count: assigned.length,\r\n                        totalMinutes: totalAssignedMinutes\r\n                    },\r\n                    classNames: ['assigned-column']\r\n                });\r\n            }\r\n            \r\n    \r\n            if (completed.length > 0) {\r\n                const totalCompletedMinutes = completed.reduce((sum, task) => sum + (parseInt(task.Tot_Minutes) || 0), 0);\r\n                parallelEvents.push({\r\n                    // title: `✅ Completed: ${completed.length} tasks | ${formatMinutesToHours(totalCompletedMinutes)}`,\r\n                    start: date,\r\n                    allDay: true,\r\n                    display: 'background',\r\n                    backgroundColor: '#dc3545',\r\n                    borderColor: '#dc3545',\r\n                    textColor: 'white',\r\n                    extendedProps: {\r\n                        type: 'completed-summary',\r\n                        date: date,\r\n                        tasks: completed,\r\n                        count: completed.length,\r\n                        totalMinutes: totalCompletedMinutes\r\n                    },\r\n                    classNames: ['completed-column']\r\n                });\r\n            }\r\n            \r\n       \r\n            assigned.forEach(task => {\r\n                const workDate = safeDateToISOString(task.Work_Dt);\r\n                const startTime = safeTimeFormat(task.Start_Time, '08:00:00');\r\n                const endTime = safeTimeFormat(task.End_Time, '17:00:00');\r\n                \r\n                parallelEvents.push({\r\n                    title: `📋 ${task.Task_Name}`,\r\n                    start: `${workDate}T${startTime}`,\r\n                    end: `${workDate}T${endTime}`,\r\n                    objectData: task,\r\n                    backgroundColor: '#28a745',\r\n                    borderColor: '#28a745',\r\n                    textColor: 'white',\r\n                    extendedProps: {\r\n                        objectData: task,\r\n                        isDateRangeEvent: task.isDateRangeEvent,\r\n                        type: 'assigned-detail'\r\n                    }\r\n                });\r\n            });\r\n            \r\n            completed.forEach(task => {\r\n                const workDate = safeDateToISOString(task.Work_Dt);\r\n                const startTime = safeTimeFormat(task.Start_Time, '08:00:00');\r\n                const endTime = safeTimeFormat(task.End_Time, '17:00:00');\r\n                \r\n                parallelEvents.push({\r\n                    title: `✅ ${task.Task_Name}`,\r\n                    start: `${workDate}T${startTime}`,\r\n                    end: `${workDate}T${endTime}`,\r\n                    objectData: task,\r\n                    backgroundColor: '#dc3545',\r\n                    borderColor: '#dc3545',\r\n                    textColor: 'white',\r\n                    extendedProps: {\r\n                        objectData: task,\r\n                        isDateRangeEvent: task.isDateRangeEvent,\r\n                        type: 'completed-detail'\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        \r\n        return parallelEvents;\r\n    }\r\n\r\n    const getEventTitle = (item) => {\r\n        if (viewMode === 'task') {\r\n            const workType = item.workType === 'assigned' ? '[Assigned]' : '[Completed]';\r\n            const rangeIndicator = item.workType === 'assigned' && item.isDateRangeEvent ? ' 📅' : '';\r\n            return `${workType} ${item?.Task_Name || 'Task'}${rangeIndicator}`;\r\n        } else {\r\n            const dayData = groupedProcessData.find(d => d.date === safeDateToISOString(item.Work_Dt));\r\n            if (dayData) {\r\n                return `${dayData.assignedTasks}A/${dayData.completedTasks}C | ${dayData.totalMinutes}m`;\r\n            }\r\n            return item?.Process_Name || 'No Process';\r\n        }\r\n    }\r\n\r\n    const getEventBackgroundColor = (item) => {\r\n        if (item.workType === 'assigned') {\r\n            return '#28a745'; // Green\r\n        } else {\r\n            return '#dc3545'; // Red\r\n        }\r\n    }\r\n\r\n    const safeTimeFormat = (timeString, defaultTime = '08:00:00') => {\r\n        if (!timeString || typeof timeString !== 'string') return defaultTime;\r\n        \r\n        const timeParts = timeString.split(':');\r\n        if (timeParts.length >= 2) {\r\n            const hours = timeParts[0].padStart(2, '0');\r\n            const minutes = timeParts[1].padStart(2, '0');\r\n            return `${hours}:${minutes}:00`;\r\n        }\r\n        return defaultTime;\r\n    };\r\n\r\n    const getCalendarEvents = () => {\r\n        if (viewMode === 'task') {\r\n         \r\n            return getParallelEvents();\r\n        } else {\r\n            return groupedProcessData.map(day => {\r\n                const validDate = safeDateToISOString(day.date);\r\n                return {\r\n                    // title: `${day.assignedTasks}A/${day.completedTasks}C | ${day.totalMinutes}m | ${day.employeeCount} emp`,\r\n                    start: validDate,\r\n                    allDay: true,\r\n                    objectData: day,\r\n                    backgroundColor: day.assignedTasks > day.completedTasks ? '#28a745' : '#dc3545',\r\n                    borderColor: day.assignedTasks > day.completedTasks ? '#28a745' : '#dc3545'\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    const formatTime24 = (time24) => {\r\n        if (!time24) return 'N/A';\r\n        try {\r\n            const timeParts = time24.split(':');\r\n            const hours = parseInt(timeParts[0]);\r\n            const minutes = parseInt(timeParts[1]);\r\n            \r\n            if (isNaN(hours) || isNaN(minutes)) return 'N/A';\r\n            \r\n            let hours12 = hours % 12;\r\n            hours12 = hours12 || 12;\r\n            const period = hours < 12 ? 'AM' : 'PM';\r\n            const formattedHours = hours12 < 10 ? '0' + hours12 : hours12;\r\n            const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\r\n            return `${formattedHours}:${formattedMinutes} ${period}`;\r\n        } catch (error) {\r\n            return 'N/A';\r\n        }\r\n    }\r\n\r\n    const getCalendarTitle = () => {\r\n        return viewMode === 'task' ? 'Task Calendar - Parallel View (Green: Assigned, Red: Completed)' : 'Process Timeline (Green: More Assigned, Red: More Completed)';\r\n    }\r\n\r\n    const handleDateClick = (info) => {\r\n        if (viewMode === 'process') {\r\n            const clickedDate = info.dateStr;\r\n            const dayData = groupedProcessData.find(d => d.date === clickedDate);\r\n            \r\n            if (dayData) {\r\n                setSelectedProcessDay(dayData);\r\n                setSelectedEmployee('');\r\n                setProcessDayDialog(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleEventClick = (info) => {\r\n        if (viewMode === 'task') {\r\n            const event = info.event;\r\n            const extendedProps = event.extendedProps;\r\n            \r\n            if (extendedProps.type === 'assigned-summary' || extendedProps.type === 'completed-summary') {\r\n                \r\n                const date = extendedProps.date;\r\n                const allTasks = [...workedDetais, ...taskAssigned].filter(task => \r\n                    safeDateToISOString(task.Work_Dt) === date\r\n                );\r\n                \r\n                const dayData = {\r\n                    date: date,\r\n                    processes: allTasks,\r\n                    assignedTasks: extendedProps.type === 'assigned-summary' ? extendedProps.tasks : [],\r\n                    completedTasks: extendedProps.type === 'completed-summary' ? extendedProps.tasks : [],\r\n                    totalTasks: allTasks.length,\r\n                    employeeCount: new Set(allTasks.map(t => t.Emp_Id)).size\r\n                };\r\n                \r\n                setSelectedProcessDay(dayData);\r\n                setSelectedEmployee('');\r\n                setProcessDayDialog(true);\r\n            } else {\r\n               \r\n                const eveObj = extendedProps.objectData;\r\n                setSelectedTask(eveObj);\r\n                setDialog(true);\r\n            }\r\n        } else {\r\n            const dayData = info.event.extendedProps.objectData;\r\n            setSelectedProcessDay(dayData);\r\n            setSelectedEmployee('');\r\n            setProcessDayDialog(true);\r\n        }\r\n    }\r\n\r\n    const getFilteredTasks = () => {\r\n        if (!selectedProcessDay || !selectedProcessDay.processes) {\r\n            return [];\r\n        }\r\n        \r\n        if (!selectedEmployee) {\r\n            return selectedProcessDay.processes;\r\n        }\r\n        \r\n        return selectedProcessDay.processes.filter(task => {\r\n            return task.Emp_Id && task.Emp_Id.toString() === selectedEmployee.toString();\r\n        });\r\n    }\r\n\r\n    function formatMinutesToHours(totalMinutes) {\r\n        const hours = Math.floor(totalMinutes / 60);\r\n        const minutes = totalMinutes % 60;\r\n        if (hours > 0) {\r\n            return `${hours}h ${minutes}m`;\r\n        }\r\n        return `${minutes}m`;\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `taskManagement/project/dropDown?Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProjects(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n        \r\n        fetchLink({\r\n            address: `masters/users/employee/dropDown?BranchId=${parseData?.BranchId}&Company_id=${parseData?.Company_id}`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUsersDropdown(data?.data?.sort((a, b) => String(a?.Name).localeCompare(b?.Name)))\r\n            }\r\n        }).catch(e => console.error(e))\r\n        \r\n        fetchLink({\r\n            address: `taskManagement/task/assignEmployee/task/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setTasks(data?.data?.sort((a, b) => String(a?.Task_Name).localeCompare(b?.Task_Name)))\r\n            }\r\n        }).catch(e => console.error(e))\r\n        \r\n        fetchLink({\r\n            address: `taskManagement/processMaster/dropDown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProcessDetails(data.data)\r\n            }\r\n        }).catch(e => console.error(e))            \r\n    }, [parseData?.BranchId, parseData?.Company_id])\r\n\r\n    const totalMinutes = getFilteredTasks().reduce(\r\n        (total, task) => total + (parseInt(task.Tot_Minutes) || (task.workType === 'assigned' ? 60 : 0)),\r\n        0\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row mb-3\">\r\n                <div className=\"col-12 d-flex justify-content-center\">\r\n                    <div className=\"toggle-container bg-light rounded-pill p-1 d-flex\">\r\n                        <button\r\n                            className={`btn rounded-pill px-4 ${viewMode === 'task' ? 'btn-primary' : 'btn-light'}`}\r\n                            onClick={() => setViewMode('task')}\r\n                        >\r\n                            Task View\r\n                        </button>\r\n                        <button\r\n                            className={`btn rounded-pill px-4 ${viewMode === 'process' ? 'btn-primary' : 'btn-light'}`}\r\n                            onClick={() => setViewMode('process')}\r\n                        >\r\n                            Process View\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                    <Select\r\n                        value={{ value: filters?.Emp_Id, label: filters?.EmpGet }}\r\n                        onChange={(e) => setFileters({ ...filters, Emp_Id: e.value, EmpGet: e.label })}\r\n                        options={[{ value: '', label: 'All Employee' }, ...usersDropDown.map(obj => ({ value: obj.UserId, label: obj.Name }))]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Employee Name\"} />\r\n                </div>\r\n                <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                    <Select\r\n                        value={{ value: filters?.Project_Id, label: filters?.ProjectGet }}\r\n                        onChange={(e) => setFileters({ ...filters, Project_Id: e.value, ProjectGet: e.label })}\r\n                        options={[...projects.map(obj => ({ value: obj.Project_Id, label: Number(obj.Project_Id) === 0 ? 'All Project' : obj.Project_Name }))]}\r\n                        styles={customSelectStyles}\r\n                        isSearchable={true}\r\n                        placeholder={\"Project Title\"} />\r\n                </div>\r\n                \r\n                {viewMode === 'task' && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                        <Select\r\n                            value={{ value: filters?.Task_Id, label: filters?.TaskGet }}\r\n                            onChange={(e) => setFileters({ ...filters, Task_Id: e.value, TaskGet: e.label })}\r\n                            options={[{ value: 0, label: 'All Task' }, ...tasks.map(obj => ({ value: obj.Task_Id, label: obj.Task_Name }))]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            placeholder={\"Select Task\"} />\r\n                    </div>\r\n                )}\r\n                \r\n                {viewMode === 'process' && (\r\n                    <div className=\"col-xxl-2 col-lg-3 col-md-4 col-sm-4 p-2\">\r\n                        <Select\r\n                            value={{ value: filters?.Process_Id, label: filters?.ProcessGet }}\r\n                            onChange={(e) => setFileters({ ...filters, Process_Id: e.value, ProcessGet: e.label })}\r\n                            options={[{ value: 0, label: 'All Process' }, ...processDetails.map(obj => ({ value: obj.Id, label: obj.Process_Name }))]}\r\n                            styles={customSelectStyles}\r\n                            isSearchable={true}\r\n                            placeholder={\"Select Process\"} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"px-3 py-2 calendar\" >\r\n                <h4 className=\"mb-3 text-center text-primary\">{getCalendarTitle()}</h4>\r\n\r\n                <FullCalendar\r\n                    plugins={[timeGridPlugin, listPlugin, dayGridPlugin, interactionPlugin]}\r\n                    initialView=\"dayGridMonth\"\r\n                    initialDate={new Date()}\r\n                    events={getCalendarEvents()}\r\n                    headerToolbar={{\r\n                        left: 'prev next',\r\n                        center: 'title',\r\n                        right: 'timeGridDay, timeGridWeek, dayGridMonth, listMonth',\r\n                    }}\r\n                    slotDuration={'00:20:00'}\r\n                    slotMinTime={'08:00:00'}\r\n                    slotMaxTime={'22:00:00'}\r\n                    showNonCurrentDates={false}\r\n                    editable={false}\r\n                    selectMirror\r\n                    eventClick={handleEventClick}\r\n                    dateClick={handleDateClick}\r\n                    datesSet={date => {\r\n                        setFileters(pre => ({ ...pre, from: date.startStr.split('T')[0], to: date.endStr.split('T')[0] }))\r\n                    }}\r\n                    height={1200}\r\n                    eventDisplay=\"block\"\r\n                    eventOrder=\"start,-duration,allDay\"\r\n                />\r\n            </div>\r\n\r\n   \r\n            <Dialog\r\n                open={dialog} maxWidth=\"sm\" fullWidth\r\n                onClose={() => { setDialog(false); setSelectedTask({}) }}>\r\n                <DialogTitle className=\"fa-18\">\r\n                    Task Details - {selectedTask?.workType === 'assigned' ? 'Assigned Task' : 'Completed Work'}\r\n                    {selectedTask?.isDateRangeEvent && ' (Date Range)'}\r\n                </DialogTitle>\r\n                <DialogContent className=\"pb-0\">\r\n                    <div className=\"table-responsive pb-0\">\r\n                        <table className=\"table mb-0\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Work Type</td>\r\n                                    <td className=\"border-1 fa-14\">\r\n                                        <span className={`badge ${selectedTask?.workType === 'assigned' ? 'bg-success' : 'bg-danger'}`}>\r\n                                            {selectedTask?.workType === 'assigned' ? 'Assigned' : 'Completed'}\r\n                                            {selectedTask?.isDateRangeEvent && ' (Date Range)'}\r\n                                        </span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Employee Name</td>\r\n                                    <td className=\"border-1 fa-14\">{selectedTask?.EmployeeName}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Task</td>\r\n                                    <td className=\"border-1 fa-14\">{selectedTask?.Task_Name}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Process Name</td>\r\n                                    <td className=\"border-1 fa-14\">{selectedTask?.Process_Name}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Project</td>\r\n                                    <td className=\"border-1 fa-14\">{selectedTask?.Project_Name}</td>\r\n                                </tr>\r\n                                \r\n                                {selectedTask?.workType === 'assigned' ? (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Display Date</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.Work_Dt && new Date(selectedTask?.Work_Dt).toLocaleDateString('en-IN', {\r\n                                                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n                                                })}\r\n                                                {selectedTask?.isDateRangeEvent && ' (Part of Date Range)'}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Date Range</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.originalStartDate && new Date(selectedTask?.originalStartDate).toLocaleDateString('en-IN')} \r\n                                                {' to '}\r\n                                                {selectedTask?.originalEndDate && new Date(selectedTask?.originalEndDate).toLocaleDateString('en-IN')}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Scheduled Time</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.Sch_Time && formatTime24(selectedTask?.Sch_Time)} - {selectedTask?.EN_Time && formatTime24(selectedTask?.EN_Time)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Task Description</td>\r\n                                            <td className=\"border-1 fa-14\">{selectedTask?.Task_Desc || 'N/A'}</td>\r\n                                        </tr>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Date</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.Work_Dt && new Date(selectedTask?.Work_Dt).toLocaleDateString('en-IN', {\r\n                                                    day: '2-digit', month: '2-digit', year: 'numeric'\r\n                                                })}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Start Time</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.Start_Time && formatTime24(selectedTask?.Start_Time)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">End Time</td>\r\n                                            <td className=\"border-1 fa-14\">\r\n                                                {selectedTask?.End_Time && formatTime24(selectedTask?.End_Time)}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td className=\"border-1 fa-14\">Work Done</td>\r\n                                            <td className=\"border-1 fa-14\">{selectedTask?.Work_Done || 'N/A'}</td>\r\n                                        </tr>\r\n                                    </>\r\n                                )}\r\n                                \r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Duration</td>\r\n                                    <td className=\"border-1 fa-14\">\r\n                                        {selectedTask?.Tot_Minutes || (selectedTask?.workType === 'assigned' ? '60 (Estimated)' : '0')} Minutes\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className=\"border-1 fa-14\">Status</td>\r\n                                    <td className=\"border-1 fa-14\">\r\n                                        {selectedTask?.WorkStatus || (selectedTask?.workType === 'assigned' ? 'Assigned' : 'Completed')}\r\n                                    </td>\r\n                                </tr>\r\n\r\n                            \r\n                                {selectedTask?.workType === 'assigned' && selectedTask?.AN_No && (\r\n                                    <tr>\r\n                                        <td className=\"border-1 fa-14\">AN Number</td>\r\n                                        <td className=\"border-1 fa-14\">{selectedTask?.AN_No}</td>\r\n                                    </tr>\r\n                                )}\r\n\r\n                            \r\n                                {selectedTask?.workType === 'completed' && selectedTask?.Work_Param?.length > 0 && (\r\n                                    <>\r\n                                        <tr>\r\n                                            <td colSpan={2} className=\"border-1 fa-14 text-center text-uppercase fw-bold\">Work Parameters</td>\r\n                                        </tr>\r\n                                        {selectedTask?.Work_Param?.map((o, i) => (\r\n                                            <tr key={i}>\r\n                                                <td className=\"border-1 fa-14\">{o?.Paramet_Name}</td>\r\n                                                <td className=\"border-1 fa-14\">{o?.Current_Value}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { setDialog(false); setSelectedTask({}) }}>close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n           \r\n            <Dialog\r\n                open={processDayDialog} maxWidth=\"lg\" fullWidth\r\n                onClose={() => { setProcessDayDialog(false); setSelectedProcessDay({}); setSelectedEmployee(''); }}>\r\n                <DialogTitle className=\"fa-18\">\r\n                    Daily Summary - {selectedProcessDay?.date && new Date(selectedProcessDay.date).toLocaleDateString('en-IN', {\r\n                        day: '2-digit', month: '2-digit', year: 'numeric'\r\n                    })}\r\n                </DialogTitle>\r\n                <DialogContent className=\"pb-0\">\r\n        \r\n                    <div className=\"row mb-3\">\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label fw-bold\">Select Employee:</label>\r\n                            <Select\r\n                                value={selectedEmployee ? \r\n                                    { \r\n                                        value: selectedEmployee, \r\n                                        label: selectedProcessDay.employeeDetails?.[selectedEmployee]?.name || 'Unknown Employee'\r\n                                    } \r\n                                    : { value: '', label: 'All Employees' }\r\n                                }\r\n                                onChange={(e) => setSelectedEmployee(e.value)}\r\n                                options={[\r\n                                    { value: '', label: 'All Employees' },\r\n                                    ...(selectedProcessDay.employeesList?.map(emp => ({\r\n                                        value: emp.id,\r\n                                        label: `${emp.name} (${emp.assignedTasks || 0}A/${emp.completedTasks || 0}C)`\r\n                                    })) || [])\r\n                                ]}\r\n                                styles={customSelectStyles}\r\n                                isSearchable={true}\r\n                                placeholder=\"Select Employee\"\r\n                            />\r\n                        </div>\r\n                        {/* <div className=\"col-md-6 d-flex align-items-end\">\r\n                            <div className=\"text-muted fa-14\">\r\n                                {selectedEmployee ? \r\n                                    `Showing tasks for ${selectedProcessDay.employeeDetails?.[selectedEmployee]?.name || 'Unknown'}` \r\n                                    : `Showing all ${selectedProcessDay.totalTasks || 0} tasks (${selectedProcessDay.assignedTasks || 0}A/${selectedProcessDay.completedTasks || 0}C) from ${selectedProcessDay.employeeCount || 0} employees`\r\n                                }\r\n                            </div>\r\n                        </div> */}\r\n                    </div>\r\n\r\n            \r\n                    <div className=\"row mb-3\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"card bg-light\">\r\n                                <div className=\"card-body text-center p-2\">\r\n                                    <h6 className=\"card-title mb-1\">Total Tasks</h6>\r\n                                    <p className=\"card-text h4 text-primary mb-0\">{getFilteredTasks().length}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"card bg-light\">\r\n                                <div className=\"card-body text-center p-2\">\r\n                                    <h6 className=\"card-title mb-1\">Assigned Tasks</h6>\r\n                                    <p className=\"card-text h4 text-success mb-0\">\r\n                                        {getFilteredTasks().filter(task => task.workType === 'assigned').length}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"card bg-light\">\r\n                                <div className=\"card-body text-center p-2\">\r\n                                    <h6 className=\"card-title mb-1\">Completed Tasks</h6>\r\n                                    <p className=\"card-text h4 text-danger mb-0\">\r\n                                        {getFilteredTasks().filter(task => task.workType === 'completed').length}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"card bg-light\">\r\n                                <div className=\"card-body text-center p-2\">\r\n                                    <h6 className=\"card-title mb-1\">Total Duration</h6>\r\n                                    <p className=\"card-text h4 text-info mb-0\">\r\n                                        {formatMinutesToHours(totalMinutes)}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n         \r\n                    <div className=\"table-responsive pb-0\">\r\n                        <table className=\"table table-bordered mb-0\">\r\n                            <thead className=\"bg-light\">\r\n                                <tr>\r\n                                    <th className=\"fa-14\">#</th>\r\n                                    <th className=\"fa-14\">Type</th>\r\n                                    <th className=\"fa-14\">Employee</th>\r\n                                    <th className=\"fa-14\">Task</th>\r\n                                    <th className=\"fa-14\">Process</th>\r\n                                    <th className=\"fa-14\">Project</th>\r\n                                    <th className=\"fa-14\">Time</th>\r\n                                    <th className=\"fa-14\">Duration</th>\r\n                                    <th className=\"fa-14\">Description</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {getFilteredTasks().length === 0 ? (\r\n                                    <tr>\r\n                                        <td colSpan=\"9\" className=\"text-center fa-14 py-3\">\r\n                                            No tasks found for the selected criteria\r\n                                        </td>\r\n                                    </tr>\r\n                                ) : (\r\n                                    getFilteredTasks().map((task, index) => (\r\n                                        <tr key={index}>\r\n                                            <td className=\"fa-13\">{index + 1}</td>\r\n                                            <td className=\"fa-13\">\r\n                                                <span className={`badge ${task.workType === 'assigned' ? 'bg-success' : 'bg-danger'}`}>\r\n                                                    {task.workType === 'assigned' ? 'Assigned' : 'Completed'}\r\n                                                    {task.isDateRangeEvent && ' 📅'}\r\n                                                </span>\r\n                                            </td>\r\n                                            <td className=\"fa-13\">{task.EmployeeName}</td>\r\n                                            <td className=\"fa-13\">{task.Task_Name}</td>\r\n                                            <td className=\"fa-13\">{task.Process_Name}</td>\r\n                                            <td className=\"fa-13\">{task.Project_Name}</td>\r\n                                            <td className=\"fa-13\">\r\n                                                {task.workType === 'completed' ? (\r\n                                                    <>\r\n                                                        {task.Start_Time && formatTime24(task.Start_Time)} - {task.End_Time && formatTime24(task.End_Time)}\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        {task.Sch_Time && formatTime24(task.Sch_Time)} - {task.EN_Time && formatTime24(task.EN_Time)}\r\n                                                        {task.isDateRangeEvent && ' (Range)'}\r\n                                                    </>\r\n                                                )}\r\n                                            </td>\r\n                                            <td className=\"fa-13\">{task.Tot_Minutes || (task.workType === 'assigned' ? '60' : '0')} mins</td>\r\n                                            <td className=\"fa-13\">\r\n                                                {task.workType === 'completed' ? task.Work_Done : task.Task_Desc}\r\n                                                {task.isDateRangeEvent && ` (Date Range: ${task.originalStartDate && new Date(task.originalStartDate).toLocaleDateString('en-IN')} to ${task.originalEndDate && new Date(task.originalEndDate).toLocaleDateString('en-IN')})`}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { setProcessDayDialog(false); setSelectedProcessDay({}); setSelectedEmployee(''); }}>\r\n                        close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ReportCalendar;"],"names":["customTableStyles","table","style","width","backgroundColor","rows","headCells","color","fontSize","customSelectStyles","menu","provided","state","_objectSpread","zIndex","menuPortal","base","groupHeading","fontWeight","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","align","companyDetails","dataBase","name","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","ReportCalendar","_selectedTask$Work_Pa","_selectedTask$Work_Pa2","_selectedProcessDay$e","_selectedProcessDay$e2","_selectedProcessDay$e3","localData","localStorage","getItem","parseData","JSON","parse","initialValueFilter","Emp_Id","Project_Id","Task_Id","Process_Id","from","Date","toISOString","split","to","EmpGet","ProjectGet","TaskGet","ProcessGet","workedDetais","setWorkedDetais","useState","groupedProcessData","setGroupedProcessData","processDetails","setProcessDetails","selectedTask","setSelectedTask","selectedProcessDay","setSelectedProcessDay","selectedEmployee","setSelectedEmployee","dialog","setDialog","processDayDialog","setProcessDayDialog","filters","setFileters","projects","setProjects","usersDropDown","setUsersDropdown","tasks","setTasks","viewMode","setViewMode","taskAssigned","setTaskAssigned","safeDateParse","dateString","fallback","arguments","length","undefined","date","isNaN","getTime","error","safeDateToISOString","normalizeAssignedTask","task","dateRange","getDatesInRange","startDate","endDate","dates","start","end","currentDate","push","setDate","getDate","Est_Start_Dt","Task_Assign_dt","Est_End_Dt","filter","getDay","map","workType","Work_Dt","Task_Name","EmployeeName","Assigned_Emp_Id","Process_Name","Project_Name","Start_Time","Sch_Time","End_Time","EN_Time","Tot_Minutes","Work_Done","Task_Desc","WorkStatus","AN_No","Sch_Period","isDateRangeEvent","originalStartDate","originalEndDate","useEffect","concat","fetchLink","then","data","success","console","log","completedWork","item","normalizeCompletedWork","work","Work_Param","catch","e","assignedWork","flatMap","combinedData","grouped","groupProcessDataByDate","forEach","processes","totalMinutes","totalTasks","employees","Set","employeeDetails","processCount","assignedTasks","completedTasks","assignedMinutes","completedMinutes","parseInt","add","empId","toString","Object","values","day","employeeCount","size","topProcesses","entries","sort","a","b","slice","_ref","count","join","employeesList","safeTimeFormat","timeString","defaultTime","timeParts","hours","padStart","minutes","formatTime24","time24","hours12","period","formattedMinutes","getFilteredTasks","Company_id","BranchId","_data$data","String","Name","localeCompare","_data$data2","reduce","total","_jsxs","_Fragment","children","_jsx","className","onClick","Select","value","label","onChange","options","obj","UserId","styles","isSearchable","placeholder","Number","Id","FullCalendar","plugins","timeGridPlugin","listPlugin","dayGridPlugin","interactionPlugin","initialView","initialDate","events","getParallelEvents","parallelEvents","dateGroups","assigned","completed","dateGroup","totalAssignedMinutes","sum","allDay","display","borderColor","textColor","extendedProps","type","classNames","totalCompletedMinutes","workDate","startTime","endTime","title","objectData","headerToolbar","left","center","right","slotDuration","slotMinTime","slotMaxTime","showNonCurrentDates","editable","selectMirror","eventClick","info","event","allTasks","dayData","t","eveObj","dateClick","clickedDate","dateStr","find","d","datesSet","pre","startStr","endStr","height","eventDisplay","eventOrder","Dialog","open","maxWidth","fullWidth","onClose","DialogTitle","DialogContent","toLocaleDateString","month","year","colSpan","o","i","Paramet_Name","Current_Value","DialogActions","Button","emp","Math","floor","formatMinutesToHours","index"],"sourceRoot":""}