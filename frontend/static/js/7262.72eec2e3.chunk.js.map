{"version":3,"file":"static/js/7262.72eec2e3.chunk.js","mappings":"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","sources":["Components/requiredStar.jsx","Pages/Masters/AccountMasterSales.jsx","Components/filterableTable2.jsx","../node_modules/@mui/icons-material/esm/Delete.js","Components/tablecolumn.js","../node_modules/@mui/icons-material/esm/Edit.js"],"sourcesContent":["const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchLink } from \"../../Components/fetchComponent\";\r\nimport FilterableTable, { ButtonActions, createCol } from \"../../Components/filterableTable2\";\r\nimport { Edit, Delete } from \"@mui/icons-material\";\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from \"@mui/material\";\r\nimport Select from \"react-select\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\nimport { toast } from \"react-toastify\";\r\nimport RequiredStar from \"../../Components/requiredStar\";\r\nimport { checkIsNumber, toArray } from \"../../Components/functions\";\r\n\r\nconst initialValue = {\r\n    Id: \"\",\r\n    Acc_Id: \"\",\r\n    Account_Name: \"\",\r\n    Sales_Id: \"\",\r\n    Sales_Person_Name: \"\",\r\n    Type: \"\",\r\n};\r\n\r\nconst AccountMasterSales = ({ loadingOn, loadingOff }) => {\r\n    const [records, setRecords] = useState([]);\r\n    const [inputValue, setInputValue] = useState(initialValue);\r\n    const [accountList, setAccountList] = useState([]);\r\n    const [salesPersonList, setSalesPersonList] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        dialog: false,\r\n        refresh: false,\r\n        searchValue: { value: \"\", label: \"Search Account\" },\r\n    });\r\n\r\n    const [deleteDialog, setDeleteDialog] = useState(false);\r\n    const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n    // Fetch account master dropdown\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/accountMasterSales/accounts`,\r\n            loadingOn,\r\n            loadingOff,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) setAccountList(toArray(data.data));\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [loadingOn, loadingOff]);\r\n\r\n    // Fetch sales person dropdown\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/accountMasterSales/salespersons`,\r\n            loadingOn,\r\n            loadingOff,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) setSalesPersonList(toArray(data.data));\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [loadingOn, loadingOff]);\r\n\r\n    // Fetch AccountMasterSales records\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/accountMasterSales`,\r\n            loadingOn,\r\n            loadingOff,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) setRecords(toArray(data.data));\r\n                else setRecords([]);\r\n            })\r\n            .catch((e) => console.error(e));\r\n    }, [filters.refresh, loadingOn, loadingOff]);\r\n\r\n    // Close Dialog\r\n    const closeDialog = () => {\r\n        setFilters((pre) => ({ ...pre, dialog: false }));\r\n        setInputValue(initialValue);\r\n    };\r\n\r\n    // Save or Update AccountMasterSales\r\n    const saveRecord = () => {\r\n        const method = checkIsNumber(inputValue.Id) ? \"PUT\" : \"POST\";\r\n\r\n        if (!inputValue.Acc_Id || !inputValue.Sales_Id || !inputValue.Type) {\r\n            toast.warn(\"Please fill all required fields.\");\r\n            return;\r\n        }\r\n\r\n        fetchLink({\r\n            address: `masters/accountMasterSales`,\r\n            method,\r\n            bodyData: {\r\n                ...inputValue,\r\n                User_Id: inputValue.Sales_Id,\r\n            },\r\n            loadingOn,\r\n            loadingOff,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(data.message || \"Record saved successfully!\");\r\n                    setFilters((pre) => ({\r\n                        ...pre,\r\n                        dialog: false,\r\n                        refresh: !pre.refresh,\r\n                    }));\r\n                    setInputValue(initialValue);\r\n                } else {\r\n                    toast.error(data.message || \"Something went wrong!\");\r\n                }\r\n            })\r\n            .catch((e) => console.error(e));\r\n    };\r\n\r\n    // Delete Record\r\n    const handleDeleteOpen = (row) => {\r\n        setSelectedRow(row);\r\n        setDeleteDialog(true);\r\n    };\r\n\r\n    // Confirm Delete Handler\r\n    const confirmDelete = () => {\r\n        if (!selectedRow) return;\r\n\r\n        fetchLink({\r\n            address: `masters/accountMasterSales`,\r\n            method: \"DELETE\",\r\n            bodyData: { Id: selectedRow.Id },\r\n            loadingOn,\r\n            loadingOff,\r\n        })\r\n            .then((data) => {\r\n                if (data.success) {\r\n                    toast.success(\"Record deleted successfully!\");\r\n                    setFilters((pre) => ({ ...pre, refresh: !pre.refresh }));\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            })\r\n            .catch((e) => console.error(e))\r\n            .finally(() => {\r\n                setDeleteDialog(false);\r\n                setSelectedRow(null);\r\n            });\r\n    };\r\n\r\n    // Cancel delete dialog\r\n    const cancelDelete = () => {\r\n        setDeleteDialog(false);\r\n        setSelectedRow(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <FilterableTable\r\n                title=\"Account Master - Sales\"\r\n                EnableSerialNumber\r\n                ButtonArea={\r\n                    <>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            className=\"mx-1\"\r\n                            onClick={() => setFilters((pre) => ({ ...pre, dialog: true }))}\r\n                        >\r\n                            Add Account - Sales\r\n                        </Button>\r\n                        <div style={{ minWidth: \"270px\" }}>\r\n                            <Select\r\n                                value={filters.searchValue}\r\n                                options={[\r\n                                    { value: \"\", label: \"ALL\" },\r\n                                    ...records.map((rec) => ({\r\n                                        value: rec.Acc_Id,\r\n                                        label: rec.Account_Name,\r\n                                    })),\r\n                                ]}\r\n                                menuPortalTarget={document.body}\r\n                                onChange={(e) =>\r\n                                    setFilters((pre) => ({ ...pre, searchValue: e }))\r\n                                }\r\n                                styles={customSelectStyles}\r\n                                isSearchable\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n                dataArray={\r\n                    filters.searchValue.value\r\n                        ? records.filter(\r\n                            (rec) =>\r\n                                String(rec.Account_Name)\r\n                                    .toLowerCase()\r\n                                    .includes(filters.searchValue.label.toLowerCase()) ||\r\n                                String(rec.Sales_Person_Name)\r\n                                    .toLowerCase()\r\n                                    .includes(filters.searchValue.label.toLowerCase())\r\n                        )\r\n                        : records\r\n                }\r\n                columns={[\r\n                    createCol(\"Account_Name\", \"string\", \"Account Name\"),\r\n                    createCol(\"Sales_Person_Name\", \"string\", \"Sales Person\"),\r\n                    createCol(\"Type\", \"string\", \"Type\"),\r\n                    {\r\n                        isVisible: 1,\r\n                        ColumnHeader: \"Action\",\r\n                        isCustomCell: true,\r\n                        Cell: ({ row }) => (\r\n                            <ButtonActions\r\n                                buttonsData={[\r\n                                    {\r\n                                        name: \"Edit\",\r\n                                        icon: <Edit />,\r\n                                        onclick: () => {\r\n                                            setInputValue(row);\r\n                                            setFilters((pre) => ({ ...pre, dialog: true }));\r\n                                        },\r\n                                    },\r\n                                    {\r\n                                        name: \"Delete\",\r\n                                        icon: <Delete />,\r\n                                        onclick: () => handleDeleteOpen(row),\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n            {/* Add/Edit Dialog */}\r\n            <Dialog\r\n                open={filters.dialog}\r\n                onClose={closeDialog}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n            >\r\n                <DialogTitle>\r\n                    {checkIsNumber(inputValue.Id)\r\n                        ? \"Modify Account (Sales)\"\r\n                        : \"Add Account (Sales)\"}\r\n                </DialogTitle>\r\n\r\n                <form\r\n                    onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        saveRecord();\r\n                    }}\r\n                >\r\n                    <DialogContent>\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table fa-13\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"vctr\">\r\n                                            Account <RequiredStar />\r\n                                        </td>\r\n                                        <td>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: inputValue.Acc_Id,\r\n                                                    label: inputValue.Account_Name || \"Select\",\r\n                                                }}\r\n                                                options={[\r\n                                                    { value: \"\", label: \"Select\" },\r\n                                                    ...accountList.map((acc) => ({\r\n                                                        value: acc.value,\r\n                                                        label: acc.label,\r\n                                                    })),\r\n                                                ]}\r\n                                                menuPortalTarget={document.body}\r\n                                                onChange={(e) =>\r\n                                                    setInputValue((pre) => ({\r\n                                                        ...pre,\r\n                                                        Acc_Id: e.value,\r\n                                                        Account_Name: e.label,\r\n                                                    }))\r\n                                                }\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"vctr\">\r\n                                            Sales Person <RequiredStar />\r\n                                        </td>\r\n                                        <td>\r\n                                            <Select\r\n                                                value={{\r\n                                                    value: inputValue.Sales_Id,\r\n                                                    label: inputValue.Sales_Person_Name || \"Select\",\r\n                                                }}\r\n                                                options={[\r\n                                                    { value: \"\", label: \"Select\" },\r\n                                                    ...salesPersonList.map((sp) => ({\r\n                                                        value: sp.Id,\r\n                                                        label: sp.Name,\r\n                                                    })),\r\n                                                ]}\r\n                                                menuPortalTarget={document.body}\r\n                                                onChange={(e) =>\r\n                                                    setInputValue((pre) => ({\r\n                                                        ...pre,\r\n                                                        Sales_Id: e.value,\r\n                                                        Sales_Person_Name: e.label,\r\n                                                    }))\r\n                                                }\r\n                                                styles={customSelectStyles}\r\n                                                isSearchable\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n\r\n                                    <tr>\r\n                                        <td className=\"vctr\">\r\n                                            Type <RequiredStar />\r\n                                        </td>\r\n                                        <td>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"cus-inpt p-2\"\r\n                                                value={inputValue.Type}\r\n                                                onChange={(e) =>\r\n                                                    setInputValue((pre) => ({\r\n                                                        ...pre,\r\n                                                        Type: e.target.value,\r\n                                                    }))\r\n                                                }\r\n                                                required\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                closeDialog();\r\n                                setInputValue(initialValue);\r\n                            }}\r\n                            type=\"button\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button size=\"small\" type=\"submit\" variant=\"contained\">\r\n                            Save\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n            {/* Delete Confirmation Dialog */}\r\n            <Dialog open={deleteDialog} onClose={cancelDelete}>\r\n                <DialogTitle>Confirm Delete</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete this record?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={cancelDelete}>Cancel</Button>\r\n                    <Button variant=\"contained\" onClick={confirmDelete}>Delete</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountMasterSales;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');"],"names":["RequiredStar","_jsx","style","color","fontWeight","fontSize","children","initialValue","Id","Acc_Id","Account_Name","Sales_Id","Sales_Person_Name","Type","_ref","loadingOn","loadingOff","records","setRecords","useState","inputValue","setInputValue","accountList","setAccountList","salesPersonList","setSalesPersonList","filters","setFilters","dialog","refresh","searchValue","value","label","deleteDialog","setDeleteDialog","selectedRow","setSelectedRow","useEffect","fetchLink","address","then","data","success","toArray","catch","e","console","error","closeDialog","pre","_objectSpread","cancelDelete","_jsxs","_Fragment","FilterableTable","title","EnableSerialNumber","ButtonArea","Button","variant","className","onClick","minWidth","Select","options","map","rec","menuPortalTarget","document","body","onChange","styles","customSelectStyles","isSearchable","dataArray","filter","String","toLowerCase","includes","columns","createCol","isVisible","ColumnHeader","isCustomCell","Cell","_ref2","row","ButtonActions","buttonsData","name","icon","Edit","onclick","Delete","handleDeleteOpen","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","checkIsNumber","onSubmit","preventDefault","saveRecord","method","bodyData","User_Id","toast","message","warn","DialogContent","acc","sp","Name","type","target","required","DialogActions","size","confirmDelete","finally","preprocessDataForExport","flattenedRow","forEach","column","index","Defult_Display","cellContent","safeColumnHeader","replace","concat","key","Field_Name","field","arguments","length","undefined","align","verticalAlign","Fied_Data","ToolTipText","anchorEl","setAnchorEl","popOverOpen","Boolean","Tooltip","IconButton","event","currentTarget","MoreVert","Popover","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","disabled","ListItemIcon","ListItemText","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","Fragment","TableRow","TableCell","sx","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","log","colSpan","Number","Card","component","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","rows","header","o","i","Sno","autoTable","head","save","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","createSvgIcon","d","customTableStyles","table","width","headCells","menu","provided","state","zIndex","menuPortal","base","groupHeading","padding","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","companyDetails","dataBase","business","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules"],"sourceRoot":""}