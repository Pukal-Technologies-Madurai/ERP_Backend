{"version":3,"file":"static/js/7276.548fb9c1.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Sync.js","Components/requiredStar.jsx","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/icons-material/esm/Close.js","Components/filterableTable2.jsx","Components/imagePreview.jsx","Components/tablecolumn.js","../node_modules/@mui/icons-material/esm/Add.js","../node_modules/@mui/icons-material/esm/Search.js","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/AddPhotoAlternate.js","Pages/Masters/Components/productAddEdit.jsx","Pages/Masters/newProduct.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8m0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4z\"\n}), 'Sync');","const RequiredStar = () => (\r\n    <span style={{ color: 'red', fontWeight: 'bold', fontSize: '1em' }}> *</span>\r\n);\r\n\r\nexport default RequiredStar;\r\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Table, TableBody, TableContainer, TableRow, Paper, TablePagination, TableHead, TableCell,\r\n    TableSortLabel, IconButton, Popover, MenuList, MenuItem, ListItemIcon, ListItemText,\r\n    Tooltip, Card\r\n} from '@mui/material';\r\nimport { isEqualNumber, LocalDate, LocalTime, NumberFormat } from './functions';\r\nimport { Download, KeyboardArrowDown, KeyboardArrowUp, MoreVert, ToggleOff, ToggleOn } from '@mui/icons-material';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @typedef {Object} Column\r\n * @property {string} [Field_Name]\r\n * @property {'string'|'number'|'date'|'time'} [Fied_Data]\r\n * @property {'top'|'middle'|'bottom'} [verticalAlign]\r\n * @property {string} [ColumnHeader]\r\n * @property {string} [tdClass]\r\n * @property {0|1} [isVisible]\r\n * @property {'left'|'right'|'center'} [align]\r\n * @property {boolean} [isCustomCell]\r\n * @property {(row: object) => JSX.Element} [Cell]\r\n */\r\n\r\n/**\r\n * @typedef {Object} Menu\r\n * @property {string} [name]\r\n * @property {JSX.Element} [icon]\r\n * @property {() => void} [onclick]\r\n * @property {boolean} [disabled]\r\n */\r\n\r\n/**\r\n * @typedef {Object} FilterableTableProps\r\n * @property {Array<Object>} [dataArray]\r\n * @property {Array<Column>} [columns]\r\n * @property {Function} [onClickFun]\r\n * @property {boolean} [isExpendable]\r\n * @property {JSX.Element} [expandableComp]\r\n * @property {number} [tableMaxHeight]\r\n * @property {number} [initialPageCount]\r\n * @property {boolean} [EnableSerialNumber]\r\n * @property {'small'|'medium'|'large'} [CellSize]\r\n * @property {boolean} [disablePagination]\r\n * @property {string} [title]\r\n * @property {boolean} [PDFPrintOption]\r\n * @property {boolean} [ExcelPrintOption]\r\n * @property {boolean} [maxHeightOption]\r\n * @property {JSX.Element} [ButtonArea]\r\n * @property {Array<Menu>} [MenuButtons]\r\n * @property {number} [bodyFontSizePx]\r\n * @property {number} [headerFontSizePx]\r\n */\r\n\r\n/**\r\n * @param {FilterableTableProps} props\r\n */\r\n\r\n/**\r\n * Button Actions\r\n * @param {Array<Menu>} [buttonsData] \r\n * @param {string} [ToolTipText] \r\n */\r\n\r\nconst preprocessDataForExport = (data, columns) => {\r\n    return data.map((row) => {\r\n        const flattenedRow = {};\r\n\r\n        columns.forEach((column, index) => {\r\n            if (column.isVisible || column.Defult_Display) {\r\n                if (column.isCustomCell && column.Cell) {\r\n                    const cellContent = column.Cell({ row });\r\n\r\n                    const safeColumnHeader = column.ColumnHeader\r\n                        ? String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase()\r\n                        : `field_${index + 1}`;\r\n\r\n                    if (typeof cellContent === 'string' || typeof cellContent === 'number' || typeof cellContent === 'bigint') {\r\n                        flattenedRow[safeColumnHeader] = cellContent;\r\n                    }\r\n                    // else if (React.isValidElement(cellContent)) {\r\n                    //     flattenedRow[safeColumnHeader] = 'null';\r\n                    // } else {\r\n                    //     flattenedRow[safeColumnHeader] = 'invalid';\r\n                    // }\r\n                } else {\r\n                    // Handle regular fields\r\n                    let key = column.Field_Name;\r\n                    flattenedRow[key] = row[key] || '';\r\n                }\r\n            }\r\n        });\r\n\r\n        return flattenedRow;\r\n    });\r\n};\r\n\r\nconst generatePDF = (dataArray, columns) => {\r\n    try {\r\n        const doc = new jsPDF();\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const headers = columns\r\n            .filter((column) => column.isVisible || column.Defult_Display)\r\n            .map((column) => column.Field_Name || String(column.ColumnHeader).replace(/\\s+/g, '_').toLowerCase());\r\n\r\n        const rows = processedData.map((row) =>\r\n            headers.map((header) => row[header])\r\n        ).map((o, i) => ({ ...o, Sno: i + 1 }))\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: rows,\r\n        });\r\n\r\n        doc.save('table.pdf');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst exportToExcel = (dataArray, columns) => {\r\n    try {\r\n        const processedData = preprocessDataForExport(dataArray, columns);\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(processedData);\r\n        const workbook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n        XLSX.writeFile(workbook, 'table.xlsx');\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst createCol = (\r\n    field = '', \r\n    type = 'string', \r\n    ColumnHeader = '', \r\n    align = 'left', \r\n    verticalAlign = 'center', \r\n    isVisible = 1\r\n) => {\r\n    return {\r\n        isVisible: isVisible,\r\n        Field_Name: field,\r\n        Fied_Data: type,\r\n        align,\r\n        verticalAlign,\r\n        ...(ColumnHeader && { ColumnHeader })\r\n    }\r\n}\r\n\r\nconst ButtonActions = ({ buttonsData = [], ToolTipText = 'Options' }) => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const popOverOpen = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title={ToolTipText}>\r\n                <IconButton aria-describedby={popOverOpen} onClick={handleClick} className='ms-2' size='small'>\r\n                    <MoreVert />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <Popover\r\n                open={popOverOpen}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <MenuList>\r\n                    {buttonsData.map((btn, btnKey) => (\r\n                        <MenuItem\r\n                            key={btnKey}\r\n                            onClick={() => btn?.onclick && btn?.onclick()}\r\n                            disabled={btn?.disabled}\r\n                        >\r\n                            <ListItemIcon>{btn?.icon}</ListItemIcon>\r\n                            <ListItemText>{btn?.name}</ListItemText>\r\n                        </MenuItem>\r\n                    ))}\r\n                </MenuList>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nconst formatString = (val, dataType) => {\r\n    switch (dataType) {\r\n        case 'number':\r\n            return val ? NumberFormat(val) : val;\r\n        case 'date':\r\n            return val ? LocalDate(val) : val;\r\n        case 'time':\r\n            return val ? LocalTime(val) : val;\r\n        case 'string':\r\n            return val;\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nconst FilterableTable = ({\r\n    dataArray = [],\r\n    columns = [],\r\n    onClickFun = null,\r\n    isExpendable = false,\r\n    expandableComp = null,\r\n    tableMaxHeight = 550,\r\n    initialPageCount = 20,\r\n    EnableSerialNumber = false,\r\n    CellSize = 'small' || 'medium',\r\n    disablePagination = false,\r\n    title = '',\r\n    PDFPrintOption = false,\r\n    ExcelPrintOption = false,\r\n    maxHeightOption = false,\r\n    ButtonArea = null,\r\n    MenuButtons = [],\r\n    bodyFontSizePx = 13,\r\n    headerFontSizePx = 13\r\n}) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(initialPageCount);\r\n    const [sortCriteria, setSortCriteria] = useState([]);\r\n    const [showFullHeight, setShowFullHeight] = useState(true);\r\n    const tableHeight = (showFullHeight && maxHeightOption) ? ' max-content ' : tableMaxHeight;\r\n\r\n    const columnAlign = [\r\n        {\r\n            type: 'left',\r\n            class: 'text-start'\r\n        }, {\r\n            type: 'right',\r\n            class: 'text-end'\r\n        }, {\r\n            type: 'center',\r\n            class: 'text-center'\r\n        }\r\n    ];\r\n\r\n    const columnVerticalAlign = [\r\n        {\r\n            type: 'top',\r\n            class: ' vtop '\r\n        }, {\r\n            type: 'bottom',\r\n            class: ' vbottom '\r\n        }, {\r\n            type: 'center',\r\n            class: ' vctr '\r\n        }\r\n    ]\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleSortRequest = (columnId) => {\r\n        const existingCriteria = sortCriteria.find(criteria => criteria.columnId === columnId);\r\n        if (existingCriteria) {\r\n            const isAsc = existingCriteria.direction === 'asc';\r\n            setSortCriteria(sortCriteria.map(criteria =>\r\n                criteria.columnId === columnId\r\n                    ? { ...criteria, direction: isAsc ? 'desc' : 'asc' }\r\n                    : criteria\r\n            ));\r\n        } else {\r\n            setSortCriteria([...sortCriteria, { columnId, direction: 'asc' }]);\r\n        }\r\n    };\r\n\r\n    const sortData = (data) => {\r\n        if (!sortCriteria.length) return data;\r\n\r\n        const sortedData = [...data].sort((a, b) => {\r\n            for (const criteria of sortCriteria) {\r\n                const { columnId, direction } = criteria;\r\n                const aValue = a[columnId];\r\n                const bValue = b[columnId];\r\n\r\n                if (aValue !== bValue) {\r\n                    if (direction === 'asc') {\r\n                        return aValue > bValue ? 1 : -1;\r\n                    } else {\r\n                        return aValue < bValue ? 1 : -1;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        return sortedData;\r\n    };\r\n\r\n    const sortedData = sortData(dataArray);\r\n    const startIndex = page * rowsPerPage;\r\n    const endIndex = startIndex + rowsPerPage;\r\n    const paginatedData = sortedData.slice(startIndex, endIndex);\r\n\r\n    const RowComp = ({ row, index }) => {\r\n        const [open, setOpen] = useState(false);\r\n        const fontSize = '20px';\r\n\r\n        return (\r\n            <Fragment>\r\n                <TableRow>\r\n\r\n                    {(isExpendable === true && expandableComp) && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            <IconButton size='small' onClick={() => setOpen(pre => !pre)}>\r\n                                {open ? <KeyboardArrowUp sx={{ fontSize }} /> : <KeyboardArrowDown sx={{ fontSize }} />}\r\n                            </IconButton>\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {EnableSerialNumber === true && (\r\n                        <TableCell className='border-end text-center vtop' sx={{ fontSize: `${bodyFontSizePx}px` }}>\r\n                            {(rowsPerPage * page) + index + 1}\r\n                        </TableCell>\r\n                    )}\r\n\r\n                    {columns?.map((column, columnInd) => {\r\n                        const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                        const isCustomCell = Boolean(column?.isCustomCell) && column.Cell;\r\n                        const isCommonValue = !isCustomCell;\r\n\r\n                        const tdClass = (row, Field_Name, tdIndex) => (\r\n                            column?.tdClass ? ` ${column?.tdClass({ row, Field_Name, index: tdIndex })} ` : ''\r\n                        );\r\n\r\n                        const horizondalalignClass = column.align\r\n                            ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                            : '';\r\n\r\n                        const verticalAlignClass = column.verticalAlign\r\n                            ? columnVerticalAlign.find(align => align.type === String(column.verticalAlign).toLowerCase())?.class\r\n                            : ' vctr ';\r\n\r\n                        if (isColumnVisible && isCommonValue) {\r\n                            const foundEntry = Object.entries(row).find(([key]) => key === column.Field_Name);\r\n\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                    onClick={() => onClickFun ? onClickFun(row) : console.log('Function not supplied')}\r\n                                >\r\n                                    {foundEntry ? formatString(foundEntry[1], column?.Fied_Data) : '-'}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        if (isColumnVisible && isCustomCell) {\r\n                            return (\r\n                                <TableCell\r\n                                    key={columnInd}\r\n                                    className={`border-end ${horizondalalignClass} ${verticalAlignClass} ${tdClass(row, column.Field_Name, index)}`}\r\n                                    sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                >\r\n                                    {column.Cell({ row, Field_Name: column.Field_Name, index })}\r\n                                </TableCell>\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <TableCell\r\n                                key={columnInd}\r\n                                sx={{ fontSize: `${bodyFontSizePx}px` }}\r\n                                className={`border-end ${horizondalalignClass} ${verticalAlignClass}`}\r\n                            >\r\n                                -\r\n                            </TableCell>\r\n                        );\r\n                    })}\r\n\r\n                </TableRow>\r\n\r\n                {(isExpendable === true && expandableComp && open) && (\r\n                    <TableRow>\r\n                        <TableCell colSpan={Number(columns?.length) + (EnableSerialNumber === true ? 2 : 1)}>{expandableComp({ row, index })}</TableCell>\r\n                    </TableRow>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className='rounded-3 bg-white overflow-hidden' component={Paper}>\r\n            <div\r\n                className=\"d-flex align-items-center flex-wrap px-3 py-2 flex-row-reverse \"\r\n            >\r\n                {(PDFPrintOption || ExcelPrintOption || MenuButtons.length > 0 || maxHeightOption) && (\r\n                    <ButtonActions\r\n                        ToolTipText='Table Options'\r\n                        buttonsData={[\r\n                            ...(maxHeightOption\r\n                                ? [{\r\n                                    name: 'Max Height',\r\n                                    icon: showFullHeight\r\n                                        ? <ToggleOn fontSize=\"small\" color='primary' />\r\n                                        : <ToggleOff fontSize=\"small\" />,\r\n                                    onclick: () => setShowFullHeight(pre => !pre),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(PDFPrintOption\r\n                                ? [{\r\n                                    name: 'PDF Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => generatePDF(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...(ExcelPrintOption\r\n                                ? [{\r\n                                    name: 'Excel Print',\r\n                                    icon: <Download fontSize=\"small\" color='primary' />,\r\n                                    onclick: () => exportToExcel(dataArray, columns),\r\n                                    disabled: isEqualNumber(dataArray?.length, 0)\r\n                                }]\r\n                                : []),\r\n                            ...MenuButtons,\r\n                        ]}\r\n                    />\r\n                )}\r\n                {ButtonArea && ButtonArea}\r\n                {title && <h6 className='fw-bold text-muted flex-grow-1 m-0'>{title}</h6>}\r\n            </div>\r\n\r\n            <TableContainer sx={{ maxHeight: tableHeight }}>\r\n\r\n                <Table stickyHeader size={CellSize}>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {/* Expendable column */}\r\n                            {isExpendable && expandableComp && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    #\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Serial number column */}\r\n                            {EnableSerialNumber && (\r\n                                <TableCell\r\n                                    className='fw-bold border-end border-top text-center'\r\n                                    sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                >\r\n                                    SNo\r\n                                </TableCell>\r\n                            )}\r\n\r\n                            {/* Columns */}\r\n                            {columns.map((column, ke) => {\r\n                                const isColumnVisible = isEqualNumber(column?.Defult_Display, 1) || isEqualNumber(column?.isVisible, 1);\r\n                                const isSortable = Boolean(column?.isCustomCell) === false || !column.Cell;\r\n                                const sortCriteriaMatch = sortCriteria.find(criteria => criteria.columnId === column.Field_Name);\r\n                                const sortDirection = sortCriteriaMatch ? sortCriteriaMatch.direction : 'asc';\r\n\r\n                                if (isColumnVisible) {\r\n                                    return isSortable ? (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={`fw-bold border-end border-top ` +\r\n                                                (column.align ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class : '')}\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                            sortDirection={sortCriteriaMatch ? sortDirection : false}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={!!sortCriteriaMatch}\r\n                                                direction={sortDirection}\r\n                                                onClick={() => handleSortRequest(column.Field_Name)}\r\n                                            >\r\n                                                {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            key={ke}\r\n                                            className={\r\n                                                `${(column.ColumnHeader || column?.Field_Name)\r\n                                                    ? ' fw-bold border-end border-top p-2 appFont '\r\n                                                    : ' p-0 '\r\n                                                } ` +\r\n                                                (column.align\r\n                                                    ? columnAlign.find(align => align.type === String(column.align).toLowerCase())?.class\r\n                                                    : '')\r\n                                            }\r\n                                            sx={{ fontSize: `${headerFontSizePx}px`, backgroundColor: '#EDF0F7' }}\r\n                                        >\r\n                                            {column.ColumnHeader || column?.Field_Name?.replace(/_/g, ' ')}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {(disablePagination ? sortedData : paginatedData).map((row, index) => (\r\n                            <RowComp key={index} row={row} index={index} />\r\n                        ))}\r\n                        {dataArray.length === 0 && (\r\n                            <TableRow>\r\n                                <TableCell\r\n                                    colSpan={\r\n                                        columns.length +\r\n                                        ((isExpendable === true && expandableComp) ? 1 : 0) +\r\n                                        (EnableSerialNumber === true ? 1 : 0)\r\n                                    }\r\n                                    sx={{ textAlign: 'center' }}\r\n                                >\r\n                                    No Data\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {!disablePagination && paginatedData.length !== 0 && (\r\n                <div\r\n                    className=\"p-2 pb-0\"\r\n                >\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={dataArray.length}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        rowsPerPage={rowsPerPage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        rowsPerPageOptions={Array.from(new Set([initialPageCount, 5, 20, 50, 100, 200, 500])).sort((a, b) => a - b)}\r\n                        labelRowsPerPage=\"Rows per page\"\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nFilterableTable.propTypes = {\r\n    dataArray: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        Field_Name: PropTypes.string,\r\n        Fied_Data: PropTypes.oneOf(['string', 'number', 'date', 'time']),\r\n        ColumnHeader: PropTypes.string,\r\n        isVisible: PropTypes.oneOf([0, 1]),\r\n        align: PropTypes.oneOf(['left', 'right', 'center']),\r\n        verticalAlign: PropTypes.oneOf(['top', 'center', 'bottom']),\r\n        isCustomCell: PropTypes.bool,\r\n        Cell: PropTypes.func,\r\n        tdClass: PropTypes.func\r\n    })).isRequired,\r\n    onClickFun: PropTypes.func,\r\n    isExpendable: PropTypes.bool,\r\n    expandableComp: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\r\n    tableMaxHeight: PropTypes.number,\r\n    initialPageCount: PropTypes.number,\r\n    EnableSerialNumber: PropTypes.bool,\r\n    CellSize: PropTypes.string,\r\n    disablePagination: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    PDFPrintOption: PropTypes.bool,\r\n    ExcelPrintOption: PropTypes.bool,\r\n    maxHeightOption: PropTypes.bool,\r\n    ButtonArea: PropTypes.element,\r\n    MenuButtons: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nFilterableTable.defaultProps = {\r\n    dataArray: [],\r\n    columns: [],\r\n    onClickFun: null,\r\n    isExpendable: false,\r\n    expandableComp: null,\r\n    tableMaxHeight: 550,\r\n    initialPageCount: 20,\r\n    EnableSerialNumber: false,\r\n    CellSize: 'small',\r\n    disablePagination: false,\r\n    title: undefined,\r\n    PDFPrintOption: false,\r\n    ExcelPrintOption: false,\r\n    maxHeightOption: false,\r\n    ButtonArea: null,\r\n    MenuButtons: [],\r\n    headerFontSizePx: 13,\r\n    bodyFontSizePx: 13,\r\n};\r\n\r\nexport default FilterableTable;\r\n\r\nexport {\r\n    createCol,\r\n    ButtonActions,\r\n    formatString\r\n}","import React, { useState } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, IconButton, Tooltip } from '@mui/material';\r\nimport { Close } from '@mui/icons-material';\r\n\r\nconst ImagePreviewDialog = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const { url } = props;\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <span>\r\n\r\n            <Tooltip title=\"Tap to Open\">\r\n                <span onClick={handleOpen} style={{ cursor: 'pointer' }}>{props.children}</span>\r\n            </Tooltip>\r\n\r\n            <Dialog open={open} onClose={handleClose} fullWidth maxWidth='lg'>\r\n\r\n                <DialogTitle className='bg-dark text-white d-flex justify-content-between'>\r\n                    <span>Image Preview</span>\r\n                    <IconButton onClick={handleClose}><Close sx={{ color: 'white' }} /></IconButton>\r\n                </DialogTitle>\r\n\r\n                <DialogContent className='bg-dark pb-4 d-flex align-items-center justify-content-center'>\r\n                    <img src={url} alt=\"Preview\" style={{ maxWidth: '100%', maxHeight: '100%' }} />\r\n                </DialogContent>\r\n\r\n                {/* <DialogActions className='bg-dark'>\r\n                    <Button startIcon={<Close />} variant='outlined' color=\"primary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions> */}\r\n\r\n            </Dialog>\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default ImagePreviewDialog;","\r\nimport SMT_LOGO from './smt.png';\r\n\r\nexport const customTableStyles = {\r\n    table: {\r\n        style: {\r\n            width: 'auto',\r\n            backgroundColor: 'transparent',\r\n            // borderRadius: '5px',\r\n        }\r\n    },\r\n    rows: {\r\n        style: {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            backgroundColor: '#6b9080f8',\r\n            color: 'white',\r\n            fontSize: '14px',\r\n            // borderRadius: '5px',\r\n        },\r\n    },\r\n};\r\n\r\nexport const customSelectStyles = {\r\n    // control: (provided, state) => ({\r\n    //     ...provided,\r\n    //     height: '45px',\r\n    //     background: 'rgba(255, 255, 255, 0.322)'\r\n    // }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        zIndex: 9999,\r\n    }),\r\n    menuPortal: base => ({ ...base, zIndex: 9999 }),\r\n    groupHeading: (base) => ({\r\n        ...base,\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#333',\r\n        fontWeight: 'bold',\r\n        fontSize: '14px',\r\n        padding: '8px 12px',\r\n        borderBottom: '1px solid #ddd',\r\n        textTransform: 'uppercase',\r\n    }),\r\n    option: (base, state) => ({\r\n        ...base,\r\n        backgroundColor: state.isSelected\r\n            ? '#2684FF'\r\n            : state.isFocused\r\n                ? '#E2ECF9'\r\n                : 'white',\r\n        color: state.isSelected ? 'white' : '#333',\r\n        padding: '10px 12px',\r\n    }),\r\n};\r\n\r\nexport const customSelectStyles2 = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        background: 'transparent',\r\n        border: 'none',\r\n        color: 'rgba(255, 255, 255, 0.322)',\r\n        // minWidth: '160px'\r\n    }),\r\n    menu: (provided, state) => ({\r\n        ...provided,\r\n        color: 'black',\r\n        zIndex: 9999,\r\n    }),\r\n};\r\n\r\nexport const MainMenu = [\r\n    {\r\n        id: 1,\r\n        headname: 'Menu ID',\r\n        variant: 'head',\r\n        align: 'left',\r\n        width: 100\r\n    },\r\n    {\r\n        id: 2,\r\n        headname: 'MenuName',\r\n    },\r\n    {\r\n        id: 3,\r\n        headname: 'Read Rights'\r\n    },\r\n    {\r\n        id: 4,\r\n        headname: 'Add Rights'\r\n    },\r\n    {\r\n        id: 5,\r\n        headname: 'Edit Rights'\r\n    },\r\n    {\r\n        id: 6,\r\n        headname: 'Delete Rights'\r\n    },\r\n    {\r\n        id: 7,\r\n        headname: 'Print Rights'\r\n    },\r\n    {\r\n        id: 8,\r\n        headname: 'Action'\r\n    }\r\n];\r\n\r\nexport const companyDetails = [\r\n    {\r\n        dataBase: 1,\r\n        name: 'SHANKAR TRADERS',\r\n        business: 'Wholesale Merchant in Dhall',\r\n        address: '32, Chitrakara Street, Madurai - 01 <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AADFS6973R1ZD',\r\n        phone: '984-313-1353, 984-335-5166',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0021 5032 0885 122',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 2,\r\n        name: 'SMT AGRO PRODUCTS',\r\n        business: '',\r\n        address: 'H.O: 153, Chitrakara Street, 2nd Floor, Madurai -01 <br /> G.O: 746 Puliyur, Sayanapuram, Svga <br /> Bill of Supply -Disclaimer Affidavlt Field Extemped',\r\n        logo: SMT_LOGO,\r\n        gstin: '33ACMFS3420Q1ZQ',\r\n        phone: '0452-4371625',\r\n        fssai: '12418012000818',\r\n        bankAccount: '0025 3031 0875 947',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n    {\r\n        dataBase: 3,\r\n        name: 'BHAVANI TRADERS',\r\n        business: '',\r\n        address: 'H.O: 152-A, Chitrakara Street, Madurai -01 <br /> G.O: 30/1-Rajman Nagar, Chintamani Main Road, Mdu-01 <br /> Tax Invoice',\r\n        logo: SMT_LOGO,\r\n        gstin: '33AAEFB6728J1ZG',\r\n        phone: '958-559-7641, 958-559-7614',\r\n        fssai: '12418012000670',\r\n        bankAccount: '0021 5005 0800 309',\r\n        ifsc: 'TMBL0000002'\r\n    },\r\n]\r\n\r\nexport const erpModules = [\r\n    { name: 'PURCHASE_ORDER' },\r\n    { name: 'PURCHASE_INVOICE' },\r\n    { name: 'SALE_ORDER' },\r\n    { name: 'SALE_INVOICE' },\r\n    { name: 'JOURNAL' },\r\n    { name: 'STOCK_JOURNAL' },\r\n    { name: 'PAYMENT' },\r\n    { name: 'RECEIPT' },\r\n    { name: 'CONTRA' },\r\n]","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 7v2.99s-1.99.01-2 0V7h-3s.01-1.99 0-2h3V2h2v3h3v2zm-3 4V8h-3V5H5c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-8zM5 19l3-4 2 3 3-4 4 5z\"\n}), 'AddPhotoAlternate');","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from \"@mui/material\";\r\nimport { toast } from 'react-toastify';\r\nimport { fetchLink } from '../../../Components/fetchComponent';\r\nimport { isValidObject, onlynum } from \"../../../Components/functions\";\r\nimport RequiredStar from \"../../../Components/requiredStar\";\r\n\r\nconst initialInputValue = {\r\n    Product_Id: '',\r\n    Product_Name: '',\r\n    Short_Name: '',\r\n    Product_Description: '',\r\n    Brand: '',\r\n    Product_Group: '',\r\n    Pack_Id: '',\r\n    UOM_Id: '',\r\n    IS_Sold: '',\r\n    Display_Order_By: '',\r\n    HSN_Code: '',\r\n    Gst_P: '',\r\n    Cgst_P: '',\r\n    Sgst_P: '',\r\n    Igst_P: '',\r\n    ERP_Id: '',\r\n    Pos_Brand_Id:'',\r\n    IsActive:'',\r\n    Product_Rate:'',\r\n    Max_Rate:''\r\n\r\n}\r\n\r\nconst ProductAddEditComp = ({ row, children, openAction, reload, onCloseFun, loadingOn, loadingOff }) => {\r\n    const [uom, setUom] = useState([]);\r\n    const [brand, setBrand] = useState([]);\r\n    const [pack, setPack] = useState([]);\r\n    const [productGroups, setProductGroups] = useState([]);\r\n    const [productInputValue, setProductInputValue] = useState(initialInputValue);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [posbrand, setPosBrand] = useState([]);\r\n    useEffect(() => setDialog(openAction ? true : false), [openAction]);\r\n\r\n    useEffect(() => {\r\n        if (isValidObject(row)) {\r\n            setProductInputValue(pre => {\r\n                let inputVAL = { ...pre }\r\n                Object.entries(row).forEach(([key, value]) => {\r\n                    inputVAL[key] = value ?? ''\r\n                })\r\n                return inputVAL\r\n            });\r\n            setIsEdit(true);\r\n            setDialog(true);\r\n        } else {\r\n            setProductInputValue(initialInputValue);\r\n            setIsEdit(false);\r\n        }\r\n    }, [row])\r\n\r\n    useEffect(() => {\r\n\r\n        fetchLink({\r\n            address: `masters/uom`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setUom(data.data)\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/brand`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setBrand(data.data)\r\n            }\r\n        }).catch(e => console.error(e));\r\n\r\n        fetchLink({\r\n            address: `masters/products/packs`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPack(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/products/productGroups`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProductGroups(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n        fetchLink({\r\n            address: `masters/posbranch/dropdown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPosBrand(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n\r\n    }, [])\r\n\r\n    const inputFields = [\r\n        {\r\n            label: 'Product Name',\r\n            elem: 'input',\r\n            placeholder: \"Enter Product Name\",\r\n            event: e => setProductInputValue(value => ({ ...value, Product_Name: e.target.value })),\r\n            required: true,\r\n            value: productInputValue.Product_Name,\r\n            max: 100,\r\n        },\r\n        {\r\n            label: 'Short Name',\r\n            elem: 'input',\r\n            placeholder: \"Enter Short Name\",\r\n            event: e => setProductInputValue(value => ({ ...value, Short_Name: e.target.value })),\r\n            value: productInputValue.Short_Name,\r\n            max: 100,\r\n        },\r\n        {\r\n            label: 'Is Saleable',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                { value: 0, label: 'Not Salable' },\r\n                { value: 1, label: 'Salable' },\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, IS_Sold: e.target.value })),\r\n            value: productInputValue.IS_Sold,\r\n        },\r\n        {\r\n            label: 'Brand',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                ...brand.map(obj => ({\r\n                    value: Number(obj.Brand_Id),\r\n                    label: obj.Brand_Name\r\n                }))\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, Brand: e.target.value })),\r\n            value: productInputValue.Brand,\r\n        },\r\n        {\r\n            label: 'Product Group',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                ...productGroups.map(obj => ({\r\n                    value: Number(obj.Pro_Group_Id),\r\n                    label: obj.Pro_Group\r\n                }))\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, Product_Group: e.target.value })),\r\n            value: productInputValue.Product_Group,\r\n        },\r\n        {\r\n            label: 'Pack',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                ...pack.map(obj => ({\r\n                    value: Number(obj.Pack_Id),\r\n                    label: obj.Pack\r\n                }))\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, Pack_Id: e.target.value })),\r\n            value: productInputValue.Pack_Id,\r\n        },\r\n        {\r\n            label: 'Unit Of Measurement',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                ...uom.map(obj => ({\r\n                    value: Number(obj.Unit_Id),\r\n                    label: obj.Units\r\n                }))\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, UOM_Id: e.target.value })),\r\n            value: productInputValue.UOM_Id,\r\n        },\r\n        {\r\n            label: 'HSN / SAC Code',\r\n            elem: 'input',\r\n            placeholder: \"Enter HSN / SAC\",\r\n            event: e => setProductInputValue(value => ({ ...value, HSN_Code: e.target.value })),\r\n            required: true,\r\n            value: productInputValue.HSN_Code,\r\n        },\r\n        {\r\n            label: 'GST Percentage (%)',\r\n            elem: 'input',\r\n            oninput: e => onlynum(e),\r\n            placeholder: \"Enter GST Percentage\",\r\n            event: e => setProductInputValue(value => ({ ...value, Gst_P: e.target.value })),\r\n            required: true,\r\n            value: productInputValue.Gst_P,\r\n        },\r\n        {\r\n            label: 'Order By',\r\n            elem: 'input',\r\n            oninput: e => onlynum(e),\r\n            placeholder: \"Enter list order number\",\r\n            event: e => setProductInputValue(value => ({ ...value, Display_Order_By: e.target.value })),\r\n            value: productInputValue.Display_Order_By,\r\n        },\r\n        {\r\n            label: 'ERP ID',\r\n            elem: 'input',\r\n            placeholder: \"Enter ERP ID\",\r\n            event: e => setProductInputValue(value => ({ ...value, ERP_Id: e.target.value })),\r\n            value: productInputValue.ERP_Id,\r\n        },\r\n        {\r\n            label: 'POS BRAND',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true, selected: true },\r\n                ...posbrand.map(obj => ({\r\n                    value: Number(obj.value),\r\n                    label: obj.label\r\n                }))\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, Pos_Brand_Id: e.target.value })),\r\n            value: productInputValue.Pos_Brand_Id,\r\n        },\r\n        {\r\n            label: 'Status',\r\n            elem: 'select',\r\n            options: [\r\n                { value: '', label: ' - Select - ', disabled: true },\r\n                { value: '1', label: 'Active' },\r\n                { value: '0', label: 'Inactive' }\r\n            ],\r\n            event: e => setProductInputValue(value => ({ ...value, IsActive: e.target.value })),\r\n            value: productInputValue.IsActive , \r\n        },\r\n        \r\n        \r\n    \r\n        {\r\n            label: 'Product Rate',\r\n            elem: 'input',\r\n            // oninput: e => onlynum(e),\r\n            placeholder: \"Enter Price\",\r\n            event: e => setProductInputValue(value => ({ ...value, Product_Rate: e.target.value })),\r\n         \r\n            value: productInputValue.Product_Rate,\r\n        },\r\n        {\r\n            label: 'Max Rate',\r\n            elem: 'input',\r\n            // oninput: e => onlynum(e),\r\n            placeholder: \"Enter Max_Rate\",\r\n            event: e => setProductInputValue(value => ({ ...value, Max_Rate: e.target.value })),\r\n         \r\n            value: productInputValue.Max_Rate,\r\n        },\r\n        {\r\n            label: 'Product Description',\r\n            elem: 'textarea',\r\n            event: e => setProductInputValue(value => ({ ...value, Product_Description: e.target.value })),\r\n            value: productInputValue.Product_Description,\r\n        },\r\n    ]\r\n\r\n    const closeDialog = () => {\r\n        setProductInputValue(initialInputValue);\r\n        setDialog(false);\r\n        setIsEdit(false);\r\n        if (onCloseFun) {\r\n            onCloseFun();\r\n        }\r\n    }\r\n\r\n    const postProduct = () => {\r\n        if (loadingOn) {\r\n            loadingOn();\r\n        }\r\n\r\n        fetchLink({\r\n            address: `masters/products`,\r\n            method: isEdit ? 'PUT' : 'POST',\r\n            bodyData: productInputValue\r\n        }).then(data => {\r\n            if (data.success) {\r\n                if (reload) {\r\n                    reload();\r\n                }\r\n                closeDialog();\r\n                toast.success(data.message);\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) {\r\n                loadingOff();\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span onClick={() => setDialog(true)} style={{ cursor: 'pointer' }}>{children}</span>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n                fullScreen\r\n            >\r\n                <DialogTitle>\r\n                    {isEdit ? 'Update Product Details' : 'Create New Product'}\r\n                </DialogTitle>\r\n                <form\r\n                    onSubmit={e => {\r\n                        e.preventDefault();\r\n                        postProduct();\r\n                    }}\r\n                >\r\n                    <DialogContent>\r\n                        <div className=\"row\">\r\n                            {inputFields.map((field, index) => (\r\n                                <div key={index} className=\"col-lg-4 col-md-6 p-2 px-3\">\r\n                                    <label>{field.label} {field.required && <RequiredStar />}</label>\r\n                                    {field.elem === 'input' ? (\r\n                                        <input\r\n                                            type={field.type || 'text'}\r\n                                            className='cus-inpt b-0'\r\n                                            onChange={field.event}\r\n                                            onInput={field.oninput}\r\n                                            disabled={field.disabled}\r\n                                            value={field.value}\r\n                                            maxLength={field.max}\r\n                                            required={field.required ? true : false}\r\n                                        />\r\n                                    ) : field.elem === 'select' ? (\r\n                                        <select\r\n                                            className={'cus-inpt b-0'}\r\n                                            onChange={field.event}\r\n                                            value={field.value}\r\n                                            required={field.required ? true : false}\r\n                                        >\r\n                                            {field.options.map((option, optionIndex) => (\r\n                                                <option\r\n                                                    key={optionIndex}\r\n                                                    value={option.value}\r\n                                                    disabled={option.disabled}\r\n                                                    defaultValue={option.selected} \r\n                                                >\r\n                                                    {option.label}\r\n                                                </option>\r\n                                            ))}\r\n                                        </select>\r\n                                    ) : field.elem === 'textarea' ? (\r\n                                        <textarea\r\n                                            className='cus-inpt b-0'\r\n                                            onChange={field.event}\r\n                                            rows={4} value={field.value} \r\n                                        />\r\n                                    ) : null}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"button\" onClick={closeDialog}>cancel</Button>\r\n                        <Button type=\"submit\">save</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProductAddEditComp;","import React, { useState, useEffect } from \"react\";\r\nimport { IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Card, Button, Paper, CardContent, Tooltip } from \"@mui/material\";\r\nimport { Add, AddPhotoAlternate, Edit, Sync, FilterAlt, Search } from \"@mui/icons-material\";\r\nimport Select from \"react-select\";\r\nimport api from '../../API';\r\nimport { toast } from 'react-toastify';\r\nimport ImagePreviewDialog from \"../../Components/imagePreview\";\r\nimport { fetchLink } from '../../Components/fetchComponent';\r\nimport ProductAddEditComp from \"./Components/productAddEdit\";\r\nimport FilterableTable from \"../../Components/filterableTable2\";\r\nimport './Components/productCss.css';\r\nimport { indianCurrency } from \"../../Components/functions\";\r\nimport { customSelectStyles } from \"../../Components/tablecolumn\";\r\n\r\nconst initialInputValue = {\r\n    Product_Id: '',\r\n    Product_Code: '',\r\n    Product_Name: '',\r\n    Short_Name: '',\r\n    Product_Description: '',\r\n    Brand: '',\r\n    Product_Group: '',\r\n    Pack_Id: '',\r\n    UOM_Id: '',\r\n    IS_Sold: '',\r\n    Display_Order_By: '',\r\n    HSN_Code: '',\r\n    Gst_P: '',\r\n    Cgst_P: '',\r\n    Sgst_P: '',\r\n    Igst_P: '',\r\n    ERP_Id: '',\r\n    Product_Image: '',\r\n}\r\n\r\nconst ProductCard = ({ product, setProductInputValue, setDialog }) => {\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            <div className=\"col-sm-2 p-0\">\r\n                <div className=\"product-card-image d-flex align-items-center flex-column\">\r\n\r\n                    <ImagePreviewDialog url={product?.productImageUrl}>\r\n                        <img\r\n                            src={product?.productImageUrl}\r\n                            alt={product?.Product_Name}\r\n                            style={{ maxWidth: '150px' }}\r\n                        />\r\n                    </ImagePreviewDialog>\r\n\r\n                    <Button\r\n                        onClick={() => {\r\n                            setDialog(pre => ({ ...pre, imageUpload: true }));\r\n                            setProductInputValue(pre => ({ ...pre, Product_Id: product.Product_Id, Product_Name: product?.Product_Name }))\r\n                        }}\r\n                        size=\"small\"\r\n                        variant='outlined'\r\n                        startIcon={<AddPhotoAlternate sx={{ fontSize: '15px' }} />}\r\n                        className=\"w-100 mt-2\"\r\n                    >\r\n                        Change Photo\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\" col-sm-10 p-2\">\r\n                <div className=\"product-brand-group\">\r\n                    <span>{product?.Brand_Name} - {product?.Pro_Group}</span>\r\n                    <span>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                setProductInputValue(pre => {\r\n                                    let inputVAL = { ...pre }\r\n                                    Object.entries(product).forEach(([key, value]) => {\r\n                                        inputVAL[key] = value ?? ''\r\n                                    })\r\n                                    return inputVAL\r\n                                });\r\n\r\n                                setDialog(pre => ({ ...pre, createAndUpdate: true }));\r\n                            }}\r\n                        ><Edit /></IconButton>\r\n                    </span>\r\n                </div>\r\n                <h6 className=\"fw-bold fa-18\">{product?.Product_Name}</h6>\r\n                <p className=\"product-description\">\r\n                    {product?.Product_Description}\r\n                </p>\r\n                <table style={{ minWidth: '300px', marginBottom: '15px' }}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"border fa-12 p-1 fw-bold\">HSN Code</td>\r\n                            <td className=\"border fa-12 p-1\">{product?.HSN_Code ?? '-'}</td>\r\n                            <td className=\"border fa-12 p-1 fw-bold\">ERP Id</td>\r\n                            <td className=\"border fa-12 p-1\">{product?.ERP_Id ?? '-'}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"border fa-12 p-1 fw-bold\">Tax</td>\r\n                            <td className=\"border fa-12 p-1\">{product?.Gst_P ?? 0}(%)</td>\r\n                            <td className=\"border fa-12 p-1 fw-bold\">Is Salable?</td>\r\n                            <td className=\"border fa-12 p-1\">\r\n                                {(() => {\r\n                                    switch (product?.IS_Sold) {\r\n                                        case 0: {\r\n                                            return 'Not Salable'\r\n                                        }\r\n                                        case 1: {\r\n                                            return 'Salable'\r\n                                        }\r\n                                        default: {\r\n                                            return 'Unknown'\r\n                                        }\r\n                                    }\r\n                                })()}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"product-price\">\r\n                    <span className=\"price\">{indianCurrency(product?.Item_Rate)}</span>\r\n                    <span className=\"units\"> / {product?.Units}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProductsMaster = ({ loadingOn, loadingOff }) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [reload, setReload] = useState(false);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [filterInput, setFilterInput] = useState('');\r\n    const [productInputValue, setProductInputValue] = useState(initialInputValue)\r\n    const [dialog, setDialog] = useState({\r\n        imageUpload: false,\r\n        createAndUpdate: false\r\n    });\r\n\r\n    const [productDetails, setProductDetails] = useState([])\r\n    const [shortname, setShortname] = useState([])\r\n    const [posBrand, setPosBrand] = useState([])\r\n    const [productGroup, setProductGroup] = useState([])\r\n    const [brand, setBrand] = useState([])\r\n\r\n    const [filters, setFilters] = useState({\r\n        Product_Id: '',\r\n        Products: 'ALL',\r\n        ShortName_Id: '',\r\n        ShortName: 'ALL',\r\n        PosBrand_Id: '',\r\n        PosBrand: 'ALL',\r\n        ProductGroup_Id: '',\r\n        ProductGroup: 'ALL',\r\n        Brand_Id: '',\r\n        Brand: 'ALL'\r\n    });\r\n\r\n    const [dialogFilter, setDialogFilter] = useState({\r\n        filters: false,\r\n        orderDetails: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/products/allProducts`,\r\n            loadingOn, loadingOff\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setProducts(data.data)\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [reload])\r\n\r\n    useEffect(() => {\r\n        const filteredResults = products.filter(item => {\r\n            return Object.values(item).some(value =>\r\n                String(value).toLowerCase().includes(filterInput.toLowerCase())\r\n            );\r\n        });\r\n\r\n        setFilteredData(filteredResults);\r\n    }, [products, filterInput])\r\n\r\n    const updateProductImage = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('Product_Image', productInputValue.Product_Image);\r\n        formData.append('Product_Id', productInputValue?.Product_Id);\r\n        if (productInputValue?.Product_Image && productInputValue?.Product_Id) {\r\n\r\n            fetch(`${api}masters/products/productImage`, {\r\n                method: 'PUT',\r\n                body: formData\r\n            }).then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        toast.success(data.message);\r\n                        imageUploadDialogClose()\r\n                        setReload(!reload)\r\n                    } else {\r\n                        toast.error(data.message)\r\n                    }\r\n                }).catch(e => console.error(e))\r\n        }\r\n    }\r\n\r\n    const imageUploadDialogClose = () => {\r\n        setDialog({ imageUpload: false, createAndUpdate: false });\r\n        setProductInputValue(initialInputValue);\r\n    }\r\n\r\n    const syncLOS = () => {\r\n        if (loadingOn) loadingOn();\r\n        fetchLink({\r\n            address: `masters/products/losSync`,\r\n            method: 'POST'\r\n        }).then(data => {\r\n            if (data.success) toast.success(data.message);\r\n            else toast.error(data.message);\r\n        }).catch(e => console.error(e)).finally(() => {\r\n            if (loadingOff) loadingOff();\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchLink({\r\n            address: `masters/posbranch/dropdown`\r\n        }).then(data => {\r\n            if (data.success) {\r\n                setPosBrand(data.data);\r\n            }\r\n        }).catch(e => console.error(e))\r\n    }, [])\r\n\r\n    const closeDialog = () => {\r\n        setDialogFilter({\r\n            ...dialog,\r\n            filters: false,\r\n            orderDetails: false,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card component={Paper}>\r\n                <div className=\"p-3 pb-1 d-flex align-items-center flex-wrap\">\r\n                    <h6 className=\"flex-grow-1 fa-18\">Products</h6>\r\n                    {/* <Tooltip title='Filters'>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => setDialogFilter({ ...dialogFilter, filters: true })}\r\n                        >\r\n                            <FilterAlt />\r\n                        </IconButton>\r\n                    </Tooltip> */}\r\n                    <Tooltip title='Sync Tally LOS'><IconButton onClick={syncLOS}><Sync /></IconButton></Tooltip>\r\n\r\n                    <ProductAddEditComp\r\n                        reload={() => setReload(pre => !pre)}\r\n                        loadingOn={loadingOn}\r\n                        loadingOff={loadingOff}\r\n                        onCloseFun={() => {\r\n                            setProductInputValue(initialInputValue);\r\n                            setDialog(pre => ({ ...pre, createAndUpdate: false }))\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant='outlined'\r\n                            startIcon={<Add />}\r\n                        >\r\n                            New\r\n                        </Button>\r\n                    </ProductAddEditComp>\r\n\r\n                    <input\r\n                        type=\"search\"\r\n                        value={filterInput}\r\n                        className=\"cus-inpt w-auto p-1 ps-2 ms-2\"\r\n                        placeholder=\"Search\"\r\n                        onChange={e => setFilterInput(e.target.value)}\r\n                    />\r\n\r\n                </div>\r\n\r\n                <CardContent sx={{ p: 0 }}>\r\n                    <FilterableTable\r\n                        dataArray={filterInput === '' ? products : filteredData}\r\n                        columns={[\r\n                            {\r\n                                isVisible: 1,\r\n                                isCustomCell: true,\r\n                                Cell: ({ row }) => (\r\n                                    <ProductCard\r\n                                        product={row}\r\n                                        setDialog={setDialog}\r\n                                        setProductInputValue={setProductInputValue}\r\n                                    />\r\n                                ),\r\n                            }\r\n                        ]}\r\n                        tableMaxHeight={600}\r\n                        initialPageCount={10}\r\n                    />\r\n                </CardContent>\r\n\r\n            </Card>\r\n\r\n            <Dialog\r\n                open={dialog.imageUpload}\r\n                onClose={imageUploadDialogClose}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>\r\n                    Update Product Image\r\n                    <span className=\"ps-1 text-primary\">{productInputValue?.Product_Name}</span>\r\n                </DialogTitle>\r\n                <form onSubmit={updateProductImage}>\r\n                    <DialogContent>\r\n                        <label>Select Product Image</label>\r\n                        <input\r\n                            type='file'\r\n                            className=\"cus-inpt\" required\r\n                            onChange={e => setProductInputValue({ ...productInputValue, Product_Image: e.target.files[0] })}\r\n                            accept=\"image/*\"\r\n                        />\r\n                        {productInputValue.Product_Image && (\r\n                            <img\r\n                                src={URL.createObjectURL(productInputValue.Product_Image)}\r\n                                alt=\"Preview\"\r\n                                style={{ maxWidth: '100%', maxHeight: 200, marginTop: 10 }}\r\n                            />\r\n                        )}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"button\" onClick={imageUploadDialogClose}>cancel</Button>\r\n                        <Button type=\"submit\">update</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n\r\n            {dialog.createAndUpdate && (\r\n                <ProductAddEditComp\r\n                    reload={() => setReload(pre => !pre)}\r\n                    loadingOn={loadingOn}\r\n                    loadingOff={loadingOff}\r\n                    row={productInputValue}\r\n                    openAction={dialog.createAndUpdate}\r\n                    onCloseFun={() => {\r\n                        setProductInputValue(initialInputValue);\r\n                        setDialog(pre => ({ ...pre, createAndUpdate: false }))\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            <Dialog\r\n                open={dialogFilter.filters}\r\n                onClose={closeDialog}\r\n                fullWidth maxWidth='sm'\r\n            >\r\n                <DialogTitle>Filters</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"table-responsive pb-5\">\r\n                        <table className=\"table\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>productDetails</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Product_Id, label: filters?.Products }}\r\n                                            // value={filters?.Products}\r\n                                            onChange={(e) => setFilters({ ...filters, Product_Id: e.value, Products: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...productDetails.map(obj => ({ value: obj?.Product_Id, label: obj?.Product_Name }))\r\n                                            ]}\r\n\r\n                                            placeholder={\"Product Name\"}\r\n                                            styles={{\r\n                                                ...customSelectStyles,\r\n                                                menuPortal: base => ({ ...base, zIndex: 9999 })\r\n                                            }}\r\n                                            isSearchable={true}\r\n\r\n                                            menuPortalTarget={document.body}\r\n                                            menuPosition=\"fixed\"\r\n                                            menuPlacement=\"auto\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Short Name</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.ShortName_Id, label: filters?.ShortName }}\r\n                                            onChange={(e) => setFilters({ ...filters, ShortName_Id: e.value, ShortName: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...shortname.map(obj => ({ value: obj?.Product_Id, label: obj?.Short_Name }))\r\n                                            ]}\r\n\r\n                                            placeholder={\"Short Name\"}\r\n                                            styles={{\r\n                                                ...customSelectStyles,\r\n                                                menuPortal: base => ({ ...base, zIndex: 9999 })\r\n                                            }}\r\n                                            isSearchable={true}\r\n\r\n                                            menuPortalTarget={document.body}\r\n                                            menuPosition=\"fixed\"\r\n                                            menuPlacement=\"auto\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Pos Brand</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.PosBrand_Id, label: filters?.PosBrand }}\r\n                                            onChange={(e) => setFilters({ ...filters, PosBrand_Id: e.value, PosBrand: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...posBrand.map(obj => ({ value: obj?.value, label: obj?.label }))\r\n                                            ]}\r\n\r\n                                            placeholder={\"Pos Brand\"}\r\n                                            styles={{\r\n                                                ...customSelectStyles,\r\n                                                menuPortal: base => ({ ...base, zIndex: 9999 })\r\n                                            }}\r\n                                            isSearchable={true}\r\n\r\n                                            menuPortalTarget={document.body}\r\n                                            menuPosition=\"fixed\"\r\n                                            menuPlacement=\"auto\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Product Group</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.ProductGroup_Id, label: filters?.ProductGroup }}\r\n                                            onChange={(e) => setFilters({ ...filters, ProductGroup_Id: e.value, ProductGroup: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...productGroup.map(obj => ({ value: obj?.Pro_Group_Id, label: obj?.Pro_Group }))\r\n                                            ]}\r\n                                            placeholder={\"Product Group\"}\r\n                                            styles={{\r\n                                                ...customSelectStyles,\r\n                                                menuPortal: base => ({ ...base, zIndex: 9999 })\r\n                                            }}\r\n                                            isSearchable={true}\r\n\r\n                                            menuPortalTarget={document.body}\r\n                                            menuPosition=\"fixed\"\r\n                                            menuPlacement=\"auto\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ verticalAlign: 'middle' }}>Brand</td>\r\n                                    <td>\r\n                                        <Select\r\n                                            value={{ value: filters?.Brand_Id, label: filters?.Brand }}\r\n                                            onChange={(e) => setFilters({ ...filters, Brand_Id: e.value, Brand: e.label })}\r\n                                            options={[\r\n                                                { value: '', label: 'ALL' },\r\n                                                ...brand.map(obj => ({ value: obj?.Brand_Id, label: obj?.Brand_Name }))\r\n                                            ]}\r\n                                            placeholder={\"Brand\"}\r\n                                            styles={{\r\n                                                ...customSelectStyles,\r\n                                                menuPortal: base => ({ ...base, zIndex: 9999 })\r\n                                            }}\r\n                                            isSearchable={true}\r\n\r\n                                            menuPortalTarget={document.body}\r\n                                            menuPosition=\"fixed\"\r\n                                            menuPlacement=\"auto\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog}>close</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            closeDialog();\r\n\r\n                            // updateQueryString(updatedFilters);\r\n                            setReload(pre => !pre);\r\n                        }}\r\n                        startIcon={<Search />}\r\n                        variant=\"outlined\"\r\n                    >Search</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProductsMaster;"],"names":["createSvgIcon","_jsx","d","RequiredStar","style","color","fontWeight","fontSize","children","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useDefaultProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","preprocessDataForExport","data","columns","map","row","flattenedRow","forEach","column","index","isVisible","Defult_Display","isCustomCell","Cell","cellContent","safeColumnHeader","ColumnHeader","String","replace","toLowerCase","concat","key","Field_Name","createCol","field","arguments","length","undefined","type","align","verticalAlign","_objectSpread","Fied_Data","ButtonActions","_ref","buttonsData","ToolTipText","anchorEl","setAnchorEl","useState","popOverOpen","Boolean","_jsxs","_Fragment","Tooltip","title","IconButton","onClick","event","currentTarget","size","MoreVert","Popover","open","onClose","handleClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","btn","btnKey","MenuItem","onclick","disabled","ListItemIcon","icon","ListItemText","formatString","val","dataType","NumberFormat","LocalDate","LocalTime","FilterableTable","_ref2","dataArray","onClickFun","isExpendable","expandableComp","tableMaxHeight","initialPageCount","EnableSerialNumber","CellSize","disablePagination","PDFPrintOption","ExcelPrintOption","maxHeightOption","ButtonArea","MenuButtons","bodyFontSizePx","headerFontSizePx","page","setPage","rowsPerPage","setRowsPerPage","sortCriteria","setSortCriteria","showFullHeight","setShowFullHeight","tableHeight","columnAlign","class","columnVerticalAlign","sortedData","sort","a","b","criteria","columnId","direction","aValue","bValue","sortData","startIndex","endIndex","paginatedData","slice","RowComp","_ref3","setOpen","Fragment","TableRow","TableCell","sx","pre","KeyboardArrowUp","KeyboardArrowDown","columnInd","_columnAlign$find","_columnVerticalAlign$","isColumnVisible","isEqualNumber","isCommonValue","tdClass","tdIndex","horizondalalignClass","find","verticalAlignClass","foundEntry","Object","entries","_ref4","console","log","colSpan","Number","Card","Paper","ToggleOn","ToggleOff","Download","generatePDF","doc","jsPDF","processedData","headers","filter","rows","header","o","i","Sno","autoTable","head","body","save","e","error","exportToExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","TableContainer","maxHeight","Table","stickyHeader","TableHead","backgroundColor","ke","isSortable","sortCriteriaMatch","sortDirection","_columnAlign$find2","_column$Field_Name","_columnAlign$find3","_column$Field_Name2","TableSortLabel","active","existingCriteria","isAsc","handleSortRequest","TableBody","textAlign","TablePagination","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","target","value","rowsPerPageOptions","Array","from","Set","labelRowsPerPage","showFirstButton","showLastButton","defaultProps","url","handleOpen","cursor","Dialog","fullWidth","maxWidth","DialogTitle","Close","DialogContent","src","alt","customTableStyles","table","width","headCells","customSelectStyles","menu","provided","state","zIndex","menuPortal","base","groupHeading","borderBottom","textTransform","option","isSelected","isFocused","MainMenu","id","headname","variant","companyDetails","dataBase","business","address","logo","SMT_LOGO","gstin","phone","fssai","bankAccount","ifsc","erpModules","initialInputValue","Product_Id","Product_Name","Short_Name","Product_Description","Brand","Product_Group","Pack_Id","UOM_Id","IS_Sold","Display_Order_By","HSN_Code","Gst_P","Cgst_P","Sgst_P","Igst_P","ERP_Id","Pos_Brand_Id","IsActive","Product_Rate","Max_Rate","openAction","reload","onCloseFun","loadingOn","loadingOff","uom","setUom","brand","setBrand","pack","setPack","productGroups","setProductGroups","productInputValue","setProductInputValue","dialog","setDialog","isEdit","setIsEdit","posbrand","setPosBrand","useEffect","isValidObject","inputVAL","fetchLink","then","success","catch","inputFields","label","elem","placeholder","required","max","options","selected","obj","Brand_Id","Brand_Name","Pro_Group_Id","Pro_Group","Pack","Unit_Id","Units","oninput","onlynum","closeDialog","fullScreen","onSubmit","preventDefault","method","bodyData","toast","message","finally","onChange","onInput","maxLength","optionIndex","defaultValue","DialogActions","Button","Product_Code","Product_Image","ProductCard","_product$HSN_Code","_product$ERP_Id","_product$Gst_P","product","ImagePreviewDialog","productImageUrl","imageUpload","startIcon","AddPhotoAlternate","createAndUpdate","Edit","minWidth","marginBottom","indianCurrency","Item_Rate","products","setProducts","setReload","filteredData","setFilteredData","filterInput","setFilterInput","productDetails","setProductDetails","shortname","setShortname","posBrand","productGroup","setProductGroup","filters","setFilters","Products","ShortName_Id","ShortName","PosBrand_Id","PosBrand","ProductGroup_Id","ProductGroup","dialogFilter","setDialogFilter","orderDetails","filteredResults","item","values","some","includes","imageUploadDialogClose","syncLOS","Sync","ProductAddEditComp","Add","CardContent","p","formData","FormData","append","fetch","api","res","json","files","accept","URL","createObjectURL","marginTop","Select","isSearchable","menuPortalTarget","document","menuPosition","menuPlacement","Search"],"sourceRoot":""}